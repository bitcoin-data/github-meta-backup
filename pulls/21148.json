{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148",
    "id": 571517212,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxNTE3MjEy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21148",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21148.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21148.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
    "number": 21148,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Split orphan handling from net_processing into txorphanage",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Splits orphan handling into its own module and reduces global usage.",
    "labels": [
      {
        "id": 135961,
        "node_id": "MDU6TGFiZWwxMzU5NjE=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Refactoring",
        "name": "Refactoring",
        "color": "E6F6D6",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-02-11T01:42:58Z",
    "updated_at": "2022-08-16T17:06:01Z",
    "closed_at": "2021-03-04T09:17:12Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-03-04T09:17:12Z",
    "merge_commit_sha": "92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ajtowns:202102-txorphanage",
      "ref": "202102-txorphanage",
      "sha": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 53941525,
        "node_id": "MDEwOlJlcG9zaXRvcnk1Mzk0MTUyNQ==",
        "name": "bitcoin",
        "full_name": "ajtowns/bitcoin",
        "owner": {
          "login": "ajtowns",
          "id": 127186,
          "node_id": "MDQ6VXNlcjEyNzE4Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ajtowns",
          "html_url": "https://github.com/ajtowns",
          "followers_url": "https://api.github.com/users/ajtowns/followers",
          "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
          "organizations_url": "https://api.github.com/users/ajtowns/orgs",
          "repos_url": "https://api.github.com/users/ajtowns/repos",
          "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ajtowns/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ajtowns/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/ajtowns/bitcoin",
        "archive_url": "https://api.github.com/repos/ajtowns/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ajtowns/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ajtowns/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ajtowns/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ajtowns/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ajtowns/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ajtowns/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ajtowns/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ajtowns/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/ajtowns/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/ajtowns/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/ajtowns/bitcoin/events",
        "forks_url": "https://api.github.com/repos/ajtowns/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/ajtowns/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ajtowns/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ajtowns/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ajtowns/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ajtowns/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ajtowns/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ajtowns/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ajtowns/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ajtowns/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/ajtowns/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/ajtowns/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ajtowns/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ajtowns/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ajtowns/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:ajtowns/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/ajtowns/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/ajtowns/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ajtowns/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/ajtowns/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/ajtowns/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/ajtowns/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/ajtowns/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ajtowns/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/ajtowns/bitcoin/hooks",
        "svn_url": "https://github.com/ajtowns/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 2,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 262427,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-05T19:54:41Z",
        "created_at": "2016-03-15T12:11:24Z",
        "updated_at": "2023-03-19T19:22:46Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "72e6979b31baa48b82e713b63a896aebf75ae8c8",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 362,
    "deletions": 290,
    "changed_files": 10,
    "commits": 14,
    "review_comments": 43,
    "comments": 15
  },
  "events": [
    {
      "event": "labeled",
      "id": 4317789717,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTc3ODk3MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317789717",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T01:43:50Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4317872308,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTc4NzIzMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4317872308",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T02:29:52Z",
      "label": {
        "name": "Refactoring",
        "color": "E6F6D6"
      }
    },
    {
      "event": "commented",
      "id": 777218822,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzIxODgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777218822",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T05:54:09Z",
      "updated_at": "2021-02-25T20:19:03Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21270 ([Bundle 4/n] Prune g_chainman usage in validation-adjacent modules by dongcarl)\n* #21224 ([p2p] Halt processing of unrequested transactions by ariard)\n* #21162 (Net Processing: Move RelayTransaction() into PeerManager by jnewbery)\n* #21160 (Net/Net processing: Move tx inventory into net_processing by jnewbery)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiuttarwar)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-777218822",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4329495259,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMyOTQ5NTI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4329495259",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T02:32:12Z"
    },
    {
      "event": "commented",
      "id": 778900606,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODkwMDYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/778900606",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T02:32:35Z",
      "updated_at": "2021-02-15T02:32:35Z",
      "author_association": "MEMBER",
      "body": "Rebased for conflict with #21062 ",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-778900606",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 779167259,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTE2NzI1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779167259",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T11:42:30Z",
      "updated_at": "2021-02-15T11:42:30Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Will review once this is rebased and out of draft status.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779167259",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4331919419,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMTkxOTQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4331919419",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T14:00:37Z"
    },
    {
      "event": "ready_for_review",
      "id": 4331940911,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0MzMxOTQwOTEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4331940911",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T14:05:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4331995902,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMTk5NTkwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4331995902",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T14:17:35Z"
    },
    {
      "event": "commented",
      "id": 779255411,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTI1NTQxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779255411",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T14:24:55Z",
      "updated_at": "2021-02-15T14:24:55Z",
      "author_association": "MEMBER",
      "body": "Rebased, tweaked the orphan code a little, and cleaned up the results some. Should be ready for review.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779255411",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 779561043,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTU2MTA0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779561043",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-16T03:42:50Z",
      "updated_at": "2021-02-16T03:42:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "concept ACK, starting to review. \r\n\r\ntwo thoughts for now-\r\n1. I don't quite understand the context of the first commit. There are other commits that are essentially move-only, so wondering how you grouped together the changes in that commit. \r\n2. Are you open to some feedback around improvements of code you moved around? eg. using chrono instead of ints? or are you trying to keep the diff as minimal as possible? I personally think it'd be a good time for stuff that would be small, clear improvements, but won't leave those sorts of review comments if you're not interested :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-779561043",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 780364661,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MDM2NDY2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780364661",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T07:30:41Z",
      "updated_at": "2021-02-17T07:31:33Z",
      "author_association": "MEMBER",
      "body": "@amitiuttarwar 1) The first commit just sets up the new files and moves whole functions / globals into it. Later commits are pulling code out into their own functions, restructuring functions into classes, etc. 2) hmm, I was ignoring chrono stuff since #21015 exists, but I guess it didn't switch COrphanTx to chrono. Not sure it makes sense to add more things to this PR versus adding to the #20758 backlog. [EDIT: ie, feel free to add suggestions to 20758, but maybe this PR already has enough stuff in scope?]",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-780364661",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "mentioned",
      "id": 4339871067,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDMzOTg3MTA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4339871067",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T07:30:41Z"
    },
    {
      "event": "subscribed",
      "id": 4339871069,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzMzk4NzEwNjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4339871069",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-17T07:30:41Z"
    },
    {
      "event": "labeled",
      "id": 4355125869,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzNTUxMjU4Njk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4355125869",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-20T09:56:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4375687086,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM3NTY4NzA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4375687086",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-25T10:09:20Z"
    },
    {
      "event": "reviewed",
      "id": 598406016,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4NDA2MDE2",
      "url": null,
      "actor": null,
      "commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 649cad4fc8fcc107a02a5e448cf9495d38e18add\r\n\r\nMostly style comments, with a couple of requests for minor changes to the interface that I think would improve the encapsulation.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#pullrequestreview-598406016",
      "submitted_at": "2021-02-25T12:01:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
    },
    {
      "event": "unlabeled",
      "id": 4376617023,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDM3NjYxNzAyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4376617023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-25T13:41:27Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDUzMTNkZjdlZWRhZDg1NjJjODIyZjU0Nzc3NDdlOTI0OTI5ZmQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5313df7eedad8562c822f5477747e924929fd3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5313df7eedad8562c822f5477747e924929fd3",
      "tree": {
        "sha": "536a9a73902a59cf14a69c3528d938587573d905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/536a9a73902a59cf14a69c3528d938587573d905"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56f06a986385b24818a53fde24c6f3a0b01f1a93",
          "sha": "56f06a986385b24818a53fde24c6f3a0b01f1a93",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/56f06a986385b24818a53fde24c6f3a0b01f1a93"
        }
      ],
      "message": "move-only: Add txorphanage module\n\nThis module captures orphan tracking code for tx relay.\n\nCan be reviewed with --color-moved=dimmed-zebra",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:03Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-30T14:55:54Z"
      },
      "sha": "9d5313df7eedad8562c822f5477747e924929fd3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWRkNTdlNWIxYWIxYWZhN2U1OTQ2OGUzMGVmNDFiZDM0ZjBjOGQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
      "tree": {
        "sha": "f72b8a881133c56daec1a2dc6b9c1cd41267f126",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f72b8a881133c56daec1a2dc6b9c1cd41267f126"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5313df7eedad8562c822f5477747e924929fd3",
          "sha": "9d5313df7eedad8562c822f5477747e924929fd3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5313df7eedad8562c822f5477747e924929fd3"
        }
      ],
      "message": "txorphanage: Pass uint256 by reference instead of value",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:07Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-15T13:04:21Z"
      },
      "sha": "81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGExMWMzNTVhY2ZjMTUxMzRjNjgyNTcxYjNkOTJmNjZiMGU3YzNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "tree": {
        "sha": "05fb4cb6b122f806b6a5a9cd81c75f4989b32f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05fb4cb6b122f806b6a5a9cd81c75f4989b32f9d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
          "sha": "81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/81dd57e5b1ab1afa7e59468e30ef41bd34f0c8d7"
        }
      ],
      "message": "txorphanage: Add lock annotations\n\nEraseOrphansFor was called both with and without g_cs_orphans held,\ncorrect that so that it's always called with it already held.\n\nLimitOrphanTxSize was always called with g_cs_orphans held, so\nadd annotations and don't lock it a second time.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T15:35:08Z"
      },
      "sha": "38a11c355acfc15134c682571b3d92f66b0e7c3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTEzNWM4ZDViMzliMGNiOGIzMDFhODNlMjg2Mjg1YWI5MjZkY2E3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
      "tree": {
        "sha": "952f654c4767b501d734041c94b12a0f23e66502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/952f654c4767b501d734041c94b12a0f23e66502"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38a11c355acfc15134c682571b3d92f66b0e7c3c",
          "sha": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/38a11c355acfc15134c682571b3d92f66b0e7c3c"
        }
      ],
      "message": "txorphanage: Extract AddChildrenToWorkSet\n\nExtract some common code into AddChildrenToWorkSet function.\n\n(It's a hard knock life)",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T10:36:24Z"
      },
      "sha": "ee135c8d5b39b0cb8b301a83e286285ab926dca7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzY3OWZmYzYwMDMwNWVjMDkyNmZkMTk1ZWUzMWMxMWRlMmVkNjEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83679ffc600305ec0926fd195ee31c11de2ed613",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/83679ffc600305ec0926fd195ee31c11de2ed613",
      "tree": {
        "sha": "174fe9757d0aaf5354acf0d6eba68cbe3b9e79dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/174fe9757d0aaf5354acf0d6eba68cbe3b9e79dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee135c8d5b39b0cb8b301a83e286285ab926dca7",
          "sha": "ee135c8d5b39b0cb8b301a83e286285ab926dca7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ee135c8d5b39b0cb8b301a83e286285ab926dca7"
        }
      ],
      "message": "txorphanage: Extract HaveOrphanTx\n\nExtract some common code into HaveOrphanTx function.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T11:24:08Z"
      },
      "sha": "83679ffc600305ec0926fd195ee31c11de2ed613"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjk0ZGE3Mjc0MTMyMTBmZGEyNzlhZmRjMjA2YTRkZDEyMDQ2ZDU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f294da727413210fda279afdc206a4dd12046d56",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f294da727413210fda279afdc206a4dd12046d56",
      "tree": {
        "sha": "2fa630f333aae50b5122e8796151300df0cd03c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fa630f333aae50b5122e8796151300df0cd03c2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83679ffc600305ec0926fd195ee31c11de2ed613",
          "sha": "83679ffc600305ec0926fd195ee31c11de2ed613",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/83679ffc600305ec0926fd195ee31c11de2ed613"
        }
      ],
      "message": "txorphanage: Extract GetOrphanTx\n\nExtract orphan lookup code into GetOrphanTx function.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T11:59:57Z"
      },
      "sha": "f294da727413210fda279afdc206a4dd12046d56"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDQxNjE2ZDdlYjY2MjgxYmI0ZGU1MWZmYmM4M2RmMDkyM2IyZjdl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
      "tree": {
        "sha": "dd8cc8d2d577f18ab8df56f3b9b6e12e9d949f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd8cc8d2d577f18ab8df56f3b9b6e12e9d949f3b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f294da727413210fda279afdc206a4dd12046d56",
          "sha": "f294da727413210fda279afdc206a4dd12046d56",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f294da727413210fda279afdc206a4dd12046d56"
        }
      ],
      "message": "txorphanage: Extract OrphanageAddTx\n\nExtract code from AddOrphanTx into OrphanageAddTx.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:12:24Z"
      },
      "sha": "1041616d7eb66281bb4de51ffbc83df0923b2f7e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmQxYTZjY2Q1ZmNjN2FiZWM3MzdjMGQ4YzY3MjM4NTYxNjI3ZDU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
      "tree": {
        "sha": "73ac75c7b741aa5c083819011990bbb46adeab90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73ac75c7b741aa5c083819011990bbb46adeab90"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1041616d7eb66281bb4de51ffbc83df0923b2f7e",
          "sha": "1041616d7eb66281bb4de51ffbc83df0923b2f7e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1041616d7eb66281bb4de51ffbc83df0923b2f7e"
        }
      ],
      "message": "denialofservices_tests: check txorphanage's AddTx\n\nRather than checking net_processing's internal implementation of\nAddOrphanTx, test txorphanage's exported AddTx interface. Note that\nthis means AddToCompactExtraTransactions is no longer tested here.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T13:55:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T16:00:14Z"
      },
      "sha": "26d1a6ccd5fcc7abec737c0d8c67238561627d59"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzRjM2MyZmRkYTNhMzYxZTM4MDJlOTdiYzM1NjZmODE1Yjc1ZGUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
      "tree": {
        "sha": "d601baec217dbe5f4189df493cfeca600123cbe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d601baec217dbe5f4189df493cfeca600123cbe0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26d1a6ccd5fcc7abec737c0d8c67238561627d59",
          "sha": "26d1a6ccd5fcc7abec737c0d8c67238561627d59",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/26d1a6ccd5fcc7abec737c0d8c67238561627d59"
        }
      ],
      "message": "net_processing: drop AddOrphanTx\n\nAll the interesting functionality of AddOrphanTx is already in other\nfunctions, so call those functions directly in the one place that\nAddOrphanTx was used.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:30:11Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:30:08Z"
      },
      "sha": "3c4c3c2fdda3a361e3802e97bc3566f815b75de1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzI1N2I4MzJkZWJjYjE0NzA0MjBkODY1N2QzMGJhMzBmNGJlNzcw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03257b832debcb1470420d8657d30ba30f4be770",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/03257b832debcb1470420d8657d30ba30f4be770",
      "tree": {
        "sha": "37d9ea35a839832c1629523ef8345139e0bd55c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37d9ea35a839832c1629523ef8345139e0bd55c7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
          "sha": "3c4c3c2fdda3a361e3802e97bc3566f815b75de1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3c4c3c2fdda3a361e3802e97bc3566f815b75de1"
        }
      ],
      "message": "txorphanage: Extract EraseOrphansForBlock\n\nExtract code that erases orphans when a new block is found into\nEraseOrphansForBlock.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T14:31:09Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:37:41Z"
      },
      "sha": "03257b832debcb1470420d8657d30ba30f4be770"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4382273568,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM4MjI3MzU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4382273568",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-26T14:57:35Z"
    },
    {
      "event": "commented",
      "id": 786703013,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NjcwMzAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/786703013",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-26T15:06:24Z",
      "updated_at": "2021-02-26T15:06:24Z",
      "author_association": "MEMBER",
      "body": "Added most of jnewbery's suggestions, and also added some missing `const` annotations on `TxOrphanage` methods.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-786703013",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmQ0OTYzYzA2OWJmZDBhZjQyMGU4YTNmYjcyNGMzYjY5M2ExZTc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "tree": {
        "sha": "847afd573b5bd2f2a01a1f48155c737f28886604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/847afd573b5bd2f2a01a1f48155c737f28886604"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03257b832debcb1470420d8657d30ba30f4be770",
          "sha": "03257b832debcb1470420d8657d30ba30f4be770",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/03257b832debcb1470420d8657d30ba30f4be770"
        }
      ],
      "message": "txorphanage: Move functions and data into class\n\nCollects all the orphan handling globals into a single member var in\nnet_processing, and ensures access is encapuslated into the interface\nfunctions. Also adds doxygen comments for methods.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:07:55Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:42:00Z"
      },
      "sha": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGMwNjg4Yjk0OTBjOGQ0OTAyNTMwYmEzYzNiNmZiZDhiNDhlMGRl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
      "tree": {
        "sha": "0d11b535636c6c46064266c43f90b9bc4b096da5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d11b535636c6c46064266c43f90b9bc4b096da5"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
          "sha": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd4963c069bfd0af420e8a3fb724c3b693a1e76"
        }
      ],
      "message": "scripted-diff: Update txorphanage naming convention\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/mapOrphanTransactionsByPrev/m_outpoint_to_orphan_it/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/mapOrphanTransactions/m_orphans/g' src/txorphanage.h src/txorphanage.cpp src/net_processing.cpp src/test/denialofservice_tests.cpp\nsed -i 's/g_orphan_list/m_orphan_list/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/g_orphans_by_wtxid/m_wtxid_to_orphan_it/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/nMaxOrphans/max_orphans/g' src/txorphanage.h src/txorphanage.cpp\nsed -i 's/COrphanTx/OrphanTx/g' src/txorphanage.h src/txorphanage.cpp src/test/denialofservice_tests.cpp\n-END VERIFY SCRIPT-",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:08:09Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-15T12:53:06Z"
      },
      "sha": "f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVhZmIzMjRlZjYwNTdmNDBiNWM1ZmRkODQ2NDExMGU4MDliMGY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "tree": {
        "sha": "ece3731edd6340d867b4ed5267ce9da7d7a3eb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece3731edd6340d867b4ed5267ce9da7d7a3eb55"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
          "sha": "f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8c0688b9490c8d4902530ba3c3b6fbd8b48e0de"
        }
      ],
      "message": "net_processing: move AddToCompactExtraTransactions into PeerManagerImpl\n\nAllows making vExtraTxnForCompact and vExtraTxnForCompactIt member vars\ninstead of globals.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-02-26T15:08:09Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-01-31T13:50:53Z"
      },
      "sha": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4382331525,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM4MjMzMTUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4382331525",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-26T15:08:57Z"
    },
    {
      "event": "reviewed",
      "id": 600123368,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwMTIzMzY4",
      "url": null,
      "actor": null,
      "commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK eeeafb324ef6057f40b5c5fdd8464110e809b0f7\r\n\r\nTwo tiny style suggestions inline.\r\n\r\nThe last commit (_net_processing: move AddToCompactExtraTransactions into PeerManagerImpl_) doesn't really need to be in this PR. No harm in having it here, but could equally wait until the next PR (which could also change `AddToCompactExtraTransactions()`, `vExtraTxnForCompact` and `vExtraTxnForCompactIt` to be guarded by cs_main).",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#pullrequestreview-600123368",
      "submitted_at": "2021-02-27T10:04:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
    },
    {
      "event": "reviewed",
      "id": 598586736,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk4NTg2NzM2",
      "url": null,
      "actor": null,
      "commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK eeeafb324e\r\n\r\nI know this is mostly a move-only PR, but I kind of treated it as \"a tour of orphan handling\" so I have a bunch of questions, heh. Thanks for adding comments too!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#pullrequestreview-598586736",
      "submitted_at": "2021-03-01T21:05:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
    },
    {
      "event": "reviewed",
      "id": 601311887,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAxMzExODg3",
      "url": null,
      "actor": null,
      "commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "code review ACK eeeafb324e \r\n\r\nthe orphanage is v. beautiful! my least favorite thing about it is the two-line if statements without parenthesis (they were copied over in move-only commits), but I'll survive :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#pullrequestreview-601311887",
      "submitted_at": "2021-03-02T02:49:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTUwZTJkMWI5NWU3Y2E3NzA5YTk2NzFhYjIxZjExNjRiOGQwY2I4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "tree": {
        "sha": "987034c53f4e886aa5e48d4123b1d07b61a87397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/987034c53f4e886aa5e48d4123b1d07b61a87397"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
          "sha": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeafb324ef6057f40b5c5fdd8464110e809b0f7"
        }
      ],
      "message": "txorphanage: comment improvements",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T09:40:11Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-02T09:36:48Z"
      },
      "sha": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4394758053,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM5NDc1ODA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4394758053",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T09:40:24Z"
    },
    {
      "event": "commented",
      "id": 788772866,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODc3Mjg2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788772866",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T09:43:42Z",
      "updated_at": "2021-03-02T09:43:42Z",
      "author_association": "MEMBER",
      "body": "Added a commit to update comments with suggestions.\r\n\r\n@jnewbery yeah, other commit could have been dropped -- it was only there to move `AddOrphan` into `PeerManagerImpl` so that `m_orphanage` could also be in `PeerManagerImpl`, but that stopped being an issue after doing away with net_processing's `AddOrphan` -- but should be pretty harmless to leave it there.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-788772866",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "mentioned",
      "id": 4394775015,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM5NDc3NTAxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4394775015",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T09:43:42Z"
    },
    {
      "event": "subscribed",
      "id": 4394775017,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzOTQ3NzUwMTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4394775017",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T09:43:42Z"
    },
    {
      "event": "commented",
      "id": 788844262,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4ODg0NDI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/788844262",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T11:37:45Z",
      "updated_at": "2021-03-02T11:37:45Z",
      "author_association": "MEMBER",
      "body": "utACK 5e50e2d1b9",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-788844262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 789177849,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTE3Nzg0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789177849",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T20:04:36Z",
      "updated_at": "2021-03-02T20:04:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "utACK 5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8 ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-789177849",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 789306761,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4OTMwNjc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789306761",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-02T23:47:56Z",
      "updated_at": "2021-03-02T23:47:56Z",
      "author_association": "MEMBER",
      "body": "re ACK https://github.com/bitcoin/bitcoin/pull/21148/commits/5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8, comment updates",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-789306761",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 790460791,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDQ2MDc5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790460791",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T09:16:21Z",
      "updated_at": "2021-03-04T09:16:21Z",
      "author_association": "MEMBER",
      "body": "> the orphanage is v. beautiful! my least favorite thing about it is the two-line if statements without parenthesis (they were copied over in move-only commits), but I'll survive :)\r\n\r\nYes I like how this cleanly encapsulates the transaction orphan handling, exposing a single documented interface in a small header file.\r\n\r\nIt is clearly an improvement. The only thing I don't completely understand is why the `g_cs_orphans` lock is global and not on the orphanage itself, but maybe that's too much impact? I think lock refactoring could be a topic for a future PR, anyhow, no need to hold this up.\r\n\r\nCode review ACK 5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790460791",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "merged",
      "id": 4406872876,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDQwNjg3Mjg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4406872876",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92b7efcf54d3154e4b31c9a6eae60f27e349f45e",
      "created_at": "2021-03-04T09:17:12Z"
    },
    {
      "event": "closed",
      "id": 4406872890,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDQwNjg3Mjg5MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4406872890",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T09:17:12Z"
    },
    {
      "event": "commented",
      "id": 790499978,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDQ5OTk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790499978",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T10:13:46Z",
      "updated_at": "2021-03-04T10:13:46Z",
      "author_association": "MEMBER",
      "body": ">  The only thing I don't completely understand is why the g_cs_orphans lock is global and not on the orphanage itself, but maybe that's too much impact?\r\n\r\n`g_cs_orphans` is still used to guard some objects outside the orphange (`Peer.m_orphan_work_set` and `vExtraTxnForCompact`). The plan is for future PRs to remove those dependencies and make the orphan mutex a member of the orphanage.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790499978",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "commented",
      "id": 790572101,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDU3MjEwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790572101",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T12:08:42Z",
      "updated_at": "2021-03-04T12:08:42Z",
      "author_association": "MEMBER",
      "body": "@jnewbery Good to know, thanks!",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-790572101",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "mentioned",
      "id": 4407692802,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQwNzY5MjgwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4407692802",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T12:08:42Z"
    },
    {
      "event": "subscribed",
      "id": 4407692808,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0MDc2OTI4MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4407692808",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-04T12:08:42Z"
    },
    {
      "event": "reviewed",
      "id": 604169093,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA0MTY5MDkz",
      "url": null,
      "actor": null,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Post-Merge Code Review ACK 5e50e2d",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#pullrequestreview-604169093",
      "submitted_at": "2021-03-04T15:21:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
    },
    {
      "event": "referenced",
      "id": 4408941307,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ0MDg5NDEzMDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4408941307",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "97ba38785d1a6078186cc3ddbd5502a06a419f27",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/97ba38785d1a6078186cc3ddbd5502a06a419f27",
      "created_at": "2021-03-04T16:09:27Z"
    },
    {
      "event": "commented",
      "id": 791352871,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5MTM1Mjg3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/791352871",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-05T11:12:56Z",
      "updated_at": "2021-03-05T11:12:56Z",
      "author_association": "MEMBER",
      "body": "pm ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#issuecomment-791352871",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21148"
    },
    {
      "event": "referenced",
      "id": 6496361676,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGDNpzM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6496361676",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1ae65b4c5fbffb691e755dc0dacf1c63b55ad81b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ae65b4c5fbffb691e755dc0dacf1c63b55ad81b",
      "created_at": "2022-04-26T07:45:09Z"
    },
    {
      "event": "referenced",
      "id": 6644020853,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7Z1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020853",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "88e2059986ccefd60acf7168ee031bbca16e9ec0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/88e2059986ccefd60acf7168ee031bbca16e9ec0",
      "created_at": "2022-05-19T16:10:25Z"
    },
    {
      "event": "referenced",
      "id": 6644020860,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7Z8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020860",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c387f12e991cf7826b2f583cfff68d3106ea59c8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c387f12e991cf7826b2f583cfff68d3106ea59c8",
      "created_at": "2022-05-19T16:10:25Z"
    },
    {
      "event": "referenced",
      "id": 6644020870,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7aG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020870",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "20450c96495ebfac868b9d76d6aa4389663b98cd",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/20450c96495ebfac868b9d76d6aa4389663b98cd",
      "created_at": "2022-05-19T16:10:25Z"
    },
    {
      "event": "referenced",
      "id": 6644020877,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7aN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020877",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d621e806ab305c3fd02caa6acd0da2d37e241ce4",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/d621e806ab305c3fd02caa6acd0da2d37e241ce4",
      "created_at": "2022-05-19T16:10:25Z"
    },
    {
      "event": "referenced",
      "id": 6644020884,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7aU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020884",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4c724a272e9f1ebc8045583410e462066c2f340b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/4c724a272e9f1ebc8045583410e462066c2f340b",
      "created_at": "2022-05-19T16:10:25Z"
    },
    {
      "event": "referenced",
      "id": 6644020890,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7aa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020890",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "718ec9723107e7772f722fc45b89ec3f49111149",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/718ec9723107e7772f722fc45b89ec3f49111149",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020899,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7aj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020899",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c15f8c9cc49d3cb03714b120779399768e9e4bf8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/c15f8c9cc49d3cb03714b120779399768e9e4bf8",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020905,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7ap",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020905",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ec313f0eff80b29a1e43008739fa945a2a6a0ecd",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/ec313f0eff80b29a1e43008739fa945a2a6a0ecd",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020917,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7a1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020917",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "48a4a4c730404daad85424481c0f5143090f453c",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/48a4a4c730404daad85424481c0f5143090f453c",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020923,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7a7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020923",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "66572c1f0da688c9ce0dc13da55453d91f1fa6e6",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/66572c1f0da688c9ce0dc13da55453d91f1fa6e6",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020937,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7bJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020937",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8b798a60c825e207ce999550e7fad58551c63b72",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8b798a60c825e207ce999550e7fad58551c63b72",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "referenced",
      "id": 6644020953,
      "node_id": "REFE_lADOABII584wCtHwzwAAAAGMA7bZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6644020953",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1af37678b557f26e092bf275fc1938c616ec98a3",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/1af37678b557f26e092bf275fc1938c616ec98a3",
      "created_at": "2022-05-19T16:10:26Z"
    },
    {
      "event": "locked",
      "id": 7199027645,
      "node_id": "LOE_lADOABII584wCtHwzwAAAAGtGHG9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199027645",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:06:01Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582712110",
      "pull_request_review_id": 598406016,
      "id": 582712110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MjcxMjExMA==",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <policy/policy.h>\n+\n+#include <assert.h>",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's generally recommended to include the c++ versions of the c headers:\r\n\r\n```suggestion\r\n#include <cassert>\r\n```",
      "created_at": "2021-02-25T10:18:48Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582712110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582712110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582740285",
      "pull_request_review_id": 598406016,
      "id": 582740285,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc0MDI4NQ==",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <policy/policy.h>\n+\n+#include <assert.h>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid)\n+{\n+    LOCK(g_cs_orphans);\n+    if (gtxid.IsWtxid()) {\n+        return m_wtxid_to_orphan_it.count(gtxid.GetHash()) > 0;",
      "path": "src/txorphanage.cpp",
      "position": null,
      "original_position": 157,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Possibly slightly more idiomatic to drop the `> 0`:\r\n\r\n```suggestion\r\n        return m_wtxid_to_orphan_it.count(gtxid.GetHash());\r\n```\r\n\r\nSame below",
      "created_at": "2021-02-25T10:59:54Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582740285",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582740285"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582748821",
      "pull_request_review_id": 598406016,
      "id": 582748821,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc0ODgyMQ==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 33,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This feels like it's exposing too much of the internals to the caller. The pointer is only valid as long as `m_orphans` isn't updated while it's being held. That's protected by `g_cs_orphans`, but it still feels unnecessary.\r\n\r\nThe only parts of `OrphanTx` that are needed by the caller in the one place this is used are the `CTransactionRef` and the `NodeId`, both of which are cheap to copy. How about:\r\n\r\n```suggestion\r\n    /** Get a transation ref and originating peer for an orphan transaction\r\n      * (transaction ref will be nullptr if not found) */\r\n    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\r\n```\r\n\r\n<details>\r\n<summary>Full diff</summary>\r\n\r\n```diff\r\niff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex df3de89094..b138844a50 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2057,17 +2057,16 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\r\n         const uint256 orphanHash = *orphan_work_set.begin();\r\n         orphan_work_set.erase(orphan_work_set.begin());\r\n \r\n-        const TxOrphanage::OrphanTx* orphantx = m_orphanage.GetTx(orphanHash);\r\n-        if (orphantx == nullptr) continue;\r\n+        auto [tx, from_peer] = m_orphanage.GetTx(orphanHash);\r\n+        if (!tx) continue;\r\n \r\n-        const CTransactionRef porphanTx = orphantx->tx;\r\n-        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, porphanTx, false /* bypass_limits */);\r\n+        const MempoolAcceptResult result = AcceptToMemoryPool(::ChainstateActive(), m_mempool, tx, false /* bypass_limits */);\r\n         const TxValidationState& state = result.m_state;\r\n \r\n         if (result.m_result_type == MempoolAcceptResult::ResultType::VALID) {\r\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\r\n-            RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\r\n-            m_orphanage.AddChildrenToWorkSet(*porphanTx, orphan_work_set);\r\n+            RelayTransaction(orphanHash, tx->GetWitnessHash(), m_connman);\r\n+            m_orphanage.AddChildrenToWorkSet(*tx, orphan_work_set);\r\n             m_orphanage.EraseTx(orphanHash);\r\n             for (const CTransactionRef& removedTx : result.m_replaced_transactions.value()) {\r\n                 AddToCompactExtraTransactions(removedTx);\r\n@@ -2077,10 +2076,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\r\n             if (state.IsInvalid()) {\r\n                 LogPrint(BCLog::MEMPOOL, \"   invalid orphan tx %s from peer=%d. %s\\n\",\r\n                     orphanHash.ToString(),\r\n-                    orphantx->fromPeer,\r\n+                    from_peer,\r\n                     state.ToString());\r\n                 // Maybe punish peer that gave us an invalid orphan tx\r\n-                MaybePunishNodeForTx(orphantx->fromPeer, state);\r\n+                MaybePunishNodeForTx(from_peer, state);\r\n             }\r\n             // Has inputs but not accepted to mempool\r\n             // Probably non-standard or insufficient fee\r\n@@ -2100,7 +2099,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\r\n                 // for concerns around weakening security of unupgraded nodes\r\n                 // if we start doing this too early.\r\n                 assert(recentRejects);\r\n-                recentRejects->insert(porphanTx->GetWitnessHash());\r\n+                recentRejects->insert(tx->GetWitnessHash());\r\n                 // If the transaction failed for TX_INPUTS_NOT_STANDARD,\r\n                 // then we know that the witness was irrelevant to the policy\r\n                 // failure, since this check depends only on the txid\r\n@@ -2109,10 +2108,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\r\n                 // processing of this transaction in the event that child\r\n                 // transactions are later received (resulting in\r\n                 // parent-fetching by txid via the orphan-handling logic).\r\n-                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && porphanTx->GetWitnessHash() != porphanTx->GetHash()) {\r\n+                if (state.GetResult() == TxValidationResult::TX_INPUTS_NOT_STANDARD && tx->GetWitnessHash() != tx->GetHash()) {\r\n                     // We only add the txid if it differs from the wtxid, to\r\n                     // avoid wasting entries in the rolling bloom filter.\r\n-                    recentRejects->insert(porphanTx->GetHash());\r\n+                    recentRejects->insert(tx->GetHash());\r\n                 }\r\n             }\r\n             m_orphanage.EraseTx(orphanHash);\r\ndiff --git a/src/txorphanage.cpp b/src/txorphanage.cpp\r\nindex a634bde953..a311984705 100644\r\n--- a/src/txorphanage.cpp\r\n+++ b/src/txorphanage.cpp\r\n@@ -160,13 +160,13 @@ bool TxOrphanage::HaveTx(const GenTxid& gtxid)\r\n     }\r\n }\r\n \r\n-TxOrphanage::OrphanTx* TxOrphanage::GetTx(const uint256& txid)\r\n+std::pair<CTransactionRef, NodeId> TxOrphanage::GetTx(const uint256& txid)\r\n {\r\n     AssertLockHeld(g_cs_orphans);\r\n \r\n     const auto it = m_orphans.find(txid);\r\n-    if (it == m_orphans.end()) return nullptr;\r\n-    return &it->second;\r\n+    if (it == m_orphans.end()) return {nullptr, 0};\r\n+    return {it->second.tx, it->second.fromPeer};\r\n }\r\n \r\n void TxOrphanage::EraseForBlock(const CBlock& block)\r\ndiff --git a/src/txorphanage.h b/src/txorphanage.h\r\nindex f33415ad95..bf1249a154 100644\r\n--- a/src/txorphanage.h\r\n+++ b/src/txorphanage.h\r\n@@ -30,7 +30,7 @@ public:\r\n     bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\r\n \r\n     /** Get the details of an orphan transaction (returns nullptr if not found) */\r\n-    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\r\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\r\n \r\n     /** Erase an orphan by txid */\r\n     int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\r\n```\r\n</details>",
      "created_at": "2021-02-25T11:14:07Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582748821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582748821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582750624",
      "pull_request_review_id": 598406016,
      "id": 582750624,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc1MDYyNA==",
      "diff_hunk": "@@ -0,0 +1,201 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <policy/policy.h>\n+\n+#include <assert.h>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid)\n+{\n+    LOCK(g_cs_orphans);\n+    if (gtxid.IsWtxid()) {\n+        return m_wtxid_to_orphan_it.count(gtxid.GetHash()) > 0;\n+    } else {\n+        return m_orphans.count(gtxid.GetHash()) > 0;\n+    }\n+}\n+\n+TxOrphanage::OrphanTx* TxOrphanage::GetTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const auto it = m_orphans.find(txid);\n+    if (it == m_orphans.end()) return nullptr;\n+    return &it->second;\n+}\n+\n+void TxOrphanage::EraseForBlock(const CBlock& block)\n+{\n+    LOCK(g_cs_orphans);\n+\n+    std::vector<uint256> vOrphanErase;\n+\n+    for (const CTransactionRef& ptx : block.vtx) {\n+        const CTransaction& tx = *ptx;\n+\n+        // Which orphan pool entries must we evict?\n+        for (const auto& txin : tx.vin) {\n+            auto itByPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+            if (itByPrev == m_outpoint_to_orphan_it.end()) continue;\n+            for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n+                const CTransaction& orphanTx = *(*mi)->second.tx;\n+                const uint256& orphanHash = orphanTx.GetHash();\n+                vOrphanErase.push_back(orphanHash);\n+            }\n+        }\n+    }\n+\n+    // Erase orphan transactions included or precluded by this block\n+    if (vOrphanErase.size()) {\n+        int nErased = 0;\n+        for (const uint256& orphanHash : vOrphanErase) {\n+            nErased += EraseTx(orphanHash);\n+        }\n+        LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);",
      "path": "src/txorphanage.cpp",
      "position": 200,
      "original_position": 199,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you include `logging.h` rather than relying on it being included transitively?\r\n\r\nIt might also make sense to change all these logs' categories to NET at some point?",
      "created_at": "2021-02-25T11:17:02Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582750624",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582750624"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582761488",
      "pull_request_review_id": 598406016,
      "id": 582761488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc2MTQ4OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 42,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is using the definition for `CBlock` which is included transitively through txorphanage.h -> net.h -> chainparams.h -> primitives/block.h.\r\n\r\nYou could erase that dependency, so that the orphanage has no concept of blocks:\r\n\r\n```suggestion\r\n    /** Erase orphans */\r\n    void EraseOrphans(const std::vector<CTransactionRef>& txs) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\r\n```\r\n\r\nAnd then calling this from net_processing with:\r\n\r\n`m_orphanage.EraseOrphans(pblock->vtx);`",
      "created_at": "2021-02-25T11:35:38Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582761488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582761488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582765024",
      "pull_request_review_id": 598406016,
      "id": 582765024,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc2NTAyNA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Limit the orphanage to the given maximum */\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** A set of orphans to be tested for potential acceptance into the mempool */\n+    using WorkSet = std::set<uint256>;",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 48,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if this alias is very useful. It's only used in two places.",
      "created_at": "2021-02-25T11:41:37Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582765024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582765024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582766809",
      "pull_request_review_id": 598406016,
      "id": 582766809,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc2NjgwOQ==",
      "diff_hunk": "@@ -1119,10 +1088,10 @@ bool PeerManagerImpl::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats)\n \n //////////////////////////////////////////////////////////////////////////////\n //\n-// mapOrphanTransactions\n+// Orphan handling",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you're touching this comment, then maybe just remove it. These section markers have long outlived their usefulness.",
      "created_at": "2021-02-25T11:44:18Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582766809",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582766809"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1091,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582767376",
      "pull_request_review_id": 598406016,
      "id": 582767376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc2NzM3Ng==",
      "diff_hunk": "@@ -4948,15 +4759,3 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     return true;\n }\n \n-class CNetProcessingCleanup",
      "path": "src/net_processing.cpp",
      "position": 402,
      "original_position": 405,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":heart: ",
      "created_at": "2021-02-25T11:45:20Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582767376",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582767376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4951,
      "original_line": 4951,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582768423",
      "pull_request_review_id": 598406016,
      "id": 582768423,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc2ODQyMw==",
      "diff_hunk": "@@ -295,15 +284,23 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode, dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+class TxOrphanageTest : public TxOrphanage",
      "path": "src/test/denialofservice_tests.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It might make sense to move the orphanage unit tests into their own file now that txorphanage has been split out from net_processing?",
      "created_at": "2021-02-25T11:47:05Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582768423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582768423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 287,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582771389",
      "pull_request_review_id": 598406016,
      "id": 582771389,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc3MTM4OQ==",
      "diff_hunk": "@@ -3330,11 +3141,11 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n+                // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-                unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n+                unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);",
      "path": "src/net_processing.cpp",
      "position": 391,
      "original_position": 394,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't have to be in this PR, but perhaps a future PR could make `nMaxOrphanTx` a ctor argument, and then just call `LimitOrphans()` without an argument. This is the only place in the non-test code that `LimitOrphans` is called, and it's always with the same argument.\r\n\r\nIn fact, once `const nMaxOrphanTx` is a member of the orphanage, we don't need a `LimitOrphans()` call at all. We can just limit the size within the `TxOrphanage::AddTx` function.",
      "created_at": "2021-02-25T11:51:58Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582771389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582771389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3129,
      "original_line": 3129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582774084",
      "pull_request_review_id": 598406016,
      "id": 582774084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjc3NDA4NA==",
      "diff_hunk": "@@ -1133,126 +1102,17 @@ static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_L\n     vExtraTxnForCompactIt = (vExtraTxnForCompactIt + 1) % max_extra_txn;\n }\n \n-bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+bool PeerManagerImpl::AddOrphanTx(const CTransactionRef& tx, NodeId peer)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consider just removing this function entirely:\r\n\r\n- it's only called in one place\r\n- it consists of two function calls\r\n- the return value is discarded",
      "created_at": "2021-02-25T11:56:27Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582774084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582774084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582850158",
      "pull_request_review_id": 598586736,
      "id": 582850158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mjg1MDE1OA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 22,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think these could be const, they should never change?\r\n```suggestion\r\n        const NodeId fromPeer;\r\n        const int64_t nTimeExpire;\r\n```",
      "created_at": "2021-02-25T13:54:57Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r582850158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/582850158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583670694",
      "pull_request_review_id": 599617937,
      "id": 583670694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY3MDY5NA==",
      "diff_hunk": "@@ -295,15 +284,23 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     peerLogic->FinalizeNode(dummyNode, dummy);\n }\n \n-static CTransactionRef RandomOrphan()\n+class TxOrphanageTest : public TxOrphanage",
      "path": "src/test/denialofservice_tests.cpp",
      "position": 32,
      "original_position": 32,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582768423,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that would be a good idea for a later PR (particularly one that added more test coverage)",
      "created_at": "2021-02-26T14:20:26Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583670694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583670694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 287,
      "original_line": 287,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583671340",
      "pull_request_review_id": 599618810,
      "id": 583671340,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY3MTM0MA==",
      "diff_hunk": "@@ -3330,11 +3141,11 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n+                // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-                unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n+                unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);",
      "path": "src/net_processing.cpp",
      "position": 391,
      "original_position": 394,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582771389,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure about the `const` part -- it might make sense for the limit to change depending on how much pressure there is in the mempool at large. Agree otherwise.",
      "created_at": "2021-02-26T14:21:19Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583671340",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583671340"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3129,
      "original_line": 3129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583691471",
      "pull_request_review_id": 599645616,
      "id": 583691471,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY5MTQ3MQ==",
      "diff_hunk": "@@ -1133,126 +1102,17 @@ static void AddToCompactExtraTransactions(const CTransactionRef& tx) EXCLUSIVE_L\n     vExtraTxnForCompactIt = (vExtraTxnForCompactIt + 1) % max_extra_txn;\n }\n \n-bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans)\n+bool PeerManagerImpl::AddOrphanTx(const CTransactionRef& tx, NodeId peer)",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 130,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582774084,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dang, why didn't I think of that.",
      "created_at": "2021-02-26T14:49:22Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583691471",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583691471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583698718",
      "pull_request_review_id": 599655393,
      "id": 583698718,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzY5ODcxOA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 33,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582748821,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done. First instance of structure binding in the codebase?",
      "created_at": "2021-02-26T14:59:21Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583698718",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583698718"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 32,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583702390",
      "pull_request_review_id": 599660572,
      "id": 583702390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MzcwMjM5MA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 42,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582761488,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Definite nack on the comment change -- the function erases orphans that are double-spent by txs in the block, not just orphans that are included in the block directly.\r\n\r\nI'm not against having vtx dereferenced in the caller, but the logic seems specific to a block arriving: if it were just an in-mempool tx double-spending an orphan tx, it might be that the orphan is actually a successful RBF and should be accepted once we know all its parents. So I think having it be the actual block as the argument makes sense; and since it's a lightweight header that's transitively included anyway, I've kept it as-is (but included the header explicitly).",
      "created_at": "2021-02-26T15:04:39Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583702390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583702390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583784124",
      "pull_request_review_id": 599768750,
      "id": 583784124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Mzc4NDEyNA==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    OrphanTx* GetTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 42,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582761488,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, good point about erasing orphans that are conflicted by the block. I agree that it's fine to keep this as it is.\r\n\r\nThanks for including primitives/block.h",
      "created_at": "2021-02-26T17:02:59Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r583784124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/583784124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 41,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584096409",
      "pull_request_review_id": 600123368,
      "id": 584096409,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDA5NjQwOQ==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 26,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps update this comment to reflect the new return value:\r\n\r\n```suggestion\r\n    /** Get a transation ref and originating peer for an orphan transaction\r\n      * (transaction ref will be nullptr if not found) */```",
      "created_at": "2021-02-27T09:32:20Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584096409",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584096409"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584097273",
      "pull_request_review_id": 600123368,
      "id": 584097273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDA5NzI3Mw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 35,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /** Erase all orphans included in or invalidated by a new block */\r\n```\r\n\r\nis slightly clearer. The `/` could be interpreted as 'and'.",
      "created_at": "2021-02-27T09:41:10Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584097273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584097273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584999313",
      "pull_request_review_id": 598586736,
      "id": 584999313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDk5OTMxMw==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Limit the orphanage to the given maximum */\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Add any orphans that list a particular tx as a parent into a peer's work set\n+     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n+    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+protected:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n+\n+    using OrphanMap = decltype(m_orphans);\n+\n+    struct IteratorComparator\n+    {\n+        template<typename I>\n+        bool operator()(const I& a, const I& b) const\n+        {\n+            return &(*a) < &(*b);\n+        }\n+    };\n+\n+    /** Index from the parents' COutPoint into the m_orphans. Used\n+     *  to remove orphan transactions from the m_orphans */\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(g_cs_orphans);\n+\n+    /** Orphan transactions in vector for quick random eviction */\n+    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 78,
      "original_position": 73,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~Question: Would using a `std::list` be simpler? It looks like we use `list_pos` + swapping with the last element to get better performance on random eviction in a vector, but why not just use a linked list?~",
      "created_at": "2021-03-01T19:42:42Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r584999313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584999313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 73,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585004118",
      "pull_request_review_id": 598586736,
      "id": 585004118,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAwNDExOA==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Limit the orphanage to the given maximum */\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Add any orphans that list a particular tx as a parent into a peer's work set\n+     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n+    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+protected:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n+\n+    using OrphanMap = decltype(m_orphans);\n+\n+    struct IteratorComparator\n+    {\n+        template<typename I>\n+        bool operator()(const I& a, const I& b) const\n+        {\n+            return &(*a) < &(*b);\n+        }\n+    };\n+\n+    /** Index from the parents' COutPoint into the m_orphans. Used\n+     *  to remove orphan transactions from the m_orphans */\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(g_cs_orphans);\n+\n+    /** Orphan transactions in vector for quick random eviction */\n+    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(g_cs_orphans);\n+\n+    /** Index from wtxid into the m_orphans to lookup orphan\n+     *  transactions using their witness ids. */\n+    std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 82,
      "original_position": 77,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: This data structure doesn't seem entirely necessary to me... Would it be better to just have `HaveTx` search for the tx in `m_orphans` using `std::find_if()` and a predicate like `[&, uint256 wtxid](OrphanTx& orphan) { return orphan.tx->GetWitnessHash() == wtxid }` ?",
      "created_at": "2021-03-01T19:50:38Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585004118",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585004118"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585027396",
      "pull_request_review_id": 598586736,
      "id": 585027396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNzM5Ng==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 16,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Technically not guaranteed to be orphans? I think adding a bit more overall context could help someone looking at orphan handling for the first time (was the case for me)\r\n```suggestion\r\n/** A class to temporarily track transactions we believe to be orphans (failed on TX_MISSING_INPUTS)\r\n* while we request the missing parent(s). Since we cannot distinguish orphans from bad transactions\r\n* with nonexistent inputs, we limit orphan count, size, and duration we'll keep them around for.\r\n```\r\n\r\n",
      "created_at": "2021-03-01T20:29:02Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585027396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585027396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585166595",
      "pull_request_review_id": 601311887,
      "id": 585166595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE2NjU5NQ==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit 38a11c355acfc15134c682571b3d92f66b0e7c3c, “txorphanage: Add lock annotations” \r\n\r\nIs the main advantage of moving where we grab `g_cs_orphans` from `EraseOrphansFor` into the call site in `FinalizeNode` to allow for the clang safety annotations / dynamic `AssertLockHeld` check? Since my understanding is that `FinalizeNode` is sometimes called with `g_cs_orphans` already held, so this doesn't seem to reduce the recursive locking. ",
      "created_at": "2021-03-02T00:58:02Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585166595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585166595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585180763",
      "pull_request_review_id": 601311887,
      "id": 585180763,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE4MDc2Mw==",
      "diff_hunk": "@@ -2104,10 +2104,9 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n-        auto orphan_it = mapOrphanTransactions.find(orphanHash);\n-        if (orphan_it == mapOrphanTransactions.end()) continue;\n+        const auto [porphanTx, from_peer] = GetOrphanTx(orphanHash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "f294da727413210fda279afdc206a4dd12046d56",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "aw yeah, that structure binding ✨",
      "created_at": "2021-03-02T01:31:19Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585180763",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585180763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585196203",
      "pull_request_review_id": 601311887,
      "id": 585196203,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE5NjIwMw==",
      "diff_hunk": "@@ -13,30 +13,48 @@\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n-struct COrphanTx {\n-    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-    size_t list_pos;\n-};\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-/** Map from txid to orphan transaction record. Limited by\n- *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 38,
      "original_position": 39,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a reason `peer` here and `AddTx`, `EraseForPeer` are non-const? I think they can be but since most things in this header are constified & it's consistently the `peer NodeId` that's not, I'm wondering if I'm missing something.\r\n\r\nAlso, I like the const member functions, that's awesome for communicating/enforcing the intention of the functions. ",
      "created_at": "2021-03-02T02:13:43Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585196203",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585196203"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585203876",
      "pull_request_review_id": 601311887,
      "id": 585203876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIwMzg3Ng==",
      "diff_hunk": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Erase all orphans included in / invalidated by a new block */\n+    void EraseForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Limit the orphanage to the given maximum */\n+    unsigned int LimitOrphans(unsigned int max_orphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Add any orphans that list a particular tx as a parent into a peer's work set\n+     * (ie orphans that may have found their final missing parent, and so should be reconsidered for the mempool) */\n+    void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+protected:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, OrphanTx> m_orphans GUARDED_BY(g_cs_orphans);\n+\n+    using OrphanMap = decltype(m_orphans);\n+\n+    struct IteratorComparator\n+    {\n+        template<typename I>\n+        bool operator()(const I& a, const I& b) const\n+        {\n+            return &(*a) < &(*b);\n+        }\n+    };\n+\n+    /** Index from the parents' COutPoint into the m_orphans. Used\n+     *  to remove orphan transactions from the m_orphans */\n+    std::map<COutPoint, std::set<OrphanMap::iterator, IteratorComparator>> m_outpoint_to_orphan_it GUARDED_BY(g_cs_orphans);\n+\n+    /** Orphan transactions in vector for quick random eviction */\n+    std::vector<OrphanMap::iterator> m_orphan_list GUARDED_BY(g_cs_orphans);\n+\n+    /** Index from wtxid into the m_orphans to lookup orphan\n+     *  transactions using their witness ids. */\n+    std::map<uint256, OrphanMap::iterator> m_wtxid_to_orphan_it GUARDED_BY(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 82,
      "original_position": 77,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "eeeafb324ef6057f40b5c5fdd8464110e809b0f7",
      "in_reply_to_id": 585004118,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hmm, it seems like a tradeoff between memory & runtime complexity. the `HaveTx` lookup is currently logarithmic, but using a `find_if` would be linear. I'm guessing opting for the additional data structure was chosen to minimize the runtime impact on the program since we call this function so frequently (at least.. for every txid in inv messages, before we send a getdata, when processing a tx)",
      "created_at": "2021-03-02T02:36:45Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585203876",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585203876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585207010",
      "pull_request_review_id": 601311887,
      "id": 585207010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIwNzAxMA==",
      "diff_hunk": "@@ -3330,11 +3141,11 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 m_txrequest.ForgetTxHash(tx.GetHash());\n                 m_txrequest.ForgetTxHash(tx.GetWitnessHash());\n \n-                // DoS prevention: do not allow mapOrphanTransactions to grow unbounded (see CVE-2012-3789)\n+                // DoS prevention: do not allow m_orphanage to grow unbounded (see CVE-2012-3789)\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, gArgs.GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-                unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n+                unsigned int nEvicted = m_orphanage.LimitOrphans(nMaxOrphanTx);",
      "path": "src/net_processing.cpp",
      "position": 391,
      "original_position": 394,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582771389,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1 came here to make a very similar suggestion :) ",
      "created_at": "2021-03-02T02:45:44Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585207010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585207010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3129,
      "original_line": 3129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585212013",
      "pull_request_review_id": 601363657,
      "id": 585212013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTIxMjAxMw==",
      "diff_hunk": "@@ -2104,10 +2104,9 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         const uint256 orphanHash = *orphan_work_set.begin();\n         orphan_work_set.erase(orphan_work_set.begin());\n \n-        auto orphan_it = mapOrphanTransactions.find(orphanHash);\n-        if (orphan_it == mapOrphanTransactions.end()) continue;\n+        const auto [porphanTx, from_peer] = GetOrphanTx(orphanHash);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "f294da727413210fda279afdc206a4dd12046d56",
      "in_reply_to_id": 585180763,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Woah! I forgot we got that with C++17.",
      "created_at": "2021-03-02T03:00:15Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585212013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585212013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 2107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585379261",
      "pull_request_review_id": 601575094,
      "id": 585379261,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTM3OTI2MQ==",
      "diff_hunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    struct OrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;",
      "path": "src/txorphanage.h",
      "position": null,
      "original_position": 22,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "649cad4fc8fcc107a02a5e448cf9495d38e18add",
      "in_reply_to_id": 582850158,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The `CTransactionRef tx` could be const as well; the only entry that changes after insertion is `list_pos`. Not sure there's much benefit to adding the const annotations for that though.",
      "created_at": "2021-03-02T08:59:07Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585379261",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585379261"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": 21,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585403627",
      "pull_request_review_id": 601607647,
      "id": 585403627,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQwMzYyNw==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": 585166595,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "denialofservice_tests locks `g_cs_orphans` then calls `EraseOrphansFor`, so it would have required more changes to have `EraseOrphansFor` do the locking.\r\n\r\nI don't think `FinalizeNode` is called from anywhere that holds `g_cs_orphans`? Am I missing somewhere?",
      "created_at": "2021-03-02T09:31:25Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585403627",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585403627"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585406986",
      "pull_request_review_id": 601612135,
      "id": 585406986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQwNjk4Ng==",
      "diff_hunk": "@@ -13,30 +13,48 @@\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n-struct COrphanTx {\n-    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-    size_t list_pos;\n-};\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-/** Map from txid to orphan transaction record. Limited by\n- *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 38,
      "original_position": 39,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "in_reply_to_id": 585196203,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't usually add `const` to arguments that are passed by vaue rather than reference -- it makes no difference to the caller; and not much difference to the implementation.",
      "created_at": "2021-03-02T09:35:51Z",
      "updated_at": "2021-03-02T09:40:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585406986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585406986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585492464",
      "pull_request_review_id": 601721779,
      "id": 585492464,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQ5MjQ2NA==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": 585166595,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here: https://github.com/bitcoin/bitcoin/blob/b9f41df1ead4b6a83a51fc41966b111c8459c313/src/init.cpp#L213-L214 ?",
      "created_at": "2021-03-02T11:39:27Z",
      "updated_at": "2021-03-02T11:39:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585492464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585492464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585566739",
      "pull_request_review_id": 601817102,
      "id": 585566739,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTU2NjczOQ==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": 585166595,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, that's it!\r\n\r\nStopNodes() calls DeleteNode() calls FinalizeNode() calls EraseForPeer(); with EraseForPeer needing `g_cs_orphans`. StopNodes locks `cs_vNodes` before calling DeleteNode, so `g_cs_orphans` has to be locked before calling CConnman::StopNodes but only if it's linked to a PeerManagerImpl.\r\n\r\nStopNodes is also called from `~CConnman` so that path will still get a lock order violation error, I think.\r\n\r\nDeleteNode is also called from DisconnectNodes which is called from ThreadSocketHandler; but there it's called after `cs_vNodes` is released, so lock ordering is not an issue, but `g_cs_orphans` still has to get locked prior to doing the work in EraseForPeer, so responsibility can't be moved all the way back up the chain. \r\n\r\nSo I don't think there's a simple way to make it non-recursive for this PR; for a future PR, I think the aim is to make `g_cs_orphans` become `private: TxOrphanage::m_mutex` and not have it be the last thing locked / first thing released so that the ordering constraint goes away, and then it should trivially be non-recursive.",
      "created_at": "2021-03-02T13:33:06Z",
      "updated_at": "2021-03-02T13:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585566739",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585566739"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585616200",
      "pull_request_review_id": 601883605,
      "id": 585616200,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTYxNjIwMA==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": 585166595,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> for a future PR, I think the aim is to make g_cs_orphans become private: TxOrphanage::m_mutex and not have it be the last thing locked / first thing released so that the ordering constraint goes away, and then it should trivially be non-recursive.\r\n\r\nConcept ACK :)",
      "created_at": "2021-03-02T14:35:23Z",
      "updated_at": "2021-03-02T14:35:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585616200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585616200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585725021",
      "pull_request_review_id": 602028779,
      "id": 585725021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTcyNTAyMQ==",
      "diff_hunk": "@@ -1003,7 +1003,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node, bool& fUpdateConnectionTim\n     for (const QueuedBlock& entry : state->vBlocksInFlight) {\n         mapBlocksInFlight.erase(entry.hash);\n     }\n-    EraseOrphansFor(nodeid);\n+    WITH_LOCK(g_cs_orphans, EraseOrphansFor(nodeid));",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "38a11c355acfc15134c682571b3d92f66b0e7c3c",
      "in_reply_to_id": 585166595,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "https://github.com/ajtowns/bitcoin/commits/202102-orphanworkset has work-in-progress that turns g_cs_orphans a protected m_mutex, doesn't quite turn orphans back into the responsibility of who sent them rather than who sent their final parent though.",
      "created_at": "2021-03-02T16:39:23Z",
      "updated_at": "2021-03-02T16:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585725021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585725021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585870278",
      "pull_request_review_id": 602215084,
      "id": 585870278,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTg3MDI3OA==",
      "diff_hunk": "@@ -13,30 +13,48 @@\n /** Guards orphan transactions and extra txs for compact blocks */\n extern RecursiveMutex g_cs_orphans;\n \n-struct COrphanTx {\n-    // When modifying, adapt the copy of this definition in tests/DoS_tests.\n-    CTransactionRef tx;\n-    NodeId fromPeer;\n-    int64_t nTimeExpire;\n-    size_t list_pos;\n-};\n+/** Data structure to keep track of orphan transactions\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get the details of an orphan transaction (returns nullptr if not found) */\n+    std::pair<CTransactionRef, NodeId> GetTx(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-int EraseOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void EraseOrphansForBlock(const CBlock& block) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-void AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool HaveOrphanTx(const GenTxid& gtxid) EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n-std::pair<CTransactionRef, NodeId> GetOrphanTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n-bool OrphanageAddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+    /** Erase an orphan by txid */\n+    int EraseTx(const uint256& txid) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n \n-/** Map from txid to orphan transaction record. Limited by\n- *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n-extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+    /** Erase all orphans announced by a peer (eg, after that peer disconnects) */\n+    void EraseForPeer(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);",
      "path": "src/txorphanage.h",
      "position": 38,
      "original_position": 39,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "6bd4963c069bfd0af420e8a3fb724c3b693a1e76",
      "in_reply_to_id": 585196203,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, right. thanks ",
      "created_at": "2021-03-02T20:03:10Z",
      "updated_at": "2021-03-02T20:03:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r585870278",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585870278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587522262",
      "pull_request_review_id": 604169093,
      "id": 587522262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzUyMjI2Mg==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid) const",
      "path": "src/txorphanage.cpp",
      "position": 154,
      "original_position": 154,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's say an attacker sends an invalid orphan Z to Alice. Such orphan will be stored\r\nin `m_orphans` until expiration time, random eviction or parent reception. Another honest\r\npeer Bob announce Z's parent and Z through txid-relay to Alice. Announcement for Z from Bob\r\nwon't be scheduled for request by `AddTxAnnouncement()` as it'll be bounced off before\r\ndue to a positive `AlreadyHaveTx()`.\r\n\r\nIf Bob sends a valid Z's parent, it should be accepted but Alice's version of Z will be\r\nrejected as invalid. Assuming Bob is initial broadcaster of Z and same trick is repeated\r\nagainst all his tx-relay peers, Z won't propagate until next Bob rebroadcast.\r\n\r\nIs the following description correct ? If yes, I don't think that's concerning, assuming Bob\r\nrebroadcast frequency is pretty high (which is the case for time-sensitive Bitcoin\r\napplications).\r\n\r\nThough not introduced by this PR.",
      "created_at": "2021-03-04T14:37:28Z",
      "updated_at": "2021-03-04T15:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587522262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587522262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587536050",
      "pull_request_review_id": 604169093,
      "id": 587536050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzUzNjA1MA==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;",
      "path": "src/txorphanage.cpp",
      "position": 138,
      "original_position": 138,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Couldn't the \"orphanage overflow\" log L3131 in net_processing be moved here instead of returning `nEvicted` ? And change the message to dissociate clearly expiration-from-eviction.",
      "created_at": "2021-03-04T14:54:04Z",
      "updated_at": "2021-03-04T15:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587536050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587536050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 138,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587547275",
      "pull_request_review_id": 604169093,
      "id": 587547275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzU0NzI3NQ==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid) const\n+{\n+    LOCK(g_cs_orphans);\n+    if (gtxid.IsWtxid()) {\n+        return m_wtxid_to_orphan_it.count(gtxid.GetHash());\n+    } else {\n+        return m_orphans.count(gtxid.GetHash());\n+    }\n+}\n+\n+std::pair<CTransactionRef, NodeId> TxOrphanage::GetTx(const uint256& txid) const\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const auto it = m_orphans.find(txid);\n+    if (it == m_orphans.end()) return {nullptr, -1};\n+    return {it->second.tx, it->second.fromPeer};\n+}\n+\n+void TxOrphanage::EraseForBlock(const CBlock& block)",
      "path": "src/txorphanage.cpp",
      "position": 173,
      "original_position": 173,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we had a `std::map<uint256, OrphanMap::iterator> m_parentid_to_orphan_it` index we could update each peer's `orphan_work_set` in function of the parent received through this block. \r\n\r\nOtherwise, I think you might have stalling valid orphans never re-processed. Any ulterior parent announcement should be bounce off by `m_recent_confirmed_transactions`. Though rare enough to not be worthy of the complexity...",
      "created_at": "2021-03-04T15:06:40Z",
      "updated_at": "2021-03-04T15:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587547275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587547275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587548092",
      "pull_request_review_id": 604169093,
      "id": 587548092,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzU0ODA5Mg==",
      "diff_hunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXORPHANAGE_H\n+#define BITCOIN_TXORPHANAGE_H\n+\n+#include <net.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <sync.h>\n+\n+/** Guards orphan transactions and extra txs for compact blocks */\n+extern RecursiveMutex g_cs_orphans;\n+\n+/** A class to track orphan transactions (failed on TX_MISSING_INPUTS)\n+ * Since we cannot distinguish orphans from bad transactions with\n+ * non-existent inputs, we heavily limit the number of orphans\n+ * we keep and the duration we keep them for.\n+ */\n+class TxOrphanage {\n+public:\n+    /** Add a new orphan transaction */\n+    bool AddTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans);\n+\n+    /** Check if we already have an orphan transaction (by txid or wtxid) */\n+    bool HaveTx(const GenTxid& gtxid) const EXCLUSIVE_LOCKS_REQUIRED(!g_cs_orphans);\n+\n+    /** Get an orphan transaction and its orginating peer",
      "path": "src/txorphanage.h",
      "position": 29,
      "original_position": 29,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: originating",
      "created_at": "2021-03-04T15:07:34Z",
      "updated_at": "2021-03-04T15:21:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r587548092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587548092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588994829",
      "pull_request_review_id": 605821963,
      "id": 588994829,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODk5NDgyOQ==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid) const",
      "path": "src/txorphanage.cpp",
      "position": 154,
      "original_position": 154,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": 587522262,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think what you're saying is: Bob has tx `P` (parent) and a child of that tx `C`. Mallory knows both and malleates the witness of `C` so that it creates a new invalid tx `X` that has the same txid as `C` but obviously a different wtxid. Mallory relays `X` to Alice before Alice hears about `P` or `C`. Alice adds `X` to the orphan pool and requests `P` from Mallory by wtxid.\r\n\r\nI think the expected behaviour is then: Carol announces both `P` and `C` to Alice; if wtxid relay is active, both are announced via wtxid so don't conflict with `X`, and both are requested. If the request for `P` from Mallory is still active, `C` will be requested first, and when we receive it, we'll see there's already an entry for that txid in the orphan pool and ignore it. I'm not sure if we'll re-request from other honest peers at that point in normal usage; though I think this is a case where #21061 would eventually save the day.",
      "created_at": "2021-03-07T08:40:07Z",
      "updated_at": "2021-03-07T08:40:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r588994829",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588994829"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589393892",
      "pull_request_review_id": 606250567,
      "id": 589393892,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTM5Mzg5Mg==",
      "diff_hunk": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txorphanage.h>\n+\n+#include <consensus/validation.h>\n+#include <logging.h>\n+#include <policy/policy.h>\n+\n+#include <cassert>\n+\n+/** Expiration time for orphan transactions in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n+/** Minimum time between orphan transactions expire time checks in seconds */\n+static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+\n+RecursiveMutex g_cs_orphans;\n+\n+bool TxOrphanage::AddTx(const CTransactionRef& tx, NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    const uint256& hash = tx->GetHash();\n+    if (m_orphans.count(hash))\n+        return false;\n+\n+    // Ignore big transactions, to avoid a\n+    // send-big-orphans memory exhaustion attack. If a peer has a legitimate\n+    // large transaction with a missing parent then we assume\n+    // it will rebroadcast it later, after the parent transaction(s)\n+    // have been mined or received.\n+    // 100 orphans, each of which is at most 100,000 bytes big is\n+    // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n+    unsigned int sz = GetTransactionWeight(*tx);\n+    if (sz > MAX_STANDARD_TX_WEIGHT)\n+    {\n+        LogPrint(BCLog::MEMPOOL, \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        return false;\n+    }\n+\n+    auto ret = m_orphans.emplace(hash, OrphanTx{tx, peer, GetTime() + ORPHAN_TX_EXPIRE_TIME, m_orphan_list.size()});\n+    assert(ret.second);\n+    m_orphan_list.push_back(ret.first);\n+    // Allow for lookups in the orphan pool by wtxid, as well as txid\n+    m_wtxid_to_orphan_it.emplace(tx->GetWitnessHash(), ret.first);\n+    for (const CTxIn& txin : tx->vin) {\n+        m_outpoint_to_orphan_it[txin.prevout].insert(ret.first);\n+    }\n+\n+    LogPrint(BCLog::MEMPOOL, \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+             m_orphans.size(), m_outpoint_to_orphan_it.size());\n+    return true;\n+}\n+\n+int TxOrphanage::EraseTx(const uint256& txid)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    std::map<uint256, OrphanTx>::iterator it = m_orphans.find(txid);\n+    if (it == m_orphans.end())\n+        return 0;\n+    for (const CTxIn& txin : it->second.tx->vin)\n+    {\n+        auto itPrev = m_outpoint_to_orphan_it.find(txin.prevout);\n+        if (itPrev == m_outpoint_to_orphan_it.end())\n+            continue;\n+        itPrev->second.erase(it);\n+        if (itPrev->second.empty())\n+            m_outpoint_to_orphan_it.erase(itPrev);\n+    }\n+\n+    size_t old_pos = it->second.list_pos;\n+    assert(m_orphan_list[old_pos] == it);\n+    if (old_pos + 1 != m_orphan_list.size()) {\n+        // Unless we're deleting the last entry in m_orphan_list, move the last\n+        // entry to the position we're deleting.\n+        auto it_last = m_orphan_list.back();\n+        m_orphan_list[old_pos] = it_last;\n+        it_last->second.list_pos = old_pos;\n+    }\n+    m_orphan_list.pop_back();\n+    m_wtxid_to_orphan_it.erase(it->second.tx->GetWitnessHash());\n+\n+    m_orphans.erase(it);\n+    return 1;\n+}\n+\n+void TxOrphanage::EraseForPeer(NodeId peer)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    int nErased = 0;\n+    std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+    while (iter != m_orphans.end())\n+    {\n+        std::map<uint256, OrphanTx>::iterator maybeErase = iter++; // increment to avoid iterator becoming invalid\n+        if (maybeErase->second.fromPeer == peer)\n+        {\n+            nErased += EraseTx(maybeErase->second.tx->GetHash());\n+        }\n+    }\n+    if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx from peer=%d\\n\", nErased, peer);\n+}\n+\n+unsigned int TxOrphanage::LimitOrphans(unsigned int max_orphans)\n+{\n+    AssertLockHeld(g_cs_orphans);\n+\n+    unsigned int nEvicted = 0;\n+    static int64_t nNextSweep;\n+    int64_t nNow = GetTime();\n+    if (nNextSweep <= nNow) {\n+        // Sweep out expired orphan pool entries:\n+        int nErased = 0;\n+        int64_t nMinExpTime = nNow + ORPHAN_TX_EXPIRE_TIME - ORPHAN_TX_EXPIRE_INTERVAL;\n+        std::map<uint256, OrphanTx>::iterator iter = m_orphans.begin();\n+        while (iter != m_orphans.end())\n+        {\n+            std::map<uint256, OrphanTx>::iterator maybeErase = iter++;\n+            if (maybeErase->second.nTimeExpire <= nNow) {\n+                nErased += EraseTx(maybeErase->second.tx->GetHash());\n+            } else {\n+                nMinExpTime = std::min(maybeErase->second.nTimeExpire, nMinExpTime);\n+            }\n+        }\n+        // Sweep again 5 minutes after the next entry that expires in order to batch the linear scan.\n+        nNextSweep = nMinExpTime + ORPHAN_TX_EXPIRE_INTERVAL;\n+        if (nErased > 0) LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx due to expiration\\n\", nErased);\n+    }\n+    FastRandomContext rng;\n+    while (m_orphans.size() > max_orphans)\n+    {\n+        // Evict a random orphan:\n+        size_t randompos = rng.randrange(m_orphan_list.size());\n+        EraseTx(m_orphan_list[randompos]->first);\n+        ++nEvicted;\n+    }\n+    return nEvicted;\n+}\n+\n+void TxOrphanage::AddChildrenToWorkSet(const CTransaction& tx, std::set<uint256>& orphan_work_set) const\n+{\n+    AssertLockHeld(g_cs_orphans);\n+    for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+        const auto it_by_prev = m_outpoint_to_orphan_it.find(COutPoint(tx.GetHash(), i));\n+        if (it_by_prev != m_outpoint_to_orphan_it.end()) {\n+            for (const auto& elem : it_by_prev->second) {\n+                orphan_work_set.insert(elem->first);\n+            }\n+        }\n+    }\n+}\n+\n+bool TxOrphanage::HaveTx(const GenTxid& gtxid) const",
      "path": "src/txorphanage.cpp",
      "position": 154,
      "original_position": 154,
      "commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "original_commit_id": "5e50e2d1b95e7ca7709a9671ab21f1164b8d0cb8",
      "in_reply_to_id": 587522262,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I'm not sure if we'll re-request from other honest peers at that point in normal usage\r\n\r\nOnce the transaction is rejected from orphanage in reason of an already present orphan, we forget its txid/wtxid from tx-requester. So effectively, we shouldn't re-request it from other onest peers at that stage. Ultimately, parent `P` withhold by Mallory should expire, Alice will fetch a valid parent `P` from another peer. When Bob rebroadcasts `C`, Mallory isn't able to interfere anymore as malleated `X` will be rejected directly, without being logged in orphan pool.\r\n\r\nYes I agree #21061 should make things better.",
      "created_at": "2021-03-08T12:43:54Z",
      "updated_at": "2021-03-08T12:43:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21148#discussion_r589393892",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589393892"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21148"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    }
  ]
}