{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477",
    "id": 526454761,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTI2NDU0NzYx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20477",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/20477.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/20477.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/fee88237e03c21bf81f21098e6b89ecfa5327cee",
    "number": 20477,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "net: Add unit testing of node eviction logic",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add unit testing of node eviction logic.\r\n\r\nCloses #19966.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-11-24T12:47:07Z",
    "updated_at": "2022-08-16T17:19:54Z",
    "closed_at": "2020-12-16T12:33:46Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-12-16T12:33:46Z",
    "merge_commit_sha": "b440c33179e777bfebb8c12840e06ea691a4868f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:unit-test-node-eviction-logic",
      "ref": "unit-test-node-eviction-logic",
      "sha": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "dff0f6f753eafd932d7d65fbfa33585f620e8e54",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 210,
    "deletions": 54,
    "changed_files": 3,
    "commits": 3,
    "review_comments": 62,
    "comments": 26
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 4032631792,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzMjYzMTc5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4032631792",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T12:48:11Z"
    },
    {
      "event": "labeled",
      "id": 4032632943,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzI2MzI5NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4032632943",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T12:48:25Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4032632946,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwMzI2MzI5NDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4032632946",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T12:48:25Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4033395071,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzMzM5NTA3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4033395071",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T15:23:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4033403612,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzMzQwMzYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4033403612",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T15:24:51Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4033425446,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDAzMzQyNTQ0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4033425446",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T15:28:56Z"
    },
    {
      "event": "commented",
      "id": 733196012,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzE5NjAxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733196012",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T19:48:42Z",
      "updated_at": "2020-12-15T20:41:54Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20196 (net: fix GetListenPort() to derive the proper port by vasild)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733196012",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 733264515,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczMzI2NDUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/733264515",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-11-24T22:16:30Z",
      "updated_at": "2020-11-24T22:16:30Z",
      "author_association": "MEMBER",
      "body": "Thanks for working on adding testing here. I'll try to review this soon.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733264515",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "reviewed",
      "id": 543891357,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODkxMzU3",
      "url": null,
      "actor": null,
      "commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-543891357",
      "submitted_at": "2020-12-03T12:12:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "commented",
      "id": 737904003,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczNzkwNDAwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/737904003",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-03T12:12:56Z",
      "updated_at": "2020-12-03T12:14:00Z",
      "author_association": "MEMBER",
      "body": "Concept ACK. Thanks for adding tests.\r\n\r\nI sometimes wonder if it would make sense to move \"semi-internal\" things that are only exposed externally for unit testing, like in this case \"NodeEvictionCandidate\" and \"SelectNodeToEvict\", to a separate set of headers. But not here anyhow.\r\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-737904003",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "reviewed",
      "id": 544573341,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NTczMzQx",
      "url": null,
      "actor": null,
      "commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK `2c62fb6`. Thank you, @practicalswift  for making the code more testable. Also for exposure to idiomatic modern C++. I will checkout the branch and run soon.",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-544573341",
      "submitted_at": "2020-12-04T04:59:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 544988209,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0OTg4MjA5",
      "url": null,
      "actor": null,
      "commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-544988209",
      "submitted_at": "2020-12-04T14:28:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "labeled",
      "id": 4074179829,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwNzQxNzk4Mjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4074179829",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-04T19:37:03Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4074760612,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3NDc2MDYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4074760612",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-04T22:40:32Z"
    },
    {
      "event": "commented",
      "id": 739130004,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTEzMDAwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739130004",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-05T05:35:57Z",
      "updated_at": "2020-12-05T05:35:57Z",
      "author_association": "MEMBER",
      "body": "tsan failue can be ignored or fixed by a rebase",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739130004",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 739155734,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTE1NTczNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739155734",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-05T10:05:21Z",
      "updated_at": "2020-12-05T10:05:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke Thanks! Rebased!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739155734",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "mentioned",
      "id": 4075389862,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA3NTM4OTg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4075389862",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-05T10:05:21Z"
    },
    {
      "event": "subscribed",
      "id": 4075389864,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNzUzODk4NjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4075389864",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-05T10:05:22Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4075389962,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3NTM4OTk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4075389962",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-05T10:05:30Z"
    },
    {
      "event": "reviewed",
      "id": 546027700,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDI3NzAw",
      "url": null,
      "actor": null,
      "commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-546027700",
      "submitted_at": "2020-12-07T10:54:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 546047804,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDQ3ODA0",
      "url": null,
      "actor": null,
      "commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Very strong concept ACK. This area of the code is definitely undertested. The structure of the unit tests (passing in a setup lambda function to set the relevant parameters in the eviction candidates) is really nice.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-546047804",
      "submitted_at": "2020-12-07T11:13:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4079212358,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3OTIxMjM1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079212358",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T11:47:33Z"
    },
    {
      "event": "labeled",
      "id": 4079220605,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQwNzkyMjA2MDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079220605",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T11:49:35Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 739869998,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTg2OTk5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739869998",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T11:51:21Z",
      "updated_at": "2020-12-07T11:51:21Z",
      "author_association": "MEMBER",
      "body": "needs rebase",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739869998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4079229600,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3OTIyOTYwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079229600",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T11:51:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4079278189,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3OTI3ODE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079278189",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:03:37Z"
    },
    {
      "event": "renamed",
      "id": 4079294933,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDA3OTI5NDkzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079294933",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:08:00Z",
      "rename": {
        "from": "test/net: Add unit testing of node eviction logic",
        "to": "net: Add unit testing of node eviction logic"
      }
    },
    {
      "event": "commented",
      "id": 739887583,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTg4NzU4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739887583",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:27:21Z",
      "updated_at": "2020-12-07T14:25:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that SelectNodeToEvict() is going to keep ownership of vEvictionCandidates and you're using move semantics to avoid a copy, but that's not actually happening here.\r\n\r\nI've now reverted to the original version (alternative 1 below), since [your suggestion](https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893) and [sipa's suggestion](https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066) are mutually exclusive :)\r\n\r\nI'll let others chime in regarding the choice between the three alternatives:\r\n\r\n```\r\nAlternative 1. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>)\r\nAlternative 2. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&)\r\nAlternative 3. Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&&)\r\n```\r\n\r\nTrying to summarize the pros/cons:\r\n* Alternative 1. Simple and no gotchas. Does an extraneous copy.\r\n* Alternative 2. No extraneous copy. Possibly surprising that a function named `SelectNodeToEvict` modifies its input.\r\n* Alternative 3. No extraneous copy. Risk of accidental use-after-moved-from in the future. Possibly confusing (see https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893).\r\n\r\n\r\nPerhaps the members of the review club could chime in. Some questions for the review club: Do you agree with the pros/cons of each alternative? Which alternative do you find easier to review? Which alternative do you prefer? Is it possible to quantify the real-world impact of the extraneous copy in a theoretical worst-case scenario?",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739887583",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 739892556,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTg5MjU1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739892556",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:37:56Z",
      "updated_at": "2020-12-07T12:37:56Z",
      "author_association": "MEMBER",
      "body": "> since your suggestion and sipa's suggestion are mutually exclusive :)\r\n\r\nI don't think they are mutually exclusive. There are two questions here:\r\n\r\n1. Should the argument be passed by value or by reference?\r\n2. If passed by reference, should it be passed by lvalue reference or rvalue reference?\r\n\r\nI don't think there's any disagreement about (1). We should pass by reference to avoid a copy.\r\n\r\nFor (2), I think it's slightly odd to pass by rvalue reference when it's not necessary to do so, but that's more of a stylistic thing. I see now that you're calling the function with a prvalue in the tests, which means you can't pass by lvalue reference. My preference would therefore be to revert to what you had before.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739892556",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "reviewed",
      "id": 546113968,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTEzOTY4",
      "url": null,
      "actor": null,
      "commit_id": "ccc8162b2226977b3d5ccfd1ebec5426650b4924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-546113968",
      "submitted_at": "2020-12-07T12:45:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "commented",
      "id": 739902573,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTkwMjU3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739902573",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:58:42Z",
      "updated_at": "2020-12-07T16:37:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jnewbery \r\n\r\nUpdated accordingly.\r\n\r\nPersonally I prefer the `std::vector<NodeEvictionCandidate>&&` alternative in this case since it makes it clear from reading the code at the call site that `vEvictionCandidates` is not intended to be used after the `SelectNodeToEvict` call.\r\n\r\nHopefully any use-after-moved-from would be quite obvious.\r\n\r\nExample of future patches where the signature makes a difference from a gotcha perspective:\r\n\r\nGiven signature `Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&)`\r\n\r\n```patch\r\n    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(vEvictionCandidates);\r\n    if (!node_id_to_evict) {\r\n        return false;\r\n    }\r\n+   if (!vEvictionCandidates.empty()) { // Likely BAD, but not immediately obvious why\r\n+       … do something with the now perhaps surprisingly modified vEvictionCandidates …\r\n```\r\n\r\nGiven signature `Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&&)`\r\n\r\n```patch\r\n    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));\r\n    if (!node_id_to_evict) {\r\n        return false;\r\n    }\r\n+   if (!vEvictionCandidates.empty()) { // BAD and hopefully obviously so thanks to std::move above :)\r\n+       … do something with vEvictionCandidates which is now in some valid but otherwise indeterminate state …\r\n```\r\n\r\n\r\n",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739902573",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "mentioned",
      "id": 4079502822,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA3OTUwMjgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079502822",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:58:42Z"
    },
    {
      "event": "subscribed",
      "id": 4079502824,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwNzk1MDI4MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079502824",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:58:43Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4079503923,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA3OTUwMzkyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079503923",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T12:59:01Z"
    },
    {
      "event": "unlabeled",
      "id": 4079524081,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDA3OTUyNDA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4079524081",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T13:03:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 739933084,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTkzMzA4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739933084",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T13:55:38Z",
      "updated_at": "2020-12-07T13:55:38Z",
      "author_association": "MEMBER",
      "body": "> Personally I prefer the std::vector<NodeEvictionCandidate>&& alternative in this case since it makes it clear from reading the code at the call site that vEvictionCandidates is not intended to be used after the SelectNodeToEvict call.\r\n\r\nFine by me!",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933084",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 739933867,
      "node_id": "MDEyOklzc3VlQ29tbWVudDczOTkzMzg2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/739933867",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-07T13:56:59Z",
      "updated_at": "2020-12-07T13:56:59Z",
      "author_association": "MEMBER",
      "body": "utACK cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933867",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "reviewed",
      "id": 548414271,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDE0Mjcx",
      "url": null,
      "actor": null,
      "commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-548414271",
      "submitted_at": "2020-12-09T17:17:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 548422399,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDIyMzk5",
      "url": null,
      "actor": null,
      "commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-548422399",
      "submitted_at": "2020-12-09T17:26:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 548454663,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDU0NjYz",
      "url": null,
      "actor": null,
      "commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-548454663",
      "submitted_at": "2020-12-09T18:02:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 548523190,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NTIzMTkw",
      "url": null,
      "actor": null,
      "commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-548523190",
      "submitted_at": "2020-12-09T19:12:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "commented",
      "id": 742132718,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0MjEzMjcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742132718",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-09T23:39:40Z",
      "updated_at": "2020-12-09T23:39:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks for reviewing!\r\n\r\nPushed an updated version:\r\n\r\nNow skipping the `GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE` and `GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW` checking which isn't particularly important compared to the other tests.\r\n\r\nAlso fixed an incorrect comment.\r\n\r\nShould hopefully be ready for final review :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742132718",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4092469065,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA5MjQ2OTA2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4092469065",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-09T23:40:12Z"
    },
    {
      "event": "reviewed",
      "id": 549056756,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDU2NzU2",
      "url": null,
      "actor": null,
      "commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-549056756",
      "submitted_at": "2020-12-10T10:29:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 549171994,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTcxOTk0",
      "url": null,
      "actor": null,
      "commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK.\r\n\r\nNice test.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-549171994",
      "submitted_at": "2020-12-10T13:13:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4097597568,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDA5NzU5NzU2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097597568",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:50:54Z"
    },
    {
      "event": "commented",
      "id": 742853209,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0Mjg1MzIwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742853209",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:58:41Z",
      "updated_at": "2020-12-10T22:58:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated.\r\n\r\nAddressed feedback from @MarcoFalke and @jnewbery.\r\n\r\nAlso added a combined test which tests the protections based on `nKeyedNetGroup` (4 peers protected), `nMinPingUsecTime` (8 peers protected), `nLastTXTime` (4 peers protected) and `nLastBlockTime` (8 peers protected) jointly.\r\n\r\nKindly re-review thoroughly :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742853209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "mentioned",
      "id": 4097622166,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA5NzYyMjE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097622166",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:58:42Z"
    },
    {
      "event": "subscribed",
      "id": 4097622171,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwOTc2MjIxNzE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097622171",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:58:42Z"
    },
    {
      "event": "mentioned",
      "id": 4097622180,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDA5NzYyMjE4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097622180",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:58:42Z"
    },
    {
      "event": "subscribed",
      "id": 4097622184,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQwOTc2MjIxODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4097622184",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-10T22:58:42Z"
    },
    {
      "event": "reviewed",
      "id": 549697000,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Njk3MDAw",
      "url": null,
      "actor": null,
      "commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-549697000",
      "submitted_at": "2020-12-10T23:40:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "commented",
      "id": 743091962,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzA5MTk2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743091962",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T09:47:26Z",
      "updated_at": "2020-12-11T09:47:26Z",
      "author_association": "MEMBER",
      "body": "ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743091962",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 743284528,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0MzI4NDUyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/743284528",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-11T16:13:14Z",
      "updated_at": "2020-12-11T16:13:41Z",
      "author_association": "MEMBER",
      "body": "Will review properly as soon as my laptop is done with the gitian builds for 3 RCs...until then, it's basically unusable.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743284528",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 745364380,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTM2NDM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745364380",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T15:25:56Z",
      "updated_at": "2020-12-15T15:25:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "Updated to address @dhruv's feedback. Should hopefully be ready for final review. Please re-review :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745364380",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "mentioned",
      "id": 4115166159,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDExNTE2NjE1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4115166159",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T15:25:56Z"
    },
    {
      "event": "subscribed",
      "id": 4115166166,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMTUxNjYxNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4115166166",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T15:25:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4115198217,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDExNTE5ODIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4115198217",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T15:32:06Z"
    },
    {
      "event": "commented",
      "id": 745522711,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NTUyMjcxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/745522711",
      "actor": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-15T19:42:56Z",
      "updated_at": "2020-12-15T19:42:56Z",
      "author_association": "MEMBER",
      "body": "ACK `1c9b235`",
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745522711",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746022436,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAyMjQzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746022436",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T10:04:58Z",
      "updated_at": "2020-12-16T10:04:58Z",
      "author_association": "MEMBER",
      "body": "cr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 🤠\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\ncr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 🤠\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgJLwwAljffgO2Xw1Iez563pRA0ztSBIkuzEBPGf9nYifcbQJsfPMCdLzuu3MPQ\r\nZgfWPQNmtEuSTNq0R4Hl+XaPmBcoS5LDOTfxJWsQtb+kE0uXVfN1nRu4+d91/Sor\r\n+NT9Ach7YRVvJPOZZc0euxyka0pxLwX3+LdXa1k26gL2teT5knaROnCfSxenrFrO\r\nYIzbBfkn2lm/TMu4FhC2hW+OZon4zfHHCPzJYkQR2FByixLDqIIEOJiOY9ycLJQm\r\nys9xGzn0lZz0/hw4ApEe2b+lLREn/6YMjPNefo0hWcADAYDbjsvEYBsFm0Z6m5Mw\r\nBXA4lhUPWes5QboZ1LCxrEdxGG10uj8LwIBwESp/KVpZ53w0f9yU+mBQ68bruAHh\r\n5hFAJmriES6q8Ml/q2b3IUq8tXwOBM+2poGR8MtTYV6Obk/3eus2bA33EVsfNzm3\r\nZXzo/F1yQvXlD1kSDU3Aez1yodeLK3GQNoTKaPIGeIwOM3sPhDhJ6REMYskLM4tt\r\nPxqHvOZz\r\n=Gf1H\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `23398d20d71a2405d911d0dc99e4fc62b592150f49fa6c17afd6d588c418522c  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e89294010823398d20d71a2405d911d0dc99e4fc62b592150f49fa6c17afd6d588c418522cf0107fd7398bc90e0be7a605322137d2ed9108fff01002bd7f23a0a9a6df040ad1fb6a53ce5e08f1045fd9dbbbf008a9f142f6512d6a5e0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff0102cc72ffccbaac7120b1f3f99933682b808f1045fd9dbbaf0080e361c96f960f3860083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010461c5cf5d05a38312544cb8d5b6c4b8408f1045fd9dbbaf0087ee78d84418393070083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6df0108fcf32ebf4bd8336aeba0cb60420e84d08f020e09db3e429c6645c18d52d92c85db443d9945c22630cb987573b2856fd9aa9aa08f0200b5a8780a62f3f7df85192d5e0105257ef184ac37603bce482a379453152e1e908f1045fd9dbbaf008277420a4c865ad980083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746022436",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746025413,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAyNTQxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746025413",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T10:06:53Z",
      "updated_at": "2020-12-16T10:06:53Z",
      "author_association": "MEMBER",
      "body": "cr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b 👲\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\ncr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b 👲\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjQWgv/TnEWYjD/Ws2y2WL23agZIEyXZwlxbLCJTWkydKzBnOrPdP1QOBl3DZ95\r\n1ICN5MfBErZtO825TG8NU2VfCesJRIJKV4996nw7GqpN+KfBlkYHNipYfoF9xdHB\r\nJ0MT/97/wsrsWGhYEdwx3ftk0CHMNNDMN++N4BSx3h314jGnuNzV4DiUoz2ea9X3\r\n1IAsitmrqa37xIlLIvdLSwRVDcWQyJ7oQ+NUo2KsSztXJ6XEpZcUAqhfRwuS9Ku4\r\nR3DIJHLXKk8PUEXlnmDWVtfnhuhGW4g3V6ZJdUId7OfUr85H/rGSxSeejqSqxLt/\r\n8hGiRsuftelXPfd7SOAjRW5h6x6NFCJBgcVVOYKzjvjyknyH3it3IrPi9WFwLLWS\r\n98fNiUtiE2SsXOUFXxbbyalCZlQols/pBklibFoPNPhfHCT7ZPvazINGBJwkwxVS\r\nGL1IIAKftgsUJhmiSDy/LHfHwXC2vOL2ipdPLJuR7CPLPj9iBZ2picP4h3zRpSo2\r\nlubdxdSX\r\n=z6dl\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `3a47dabfa2f12ebc4fbd136dcd7771912bfcd7ed7ce86ba72f473c364fba70a0  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401083a47dabfa2f12ebc4fbd136dcd7771912bfcd7ed7ce86ba72f473c364fba70a0f010b438fe0e601d86841026faaaaf5a7f5e08fff01071cd1dfe154052ccbeee0f24f9e9acd108f1045fd9dc30f008a0ca2a256c0e69180083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0108866883bd2ed9744c592c7cb9dfcc2e408f1045fd9dc2ff008a95c1c9a664641660083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff0109dd05ccbc7815398d0399c92373b228f08f1045fd9dc32f0080f1b2b81731ae62a0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010d9c46dfac07e0e8de83409f86c44694708f1045fd9dc2ff0086ec4bf813030481b0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746025413",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746026813,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAyNjgxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746026813",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T10:07:49Z",
      "updated_at": "2020-12-16T10:07:49Z",
      "author_association": "MEMBER",
      "body": "I ACKed both versions. Let me know which one to merge.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746026813",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746033217,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjAzMzIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746033217",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T10:11:56Z",
      "updated_at": "2020-12-16T10:11:56Z",
      "author_association": "MEMBER",
      "body": "code review ACK 1c9b235c33\r\n\r\nEither are fine to merge.",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746033217",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746065399,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjA2NTM5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746065399",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T10:36:18Z",
      "updated_at": "2020-12-16T10:36:18Z",
      "author_association": "MEMBER",
      "body": "wait for meeee 😀",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746065399",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "reviewed",
      "id": 553565563,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTY1NTYz",
      "url": null,
      "actor": null,
      "commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-553565563",
      "submitted_at": "2020-12-16T10:48:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 553566807,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTY2ODA3",
      "url": null,
      "actor": null,
      "commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-553566807",
      "submitted_at": "2020-12-16T10:50:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 553579878,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTc5ODc4",
      "url": null,
      "actor": null,
      "commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-553579878",
      "submitted_at": "2020-12-16T11:07:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "reviewed",
      "id": 553582377,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTgyMzc3",
      "url": null,
      "actor": null,
      "commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#pullrequestreview-553582377",
      "submitted_at": "2020-12-16T11:10:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
    },
    {
      "event": "commented",
      "id": 746144573,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjE0NDU3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746144573",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T11:30:09Z",
      "updated_at": "2020-12-16T11:30:09Z",
      "author_association": "MEMBER",
      "body": "ACK 1c9b235c330fe7b9b71f modulo a few suggestions",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746144573",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDczZjhjZWUwZDdiN2ZhY2JkMmU4ZGRlMjRhMjM3ZjIwYzQ4YzBj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c",
      "tree": {
        "sha": "b669f32eeaf503305d4dd78a1d6e497cfa82fe61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b669f32eeaf503305d4dd78a1d6e497cfa82fe61"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00f4dcd5520e14529b5c3fa8e14feb3a023ffb4c",
          "sha": "00f4dcd5520e14529b5c3fa8e14feb3a023ffb4c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/00f4dcd5520e14529b5c3fa8e14feb3a023ffb4c"
        }
      ],
      "message": "net: Move eviction node selection logic to SelectNodeToEvict(...)",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-16T12:00:15Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-09-18T12:47:08Z"
      },
      "sha": "ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODVjNDI4ZGUwZmI2M2NhNmVjMTQxOWJiMTEyZjA3ZDI3YmNkZjE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/685c428de0fb63ca6ec1419bb112f07d27bcdf14",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/685c428de0fb63ca6ec1419bb112f07d27bcdf14",
      "tree": {
        "sha": "47b1b372d24be0361d768f0f66b0f7a2273b549d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47b1b372d24be0361d768f0f66b0f7a2273b549d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c",
          "sha": "ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ed73f8cee0d7b7facbd2e8dde24a237f20c48c0c"
        }
      ],
      "message": "test: Add unit testing of node eviction logic",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-16T12:00:15Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-06T11:40:09Z"
      },
      "sha": "685c428de0fb63ca6ec1419bb112f07d27bcdf14"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWU4ODIzN2UwM2MyMWJmODFmMjEwOThlNmI4OWVjZmE1MzI3Y2Vl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "tree": {
        "sha": "16299238e6b798babf4074706bc59d161798f1a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16299238e6b798babf4074706bc59d161798f1a0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/685c428de0fb63ca6ec1419bb112f07d27bcdf14",
          "sha": "685c428de0fb63ca6ec1419bb112f07d27bcdf14",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/685c428de0fb63ca6ec1419bb112f07d27bcdf14"
        }
      ],
      "message": "Assert eviction at >= 29 candidates. Assert non-eviction at <= 20 candidates.",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-16T12:00:15Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-12-15T15:23:44Z"
      },
      "sha": "fee88237e03c21bf81f21098e6b89ecfa5327cee"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4119338587,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDExOTMzODU4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4119338587",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:00:56Z"
    },
    {
      "event": "commented",
      "id": 746181940,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjE4MTk0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746181940",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:01:18Z",
      "updated_at": "2020-12-16T12:01:18Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonatack Thanks for reviewing! Feedback addressed: please re-review :)",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746181940",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "mentioned",
      "id": 4119339960,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDExOTMzOTk2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4119339960",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:01:18Z"
    },
    {
      "event": "subscribed",
      "id": 4119339965,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxMTkzMzk5NjU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4119339965",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:01:18Z"
    },
    {
      "event": "commented",
      "id": 746201615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjIwMTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746201615",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:16:28Z",
      "updated_at": "2020-12-16T12:16:28Z",
      "author_association": "MEMBER",
      "body": "ACK fee88237e03c21bf81f21098e6b89ecfa5327cee\r\n\r\nThanks for adding this nicely done coverage! Looking forward to more.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746201615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "commented",
      "id": 746217675,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc0NjIxNzY3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/746217675",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:30:37Z",
      "updated_at": "2020-12-16T12:30:37Z",
      "author_association": "MEMBER",
      "body": "ACK fee88237e03c21bf81f21098e6b89ecfa5327cee 🐼\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK fee88237e03c21bf81f21098e6b89ecfa5327cee 🐼\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUiu/Av/RLQ2/lM0mJ7uTlvDebTgk57QGAdIs4rv+t9X7wUizqNhEjFHU2KC0HS0\r\nhU6QjHZelMuy0IvIRrcT33LCZkczPQbEQ4ZMAV5VZhuRNvAisi1PHxueX5U+oT83\r\nUKS899fiy7VN3RD7g7E/sMDNuGAo1hSV7MgYQMOlCG8dSJ3bbuF2d1jNEYqJQ7oa\r\nMkmdtB0SwvCOtZyvcsVDI8yC8UJ5r2ybgE+bYfMK9BzMUyWQriWmOnoVQBrnwb5j\r\nZr7g/4pnq04078EuaBVP981P+Pc4pj6Eo63iIinabl74aLU3hsHa0bnUCkpihBSg\r\nstooipOqKXQsOS/jI1XyElhclE3EolEE6+0QIXFpx3H7AlkovPdF/LeeezH0dVDB\r\nhSl7VrdKrTxP7kjSBKBMOiPbzBdVSqo6ktaqhBI7YXlDepR7V54/PlDs7QEcM91r\r\n3iEvD/wbMFJQZHzHEbmCINPXBwdOh9MleFgm0dgTMor7djOpaxgbYq/2Y5Bx4/4K\r\ns1ZuLUUS\r\n=f3JL\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `fb125172e7abd1e8e484ae4f527e5e86e05737d1b1e006310dca8dbb38203afc  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e892940108fb125172e7abd1e8e484ae4f527e5e86e05737d1b1e006310dca8dbb38203afcf01021bd9625059be8619f831b67c585e18708fff01047bc36d91c428388a4477ef64b7e946e08f1207a5438daa431ce45f7483dec3c3dbf3b7d8834007f7c23a78aa2a27d6e64087508f1045fd9fde2f008063996b0f7f67d2c0083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff01061190039bdd1fbfbabee96c824f4a40e08f12071c03c42d2b08d21b3b13974e874eb9a28988e8ad3d8ba93d17e43b9faa3f3b708f1045fd9fde1f0089052e62b0b37905f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010b3f711330b0e9f7c1217942c198ef08108f02028c6ec707950e038eefb921e4bb2ab74cd13c60d03bcc17dbc9ab8cab9c5f20a08f120d9e9f61eeeba3a6da1845028e41b8e7072429c02b168ba997847f36474941b5208f020c0e631cbe0b411022c8fb6a38cf34212b9bbd91125314d7ee3627dd30e03606c08f1045fd9fde2f008e67a6537946812580083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010fea4c6daa41c07668282ff82e88a6e4808f1207d4951d5924eeae2fde3701dafb4f4b7d4da87674f902db740b5f9542a90607208f02083062c158565455dad7a807a546fab2433a251138f8665ab19c4fafc960e120108f0206c7957cbeb8becfd6bbf12fb19d778c276c0f53775dca11bb6d1cfa71985adcb08f1045fd9fde2f008784c47c1cbfbe60a0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746217675",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20477"
    },
    {
      "event": "merged",
      "id": 4119469441,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDExOTQ2OTQ0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4119469441",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b440c33179e777bfebb8c12840e06ea691a4868f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b440c33179e777bfebb8c12840e06ea691a4868f",
      "created_at": "2020-12-16T12:33:46Z"
    },
    {
      "event": "closed",
      "id": 4119469464,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDExOTQ2OTQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4119469464",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-16T12:33:47Z"
    },
    {
      "event": "referenced",
      "id": 4123405680,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQxMjM0MDU2ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4123405680",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "24939efb29c8e180961d275034d2b1abce32b537",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/24939efb29c8e180961d275034d2b1abce32b537",
      "created_at": "2020-12-17T05:52:51Z"
    },
    {
      "event": "referenced",
      "id": 4528064372,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MjgwNjQzNzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4528064372",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "dede9eb9247363aacc3816c7352494a3609fa28b",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dede9eb9247363aacc3816c7352494a3609fa28b",
      "created_at": "2021-03-30T14:21:13Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4577822350,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0NTc3ODIyMzUw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4577822350",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-10T19:43:21Z"
    },
    {
      "event": "referenced",
      "id": 4889426488,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4ODk0MjY0ODg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4889426488",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f9de217f491295fce28c36878fa80310a6a247f9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/f9de217f491295fce28c36878fa80310a6a247f9",
      "created_at": "2021-06-15T06:14:49Z"
    },
    {
      "event": "referenced",
      "id": 4891348261,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ4OTEzNDgyNjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4891348261",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e284ab5f4cfe2cbccecb112c6e925e299fd21ff9",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e284ab5f4cfe2cbccecb112c6e925e299fd21ff9",
      "created_at": "2021-06-15T12:32:03Z"
    },
    {
      "event": "locked",
      "id": 7199117752,
      "node_id": "LOE_lADOABII584sryvSzwAAAAGtGdG4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199117752",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:19:54Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346",
      "pull_request_review_id": 543891357,
      "id": 535175346,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE3NTM0Ng==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "path": "src/net.cpp",
      "position": 92,
      "original_position": 92,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please move this doc-comment to the header, it's an exported function now.",
      "created_at": "2020-12-03T12:12:21Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535175346"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 973,
      "original_line": 973,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838",
      "pull_request_review_id": 544573341,
      "id": 535748838,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0ODgzOA==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it be valuable to break this out into the various reasons the peers are protected from eviction? For example:\r\n\r\nIn src/net.h\r\n```\r\nconst int PEERS_PROTECTED_BY_NET_GROUP = 4                \r\n```\r\n\r\nIn src/net.cpp\r\n```\r\nEraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, PEERS_PROTECTED_BY_NET_GROUP);\r\n```\r\n\r\nIn src/test/net_tests.cpp:\r\n```\r\nGUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = PEERS_PROTECTED_BY_NET_GROUP + ... + 1\r\n```",
      "created_at": "2020-12-04T00:35:09Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535748838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 820,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650",
      "pull_request_review_id": 544573341,
      "id": 535751650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MTY1MA==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is this the highest such number at which non-eviction is guaranteed? If so, could you help me understand how we get 20?",
      "created_at": "2020-12-04T00:42:48Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535751650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762",
      "pull_request_review_id": 544573341,
      "id": 535833762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzMzc2Mg==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "path": "src/net.cpp",
      "position": 125,
      "original_position": 126,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "in_reply_to_id": null,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would it make sense to use `emplace_back` here?",
      "created_at": "2020-12-04T04:49:36Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/535833762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1006,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248",
      "pull_request_review_id": 544988209,
      "id": 536124248,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyNDI0OA==",
      "diff_hunk": "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is a silent merge conflict with master. `NODISCARD` should be replaced with `[[nodiscard]]`",
      "created_at": "2020-12-04T14:07:59Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536124248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812",
      "pull_request_review_id": 544988209,
      "id": 536129812,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyOTgxMg==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why is this called with `cs_vNodes` held? Previously, we'd release the lock before running through this logic.",
      "created_at": "2020-12-04T14:16:33Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536129812"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595",
      "pull_request_review_id": 544988209,
      "id": 536131595,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTU5NQ==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the reason for the `std::move` here? Why not just pass this as an lvalue reference?",
      "created_at": "2020-12-04T14:19:11Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724",
      "pull_request_review_id": 544988209,
      "id": 536131724,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMTcyNA==",
      "diff_hunk": "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why return a `NodeEvictionCandidate` optional here, when only the NodeId is used? I think it'd be better to return an `Optional<NodeId>`",
      "created_at": "2020-12-04T14:19:19Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536131724"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393",
      "pull_request_review_id": 544988209,
      "id": 536133393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzMzM5Mw==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can create duplicate node ids, which isn't possible in the product code.",
      "created_at": "2020-12-04T14:21:49Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536133393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247",
      "pull_request_review_id": 544988209,
      "id": 536134247,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNDI0Nw==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this break if there are multiple eviction candidates with the same id?",
      "created_at": "2020-12-04T14:23:02Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536134247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 803,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582",
      "pull_request_review_id": 544988209,
      "id": 536135582,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNTU4Mg==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nconstexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\r\n```",
      "created_at": "2020-12-04T14:24:57Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536135582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 820,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843",
      "pull_request_review_id": 544988209,
      "id": 536137843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEzNzg0Mw==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think if you just constructed the `NodeEvictionCandidate`s with sequential node id numbers, you wouldn't need to do this here.",
      "created_at": "2020-12-04T14:28:10Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536137843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068",
      "pull_request_review_id": 545034386,
      "id": 536161068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE2MTA2OA==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536129812,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. It can be moved to the outer scope. Thanks!\r\n\r\nContext: https://github.com/bitcoin/bitcoin/pull/19972#discussion_r518136772",
      "created_at": "2020-12-04T15:01:09Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536161068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109",
      "pull_request_review_id": 545094164,
      "id": 536209109,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTEwOQ==",
      "diff_hunk": "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536124248,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Fixed!",
      "created_at": "2020-12-04T16:09:29Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209109"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322",
      "pull_request_review_id": 545094164,
      "id": 536209322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTMyMg==",
      "diff_hunk": "@@ -910,43 +896,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+NODISCARD Optional<NodeEvictionCandidate> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 43,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536131724,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense. Feedback addressed!",
      "created_at": "2020-12-04T16:09:47Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505",
      "pull_request_review_id": 545094164,
      "id": 536209505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTUwNQ==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.",
      "path": "src/net.cpp",
      "position": 92,
      "original_position": 92,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 535175346,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. Done!",
      "created_at": "2020-12-04T16:10:06Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 973,
      "original_line": 973,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802",
      "pull_request_review_id": 545094164,
      "id": 536209802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTgwMg==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536131595,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "rvalue ref was suggested by @sipa: see  https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066 for rationale.",
      "created_at": "2020-12-04T16:10:33Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536209802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032",
      "pull_request_review_id": 545094164,
      "id": 536211032,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTAzMg==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536133393,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now setting `id` to `i` directly making it unique. Instead of relying on the caller doing this :)",
      "created_at": "2020-12-04T16:12:19Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 780,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787",
      "pull_request_review_id": 545094164,
      "id": 536211787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMTc4Nw==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536134247,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the code was relying on the caller making sure the candidate ids are unique. Now doing that in `GetRandomNodeEvictionCandidates` as suggested.",
      "created_at": "2020-12-04T16:13:31Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536211787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 803,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035",
      "pull_request_review_id": 545094164,
      "id": 536212035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjAzNQ==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536135582,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is nicer. Addressed!",
      "created_at": "2020-12-04T16:13:53Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 820,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266",
      "pull_request_review_id": 545094164,
      "id": 536212266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIxMjI2Ng==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;\n+\n+const int NODE_EVICTION_TEST_ROUNDS = 10;\n+\n+const int NODE_EVICTION_TEST_UP_TO_N_NODES = 200;\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }\n+\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate, const size_t idx) {\n+                    candidate.id = idx;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536137843,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. Done!",
      "created_at": "2020-12-04T16:14:17Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536212266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 856,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598",
      "pull_request_review_id": 545094164,
      "id": 536421598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMTU5OA==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW = 20;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 535751650,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, but I'm afraid I cannot help you with that at the moment: so far it is a purely an empirical/experimental result :D\r\n\r\nCounterexamples or proofs welcome! :)",
      "created_at": "2020-12-04T22:29:32Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536421598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191",
      "pull_request_review_id": 545094164,
      "id": 536423191,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzE5MQ==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int i = 0; i < n_candidates; ++i) {\n+        candidates.push_back({/* id */ static_cast<NodeId>(random_context.randrange(100)),\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeEvictionCandidate> evicted_node = SelectNodeToEvict(std::move(shuffled_candidates));\n+    if (!evicted_node) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), evicted_node->id) != node_ids.end();\n+}\n+\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&, const size_t)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i], i);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+const int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE = 29;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 535748838,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that is a good idea but I kind of like that this PR doesn't touch the actual selection code (keeping the diff at a minimum). I'd like to keep it that way but I'd be glad to review a change like the one suggested in a trivial \"introduce constants\" PR:).",
      "created_at": "2020-12-04T22:33:26Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536423191"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 820,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923",
      "pull_request_review_id": 545353983,
      "id": 536434923,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQzNDkyMw==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);",
      "path": "src/net.cpp",
      "position": 125,
      "original_position": 126,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "75f056fe19eb6a9b4d5e00846e39e1f5618814f3",
      "in_reply_to_id": 535833762,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm afraid that won't be possible until C++20¹ :) See [P0960: \"Allow initializing aggregates from a parenthesized list of values\" ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0960r0.html).\r\n\r\n¹ Assuming you mean without adding a new ctor to `NodeEvictionCandidate`.",
      "created_at": "2020-12-04T23:03:04Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/536434923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1006,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405558",
      "pull_request_review_id": 546027700,
      "id": 537405558,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQwNTU1OA==",
      "diff_hunk": "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <attributes.h>",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No longer needed since you removed `NODISCARD`",
      "created_at": "2020-12-07T10:45:04Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537405558",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537405558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537411893",
      "pull_request_review_id": 546027700,
      "id": 537411893,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQxMTg5Mw==",
      "diff_hunk": "@@ -1016,7 +967,51 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front();\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    Optional<NodeEvictionCandidate> node_to_evict;\n+    {\n+        std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+        node_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "2c62fb607cd6e1944ec192d99d4ea2370364b1bd",
      "in_reply_to_id": 536131595,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that `SelectNodeToEvict()` is going to keep ownership of `vEvictionCandidates` and you're using move semantics to avoid a copy, but that's not actually happening here.\r\n\r\nThere's no harm in using `&&` and `move` here, but it's unnecessary and possibly confusing.",
      "created_at": "2020-12-07T10:54:49Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537411893"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1009,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537422516",
      "pull_request_review_id": 546047804,
      "id": 537422516,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyMjUxNg==",
      "diff_hunk": "@@ -771,4 +773,125 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this function and the other `IsEvicted()` could use a very short comment to explain the interface (here: returns true if any of the node ids in `node_ids` are selected for eviction).",
      "created_at": "2020-12-07T11:11:45Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537422516",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537422516"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 796,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537443914",
      "pull_request_review_id": 546072994,
      "id": 537443914,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0MzkxNA==",
      "diff_hunk": "@@ -9,6 +9,7 @@\n \n #include <net.h>\n \n+#include <attributes.h>",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "in_reply_to_id": 537405558,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed!",
      "created_at": "2020-12-07T11:47:33Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537443914",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537443914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 12,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537444057",
      "pull_request_review_id": 546073155,
      "id": 537444057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ0NDA1Nw==",
      "diff_hunk": "@@ -771,4 +773,125 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "071b4cdd5078fa81f64712691a7bf1915b05487f",
      "in_reply_to_id": 537422516,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed!",
      "created_at": "2020-12-07T11:47:47Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537444057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537444057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 796,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537478449",
      "pull_request_review_id": 546113968,
      "id": 537478449,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQ3ODQ0OQ==",
      "diff_hunk": "@@ -771,4 +773,129 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(const std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> shuffled_candidates = candidates;\n+    Shuffle(shuffled_candidates.begin(), shuffled_candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(shuffled_candidates);",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "ccc8162b2226977b3d5ccfd1ebec5426650b4924",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to shuffle in place?\r\n\r\n```suggestion\r\nbool IsEvicted(std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\r\n{\r\n    Shuffle(candidates.begin(), candidates.end(), random_context);\r\n    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(candidates);\r\n```",
      "created_at": "2020-12-07T12:45:46Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537478449",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537478449"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": 796,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 800,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539494448",
      "pull_request_review_id": 548414271,
      "id": 539494448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQ5NDQ0OA==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": null,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Please add some justification for these numbers, even if it's a description of the simulation/test you ran to get them. I don't understand how this 29 is guaranteed and the 20 is guaranteed below. \r\n\r\nThis reply makes it sound like it's *not* guaranteed?\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",
      "created_at": "2020-12-09T17:17:51Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539494448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539494448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 823,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539501185",
      "pull_request_review_id": 548422399,
      "id": 539501185,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwMTE4NQ==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": null,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're not running the following checks if the number of nodes is between the min and the max because of this `continue`. Is that the intention?\r\n\r\n~~Edit: ignore me! I'm looking at the wrong for loop.~~\r\n\r\nEdit again: Nope, I think I was right the first time...",
      "created_at": "2020-12-09T17:26:59Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539501185",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539501185"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 852,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539520484",
      "pull_request_review_id": 548445861,
      "id": 539520484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyMDQ4NA==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": 539494448,
      "user": {
        "login": "narula",
        "id": 177646,
        "node_id": "MDQ6VXNlcjE3NzY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/narula",
        "html_url": "https://github.com/narula",
        "followers_url": "https://api.github.com/users/narula/followers",
        "following_url": "https://api.github.com/users/narula/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/narula/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/narula/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
        "organizations_url": "https://api.github.com/users/narula/orgs",
        "repos_url": "https://api.github.com/users/narula/repos",
        "events_url": "https://api.github.com/users/narula/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/narula/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good discussion in PR review club about it today and @jonatack pointed out justification for the 20 is in `test/functional/p2p_eviction.py`.",
      "created_at": "2020-12-09T17:51:52Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539520484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539520484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 823,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539527990",
      "pull_request_review_id": 548454663,
      "id": 539527990,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzk5MA==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": 539501185,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't get this either",
      "created_at": "2020-12-09T18:02:31Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539527990",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539527990"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 852,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539574518",
      "pull_request_review_id": 548523190,
      "id": 539574518,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NDUxOA==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;\n+            }",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": null,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm a HUGE supporter of the early return pattern (AKA bouncer pattern) that you're using here.  However, maybe this alternative is a little easier to parse.\r\n\r\n(Maybe not in this annoyingly narrow GitHub window though...)\r\n\r\n```suggestion\r\n            if (number_of_nodes < GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\r\n            \t// Verify correctness of GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW\r\n            \tif (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\r\n            \t\t// At this number of nodes, we're guaranteed to never evict any of them\r\n                \tBOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\r\n                }\r\n            \t// There is no need to run the sub-tests for fewer than the number of nodes guaranteed for eviction\r\n            \t// ^ FWIW I don't agree with this, see below\r\n            \tcontinue;\r\n            }\r\n            // number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\r\n            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\r\n            BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));  \r\n```\r\n\r\nHonestly though, I think it's just the similarity between the names of `GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE` and `GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW` that is making this so difficult.  Maybe (maybe...) `EVICTION_THRESHOLD` and `NON_EVICTION_THRESHOLD` and put the fact that it's inclusive on both ends in the comments?  Or follow the half-open convention of \"lower bounds are inclusive, upper bounds are exclusive\". Popular in Python, not sure about C++.\r\n\r\nAll of this said, why have the early return at all?  All of the tests below check for non-eviction.  Can't we run them regardless of the number of nodes?\r\n\r\n(Feel free to reword my code comments)",
      "created_at": "2020-12-09T19:12:08Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539574518",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539574518"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": 844,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539575650",
      "pull_request_review_id": 548524518,
      "id": 539575650,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NTY1MA==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": 539501185,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've proposed an alternative that might be easier to parse.\r\nhttps://github.com/bitcoin/bitcoin/pull/20477/files#r539574518",
      "created_at": "2020-12-09T19:13:56Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539575650",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539575650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 852,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539588477",
      "pull_request_review_id": 548539426,
      "id": 539588477,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU4ODQ3Nw==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": 539501185,
      "user": {
        "login": "troygiorshev",
        "id": 5553787,
        "node_id": "MDQ6VXNlcjU1NTM3ODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5553787?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/troygiorshev",
        "html_url": "https://github.com/troygiorshev",
        "followers_url": "https://api.github.com/users/troygiorshev/followers",
        "following_url": "https://api.github.com/users/troygiorshev/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/troygiorshev/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/troygiorshev/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/troygiorshev/subscriptions",
        "organizations_url": "https://api.github.com/users/troygiorshev/orgs",
        "repos_url": "https://api.github.com/users/troygiorshev/repos",
        "events_url": "https://api.github.com/users/troygiorshev/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/troygiorshev/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's \"don't run the checks if the number of nodes is less than the max\".  But, I'm not sure why we would do this...",
      "created_at": "2020-12-09T19:33:27Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539588477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539588477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 852,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539703493",
      "pull_request_review_id": 548675335,
      "id": 539703493,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcwMzQ5Mw==",
      "diff_hunk": "@@ -771,4 +773,128 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+// The number of eviction candidates at (or above) which we are guaranteed that\n+// the current eviction logic will find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n+\n+// The number of eviction candidates at (or below) which we are guaranteed that\n+// the current eviction logic won't find a node to evict no matter what eviction\n+// candidates it is given. This constant may need to be adjusted if the eviction\n+// logic changes.\n+constexpr int GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW{20};\n+\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+static_assert(GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE > GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW);\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Verify correctness of GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE\n+            // and GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW.\n+            if (number_of_nodes <= GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW) {\n+                BOOST_CHECK(!SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            }\n+            if (number_of_nodes >= GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n+                BOOST_CHECK(SelectNodeToEvict(GetRandomNodeEvictionCandidates(number_of_nodes, random_context)));\n+            } else {\n+                continue;",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "cadd93f35d1bbf662e348a0dee172cdf4af6a903",
      "in_reply_to_id": 539501185,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@narula Oh, good catch! The `continue` should be dropped. I don't remember what the apparently incorrect reasoning behind it was TBH :)\r\n\r\nThanks for catching it!",
      "created_at": "2020-12-09T22:42:40Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539703493",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539703493"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 852,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540053825",
      "pull_request_review_id": 549056756,
      "id": 540053825,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1MzgyNQ==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Eight nodes with the lowest minimum ping time should be protected\n+            // from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n+                    candidate.nMinPingUsecTime = candidate.id;\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four nodes that most recently sent us novel transactions accepted\n+            // into our mempool should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Four non-tx-relay peers that most recently sent us novel blocks",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The comment here says 'four', but the code below is asserting that 8 non-tx-relay candidates are protected.",
      "created_at": "2020-12-10T10:29:15Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540053825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540053825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540149894",
      "pull_request_review_id": 549171994,
      "id": 540149894,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE0OTg5NA==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: could use ranged for loop?",
      "created_at": "2020-12-10T13:01:13Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540149894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540149894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 812,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540152339",
      "pull_request_review_id": 549171994,
      "id": 540152339,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1MjMzOQ==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();",
      "path": "src/test/net_tests.cpp",
      "position": 49,
      "original_position": 47,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how is this different from a less verbose \r\n```suggestion\r\n    return node_ids.find(*evicted_node_id) != node_ids.end();\r\n```",
      "created_at": "2020-12-10T13:05:02Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540152339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540152339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 805,
      "original_line": 805,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540154370",
      "pull_request_review_id": 549171994,
      "id": 540154370,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1NDM3MA==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "style-nit: Adding a trailing comma here would not only make future diffs smaller if they add a new member, but also eat the extraneous whitespace at the beginning of the line.",
      "created_at": "2020-12-10T13:08:16Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540154370",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540154370"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528310",
      "pull_request_review_id": 549638475,
      "id": 540528310,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODMxMA==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();",
      "path": "src/test/net_tests.cpp",
      "position": 49,
      "original_position": 47,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": 540152339,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`std::vector` doesn't have a `find` function. Perhaps you were thinking of `std::map` or `std::set`? :)",
      "created_at": "2020-12-10T22:00:44Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528310",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 805,
      "original_line": 805,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528651",
      "pull_request_review_id": 549638895,
      "id": 540528651,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODY1MQ==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": 540149894,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, of course. A prior version used the index. Thanks!",
      "created_at": "2020-12-10T22:01:21Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528651",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528651"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 812,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528828",
      "pull_request_review_id": 549639076,
      "id": 540528828,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODgyOA==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": 540154370,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point! Thanks!",
      "created_at": "2020-12-10T22:01:38Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540528828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 790,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540556849",
      "pull_request_review_id": 549676145,
      "id": 540556849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1Njg0OQ==",
      "diff_hunk": "@@ -771,4 +773,102 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({/* id */ id,\n+                              /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+                              /* fRelevantServices */ random_context.randbool(),\n+                              /* fRelayTxes */ random_context.randbool(),\n+                              /* fBloomFilter */ random_context.randbool(),\n+                              /* nKeyedNetGroup */ random_context.randrange(100),\n+                              /* prefer_evict */ random_context.randbool(),\n+                              /* m_is_local */ random_context.randbool()});\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (size_t i = 0; i < candidates.size(); ++i) {\n+        candidate_setup_fn(candidates[i]);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nKeyedNetGroup = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Eight nodes with the lowest minimum ping time should be protected\n+            // from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [](NodeEvictionCandidate& candidate) {\n+                    candidate.nMinPingUsecTime = candidate.id;\n+                },\n+                {0, 1, 2, 3, 4, 5, 6, 7}, random_context));\n+\n+            // Four nodes that most recently sent us novel transactions accepted\n+            // into our mempool should be protected from eviction.\n+            BOOST_CHECK(!IsEvicted(\n+                number_of_nodes, [number_of_nodes](NodeEvictionCandidate& candidate) {\n+                    candidate.nLastTXTime = number_of_nodes - candidate.id;\n+                },\n+                {0, 1, 2, 3}, random_context));\n+\n+            // Four non-tx-relay peers that most recently sent us novel blocks",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 97,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "d32c53fe64d1723f8b5952fe5943bfc6ae3c87d4",
      "in_reply_to_id": 540053825,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch. There are two `nLastBlockTime` based protections: that's why more than four are protected in practice in this specific test case. Now testing the two different `nLastBlockTime` protections a.) independently and b.) jointly.",
      "created_at": "2020-12-10T22:53:33Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540556849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540556849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 853,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540580372",
      "pull_request_review_id": 549697000,
      "id": 540580372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MDM3Mg==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": null,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the previous version of the test, we tested:\r\n\r\n1. No eviction happens with <= 20 peers\r\n2. An eviction happens with >= 29 peers\r\n3. If an eviction happens, the protected peers are not evicted\r\n\r\nIn the new version, we are checking that the protected peers are not evicted in any situation (3). The last test case covers for (1). However, the test will not alert if an eviction does not happen when it should (>= 29 peers). Am I missing something?\r\n\r\nPersonally, I found the GUARANTEED_EVICTION_THRESHOLD and GUARANTEED_NON_EVICTION_THRESHOLD valuable to test and also as documentation.",
      "created_at": "2020-12-10T23:36:48Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540580372",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540580372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540728197",
      "pull_request_review_id": 549839330,
      "id": 540728197,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDcyODE5Nw==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@dhruv I can re-add it if someone has time to figure out the actual logic behind the constant 29. I haven't had time to back my empirical observation (via simulation) with proper analysis. Help welcome! :)",
      "created_at": "2020-12-11T06:50:12Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540728197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/540728197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541039284",
      "pull_request_review_id": 550212407,
      "id": 541039284,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTAzOTI4NA==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "From PR Review club:\r\n\r\n**Q: Why is eviction guaranteed if we have at least 29 eviction candidates?**\r\n\r\nThe code in net.cpp (https://github.com/bitcoin/bitcoin/blob/fabecce/src/net.cpp#L954-L968) protects at most 28 peers from eviction (4 by net group, 8 by lowest ping time, 4 by last time of novel tx, up to 8 non-tx-relay peers by last novel block time, and 4 more peers by last novel block time). So any additional peers are guaranteed to be candidates for eviction.\r\n\r\n**Q: Why is non-eviction guaranteed if we have no more than 20 eviction candidates? Is 20 the highest number of nodes that guarantees non-eviction?**\r\n\r\nThe protection at [net.cpp::961](https://github.com/bitcoin/bitcoin/blob/fabecce/src/net.cpp#L961) for up to 8 non-tx-relay peers may, or may not apply to the randomly generated eviction candidates since `!n.fRelayTxes && n.fRelevantServices` will evaluate to `randbool`. So we cannot count them in the _guaranteed_ non-eviction? \r\n\r\nSo, guaranteed non-eviction is only on 4(CompareNetGroupKeyed) + 8(ReverseCompareNodeMinPingTime) + 4(CompareNodeTXTime) + 4(CompareNodeBlockTime) = 20.",
      "created_at": "2020-12-11T15:43:48Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541039284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541039284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541058759",
      "pull_request_review_id": 550236824,
      "id": 541058759,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1ODc1OQ==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@practicalswift the review club meeting log about your PR is here, if useful: https://bitcoincore.reviews/20477 ",
      "created_at": "2020-12-11T16:12:13Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541058759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/541058759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543441452",
      "pull_request_review_id": 552574280,
      "id": 543441452,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ0MTQ1Mg==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Now assert eviction at >= 29 candidates and non-eviction at <= 20 candidates. Please re-review :)",
      "created_at": "2020-12-15T15:24:38Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543441452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543441452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543514057",
      "pull_request_review_id": 552664110,
      "id": 543514057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNDA1Nw==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think these <=20/>=29 tests are very useful, will need to be updated whenever any changes are made to the eviction logic, and aren't very realistic (in general, nodes have many more than 29 inbound slots).",
      "created_at": "2020-12-15T16:52:39Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543514057",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543514057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543523003",
      "pull_request_review_id": 552674487,
      "id": 543523003,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyMzAwMw==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll happily adjust to the consensus opinion, but I'll let others chime in before changing anything in order to avoid another round of change+revert :)",
      "created_at": "2020-12-15T17:03:18Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543523003",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543523003"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543627802",
      "pull_request_review_id": 552799150,
      "id": 543627802,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzYyNzgwMg==",
      "diff_hunk": "@@ -771,4 +773,133 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates = GetRandomNodeEvictionCandidates(number_of_nodes, random_context);\n+    for (NodeEvictionCandidate& candidate : candidates) {\n+        candidate_setup_fn(candidate);\n+    }\n+    return IsEvicted(candidates, node_ids, random_context);\n+}\n+\n+namespace {\n+constexpr int NODE_EVICTION_TEST_ROUNDS{10};\n+constexpr int NODE_EVICTION_TEST_UP_TO_N_NODES{200};\n+} // namespace\n+\n+BOOST_AUTO_TEST_CASE(node_eviction_test)\n+{\n+    FastRandomContext random_context{true};\n+\n+    for (int i = 0; i < NODE_EVICTION_TEST_ROUNDS; ++i) {\n+        for (int number_of_nodes = 0; number_of_nodes < NODE_EVICTION_TEST_UP_TO_N_NODES; ++number_of_nodes) {\n+            // Four nodes with the highest keyed netgroup values should be\n+            // protected from eviction.\n+            BOOST_CHECK(!IsEvicted(",
      "path": "src/test/net_tests.cpp",
      "position": 77,
      "original_position": 77,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "6767d63d02cc8a670f3d409db1c78a77fdcb5363",
      "in_reply_to_id": 540580372,
      "user": {
        "login": "dhruv",
        "id": 856960,
        "node_id": "MDQ6VXNlcjg1Njk2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/856960?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dhruv",
        "html_url": "https://github.com/dhruv",
        "followers_url": "https://api.github.com/users/dhruv/followers",
        "following_url": "https://api.github.com/users/dhruv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dhruv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dhruv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dhruv/subscriptions",
        "organizations_url": "https://api.github.com/users/dhruv/orgs",
        "repos_url": "https://api.github.com/users/dhruv/repos",
        "events_url": "https://api.github.com/users/dhruv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dhruv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Even if we remove the <=20 assertion, we are already checking non-eviction <=20 (it's implicit in the tests). So the tests will need need to updated when changes are made anyway. I am not sure I understand why that's undesirable.\r\n\r\nI think it is useful to test that eviction does indeed happen (not just that protections are provided) when it should. After all, `SelectNodeToEvict` should select a node to evict :) Without the >=29 assertion, does this test guarantee that?\r\n\r\nAll that said, @jnewbery is infinitely more qualified than I am. I'm happy with whatever you all decide and will learn from it.",
      "created_at": "2020-12-15T19:30:21Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543627802",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/543627802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 833,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544197436",
      "pull_request_review_id": 553565563,
      "id": 544197436,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NzQzNg==",
      "diff_hunk": "@@ -910,43 +895,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": 43,
      "original_position": 35,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fbba7d8aada5b1d7a63ad4133 add `#include <optional.h>` header\r\n\r\nperhaps call this `SelectConnectionToEvict()` for symmetry with `AttemptToEvictConnection()`, or `SelectPeerToEvict()` as a peer is a node that is not ours",
      "created_at": "2020-12-16T10:48:38Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544197436",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544197436"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 899,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544198510",
      "pull_request_review_id": 553566807,
      "id": 544198510,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5ODUxMA==",
      "diff_hunk": "@@ -1016,10 +966,52 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front().id;\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+    {\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+    }\n+    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fbba7d8aada5b1d7a63ad4 could be const",
      "created_at": "2020-12-16T10:50:11Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544198510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544198510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1008,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544209146",
      "pull_request_review_id": 553579878,
      "id": 544209146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTE0Ng==",
      "diff_hunk": "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6767d63d02cc8a670f3d409db1 ref to const?\r\n```suggestion\r\nbool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\r\n```",
      "created_at": "2020-12-16T11:07:04Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544209146",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544209146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544211318",
      "pull_request_review_id": 553582377,
      "id": 544211318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIxMTMxOA==",
      "diff_hunk": "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "6767d63d02cc8a670f3d409 ref to const here as well\r\n```suggestion\r\nbool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\r\n```",
      "created_at": "2020-12-16T11:10:19Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544211318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544211318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544240631",
      "pull_request_review_id": 553616736,
      "id": 544240631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MDYzMQ==",
      "diff_hunk": "@@ -910,43 +895,8 @@ static void EraseLastKElements(std::vector<T> &elements, Comparator comparator,\n     elements.erase(elements.end() - eraseSize, elements.end());\n }\n \n-/** Try to find a connection to evict when the node is full.\n- *  Extreme care must be taken to avoid opening the node to attacker\n- *   triggered network partitioning.\n- *  The strategy used here is to protect a small number of peers\n- *   for each of several distinct characteristics which are difficult\n- *   to forge.  In order to partition a node the attacker must be\n- *   simultaneously better at all of them than honest peers.\n- */\n-bool CConnman::AttemptToEvictConnection()\n+[[nodiscard]] Optional<NodeId> SelectNodeToEvict(std::vector<NodeEvictionCandidate>&& vEvictionCandidates)",
      "path": "src/net.cpp",
      "position": 43,
      "original_position": 35,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": 544197436,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now including `optional.h`.\r\n\r\nRegarding the naming: I see your point but given `NodeEvictionCandidate` inputs I think `SelectNodeToEvict` works.",
      "created_at": "2020-12-16T11:58:08Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544240631",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544240631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 899,
      "original_line": 899,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241023",
      "pull_request_review_id": 553617204,
      "id": 544241023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTAyMw==",
      "diff_hunk": "@@ -1016,10 +966,52 @@ bool CConnman::AttemptToEvictConnection()\n     vEvictionCandidates = std::move(mapNetGroupNodes[naMostConnections]);\n \n     // Disconnect from the network group with the most connections\n-    NodeId evicted = vEvictionCandidates.front().id;\n+    return vEvictionCandidates.front().id;\n+}\n+\n+/** Try to find a connection to evict when the node is full.\n+ *  Extreme care must be taken to avoid opening the node to attacker\n+ *   triggered network partitioning.\n+ *  The strategy used here is to protect a small number of peers\n+ *   for each of several distinct characteristics which are difficult\n+ *   to forge.  In order to partition a node the attacker must be\n+ *   simultaneously better at all of them than honest peers.\n+ */\n+bool CConnman::AttemptToEvictConnection()\n+{\n+    std::vector<NodeEvictionCandidate> vEvictionCandidates;\n+    {\n+\n+        LOCK(cs_vNodes);\n+        for (const CNode* node : vNodes) {\n+            if (node->HasPermission(PF_NOBAN))\n+                continue;\n+            if (!node->IsInboundConn())\n+                continue;\n+            if (node->fDisconnect)\n+                continue;\n+            bool peer_relay_txes = false;\n+            bool peer_filter_not_null = false;\n+            if (node->m_tx_relay != nullptr) {\n+                LOCK(node->m_tx_relay->cs_filter);\n+                peer_relay_txes = node->m_tx_relay->fRelayTxes;\n+                peer_filter_not_null = node->m_tx_relay->pfilter != nullptr;\n+            }\n+            NodeEvictionCandidate candidate = {node->GetId(), node->nTimeConnected, node->nMinPingUsecTime,\n+                                               node->nLastBlockTime, node->nLastTXTime,\n+                                               HasAllDesirableServiceFlags(node->nServices),\n+                                               peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n+                                               node->m_prefer_evict, node->addr.IsLocal()};\n+            vEvictionCandidates.push_back(candidate);\n+        }\n+    }\n+    Optional<NodeId> node_id_to_evict = SelectNodeToEvict(std::move(vEvictionCandidates));",
      "path": "src/net.cpp",
      "position": null,
      "original_position": 120,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": 544198510,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch! Fixed!",
      "created_at": "2020-12-16T11:58:48Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241023",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1008,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241063",
      "pull_request_review_id": 553617250,
      "id": 544241063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTA2Mw==",
      "diff_hunk": "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": 544209146,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch! Fixed!",
      "created_at": "2020-12-16T11:58:52Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241063",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 798,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241113",
      "pull_request_review_id": 553617315,
      "id": 544241113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI0MTExMw==",
      "diff_hunk": "@@ -771,4 +773,147 @@ BOOST_AUTO_TEST_CASE(PoissonNextSend)\n     g_mock_deterministic_tests = false;\n }\n \n+std::vector<NodeEvictionCandidate> GetRandomNodeEvictionCandidates(const int n_candidates, FastRandomContext& random_context)\n+{\n+    std::vector<NodeEvictionCandidate> candidates;\n+    for (int id = 0; id < n_candidates; ++id) {\n+        candidates.push_back({\n+            /* id */ id,\n+            /* nTimeConnected */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nMinPingUsecTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastBlockTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* nLastTXTime */ static_cast<int64_t>(random_context.randrange(100)),\n+            /* fRelevantServices */ random_context.randbool(),\n+            /* fRelayTxes */ random_context.randbool(),\n+            /* fBloomFilter */ random_context.randbool(),\n+            /* nKeyedNetGroup */ random_context.randrange(100),\n+            /* prefer_evict */ random_context.randbool(),\n+            /* m_is_local */ random_context.randbool(),\n+        });\n+    }\n+    return candidates;\n+}\n+\n+// Returns true if any of the node ids in node_ids are selected for eviction.\n+bool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n+{\n+    Shuffle(candidates.begin(), candidates.end(), random_context);\n+    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(std::move(candidates));\n+    if (!evicted_node_id) {\n+        return false;\n+    }\n+    return std::find(node_ids.begin(), node_ids.end(), *evicted_node_id) != node_ids.end();\n+}\n+\n+// Create number_of_nodes random nodes, apply setup function candidate_setup_fn,\n+// apply eviction logic and then return true if any of the node ids in node_ids\n+// are selected for eviction.\n+bool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId> node_ids, FastRandomContext& random_context)",
      "path": "src/test/net_tests.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "fee88237e03c21bf81f21098e6b89ecfa5327cee",
      "original_commit_id": "1c9b235c330fe7b9b71f687ef14cb10fe588172b",
      "in_reply_to_id": 544211318,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch! Fixed!",
      "created_at": "2020-12-16T11:58:58Z",
      "updated_at": "2020-12-16T12:00:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241113",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/544241113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20477"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 811,
      "side": "RIGHT"
    }
  ]
}