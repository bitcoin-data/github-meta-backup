{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986",
    "id": 1045077588,
    "node_id": "PR_kwDOABII584-Sp5U",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25986",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25986.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25986.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25986",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25986/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/17cad448516a6906ff637593ab57df332fade5d2",
    "number": 25986,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "test: refactor `RPCPackagesTest` to use `MiniWallet`",
    "user": {
      "login": "w0xlt",
      "id": 94266259,
      "node_id": "U_kgDOBZ5jkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/w0xlt",
      "html_url": "https://github.com/w0xlt",
      "followers_url": "https://api.github.com/users/w0xlt/followers",
      "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
      "organizations_url": "https://api.github.com/users/w0xlt/orgs",
      "repos_url": "https://api.github.com/users/w0xlt/repos",
      "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/w0xlt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR refactors `RPCPackagesTest` to use `MiniWallet` and removes `create_child_with_parents`, `make_chain`, and `create_raw_chain` from `test_framework/wallet`, as requested in https://github.com/bitcoin/bitcoin/issues/25965.\r\n\r\nClose https://github.com/bitcoin/bitcoin/issues/25965.\r\n\r\n",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2022-09-02T16:02:05Z",
    "updated_at": "2022-11-28T18:43:29Z",
    "closed_at": "2022-11-28T11:55:36Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-11-28T11:55:35Z",
    "merge_commit_sha": "00c323610a30572ff15420d68f5432a3cb9757e5",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "w0xlt:issue_25965",
      "ref": "issue_25965",
      "sha": "17cad448516a6906ff637593ab57df332fade5d2",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 427811926,
        "node_id": "R_kgDOGX_kVg",
        "name": "bitcoin",
        "full_name": "w0xlt/bitcoin",
        "owner": {
          "login": "w0xlt",
          "id": 94266259,
          "node_id": "U_kgDOBZ5jkw",
          "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/w0xlt",
          "html_url": "https://github.com/w0xlt",
          "followers_url": "https://api.github.com/users/w0xlt/followers",
          "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
          "organizations_url": "https://api.github.com/users/w0xlt/orgs",
          "repos_url": "https://api.github.com/users/w0xlt/repos",
          "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/w0xlt/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/w0xlt/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/w0xlt/bitcoin",
        "archive_url": "https://api.github.com/repos/w0xlt/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/w0xlt/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/w0xlt/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/w0xlt/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/w0xlt/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/w0xlt/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/w0xlt/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/w0xlt/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/w0xlt/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/w0xlt/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/w0xlt/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/w0xlt/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/w0xlt/bitcoin/events",
        "forks_url": "https://api.github.com/repos/w0xlt/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/w0xlt/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/w0xlt/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/w0xlt/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/w0xlt/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/w0xlt/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/w0xlt/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/w0xlt/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/w0xlt/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/w0xlt/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/w0xlt/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/w0xlt/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/w0xlt/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/w0xlt/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/w0xlt/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/w0xlt/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:w0xlt/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/w0xlt/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/w0xlt/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/w0xlt/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/w0xlt/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/w0xlt/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/w0xlt/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/w0xlt/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/w0xlt/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/w0xlt/bitcoin/hooks",
        "svn_url": "https://github.com/w0xlt/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 5,
        "watchers_count": 5,
        "size": 225653,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-14T07:59:58Z",
        "created_at": "2021-11-14T01:34:01Z",
        "updated_at": "2023-03-22T04:05:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "1730f6cb23cc05445df3266cb21b8846b99427b4",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 126,
    "deletions": 220,
    "changed_files": 2,
    "commits": 1,
    "review_comments": 38,
    "comments": 3
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 7314407814,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAGz-QGG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7314407814",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-02T16:06:51Z"
    },
    {
      "event": "review_requested",
      "id": 7314549365,
      "node_id": "RRE_lADOABII585RFbJLzwAAAAGz-yp1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7314549365",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-02T16:31:47Z",
      "requested_reviewer": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "labeled",
      "id": 7314549956,
      "node_id": "LE_lADOABII585RFbJLzwAAAAGz-yzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7314549956",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-02T16:31:55Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1095178376,
      "node_id": "PRR_kwDOABII585BRxiI",
      "url": null,
      "actor": null,
      "commit_id": "41773da986fddea7c371546ede60ed6764a3c4ab",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The reasoning behind the removal of those functions was that the functionality of those methods can now be replicated with the existing MiniWallet methods. \r\n\r\nI believe that your implementation doesn't fully utilize the MiniWallet methods. See https://github.com/bitcoin/bitcoin/pull/25379 where I did the first part of refactoring `mempool_package_limits.py` which was the other test that was using those functions. ",
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1095178376",
      "submitted_at": "2022-09-02T17:42:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7316770654,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG0HQ9e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7316770654",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T08:19:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7316773715,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG0HRtT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7316773715",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T08:23:17Z"
    },
    {
      "event": "commented",
      "id": 1236074633,
      "node_id": "IC_kwDOABII585JrQCJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236074633",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T08:25:39Z",
      "updated_at": "2022-09-03T08:25:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "@kouloumos Thanks for the tip. I changed all tests to use MiniWallet methods in 10edc9c0d7b686808c040204103da01ed386a3c9.",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1236074633",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25986"
    },
    {
      "event": "mentioned",
      "id": 7316775999,
      "node_id": "MEE_lADOABII585RFbJLzwAAAAG0HSQ_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7316775999",
      "actor": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T08:25:39Z"
    },
    {
      "event": "subscribed",
      "id": 7316776001,
      "node_id": "SE_lADOABII585RFbJLzwAAAAG0HSRB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7316776001",
      "actor": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T08:25:39Z"
    },
    {
      "event": "reviewed",
      "id": 1095489108,
      "node_id": "PRR_kwDOABII585BS9ZU",
      "url": null,
      "actor": null,
      "commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good, some minor comments",
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1095489108",
      "submitted_at": "2022-09-03T11:11:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "commented",
      "id": 1236140765,
      "node_id": "IC_kwDOABII585JrgLd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236140765",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T15:14:25Z",
      "updated_at": "2022-11-28T11:50:12Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [glozow](https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1184945461), [pablomartin4btc](https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1188874367), [kouloumos](https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1189630994) |\n| Approach ACK | [hernanmarino](https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1188662808), [rserranon](https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1323988554) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26403](https://github.com/bitcoin/bitcoin/pull/26403) ([POLICY] Ephemeral anchors by instagibbs)\n* [#25038](https://github.com/bitcoin/bitcoin/pull/25038) (policy: nVersion=3 and Package RBF by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1236140765",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25986"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7317517165,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG0KHNt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7317517165",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T20:00:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7317532368,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG0KK7Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7317532368",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T20:19:46Z"
    },
    {
      "event": "reviewed",
      "id": 1097830340,
      "node_id": "PRR_kwDOABII585Bb4_E",
      "url": null,
      "actor": null,
      "commit_id": "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good, thanks for working on this!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1097830340",
      "submitted_at": "2022-09-06T15:48:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7359988147,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG2sIGz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7359988147",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-10T00:08:33Z"
    },
    {
      "event": "reviewed",
      "id": 1125052275,
      "node_id": "PRR_kwDOABII585DDu9z",
      "url": null,
      "actor": null,
      "commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1125052275",
      "submitted_at": "2022-09-29T10:55:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE3Y2FkNDQ4NTE2YTY5MDZmZjYzNzU5M2FiNTdkZjMzMmZhZGU1ZDI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17cad448516a6906ff637593ab57df332fade5d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2",
      "tree": {
        "sha": "36c881a92d9a346ab73ddae3c5b2b556bd0991ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36c881a92d9a346ab73ddae3c5b2b556bd0991ee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef5bb742f0f57d144db480ad04304ab64474ee1a",
          "sha": "ef5bb742f0f57d144db480ad04304ab64474ee1a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef5bb742f0f57d144db480ad04304ab64474ee1a"
        }
      ],
      "message": "test: refactor `RPCPackagesTest` to use `MiniWallet`",
      "committer": {
        "name": "w0xlt",
        "email": "woltx@protonmail.com",
        "date": "2022-10-04T01:37:40Z"
      },
      "author": {
        "name": "w0xlt",
        "email": "woltx@protonmail.com",
        "date": "2022-09-02T15:54:26Z"
      },
      "sha": "17cad448516a6906ff637593ab57df332fade5d2"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7512131079,
      "node_id": "HRFPE_lADOABII585RFbJLzwAAAAG_wgYH",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7512131079",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-04T01:38:25Z"
    },
    {
      "event": "reviewed",
      "id": 1184945461,
      "node_id": "PRR_kwDOABII585GoNU1",
      "url": null,
      "actor": null,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 17cad448516a6906ff637593ab57df332fade5d2",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1184945461",
      "submitted_at": "2022-11-17T19:35:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "review_requested",
      "id": 7837123981,
      "node_id": "RRE_lADOABII585RFbJLzwAAAAHTIQWN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7837123981",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T19:35:54Z",
      "requested_reviewer": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "reviewed",
      "id": 1188662808,
      "node_id": "PRR_kwDOABII585G2Y4Y",
      "url": null,
      "actor": null,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Approach ACK",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1188662808",
      "submitted_at": "2022-11-21T17:15:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "reviewed",
      "id": 1188874367,
      "node_id": "PRR_kwDOABII585G3Mh_",
      "url": null,
      "actor": null,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tested ACK 17cad44; went thru all changes and recommendations from @kouloumos & @glozow; also went up to #20833 to get a bit of background of the origin and purpose of these tests.",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1188874367",
      "submitted_at": "2022-11-21T20:07:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "reviewed",
      "id": 1189630994,
      "node_id": "PRR_kwDOABII585G6FQS",
      "url": null,
      "actor": null,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 17cad448516a6906ff637593ab57df332fade5d2\r\nlooks good to me, just some minor nits.",
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#pullrequestreview-1189630994",
      "submitted_at": "2022-11-22T15:26:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
    },
    {
      "event": "commented",
      "id": 1323988554,
      "node_id": "IC_kwDOABII585O6nZK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1323988554",
      "actor": {
        "login": "rserranon",
        "id": 77761,
        "node_id": "MDQ6VXNlcjc3NzYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/77761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rserranon",
        "html_url": "https://github.com/rserranon",
        "followers_url": "https://api.github.com/users/rserranon/followers",
        "following_url": "https://api.github.com/users/rserranon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rserranon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rserranon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rserranon/subscriptions",
        "organizations_url": "https://api.github.com/users/rserranon/orgs",
        "repos_url": "https://api.github.com/users/rserranon/repos",
        "events_url": "https://api.github.com/users/rserranon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rserranon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-22T17:03:15Z",
      "updated_at": "2022-11-22T17:03:15Z",
      "author_association": "NONE",
      "body": "Approach ACK",
      "user": {
        "login": "rserranon",
        "id": 77761,
        "node_id": "MDQ6VXNlcjc3NzYx",
        "avatar_url": "https://avatars.githubusercontent.com/u/77761?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rserranon",
        "html_url": "https://github.com/rserranon",
        "followers_url": "https://api.github.com/users/rserranon/followers",
        "following_url": "https://api.github.com/users/rserranon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rserranon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rserranon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rserranon/subscriptions",
        "organizations_url": "https://api.github.com/users/rserranon/orgs",
        "repos_url": "https://api.github.com/users/rserranon/repos",
        "events_url": "https://api.github.com/users/rserranon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rserranon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#issuecomment-1323988554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25986"
    },
    {
      "event": "merged",
      "id": 7902173240,
      "node_id": "ME_lADOABII585RFbJLzwAAAAHXAZg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7902173240",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "00c323610a30572ff15420d68f5432a3cb9757e5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00c323610a30572ff15420d68f5432a3cb9757e5",
      "created_at": "2022-11-28T11:55:35Z"
    },
    {
      "event": "closed",
      "id": 7902173257,
      "node_id": "CE_lADOABII585RFbJLzwAAAAHXAZhJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7902173257",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T11:55:36Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 7905734957,
      "node_id": "HRDE_lADOABII585RFbJLzwAAAAHXN_Et",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7905734957",
      "actor": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T18:43:29Z"
    },
    {
      "event": "referenced",
      "id": 7932959561,
      "node_id": "REFE_lADOABII585RFbJLzwAAAAHY11tJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7932959561",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c329008a550191f746298880b47f59d203698e15",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/c329008a550191f746298880b47f59d203698e15",
      "created_at": "2022-12-01T15:19:57Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135171",
      "pull_request_review_id": 1095489108,
      "id": 962135171,
      "node_id": "PRRC_kwDOABII5845WQSD",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 41,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe this could become part of the MiniWallet methods as `create_self_transfer_chain` (see [`send_self_transfer_chain`](https://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/test_framework/wallet.py#L341)) to be also used at [`mempool_package_limits.py`](https://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/mempool_package_limits.py#L50-L530).\r\n\r\nSee also https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685084219 for `chain_length=25`\r\n",
      "created_at": "2022-09-03T10:28:56Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135359",
      "pull_request_review_id": 1095489108,
      "id": 962135359,
      "node_id": "PRRC_kwDOABII5845WQU_",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 52,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "See https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685061119 about tuple. Also iirc we are mostly returning dictionaries in most of the other functions.",
      "created_at": "2022-09-03T10:31:16Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135640",
      "pull_request_review_id": 1095489108,
      "id": 962135640,
      "node_id": "PRRC_kwDOABII5845WQZY",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 71,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since recently `rescan_utxos()` is called at the end of `generate`.\r\nhttps://github.com/bitcoin/bitcoin/blob/ea67232cdb80c4bc3f16fcd823f6f811fd8903e1/test/functional/test_framework/wallet.py#L171",
      "created_at": "2022-09-03T10:34:07Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962135640",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962135640"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962136086",
      "pull_request_review_id": 1095489108,
      "id": 962136086,
      "node_id": "PRRC_kwDOABII5845WQgW",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"tx\"]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`create_self_transfer` returns the hex, so you could  avoid `tx.serialize().hex()` \r\n```suggestion\r\n            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex]\r\n```",
      "created_at": "2022-09-03T10:38:45Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962136086",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962136086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137464",
      "pull_request_review_id": 1095489108,
      "id": 962137464,
      "node_id": "PRRC_kwDOABII5845WQ14",
      "diff_hunk": "@@ -91,52 +82,64 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)\n+\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n         }])\n \n         self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n-        coin = self.coins.pop()\n-        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n-        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n-        assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n-        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        coin = self.wallet.get_utxo()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 155,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where is this used?",
      "created_at": "2022-09-03T10:52:37Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137464",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137464"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137598",
      "pull_request_review_id": 1095489108,
      "id": 962137598,
      "node_id": "PRRC_kwDOABII5845WQ3-",
      "diff_hunk": "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 212,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: double #",
      "created_at": "2022-09-03T10:54:21Z",
      "updated_at": "2022-09-03T11:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137676",
      "pull_request_review_id": 1095489108,
      "id": 962137676,
      "node_id": "PRRC_kwDOABII5845WQ5M",
      "diff_hunk": "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)",
      "path": "test/functional/rpc_packages.py",
      "position": 233,
      "original_position": 256,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this comment is still useful. \r\n\r\nSame for the rest of the comments that you deleted later in the code, just writing it here to avoid multiple comments.",
      "created_at": "2022-09-03T10:55:01Z",
      "updated_at": "2022-09-03T11:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962137676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962137676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962138910",
      "pull_request_review_id": 1095489108,
      "id": 962138910,
      "node_id": "PRRC_kwDOABII5845WRMe",
      "diff_hunk": "@@ -330,31 +292,22 @@ def assert_equal_package_results(self, node, testmempoolaccept_result, submitpac\n     def test_submit_child_with_parents(self, num_parents, partial_submit):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n-        # Test a package with num_parents parents and 1 child transaction.\n-        package_hex = []\n+\n         package_txns = []\n-        values = []\n-        scripts = []\n         for _ in range(num_parents):\n-            parent_coin = self.coins.pop()\n-            value = parent_coin[\"amount\"]\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-            package_hex.append(txhex)\n-            package_txns.append(tx)\n-            values.append(value)\n-            scripts.append(spk)\n+            parent_tx = self.wallet.create_self_transfer(fee=DEFAULT_FEE)\n+            package_txns.append(parent_tx)\n             if partial_submit and random.choice([True, False]):\n-                node.sendrawtransaction(txhex)\n-        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n-        package_hex.append(child_hex)\n-        package_txns.append(tx_from_hex(child_hex))\n+                node.sendrawtransaction(parent_tx[\"hex\"])\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx[\"new_utxo\"] for tx in package_txns], fee_per_output=10000) #DEFAULT_FEE\n+        package_txns.append(child_tx)\n \n-        testmempoolaccept_result = node.testmempoolaccept(rawtxs=package_hex)\n-        submitpackage_result = node.submitpackage(package=package_hex)\n+        testmempoolaccept_result = node.testmempoolaccept(rawtxs=[tx[\"hex\"] for tx in package_txns])\n+        submitpackage_result = node.submitpackage(package=[tx[\"hex\"] for tx in package_txns])\n \n         # Check that each result is present, with the correct size and fees\n-        for i in range(num_parents + 1):\n-            tx = package_txns[i]\n+        for package_tx in package_txns:\n+            tx = package_tx['tx']\n             wtxid = tx.getwtxid()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 417,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`create_self_transfer` already returns `wtxid`, maybe it makes sense for `create_self_transfer_multi` to also return it.",
      "created_at": "2022-09-03T11:07:56Z",
      "updated_at": "2022-09-03T11:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962138910",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962138910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196925",
      "pull_request_review_id": 1095554933,
      "id": 962196925,
      "node_id": "PRRC_kwDOABII5845WfW9",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 41,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962135171,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:03:30Z",
      "updated_at": "2022-09-03T20:03:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196925",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196946",
      "pull_request_review_id": 1095554941,
      "id": 962196946,
      "node_id": "PRRC_kwDOABII5845WfXS",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 52,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962135359,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:03:36Z",
      "updated_at": "2022-09-03T20:03:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962196946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962196946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197018",
      "pull_request_review_id": 1095554996,
      "id": 962197018,
      "node_id": "PRRC_kwDOABII5845WfYa",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 71,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962135640,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:04:24Z",
      "updated_at": "2022-09-03T20:04:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197018",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197018"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197027",
      "pull_request_review_id": 1095555012,
      "id": 962197027,
      "node_id": "PRRC_kwDOABII5845WfYj",
      "diff_hunk": "@@ -91,52 +82,64 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)\n+\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n         }])\n \n         self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n-        coin = self.coins.pop()\n-        tx_high_fee_raw = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n-        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n-        assert tx_high_fee_signed[\"complete\"]\n-        tx_high_fee = tx_from_hex(tx_high_fee_signed[\"hex\"])\n-        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        coin = self.wallet.get_utxo()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 155,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962137464,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:04:37Z",
      "updated_at": "2022-09-03T20:04:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197042",
      "pull_request_review_id": 1095555018,
      "id": 962197042,
      "node_id": "PRRC_kwDOABII5845WfYy",
      "diff_hunk": "@@ -48,33 +38,34 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         shuffled_testres = [testres_expected[i] for i in shuffled_indeces]\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n+    def create_tx_chain(self, chain_length=25):\n+        chaintip_utxo = self.wallet.get_utxo()\n+        chain_hex = []\n+        chain_txns = []\n+\n+        for _ in range(chain_length):\n+            tx = self.wallet.create_self_transfer(utxo_to_spend=chaintip_utxo)\n+            chaintip_utxo = tx[\"new_utxo\"]\n+            chain_hex.append(tx[\"hex\"])\n+            chain_txns.append(tx[\"tx\"])\n+\n+        return (chain_hex, chain_txns)\n+\n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n-        node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n-                \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n-                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+        self.wallet = MiniWallet(self.nodes[0])\n \n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+        self.wallet.rescan_utxos()\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"tx\"]",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 84,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962136086,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:04:44Z",
      "updated_at": "2022-09-03T20:04:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197042",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197095",
      "pull_request_review_id": 1095555053,
      "id": 962197095,
      "node_id": "PRRC_kwDOABII5845WfZn",
      "diff_hunk": "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)",
      "path": "test/functional/rpc_packages.py",
      "position": 233,
      "original_position": 256,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962137676,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It was unintentionally removed. Fixed it in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T20:05:22Z",
      "updated_at": "2022-09-03T20:05:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 224,
      "original_line": 224,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197112",
      "pull_request_review_id": 1095555070,
      "id": 962197112,
      "node_id": "PRRC_kwDOABII5845WfZ4",
      "diff_hunk": "@@ -330,31 +292,22 @@ def assert_equal_package_results(self, node, testmempoolaccept_result, submitpac\n     def test_submit_child_with_parents(self, num_parents, partial_submit):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n-        # Test a package with num_parents parents and 1 child transaction.\n-        package_hex = []\n+\n         package_txns = []\n-        values = []\n-        scripts = []\n         for _ in range(num_parents):\n-            parent_coin = self.coins.pop()\n-            value = parent_coin[\"amount\"]\n-            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-            package_hex.append(txhex)\n-            package_txns.append(tx)\n-            values.append(value)\n-            scripts.append(spk)\n+            parent_tx = self.wallet.create_self_transfer(fee=DEFAULT_FEE)\n+            package_txns.append(parent_tx)\n             if partial_submit and random.choice([True, False]):\n-                node.sendrawtransaction(txhex)\n-        child_hex = create_child_with_parents(node, self.address, self.privkeys, package_txns, values, scripts)\n-        package_hex.append(child_hex)\n-        package_txns.append(tx_from_hex(child_hex))\n+                node.sendrawtransaction(parent_tx[\"hex\"])\n+        child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=[tx[\"new_utxo\"] for tx in package_txns], fee_per_output=10000) #DEFAULT_FEE\n+        package_txns.append(child_tx)\n \n-        testmempoolaccept_result = node.testmempoolaccept(rawtxs=package_hex)\n-        submitpackage_result = node.submitpackage(package=package_hex)\n+        testmempoolaccept_result = node.testmempoolaccept(rawtxs=[tx[\"hex\"] for tx in package_txns])\n+        submitpackage_result = node.submitpackage(package=[tx[\"hex\"] for tx in package_txns])\n \n         # Check that each result is present, with the correct size and fees\n-        for i in range(num_parents + 1):\n-            tx = package_txns[i]\n+        for package_tx in package_txns:\n+            tx = package_tx['tx']\n             wtxid = tx.getwtxid()",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 417,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962138910,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in df7e74b4e4d1b67b4b9d226ba00ffc21548d5677. Thanks for the review.",
      "created_at": "2022-09-03T20:05:39Z",
      "updated_at": "2022-09-03T20:05:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962197112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962197112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 311,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962202697",
      "pull_request_review_id": 1095559004,
      "id": 962202697,
      "node_id": "PRRC_kwDOABII5845WgxJ",
      "diff_hunk": "@@ -158,156 +161,115 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n-        # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        # # Child B",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 212,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "10edc9c0d7b686808c040204103da01ed386a3c9",
      "in_reply_to_id": 962137598,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/commit/df7e74b4e4d1b67b4b9d226ba00ffc21548d5677.",
      "created_at": "2022-09-03T21:13:34Z",
      "updated_at": "2022-09-03T21:13:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r962202697",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/962202697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963868741",
      "pull_request_review_id": 1097830340,
      "id": 963868741,
      "node_id": "PRRC_kwDOABII5845c3hF",
      "diff_hunk": "@@ -91,52 +68,65 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 115,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe generate all the coins at the beginning so we don't need to multiple chains of 100 blocks for coinbase maturity?",
      "created_at": "2022-09-06T15:42:08Z",
      "updated_at": "2022-09-06T15:48:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963868741",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963868741"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963876323",
      "pull_request_review_id": 1097830340,
      "id": 963876323,
      "node_id": "PRRC_kwDOABII5845c5Xj",
      "diff_hunk": "@@ -291,6 +290,8 @@ def create_self_transfer_multi(\n                 height=0,\n             ) for i in range(len(tx.vout))],\n             \"txid\": txid,\n+            \"wtxid\": tx.getwtxid(),\n+            \"vsize\": tx.get_vsize(),",
      "path": "test/functional/test_framework/wallet.py",
      "position": null,
      "original_position": 13,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it's necessary to add these fields since the caller can get them from the `CTransaction` object... though I don't feel that strongly about it.",
      "created_at": "2022-09-06T15:47:45Z",
      "updated_at": "2022-09-06T15:48:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963876323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/963876323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 293,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548438",
      "pull_request_review_id": 1103008584,
      "id": 967548438,
      "node_id": "PRRC_kwDOABII5845q54W",
      "diff_hunk": "@@ -91,52 +68,65 @@ def run_test(self):\n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n+                \"txid\": coinbase[\"txid\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+        self.generate(node, COINBASE_MATURITY, sync_fun=self.no_op)",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 115,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "in_reply_to_id": 963868741,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in b21329d50639fc383d92c75ab7f20187de4ae0e9.",
      "created_at": "2022-09-10T00:11:17Z",
      "updated_at": "2022-09-10T00:11:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548438",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548438"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 87,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548513",
      "pull_request_review_id": 1103008613,
      "id": 967548513,
      "node_id": "PRRC_kwDOABII5845q55h",
      "diff_hunk": "@@ -291,6 +290,8 @@ def create_self_transfer_multi(\n                 height=0,\n             ) for i in range(len(tx.vout))],\n             \"txid\": txid,\n+            \"wtxid\": tx.getwtxid(),\n+            \"vsize\": tx.get_vsize(),",
      "path": "test/functional/test_framework/wallet.py",
      "position": null,
      "original_position": 13,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "4d4298f353a3f0ebb0f92e341db920dae424cebe",
      "in_reply_to_id": 963876323,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/commit/b21329d50639fc383d92c75ab7f20187de4ae0e9.",
      "created_at": "2022-09-10T00:11:28Z",
      "updated_at": "2022-09-10T00:11:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r967548513",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/967548513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 293,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 294,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983373466",
      "pull_request_review_id": 1125052275,
      "id": 983373466,
      "node_id": "PRRC_kwDOABII5846nRaa",
      "diff_hunk": "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 63,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no reason not to construct this coin inside `test_independent`. You can use `node.getblock(blockhash=node.getblockhash(height=1), verbosity=2)[\"tx\"][0]` to get the coinbase from that specific block, but also why not just use create self transfer?",
      "created_at": "2022-09-29T10:35:31Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983373466",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983373466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 48,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983376594",
      "pull_request_review_id": 1125052275,
      "id": 983376594,
      "node_id": "PRRC_kwDOABII5846nSLS",
      "diff_hunk": "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n \n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 137,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These changes aren't necessary, as `createrawtransaction` is not a wallet RPC and we want a tx with no signature. It's a little weird to have `MiniWallet` sign it and then manually edit the tx to remove the signature.",
      "created_at": "2022-09-29T10:39:18Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983376594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983376594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 98,
      "start_side": "LEFT",
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983383284",
      "pull_request_review_id": 1125052275,
      "id": 983383284,
      "node_id": "PRRC_kwDOABII5846nTz0",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 213,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You have reversed the order of the transactions here, so this is submitting the same package twice and no longer testing that it works in either order.",
      "created_at": "2022-09-29T10:46:54Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983383284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983383284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386023",
      "pull_request_review_id": 1125052275,
      "id": 983386023,
      "node_id": "PRRC_kwDOABII5846nUen",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 335,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer double quotes for consistency",
      "created_at": "2022-09-29T10:49:52Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386540",
      "pull_request_review_id": 1125052275,
      "id": 983386540,
      "node_id": "PRRC_kwDOABII5846nUms",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee",
      "path": "test/functional/rpc_packages.py",
      "position": 323,
      "original_position": 338,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why delete the comment?",
      "created_at": "2022-09-29T10:50:22Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386778",
      "pull_request_review_id": 1125052275,
      "id": 983386778,
      "node_id": "PRRC_kwDOABII5846nUqa",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee\n-        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n-        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n-        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n-\n-        self.log.info(\"Test that transactions within a package cannot replace each other\")\n-        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        replacement_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = 2 * fee)\n+        testres_rbf_conflicting = node.testmempoolaccept([replaceable_tx[\"hex\"], replacement_tx[\"hex\"]])\n         assert_equal(testres_rbf_conflicting, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx[\"txid\"], \"wtxid\": replacement_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n-        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n-        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n-        # This transaction is a valid BIP125 replace-by-fee",
      "path": "test/functional/rpc_packages.py",
      "position": 343,
      "original_position": 358,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why delete the comment?",
      "created_at": "2022-09-29T10:50:35Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983386778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983386778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 304,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983389136",
      "pull_request_review_id": 1125052275,
      "id": 983389136,
      "node_id": "PRRC_kwDOABII5846nVPQ",
      "diff_hunk": "@@ -338,6 +337,19 @@ def sendrawtransaction(self, *, from_node, tx_hex, maxfeerate=0, **kwargs):\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n         return txid\n \n+    def create_self_transfer_chain(self, *, chain_length):",
      "path": "test/functional/test_framework/wallet.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice, but needs documentation. You can copy paste the docstring from `make_chain` to here.",
      "created_at": "2022-09-29T10:53:12Z",
      "updated_at": "2022-09-29T10:55:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r983389136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983389136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 340,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986362485",
      "pull_request_review_id": 1129204370,
      "id": 986362485,
      "node_id": "PRRC_kwDOABII5846yrJ1",
      "diff_hunk": "@@ -338,6 +337,19 @@ def sendrawtransaction(self, *, from_node, tx_hex, maxfeerate=0, **kwargs):\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n         return txid\n \n+    def create_self_transfer_chain(self, *, chain_length):",
      "path": "test/functional/test_framework/wallet.py",
      "position": 12,
      "original_position": 12,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983389136,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:39:02Z",
      "updated_at": "2022-10-04T01:39:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986362485",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986362485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 340,
      "original_line": 340,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363070",
      "pull_request_review_id": 1129205132,
      "id": 986363070,
      "node_id": "PRRC_kwDOABII5846yrS-",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee\n-        replacement_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n-        replacement_tx.vout[0].nValue -= int(fee * COIN)  # Doubled fee\n-        signed_replacement_tx = node.signrawtransactionwithkey(replacement_tx.serialize().hex(), self.privkeys)\n-        replacement_tx = tx_from_hex(signed_replacement_tx[\"hex\"])\n-\n-        self.log.info(\"Test that transactions within a package cannot replace each other\")\n-        testres_rbf_conflicting = node.testmempoolaccept([signed_replaceable_tx[\"hex\"], signed_replacement_tx[\"hex\"]])\n+        replacement_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = 2 * fee)\n+        testres_rbf_conflicting = node.testmempoolaccept([replaceable_tx[\"hex\"], replacement_tx[\"hex\"]])\n         assert_equal(testres_rbf_conflicting, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": replacement_tx[\"txid\"], \"wtxid\": replacement_tx[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test that packages cannot conflict with mempool transactions, even if a valid BIP125 RBF\")\n-        node.sendrawtransaction(signed_replaceable_tx[\"hex\"])\n-        testres_rbf_single = node.testmempoolaccept([signed_replacement_tx[\"hex\"]])\n-        # This transaction is a valid BIP125 replace-by-fee",
      "path": "test/functional/rpc_packages.py",
      "position": 343,
      "original_position": 358,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983386778,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Was inadvertently. Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:40:34Z",
      "updated_at": "2022-10-04T01:40:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363070",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363070"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 304,
      "original_line": 304,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363094",
      "pull_request_review_id": 1129205172,
      "id": 986363094,
      "node_id": "PRRC_kwDOABII5846yrTW",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}\n         ])\n \n-        # Replacement transaction is identical except has double the fee",
      "path": "test/functional/rpc_packages.py",
      "position": 323,
      "original_position": 338,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983386540,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Was inadvertently. Done in 17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:40:39Z",
      "updated_at": "2022-10-04T01:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363094",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363094"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 288,
      "original_line": 288,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363196",
      "pull_request_review_id": 1129205276,
      "id": 986363196,
      "node_id": "PRRC_kwDOABII5846yrU8",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx['hex']]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n         self.log.info(\"Test conflicting transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx2[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx2[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx2.rehash(), \"wtxid\": tx2.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx2[\"txid\"], \"wtxid\": tx2[\"wtxid\"], \"package-error\": \"conflict-in-package\"}\n         ])\n \n     def test_rbf(self):\n         node = self.nodes[0]\n-        coin = self.coins.pop()\n-        inputs = [{\"txid\": coin[\"txid\"], \"vout\": 0, \"sequence\": MAX_BIP125_RBF_SEQUENCE}]\n+\n+        coin = self.wallet.get_utxo()\n         fee = Decimal('0.00125000')\n-        output = {node.get_deterministic_priv_key().address: 50 - fee}\n-        raw_replaceable_tx = node.createrawtransaction(inputs, output)\n-        signed_replaceable_tx = node.signrawtransactionwithkey(hexstring=raw_replaceable_tx, privkeys=self.privkeys)\n-        testres_replaceable = node.testmempoolaccept([signed_replaceable_tx[\"hex\"]])\n-        replaceable_tx = tx_from_hex(signed_replaceable_tx[\"hex\"])\n+        replaceable_tx = self.wallet.create_self_transfer(utxo_to_spend=coin, sequence=MAX_BIP125_RBF_SEQUENCE, fee = fee)\n+        testres_replaceable = node.testmempoolaccept([replaceable_tx[\"hex\"]])\n         assert_equal(testres_replaceable, [\n-            {\"txid\": replaceable_tx.rehash(), \"wtxid\": replaceable_tx.getwtxid(),\n-            \"allowed\": True, \"vsize\": replaceable_tx.get_vsize(), \"fees\": { \"base\": fee }}\n+            {\"txid\": replaceable_tx[\"txid\"], \"wtxid\": replaceable_tx[\"wtxid\"],\n+            \"allowed\": True, \"vsize\": replaceable_tx['tx'].get_vsize(), \"fees\": { \"base\": fee }}",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 335,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983386023,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:40:51Z",
      "updated_at": "2022-10-04T01:40:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363196",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363196"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363311",
      "pull_request_review_id": 1129205393,
      "id": 986363311,
      "node_id": "PRRC_kwDOABII5846yrWv",
      "diff_hunk": "@@ -158,156 +148,116 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n \n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n-\n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 213,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983383284,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:41:03Z",
      "updated_at": "2022-10-04T01:41:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363311",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 166,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363385",
      "pull_request_review_id": 1129205485,
      "id": 986363385,
      "node_id": "PRRC_kwDOABII5846yrX5",
      "diff_hunk": "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n+\n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n \n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n+\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n-        tx = tx_from_hex(garbage_tx)\n+        garbage_utxo = {\"txid\": \"00\" * 32, \"vout\": 5, \"value\": 3, \"height\": 0}\n+        garbage_tx = self.wallet.create_self_transfer(utxo_to_spend=garbage_utxo)\n         # Only the txid and wtxids are returned because validation is incomplete for the independent txns.\n         # Package validation is atomic: if the node cannot find a UTXO for any single tx in the package,\n         # it terminates immediately to avoid unnecessary, expensive signature verification.\n-        package_bad = self.independent_txns_hex + [garbage_tx]\n-        testres_bad = self.independent_txns_testres_blank + [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n+        package_bad = self.independent_txns_hex + [garbage_tx[\"hex\"]]\n+        testres_bad = self.independent_txns_testres_blank + [{\"txid\": garbage_tx[\"txid\"], \"wtxid\": garbage_tx[\"wtxid\"], \"allowed\": False, \"reject-reason\": \"missing-inputs\"}]\n         self.assert_testres_equal(package_bad, testres_bad)\n \n         self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n-        coin = self.coins.pop()\n-        tx_bad_sig_hex = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-        tx_bad_sig = tx_from_hex(tx_bad_sig_hex)\n+        tx_bad_sig = self.wallet.create_self_transfer(utxo_to_spend=coin)['tx']\n+        tx_bad_sig.wit.vtxinwit = []\n+        tx_bad_sig_hex = tx_bad_sig.serialize().hex()\n         testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n         # By the time the signature for the last transaction is checked, all the other transactions\n         # have been fully validated, which is why the node returns full validation results for all\n         # transactions here but empty results in other cases.\n         assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n             \"txid\": tx_bad_sig.rehash(),\n-            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"wtxid\": tx_bad_sig.getwtxid(),\n+            \"allowed\": False,\n             \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 137,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983376594,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in https://github.com/bitcoin/bitcoin/commit/17cad448516a6906ff637593ab57df332fade5d2.",
      "created_at": "2022-10-04T01:41:13Z",
      "updated_at": "2022-10-04T01:41:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986363385",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986363385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 98,
      "start_side": "LEFT",
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986365874",
      "pull_request_review_id": 1129208706,
      "id": 986365874,
      "node_id": "PRRC_kwDOABII5846yr-y",
      "diff_hunk": "@@ -49,94 +39,94 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n-                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"value\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }",
      "path": "test/functional/rpc_packages.py",
      "position": null,
      "original_position": 63,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "b21329d50639fc383d92c75ab7f20187de4ae0e9",
      "in_reply_to_id": 983373466,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`node.getblock(blockhash=node.getblockhash(height=1), verbosity=2)[\"tx\"][0]` returns a UTXO that does not need a signature, as the UTXO are being generated for a `ADDRESS_OP_TRUE` miniwallet.\r\n\r\nThe same applies to `create_self_transfer`.\r\n\r\nThe reason why this code is not inside `test_independent` is https://github.com/bitcoin/bitcoin/pull/25986#discussion_r963868741.",
      "created_at": "2022-10-04T01:47:47Z",
      "updated_at": "2022-10-04T16:34:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r986365874",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/986365874"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": null,
      "original_start_line": 48,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029043259",
      "pull_request_review_id": 1189630994,
      "id": 1029043259,
      "node_id": "PRRC_kwDOABII5849VfQ7",
      "diff_hunk": "@@ -49,53 +42,54 @@ def assert_testres_equal(self, package_hex, testres_expected):\n         assert_equal(shuffled_testres, self.nodes[0].testmempoolaccept(shuffled_package))\n \n     def run_test(self):\n-        self.log.info(\"Generate blocks to create UTXOs\")\n         node = self.nodes[0]\n-        self.privkeys = [node.get_deterministic_priv_key().key]\n-        self.address = node.get_deterministic_priv_key().address\n-        self.coins = []\n-        # The last 100 coinbase transactions are premature\n-        for b in self.generatetoaddress(node, 220, self.address)[:-100]:\n-            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n-            self.coins.append({\n+\n+        # get an UTXO that requires signature to be spent\n+        deterministic_address = node.get_deterministic_priv_key().address\n+        blockhash = self.generatetoaddress(node, 1, deterministic_address)[0]\n+        coinbase = node.getblock(blockhash=blockhash, verbosity=2)[\"tx\"][0]\n+        coin = {\n                 \"txid\": coinbase[\"txid\"],\n                 \"amount\": coinbase[\"vout\"][0][\"value\"],\n                 \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n-            })\n+                \"vout\": 0,\n+                \"height\": 0\n+            }\n \n+        self.wallet = MiniWallet(self.nodes[0])\n+        self.generate(self.wallet, COINBASE_MATURITY + 100)  # blocks generated for inputs\n+\n+        self.log.info(\"Create some transactions\")\n         # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n         self.independent_txns_hex = []\n         self.independent_txns_testres = []\n         for _ in range(3):\n-            coin = self.coins.pop()\n-            rawtx = node.createrawtransaction([{\"txid\": coin[\"txid\"], \"vout\": 0}],\n-                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n-            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-            assert signedtx[\"complete\"]\n-            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            tx_hex = self.wallet.create_self_transfer(fee_rate=Decimal(\"0.0001\"))[\"hex\"]\n+            testres = self.nodes[0].testmempoolaccept([tx_hex])\n             assert testres[0][\"allowed\"]\n-            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            self.independent_txns_hex.append(tx_hex)\n             # testmempoolaccept returns a list of length one, avoid creating a 2D list\n             self.independent_txns_testres.append(testres[0])\n         self.independent_txns_testres_blank = [{\n             \"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n \n-        self.test_independent()\n+        self.test_independent(coin)\n         self.test_chain()\n         self.test_multiple_children()\n         self.test_multiple_parents()\n         self.test_conflicting()\n         self.test_rbf()\n         self.test_submitpackage()\n \n-    def test_independent(self):\n+    def test_independent(self, coin):\n         self.log.info(\"Test multiple independent transactions in a package\")\n         node = self.nodes[0]\n         # For independent transactions, order doesn't matter.\n         self.assert_testres_equal(self.independent_txns_hex, self.independent_txns_testres)\n \n         self.log.info(\"Test an otherwise valid package with an extra garbage tx appended\")\n-        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        address = node.get_deterministic_priv_key().address\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {address: 1})",
      "path": "test/functional/rpc_packages.py",
      "position": 106,
      "original_position": 106,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `get_deterministic_priv_key` is not often used alongside the MinWallet is used. Why not use its own method?\r\n```suggestion\r\n        address = self.wallet.getaddress()\r\n        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {address: 1})\r\n```\r\nAlso, if you decide to touch this, `garbage_tx_hex` follows better the naming scheme.",
      "created_at": "2022-11-22T09:00:08Z",
      "updated_at": "2022-11-22T15:26:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029043259",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029043259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": 91,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029462564",
      "pull_request_review_id": 1189630994,
      "id": 1029462564,
      "node_id": "PRRC_kwDOABII5849XFok",
      "diff_hunk": "@@ -158,156 +150,118 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_b_tx[\"hex\"], child_a_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx[\"hex\"]]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}",
      "path": "test/functional/rpc_packages.py",
      "position": 288,
      "original_position": 288,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I believe that is for the best when similar implementation details follow similar checks in code across functional tests. Although I believe this is important, I consider it a nit as this is not code you've written as part of this refactor. \r\n\r\nWhat I am referring to, is the assertion after a `testmepoolaccept()`. In a similar example at `mempool_package_limits`, the implementation logic differs a bit and imo improves the readability by not checking for `(w)txid`.\r\nhttps://github.com/bitcoin/bitcoin/blob/85892f77c98c7a08834a06d52af3eb474275afd8/test/functional/mempool_package_limits.py#L116-L118\r\n\r\nJust a note that a similar assertion-of-`testmepoolaccept()` logic is already a method as part of another test. I've tried to implement it as part of this test, but it ended up not worth it.\r\nhttps://github.com/bitcoin/bitcoin/blob/85892f77c98c7a08834a06d52af3eb474275afd8/test/functional/mempool_accept.py#L49-L55\r\n\r\n*This assertion-of-`testmepoolaccept()` pattern can be observed in multiple occasions, this highlights just one of them. \r\n",
      "created_at": "2022-11-22T15:15:19Z",
      "updated_at": "2022-11-22T15:26:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029462564",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029462564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": 224,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029472846",
      "pull_request_review_id": 1189630994,
      "id": 1029472846,
      "node_id": "PRRC_kwDOABII5849XIJO",
      "diff_hunk": "@@ -376,30 +320,25 @@ def test_submit_child_with_parents(self, num_parents, partial_submit):\n         assert \"package-feerate\" not in submitpackage_result\n \n         # The node should announce each transaction. No guarantees for propagation.\n-        peer.wait_for_broadcast([tx.getwtxid() for tx in package_txns])\n+        peer.wait_for_broadcast([tx[\"tx\"].getwtxid() for tx in package_txns])\n         self.generate(node, 1)\n \n-\n     def test_submit_cpfp(self):\n         node = self.nodes[0]\n         peer = node.add_p2p_connection(P2PTxInvStore())\n \n-        # 2 parent 1 child CPFP. First parent pays high fees, second parent pays 0 fees and is\n-        # fee-bumped by the child.",
      "path": "test/functional/rpc_packages.py",
      "position": 421,
      "original_position": 421,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "in_reply_to_id": null,
      "user": {
        "login": "kouloumos",
        "id": 18506343,
        "node_id": "MDQ6VXNlcjE4NTA2MzQz",
        "avatar_url": "https://avatars.githubusercontent.com/u/18506343?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kouloumos",
        "html_url": "https://github.com/kouloumos",
        "followers_url": "https://api.github.com/users/kouloumos/followers",
        "following_url": "https://api.github.com/users/kouloumos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kouloumos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kouloumos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kouloumos/subscriptions",
        "organizations_url": "https://api.github.com/users/kouloumos/orgs",
        "repos_url": "https://api.github.com/users/kouloumos/repos",
        "events_url": "https://api.github.com/users/kouloumos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kouloumos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "comment good",
      "created_at": "2022-11-22T15:22:31Z",
      "updated_at": "2022-11-22T15:26:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1029472846",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1029472846"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": 387,
      "original_start_line": 387,
      "start_side": "LEFT",
      "line": 388,
      "original_line": 388,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033444790",
      "pull_request_review_id": 1195667232,
      "id": 1033444790,
      "node_id": "PRRC_kwDOABII5849mR22",
      "diff_hunk": "@@ -158,156 +150,118 @@ def test_chain(self):\n \n     def test_multiple_children(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has two children within the package\")\n-        first_coin = self.coins.pop()\n-        value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n-        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n-        outputs = [{self.address : value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : value}]\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-\n-        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n-        assert parent_signed[\"complete\"]\n-        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n-        parent_txid = parent_tx.rehash()\n-        assert node.testmempoolaccept([parent_signed[\"hex\"]])[0][\"allowed\"]\n \n-        parent_locking_script_a = parent_tx.vout[0].scriptPubKey.hex()\n-        child_value = value - Decimal(\"0.0001\")\n+        parent_tx = self.wallet.create_self_transfer_multi(num_outputs=2)\n+        assert node.testmempoolaccept([parent_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n-        assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n+        child_a_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][0])\n+        assert not node.testmempoolaccept([child_a_tx[\"hex\"]])[0][\"allowed\"]\n \n         # Child B\n-        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : child_value})\n-        tx_child_b = tx_from_hex(rawtx_b)\n-        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n-        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n-        tx_child_b_hex = tx_child_b.serialize().hex()\n-        assert not node.testmempoolaccept([tx_child_b_hex])[0][\"allowed\"]\n+        child_b_tx = self.wallet.create_self_transfer(utxo_to_spend=parent_tx[\"new_utxos\"][1])\n+        assert not node.testmempoolaccept([child_b_tx[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Testmempoolaccept with entire package, should work with children in either order\")\n-        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex])\n-        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_signed[\"hex\"], tx_child_b_hex, tx_child_a_hex])\n+        testres_multiple_ab = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]])\n+        testres_multiple_ba = node.testmempoolaccept(rawtxs=[parent_tx[\"hex\"], child_b_tx[\"hex\"], child_a_tx[\"hex\"]])\n         assert all([testres[\"allowed\"] for testres in testres_multiple_ab + testres_multiple_ba])\n \n         testres_single = []\n         # Test accept and then submit each one individually, which should be identical to package testaccept\n-        for rawtx in [parent_signed[\"hex\"], tx_child_a_hex, tx_child_b_hex]:\n+        for rawtx in [parent_tx[\"hex\"], child_a_tx[\"hex\"], child_b_tx[\"hex\"]]:\n             testres = node.testmempoolaccept([rawtx])\n             testres_single.append(testres[0])\n             # Submit the transaction now so its child should have no problem validating\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-\n     def test_multiple_parents(self):\n         node = self.nodes[0]\n-\n         self.log.info(\"Testmempoolaccept a package in which a transaction has multiple parents within the package\")\n+\n         for num_parents in [2, 10, 24]:\n             # Test a package with num_parents parents and 1 child transaction.\n+            parent_coins = []\n             package_hex = []\n-            parents_tx = []\n-            values = []\n-            parent_locking_scripts = []\n+\n             for _ in range(num_parents):\n-                parent_coin = self.coins.pop()\n-                value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n-                package_hex.append(txhex)\n-                parents_tx.append(tx)\n-                values.append(value)\n-                parent_locking_scripts.append(parent_locking_script)\n-            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n-            # Package accept should work with the parents in any order (as long as parents come before child)\n+                # Package accept should work with the parents in any order (as long as parents come before child)\n+                parent_tx = self.wallet.create_self_transfer()\n+                parent_coins.append(parent_tx[\"new_utxo\"])\n+                package_hex.append(parent_tx[\"hex\"])\n+\n+            child_tx = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, fee_per_output=2000)\n             for _ in range(10):\n                 random.shuffle(package_hex)\n-                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_hex])\n+                testres_multiple = node.testmempoolaccept(rawtxs=package_hex + [child_tx['hex']])\n                 assert all([testres[\"allowed\"] for testres in testres_multiple])\n \n             testres_single = []\n             # Test accept and then submit each one individually, which should be identical to package testaccept\n-            for rawtx in package_hex + [child_hex]:\n+            for rawtx in package_hex + [child_tx[\"hex\"]]:\n                 testres_single.append(node.testmempoolaccept([rawtx])[0])\n                 # Submit the transaction now so its child should have no problem validating\n                 node.sendrawtransaction(rawtx)\n             assert_equal(testres_single, testres_multiple)\n \n     def test_conflicting(self):\n         node = self.nodes[0]\n-        prevtx = self.coins.pop()\n-        inputs = [{\"txid\": prevtx[\"txid\"], \"vout\": 0}]\n-        output1 = {node.get_deterministic_priv_key().address: 50 - 0.00125}\n-        output2 = {ADDRESS_BCRT1_P2WSH_OP_TRUE: 50 - 0.00125}\n+        coin = self.wallet.get_utxo()\n \n         # tx1 and tx2 share the same inputs\n-        rawtx1 = node.createrawtransaction(inputs, output1)\n-        rawtx2 = node.createrawtransaction(inputs, output2)\n-        signedtx1 = node.signrawtransactionwithkey(hexstring=rawtx1, privkeys=self.privkeys)\n-        signedtx2 = node.signrawtransactionwithkey(hexstring=rawtx2, privkeys=self.privkeys)\n-        tx1 = tx_from_hex(signedtx1[\"hex\"])\n-        tx2 = tx_from_hex(signedtx2[\"hex\"])\n-        assert signedtx1[\"complete\"]\n-        assert signedtx2[\"complete\"]\n+        tx1 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n+        tx2 = self.wallet.create_self_transfer(utxo_to_spend=coin)\n \n         # Ensure tx1 and tx2 are valid by themselves\n-        assert node.testmempoolaccept([signedtx1[\"hex\"]])[0][\"allowed\"]\n-        assert node.testmempoolaccept([signedtx2[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx1[\"hex\"]])[0][\"allowed\"]\n+        assert node.testmempoolaccept([tx2[\"hex\"]])[0][\"allowed\"]\n \n         self.log.info(\"Test duplicate transactions in the same package\")\n-        testres = node.testmempoolaccept([signedtx1[\"hex\"], signedtx1[\"hex\"]])\n+        testres = node.testmempoolaccept([tx1[\"hex\"], tx1[\"hex\"]])\n         assert_equal(testres, [\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"},\n-            {\"txid\": tx1.rehash(), \"wtxid\": tx1.getwtxid(), \"package-error\": \"conflict-in-package\"}\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"},\n+            {\"txid\": tx1[\"txid\"], \"wtxid\": tx1[\"wtxid\"], \"package-error\": \"conflict-in-package\"}",
      "path": "test/functional/rpc_packages.py",
      "position": 288,
      "original_position": 288,
      "commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "original_commit_id": "17cad448516a6906ff637593ab57df332fade5d2",
      "in_reply_to_id": 1029462564,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree doing similar checks each time is good and having a helper like `check_mempool_result()` is a way to achieve that. Fine for a future PR.",
      "created_at": "2022-11-28T11:47:43Z",
      "updated_at": "2022-11-28T11:50:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25986#discussion_r1033444790",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1033444790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25986"
        }
      },
      "start_line": 224,
      "original_start_line": 224,
      "start_side": "RIGHT",
      "line": 225,
      "original_line": 225,
      "side": "RIGHT"
    }
  ]
}