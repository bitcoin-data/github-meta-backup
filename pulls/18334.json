{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334",
    "id": 387373132,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mzg3MzczMTMy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18334",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18334.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18334.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/fa156999695ddaeb016d8320bee62f8d96679d55",
    "number": 18334,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test: Add basic test for BIP 37",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This does not add full coverage, but should be a good start and can be extended in the future. Currently, none of the BIP 37 p2p code has test coverage.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-03-12T17:28:32Z",
    "updated_at": "2022-02-15T10:28:35Z",
    "closed_at": "2020-03-30T19:29:51Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-03-30T19:29:51Z",
    "merge_commit_sha": "7e1fc03b185d89f21da1bee2f8b7900d65745b30",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "MarcoFalke:2003-qa37",
      "ref": "2003-qa37",
      "sha": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 40046254,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MDA0NjI1NA==",
        "name": "b-c",
        "full_name": "MarcoFalke/b-c",
        "owner": {
          "login": "MarcoFalke",
          "id": 6399679,
          "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MarcoFalke",
          "html_url": "https://github.com/MarcoFalke",
          "followers_url": "https://api.github.com/users/MarcoFalke/followers",
          "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
          "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
          "repos_url": "https://api.github.com/users/MarcoFalke/repos",
          "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/MarcoFalke/b-c",
        "fork": true,
        "url": "https://api.github.com/repos/MarcoFalke/b-c",
        "archive_url": "https://api.github.com/repos/MarcoFalke/b-c/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/MarcoFalke/b-c/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/MarcoFalke/b-c/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/MarcoFalke/b-c/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/MarcoFalke/b-c/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/MarcoFalke/b-c/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/MarcoFalke/b-c/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/MarcoFalke/b-c/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/MarcoFalke/b-c/contributors",
        "deployments_url": "https://api.github.com/repos/MarcoFalke/b-c/deployments",
        "downloads_url": "https://api.github.com/repos/MarcoFalke/b-c/downloads",
        "events_url": "https://api.github.com/repos/MarcoFalke/b-c/events",
        "forks_url": "https://api.github.com/repos/MarcoFalke/b-c/forks",
        "git_commits_url": "https://api.github.com/repos/MarcoFalke/b-c/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/MarcoFalke/b-c/git/tags%7B/sha%7D",
        "git_url": "git://github.com/MarcoFalke/b-c.git",
        "issue_comment_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/MarcoFalke/b-c/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/MarcoFalke/b-c/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/MarcoFalke/b-c/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/MarcoFalke/b-c/languages",
        "merges_url": "https://api.github.com/repos/MarcoFalke/b-c/merges",
        "milestones_url": "https://api.github.com/repos/MarcoFalke/b-c/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/MarcoFalke/b-c/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/MarcoFalke/b-c/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/MarcoFalke/b-c/releases%7B/id%7D",
        "ssh_url": "git@github.com:MarcoFalke/b-c.git",
        "stargazers_url": "https://api.github.com/repos/MarcoFalke/b-c/stargazers",
        "statuses_url": "https://api.github.com/repos/MarcoFalke/b-c/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/MarcoFalke/b-c/subscribers",
        "subscription_url": "https://api.github.com/repos/MarcoFalke/b-c/subscription",
        "tags_url": "https://api.github.com/repos/MarcoFalke/b-c/tags",
        "teams_url": "https://api.github.com/repos/MarcoFalke/b-c/teams",
        "trees_url": "https://api.github.com/repos/MarcoFalke/b-c/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/MarcoFalke/b-c.git",
        "hooks_url": "https://api.github.com/repos/MarcoFalke/b-c/hooks",
        "svn_url": "https://github.com/MarcoFalke/b-c",
        "homepage": "",
        "language": "C++",
        "forks_count": 12,
        "stargazers_count": 25,
        "watchers_count": 25,
        "size": 205775,
        "default_branch": "master",
        "open_issues_count": 25,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:17Z",
        "created_at": "2015-08-01T12:42:47Z",
        "updated_at": "2023-05-28T20:12:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5b4a9f4bdf9d90f29921425e13e50a0076edffab",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 161,
    "deletions": 4,
    "changed_files": 4,
    "commits": 1,
    "review_comments": 11,
    "comments": 10
  },
  "events": [
    {
      "event": "labeled",
      "id": 3123922378,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMxMjM5MjIzNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3123922378",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-12T17:57:13Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3124013213,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEyNDAxMzIxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3124013213",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-12T18:22:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3124091812,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzEyNDA5MTgxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3124091812",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-12T18:47:15Z"
    },
    {
      "event": "commented",
      "id": 598413317,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU5ODQxMzMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/598413317",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-12T20:53:07Z",
      "updated_at": "2020-03-27T07:36:59Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18446 (test: Add test for wtxid transaction relay by fjahr)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 18334](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/18334/total.coverage/index.html), 70f8cf0ac76a483f4e5784bb303e081688206e40) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), e2d36639ca87b980b147047e4e47cf160b2c9406)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.1081 %            | 90.0780 %        |\n| Functions | +0.2643 %            | 85.8297 %        |\n| Branches  | +0.0528 %            | 51.6976 %        |\n\n<sup>Updated at: 2020-03-12T20:53:06.964444.</sup>\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-598413317",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "reviewed",
      "id": 379042104,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDQyMTA0",
      "url": null,
      "actor": null,
      "commit_id": "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK (obviously, more tests are always good), left two code-review comments",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#pullrequestreview-379042104",
      "submitted_at": "2020-03-22T20:50:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3159674406,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE1OTY3NDQwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3159674406",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T13:33:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3159683905,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE1OTY4MzkwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3159683905",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T13:35:51Z"
    },
    {
      "event": "commented",
      "id": 603243555,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzI0MzU1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603243555",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T13:38:01Z",
      "updated_at": "2020-03-24T13:38:01Z",
      "author_association": "MEMBER",
      "body": "Addressed feedback by @theStack ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603243555",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "mentioned",
      "id": 3159693202,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE1OTY5MzIwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3159693202",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T13:38:01Z"
    },
    {
      "event": "subscribed",
      "id": 3159693204,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNTk2OTMyMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3159693204",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T13:38:01Z"
    },
    {
      "event": "reviewed",
      "id": 380695135,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjk1MTM1",
      "url": null,
      "actor": null,
      "commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "The synchronization approach is more robust now, though it is not used for all of your four subtests yet (see my code-review comment).\r\nJust out of curiousity, how did you create the bloom filter data in practice? Is there like a toolset available for playing around with bloom filters? Or did you go for the manual, programmatic way, i.e. creating `CBloomFilter` instance based on the bitcoind codebase, `insert()`ing the scriptPubKey and hex-dumping the filter's `vData` contents?\r\nRight now, assuming scriptPubKey changes, I as reader of the test wouldn't know a quick way of how to update the data field.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#pullrequestreview-380695135",
      "submitted_at": "2020-03-24T21:20:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
    },
    {
      "event": "commented",
      "id": 603563025,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzU2MzAyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603563025",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T23:49:21Z",
      "updated_at": "2020-03-24T23:49:21Z",
      "author_association": "MEMBER",
      "body": ">  Just out of curiousity, how did you create the bloom filter data in practice? Is there like a toolset available for playing around with bloom filters? Or did you go for the manual, programmatic way, i.e. creating CBloomFilter instance based on the bitcoind codebase, insert()ing the scriptPubKey and hex-dumping the filter's vData contents?\r\n\r\nI did what you assumed. Instead of hexdump I sent it to a python mininode and made it `print()` the repr.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563025",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "commented",
      "id": 603563323,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzU2MzMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603563323",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-24T23:50:23Z",
      "updated_at": "2020-03-24T23:50:23Z",
      "author_association": "MEMBER",
      "body": "Just to be make sure: This test is not complete and can be extended/improved in the future. Though, I don't have any interest in doing that myself atm. This task will be opened as a good first issue.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-603563323",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE1Njk5OTY5NWRkYWViMDE2ZDgzMjBiZWU2MmY4ZDk2Njc5ZDU1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa156999695ddaeb016d8320bee62f8d96679d55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fa156999695ddaeb016d8320bee62f8d96679d55",
      "tree": {
        "sha": "1bae058d0c4e08422ec41392c063c677158dfb06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bae058d0c4e08422ec41392c063c677158dfb06"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree 1bae058d0c4e08422ec41392c063c677158dfb06\nparent 2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c\nauthor MarcoFalke <falke.marco@gmail.com> 1584034606 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1585133143 -0400\n\ntest: Add basic test for BIP 37\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiHigwAoVUI1c9QhyHtZPivwVtG7GY3NfX5EivILqGyDVVtMvLbrb1PU8gmBYFt\n3IWb/2NsXx462NCkNG2PszgfY271c+/V96sAylcAPIt5URmH7FrNyuBN8FN+374w\ngWiySI/OQx/KuA/uIFI5ErUD0mZDTHfGI/Pggkr2ELXwxLb6NGQYtHaV9fQ2IVku\nNHy57wO9iZ+srGWH2kL/aUMlthqGGRrpU1wp35a3Nki7xtUVvSVsfNRvKdKbYprq\nAHIfI0hLB+rbKaVdalzA1cx1tkR/aMKpfd6mHngZlif3MMspdOzYarE0wVOW8N15\n1FzNNOG2SMFW4l2r6A7aKNEJZjiLNc7zIuI0lwUC9E32Sl/0re7iTsgCg4haxyIE\nqGrs6xb8ybWZSbJTQp/Lyy1Z9jxBvfkHb/3klkvu4pgRUAx7xrl+P6JYgIDNrN1G\n5hQHpr9EfBeuUFrb61le7EcbhNeuaeTpKWPsOKY/9IkZGZCjM9fT634TePXs59JW\n38tdCrOT\n=mDXL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
          "sha": "2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2737197ff39f98b0fbdf0fe913c1a7c8ee0f318c"
        }
      ],
      "message": "test: Add basic test for BIP 37",
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-25T10:45:43Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-12T17:36:46Z"
      },
      "sha": "fa156999695ddaeb016d8320bee62f8d96679d55"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3163426347,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzE2MzQyNjM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3163426347",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-25T10:46:38Z"
    },
    {
      "event": "commented",
      "id": 605360868,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTM2MDg2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605360868",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-27T23:55:01Z",
      "updated_at": "2020-03-27T23:55:01Z",
      "author_association": "MEMBER",
      "body": "Anything left to do here?",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605360868",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "commented",
      "id": 605617660,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTYxNzY2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605617660",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T10:51:04Z",
      "updated_at": "2020-03-29T10:51:04Z",
      "author_association": "MEMBER",
      "body": "> Anything left to do here?\r\n\r\nI am still sceptical about the point of the two remaining `.sync_with_ping()`s in the context of this test. Having skimmed through all of its uses in other functional tests, I identified three use-cases for `.sync_with_ping()`:\r\n* ensuring that the version exchange with the test node already happened\r\n* ensuring that messages that have been sent from the test node itself to the peer have been processed, with the following pattern: `peer.send_message(...)`, following `peer.sync_with_ping()`\r\n* checking if a peer is still alive or keeping connections alive, respectively\r\n\r\nIn this test none of this really applies, the `.sync_with_ping()`s just serve as implicit delay, so I'd prefer to make the delay explicit. Thats at least my undestanding of the situation, maybe someone with more experience with the P2P tests can comment here.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605617660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "commented",
      "id": 605624202,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTYyNDIwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605624202",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T11:50:25Z",
      "updated_at": "2020-03-29T11:50:25Z",
      "author_association": "MEMBER",
      "body": "The rationale is the same, I assume that an \"imaginary\" message (obviously it doesn't exist on the wire, because that would be a bug) can at most take 3 ping-pong round trips. (Assuming also immediate tx relay). I am not sure what I could replace the delay with that would make more sense. If I use a plain `time.sleep`, I wouldn't know what to pass as argument, because I don't know the time it takes for a round trip. Also, with immediate tx relay disabled, I can not predict the poisson delay on top of that.\r\n\r\nI think the best solution is to remove the test, if it is too controversial.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605624202",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "commented",
      "id": 605628907,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTYyODkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605628907",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T12:31:47Z",
      "updated_at": "2020-03-29T12:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK fa156999695ddaeb016d8320bee62f8d96679d55 -- more testing coverage is better than less testing coverage\r\n\r\nImprovements can be done in a followup.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605628907",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "commented",
      "id": 605655656,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTY1NTY1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605655656",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T15:37:40Z",
      "updated_at": "2020-03-29T15:37:40Z",
      "author_association": "MEMBER",
      "body": "@practicalswift I don't want to just merge this as long as there are outstanding concerns from @theStack . I don't know how to address them, so removing that test case temporarily and adding it back when they are figured out would be an option.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605655656",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "mentioned",
      "id": 3176021027,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE3NjAyMTAyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176021027",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T15:37:41Z"
    },
    {
      "event": "subscribed",
      "id": 3176021029,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNzYwMjEwMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176021029",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T15:37:41Z"
    },
    {
      "event": "mentioned",
      "id": 3176021032,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE3NjAyMTAzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176021032",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T15:37:41Z"
    },
    {
      "event": "subscribed",
      "id": 3176021034,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNzYwMjEwMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176021034",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T15:37:41Z"
    },
    {
      "event": "commented",
      "id": 605661086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNTY2MTA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/605661086",
      "actor": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T16:17:26Z",
      "updated_at": "2020-03-29T16:17:26Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke: It was not my intention to block this PR -- indeed I think _not_ merging this PR would be far worse than having a test with a small synchronization controversy (that only comes from one single person so far). The pattern of `sync_with_ping()`ing the same node more than once in a row for synchronization purposes has never been used so far in any functional tests, which raised my doubts if its the right tool. But with your description of \"at most taking that many ping-pong roundtrips\" it makes a bit more sense to me now. \r\n\r\n(I still think that in an ideal world all those P2P tests should also work with immediate tx relay disabled, but on the other hand I also have no idea how to realize this.)",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#issuecomment-605661086",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18334"
    },
    {
      "event": "mentioned",
      "id": 3176059541,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzE3NjA1OTU0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176059541",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T16:17:26Z"
    },
    {
      "event": "subscribed",
      "id": 3176059543,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDMxNzYwNTk1NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3176059543",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-29T16:17:26Z"
    },
    {
      "event": "merged",
      "id": 3180147973,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzE4MDE0Nzk3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180147973",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e1fc03b185d89f21da1bee2f8b7900d65745b30",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e1fc03b185d89f21da1bee2f8b7900d65745b30",
      "created_at": "2020-03-30T19:29:51Z"
    },
    {
      "event": "closed",
      "id": 3180147991,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzE4MDE0Nzk5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180147991",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:29:52Z"
    },
    {
      "event": "referenced",
      "id": 3180169014,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMxODAxNjkwMTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180169014",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7c914b20abd4ddbd4d8bbe22b807071c7f9a7c5c",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7c914b20abd4ddbd4d8bbe22b807071c7f9a7c5c",
      "created_at": "2020-03-30T19:34:58Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 3180173831,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQzMTgwMTczODMx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180173831",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:36:21Z"
    },
    {
      "event": "referenced",
      "id": 3801570848,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4MDE1NzA4NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3801570848",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "887b712b1778917f54033c0e9a3047ce72b80b25",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/887b712b1778917f54033c0e9a3047ce72b80b25",
      "created_at": "2020-09-24T06:23:55Z"
    },
    {
      "event": "locked",
      "id": 6073770712,
      "node_id": "LOE_lADOABII584ik5lJzwAAAAFqBmLY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073770712",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:28:35Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396134933",
      "pull_request_review_id": 379042104,
      "id": 396134933,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNDkzMw==",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )",
      "path": "test/functional/p2p_filter.py",
      "position": 32,
      "original_position": 31,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could add a short comment on what this filter's dimensions are based upon (w.r.t. target parameters number of elements N, false positive rate P)?",
      "created_at": "2020-03-22T20:03:20Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396134933",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396134933"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": 26,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396139141",
      "pull_request_review_id": 379042104,
      "id": 396139141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzOTE0MQ==",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, filter_address)\n+        filter_node.sync_with_ping()  # wait for inv\n+        filter_node.sync_with_ping()  # wait for merkleblock",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 74,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This looks fishy, can two consecutive `sync_with_ping()` calls actually help more for synchronization than just one? To my understanding, `sync_with_ping` is only helpful whenever a node is already processing a received message and we want to guarantee that the processing is finished. I don't see how you could \"wait for messages\" with that.\r\nWe neither know that at the start of the first `sync_with_ping()` call the expected _inv_ message from node0 has already arrived, nor that at the second `sync_with_ping()` call _merkleblock_ has arrived (or even getdata was received from node0 before). I had a similar problem while working on https://github.com/bitcoin/bitcoin/pull/17461 (see https://github.com/bitcoin/bitcoin/pull/17461#issuecomment-590772489) with an adequate but still not 100% satisfactory waiting solution.\r\n\r\nTo prove my point, the test fails without the immediate tx relay enabled (which should only serve as speed-up, but not as synchronization mechanism, in my humble opinion).",
      "created_at": "2020-03-22T20:48:52Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r396139141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396139141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397156367",
      "pull_request_review_id": 380313714,
      "id": 397156367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NjM2Nw==",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )",
      "path": "test/functional/p2p_filter.py",
      "position": 32,
      "original_position": 31,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "in_reply_to_id": 396134933,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, extended the comment to state the filter parameters.",
      "created_at": "2020-03-24T13:36:34Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397156367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397156367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": 26,
      "original_start_line": 25,
      "start_side": "RIGHT",
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397157123",
      "pull_request_review_id": 380314688,
      "id": 397157123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NzEyMw==",
      "diff_hunk": "@@ -0,0 +1,107 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            \"-whitelist=noban@127.0.0.1\",  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, filter_address)\n+        filter_node.sync_with_ping()  # wait for inv\n+        filter_node.sync_with_ping()  # wait for merkleblock",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 74,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fabf37381c4b62fc057ca0df4e77f2f2deb0e428",
      "in_reply_to_id": 396139141,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, replaced with `filter_node.wait_for_tx(txid)`, which is a stricter check that also passes when immediate tx relay is disabled.",
      "created_at": "2020-03-24T13:37:38Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397157123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397157123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 73,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397459811",
      "pull_request_review_id": 380695135,
      "id": 397459811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1OTgxMQ==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 83,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think `sync_with_ping()` doesn't help here for reliable synchronization as well, as in theory there could still arrive a new message at the filter node after the asserts (same argumentation as my code-review comment a few lines above). Maybe using `wait_until` on `filter_node.merkleblock_received` would make it more robust?",
      "created_at": "2020-03-24T21:04:15Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397459811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397459811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397465360",
      "pull_request_review_id": 380695135,
      "id": 397465360,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NTM2MA==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "path": "test/functional/p2p_filter.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this helps for synchronization here, see code-review comment above.",
      "created_at": "2020-03-24T21:14:52Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397465360",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397465360"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": 89,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397529298",
      "pull_request_review_id": 380773777,
      "id": 397529298,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyOTI5OA==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 83,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": 397459811,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "A wait_until on `filter_node.merkleblock_received` does return immediately when the `        assert filter_node.merkleblock_received` has passed. I don't see how this could help anything.",
      "created_at": "2020-03-24T23:47:51Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397529298",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397529298"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397735934",
      "pull_request_review_id": 381005693,
      "id": 397735934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzczNTkzNA==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 83,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": 397459811,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What I meant was removing the `sync_with_ping()`s completely (as they effectively only serve as hidden delays, they don't do anything for reliable synchronization -- the expected messages could in theory still appear after) and replacing the `assert filter_node.merkleblock_received` with a `wait_until`-pendant, similar like you did on the subtests 1 and 4 on the latest force-push (https://github.com/bitcoin/bitcoin/compare/fabf37381c4b62fc057ca0df4e77f2f2deb0e428..fa64441bd7a284a99c0e637e33e6aff690718d75).\r\n\r\nOr did I overlook something and the situation for subtests 2 and 3 is different?",
      "created_at": "2020-03-25T10:05:45Z",
      "updated_at": "2020-03-25T10:46:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397735934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397735934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397760775",
      "pull_request_review_id": 381035073,
      "id": 397760775,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2MDc3NQ==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received",
      "path": "test/functional/p2p_filter.py",
      "position": null,
      "original_position": 83,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": 397459811,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Replaced with `filter_node.wait_for_merkleblock()`.",
      "created_at": "2020-03-25T10:47:13Z",
      "updated_at": "2020-03-25T10:47:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397760775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397760775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": null,
      "original_start_line": 79,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397761055",
      "pull_request_review_id": 381035398,
      "id": 397761055,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2MTA1NQ==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "path": "test/functional/p2p_filter.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": 397465360,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can not be replaced with a `wait_for` unless I am mistaken",
      "created_at": "2020-03-25T10:47:41Z",
      "updated_at": "2020-03-25T10:47:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397761055",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397761055"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": 89,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787108",
      "pull_request_review_id": 381065999,
      "id": 397787108,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NzEwOA==",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test BIP 37\n+\"\"\"\n+\n+from test_framework.messages import (\n+    MSG_BLOCK,\n+    MSG_FILTERED_BLOCK,\n+    msg_getdata,\n+    msg_filterload,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+\n+class FilterNode(P2PInterface):\n+    # This is a P2SH watch-only wallet\n+    watch_script_pubkey = 'a914ffffffffffffffffffffffffffffffffffffffff87'\n+    # The initial filter (n=10, fp=0.000001) with just the above scriptPubKey added\n+    watch_filter_init = msg_filterload(\n+        data=\n+        b'@\\x00\\x08\\x00\\x80\\x00\\x00 \\x00\\xc0\\x00 \\x04\\x00\\x08$\\x00\\x04\\x80\\x00\\x00 \\x00\\x00\\x00\\x00\\x80\\x00\\x00@\\x00\\x02@ \\x00',\n+        nHashFuncs=19,\n+        nTweak=0,\n+        nFlags=1,\n+    )\n+\n+    def on_inv(self, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            # inv messages can only contain TX or BLOCK, so translate BLOCK to FILTERED_BLOCK\n+            if i.type == MSG_BLOCK:\n+                i.type = MSG_FILTERED_BLOCK\n+            want.inv.append(i)\n+        if len(want.inv):\n+            self.send_message(want)\n+\n+    def on_merkleblock(self, message):\n+        self.merkleblock_received = True\n+\n+    def on_tx(self, message):\n+        self.tx_received = True\n+\n+\n+class FilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+        self.extra_args = [[\n+            '-peerbloomfilters',\n+            '-whitelist=noban@127.0.0.1',  # immediate tx relay\n+        ]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info('Add filtered P2P connection to the node')\n+        filter_node = self.nodes[0].add_p2p_connection(FilterNode())\n+        filter_node.send_message(filter_node.watch_filter_init)\n+        filter_node.sync_with_ping()\n+        filter_address = self.nodes[0].decodescript(filter_node.watch_script_pubkey)['addresses'][0]\n+\n+        self.log.info('Check that we receive merkleblock and tx if the filter matches a tx in a block')\n+        filter_node.merkleblock_received = False\n+        block_hash = self.nodes[0].generatetoaddress(1, filter_address)[0]\n+        txid = self.nodes[0].getblock(block_hash)['tx'][0]\n+        filter_node.wait_for_tx(txid)\n+        assert filter_node.merkleblock_received\n+\n+        self.log.info('Check that we only receive a merkleblock if the filter does not match a tx in a block')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()\n+        assert filter_node.merkleblock_received\n+        assert not filter_node.tx_received\n+\n+        self.log.info('Check that we not receive a tx if the filter does not match a mempool tx')\n+        filter_node.merkleblock_received = False\n+        filter_node.tx_received = False\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 90)\n+        filter_node.sync_with_ping()\n+        filter_node.sync_with_ping()",
      "path": "test/functional/p2p_filter.py",
      "position": 90,
      "original_position": 90,
      "commit_id": "fa156999695ddaeb016d8320bee62f8d96679d55",
      "original_commit_id": "fa5dbcf25ba59ca1eac08fa079a24cb721da2b60",
      "in_reply_to_id": 397465360,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed, `wait_for` is not an option here -- it's always problematic to assert that something was _not_ received, as we never know for sure that it couldn't still come in in the future. I don't know a better way here than to just wait for some arbitrary time between the `.sendtoaddress()` call and the `asserts` :confused:",
      "created_at": "2020-03-25T11:34:42Z",
      "updated_at": "2020-03-25T11:34:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18334#discussion_r397787108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/397787108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18334"
        }
      },
      "start_line": 89,
      "original_start_line": 89,
      "start_side": "RIGHT",
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    }
  ]
}