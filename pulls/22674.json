{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674",
    "id": 707292920,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NzA3MjkyOTIw",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22674",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/22674.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/22674.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/046e8ff264be6b888c0f9a9d822e32aa74e19b78",
    "number": 22674,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "validation: mempool validation and submission for packages of 1 child + parents",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is 1 chunk of [Package Mempool Accept](https://gist.github.com/glozow/dc4e9d5c5b14ade7cdfac40f43adb18a); it restricts packages to 1 child with its parents, doesn't allow conflicts, and doesn't have CPFP (yet).  Future PRs (see #22290) will add RBF and CPFP within packages.",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 118379652,
        "node_id": "MDU6TGFiZWwxMTgzNzk2NTI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Validation",
        "name": "Validation",
        "color": "6060aa",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "created_at": "2021-08-10T12:06:09Z",
    "updated_at": "2023-01-17T10:08:15Z",
    "closed_at": "2021-12-15T19:43:06Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-12-15T19:43:06Z",
    "merge_commit_sha": "216f4ca9e7ccb1f0fcb9bab0f9940992a87ae55f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "glozow:package-child-with-parents",
      "ref": "package-child-with-parents",
      "sha": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 225090,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T10:00:34Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2022-01-07T17:55:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "913b7148a26c3cca93f8bf20f6c57609d0ede0a6",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 567,
    "deletions": 21,
    "changed_files": 9,
    "commits": 8,
    "review_comments": 179,
    "comments": 20
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 5135360558,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEzNTM2MDU1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5135360558",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T12:44:43Z"
    },
    {
      "event": "labeled",
      "id": 5135365237,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUxMzUzNjUyMzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5135365237",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T12:45:38Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "labeled",
      "id": 5135365642,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUxMzUzNjU2NDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5135365642",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T12:45:43Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 726388097,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2Mzg4MDk3",
      "url": null,
      "actor": null,
      "commit_id": "e52f7770e38c9b7feffcab9d77c80f942935aa47",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-726388097",
      "submitted_at": "2021-08-10T12:48:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "commented",
      "id": 896020657,
      "node_id": "IC_kwDOABII5841aDCx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896020657",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T13:18:01Z",
      "updated_at": "2021-08-10T13:18:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK\r\n\r\nJust reviewing my [notes](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-June/019148.html) from the L2 onchain support workshops. It was agreed that restricting to 1 child in a package would be sufficient for discussed L2 use cases (at least for now) and this PR implements multiple parents, 1 child packages rather than restricting to 1 parent, 1 child because of minimal increased implementation complexity. ",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896020657",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "commented",
      "id": 896102884,
      "node_id": "IC_kwDOABII5841aXHk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896102884",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:59:48Z",
      "updated_at": "2021-08-10T14:59:48Z",
      "author_association": "MEMBER",
      "body": "Thank you @michaelfolkson. Indeed you are correct, we discussed that [multiple parent + 1 child would be best but 1 parent + 1 child sufficient](https://gist.github.com/ariard/32b51ecceccc5c6f647bae86d083c442#file-l2-onchain-support-meeting2-txt-L57-L72) for addressing L2 use cases. After speaking with @TheBlueMatt offline and getting further into the implementation, I realized that the multi-parent case would be significantly more helpful without being that much more complex.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896102884",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5136183980,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEzNjE4Mzk4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5136183980",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:59:49Z"
    },
    {
      "event": "subscribed",
      "id": 5136183986,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMzYxODM5ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5136183986",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:59:49Z"
    },
    {
      "event": "mentioned",
      "id": 5136183995,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEzNjE4Mzk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5136183995",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:59:49Z"
    },
    {
      "event": "subscribed",
      "id": 5136183999,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMzYxODM5OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5136183999",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T14:59:49Z"
    },
    {
      "event": "commented",
      "id": 896235448,
      "node_id": "IC_kwDOABII5841a3e4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896235448",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-10T18:55:53Z",
      "updated_at": "2021-12-14T21:02:11Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23448](https://github.com/bitcoin/bitcoin/pull/23448) (refactor, consensus: remove calls to global `Params()` in validation layer by lsilva01)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-896235448",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "commented",
      "id": 897951289,
      "node_id": "IC_kwDOABII5841haY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/897951289",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z",
      "updated_at": "2021-08-12T20:37:40Z",
      "author_association": "MEMBER",
      "body": "> After speaking with @TheBlueMatt offline and getting further into the implementation, I realized that the multi-parent case would be significantly more helpful without being that much more complex.\r\n\r\nThis came, in part, out of a discussion between @ariard and I about an implementation @ariard had to implement the lightning \"anchor output\" protocol in LDK[1], and later a discussion between @sdaftuar and I had about how practical it is to avoid some of the complexity @ariard suggested there. Specifically, in order to work around issues with potential package relay systems, @ariard suggested a somewhat complicated approach involving chaining spends and broadcasting conflicts to see which one confirms first. This avoids us having to implement the \"one on-chain output for future feerate bumping per open channel\" logic that others have, which is incredibly wasteful of on-chain space and also adds a lot of complexity for LDK's downstream users. If we can do replacement and multiple (no-onchain-parent) parents without a lot of complexity, it will save us a lot of heartache later. @sdaftuar suggested that it likely won't add a lot of complexity, so I suggested that to @glozow, who seemed to agree.\r\n\r\n[1] https://github.com/rust-bitcoin/rust-lightning/issues/989",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-897951289",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5152050549,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1MjA1MDU0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050549",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "subscribed",
      "id": 5152050554,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTIwNTA1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050554",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "mentioned",
      "id": 5152050557,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1MjA1MDU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050557",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "subscribed",
      "id": 5152050560,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTIwNTA1NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050560",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "mentioned",
      "id": 5152050572,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1MjA1MDU3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050572",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "subscribed",
      "id": 5152050580,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTIwNTA1ODA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050580",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "mentioned",
      "id": 5152050583,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE1MjA1MDU4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050583",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:40Z"
    },
    {
      "event": "subscribed",
      "id": 5152050587,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNTIwNTA1ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5152050587",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-12T20:37:41Z"
    },
    {
      "event": "commented",
      "id": 900352202,
      "node_id": "IC_kwDOABII5841qkjK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/900352202",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T14:33:26Z",
      "updated_at": "2021-08-17T14:33:57Z",
      "author_association": "MEMBER",
      "body": "@TheBlueMatt \r\n\r\n> If we can do replacement and multiple (no-onchain-parent) parents without a lot of complexity, it will save us a lot of heartache later.\r\n\r\nNo, I'm going to stick to the domino-bumping approach we previously discussed.\r\n\r\nMultiple parents aren't safe for lightning as it does allow a counterparty to delay the confirmation of a specific channel commitment by overbidding on any bundled commitment inside the same package.  Let's say you broadcast the package A+B+C+D+E, where A,B,C,D are commitment transactions and E a common CPFP. Previously, your malicious counterparty have submitted a better-feerate package A'+F to the network mempools. When your package {A,B,C,D,E} is sumbitted for acceptance, it will failed on the better-feerate requirement : https://github.com/bitcoin/bitcoin/blob/fdd80b0a53b4af0b29cb6e03118e2456d053a757/src/validation.cpp#L830\r\n(fwiw, not documented in bip125).\r\n\r\nAs you don't know the failure reason from the honest LN node viewpoint, it's hard to decide on the next broadcast strategy. Either splitting the former package in X isolated one parent+child ones, because you suspect your counterparty to meddle with your transaction confirmation (similar to https://github.com/lightningnetwork/lightning-rfc/pull/803). Or attribute the failure to feerate efficiency w.r.t to top of of the mempool transactions.\r\n\r\nNote, your counterparty doesn't have to be malicious for your multiple parents package to fail confirmation. A honest counterparty can just have decided to go on-chain concurrently, with a better fee-estimation than you.\r\n\r\nOf course, I think this unsafety is only concerning in case of time-sensitive confirmations. If all your commitments are devoid of HTLC outputs, it's not time-sensitive anymore, and that's okay to have confirmation failure on the edge cases, not funds are loss, beyond the timevalue of liquidity.\r\n\r\nFurther, endorsing a Core dev hat, I would be pretty conservative with multiple-transaction p2p package. AFAIK, we already have DoS concerns to validate a _single_ transaction that would finally lead to mempool acceptance failure (see https://github.com/bitcoin/bitcoin/pull/20277#issuecomment-754642226). IIRC we have not improved on this area due to a lack of an agreement on an efficient anti-DoS strategy against malicious transaction submission (see https://github.com/bitcoin/bitcoin/pull/21224)\r\n\r\nIf we either make progress in this direction and start to penalize or slow-down heavy-package propagation, we might in the future break LN softwares which would have made assumptions on multiple-parent support. Note, this can also in a disaster scenario if we discover DoS vulns we would have thought out and the Core project don't have a formalized process in case of internal wreckage with significant security implications for downstream projects.\r\n\r\nSo back to a LN dev hat, I prefer to be conservative with the design of LDK anchor output backend and not make assumptions on potential multiple-parents support. For now, I think we already make far too assumptions on Core mempools behavior, without fully understanding all the implications. \r\n\r\nApart of the multi-parents point, I think the change proposed are okay. Though I would recall once again, imho it would be better to present a BIP draft on the ml for this serie of PRs, once for all to agree on a  consistent v0.1 package model, instead to all waste time on local discussions splitted across projects issues, slacks and irc...",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-900352202",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5169383071,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE2OTM4MzA3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5169383071",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T14:33:58Z"
    },
    {
      "event": "subscribed",
      "id": 5169383078,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxNjkzODMwNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5169383078",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-17T14:33:58Z"
    },
    {
      "event": "commented",
      "id": 904071910,
      "node_id": "IC_kwDOABII58414wrm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904071910",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-23T19:49:35Z",
      "updated_at": "2021-08-23T19:49:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "@ariard: Core could support multiple parents, 1 child packages whilst the Lightning protocol could only support 1 parent, 1 child packages (assuming your safety assessment above for Lightning is correct)? If Lightning needs only a subset of what Core offers there is generally less of a problem. It is when Lightning needs a superset of what Core offers where there is a problem. This would need a separation of validation and submission with the Lightning protocol/implementations enforcing different submission rules to Core's submission rules. Unless you are worried about a rogue Lightning implementation not following a future Lightning spec and creating a multiple parent, 1 child package when it shouldn't?\r\n\r\n> Though I would recall once again, imho it would be better to present a BIP draft on the ml for this serie of PRs, once for all to agree on a consistent v0.1 package model, instead to all waste time on local discussions splitted across projects issues, slacks and irc...\r\n\r\nI agree on the BIP draft.\r\n\r\n",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-904071910",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5196512478,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTE5NjUxMjQ3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5196512478",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-23T19:49:35Z"
    },
    {
      "event": "subscribed",
      "id": 5196512479,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxOTY1MTI0Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5196512479",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-23T19:49:35Z"
    },
    {
      "event": "commented",
      "id": 905006315,
      "node_id": "IC_kwDOABII58418Uzr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905006315",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-24T22:02:22Z",
      "updated_at": "2021-08-24T22:02:22Z",
      "author_association": "MEMBER",
      "body": "> Core could support multiple parents, 1 child packages whilst the Lightning protocol could only support 1 parent, 1 child packages\r\n\r\nYes I think I've made the comment already in #16401, about the batching use-case for LN. I think it's okay as long as you don't have time-sensitive unilateral closure, where a counterparty might interfere with the spending of one funding output also covered by the package to decrease the confirmation odds of all other channels closure.\r\n\r\n>  (assuming your safety assessment above for Lightning is correct)?\r\n\r\nPlease, would be great to have more eyes on this point. Note, iirc \"anchor output\" is only deployed by lnd so far and the last version (`option_zero_htlc_tx_fee`) isn't yet finalized. I've not look in-depth on their anchored transaction broadcast strategy though avoiding to introduce yet-another-vector of transaction-relay jamming that's something I've in mind for the LDK implementation.\r\n\r\n> Unless you are worried about a rogue Lightning implementation not following a future Lightning spec and creating a multiple parent, 1 child package when it shouldn't?\r\n\r\nNote, the BOLTs loosely specify the safe propagation of LN time-sensitive transactions. It's left to the knowledge of implementors for the best part (dust threshold, standard script flags, min tx size, ...) What I'm worried of is uninformed Lightning or L2 developers extending even further than today the scope of assumptions on mempool/p2p Core's behavior with safety implications for their protocols. Especially when it's a behavior potentially frail that we might heavily revise in the future such as handling of DoSy transactions.\r\n\r\nAgain, with the lack of a clear project philosophy on the valid set of assumptions one can make on the stability of what Core offers at the mempool/p2p level, I'm learning the lesson, better to be conservative as an upper layer dev!\r\n",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-905006315",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "commented",
      "id": 905259534,
      "node_id": "IC_kwDOABII58419SoO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/905259534",
      "actor": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T07:38:06Z",
      "updated_at": "2021-08-25T07:39:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Again, with the lack of a clear project philosophy on the valid set of assumptions one can make on the stability of what Core offers at the mempool/p2p level, I'm learning the lesson, better to be conservative as an upper layer dev!\r\n\r\nIf you, Lightning devs etc said to @glozow, Core etc that Lightning can't cope with multiple parent, 1 child packages and it can't enforce the restriction of 1 parent, 1 child packages at Layer 2 (assuming Core goes with multiple parent, 1 child) I am pretty sure Core will implement 1 parent, 1 child. This package relay project afaiu is primarily for Lightning (although there are other use cases). There are clearly some tricky things as we move between layers but I think this particular one is easy to navigate assuming Lightning devs can assess what it is comfortable with Core doing.",
      "user": {
        "login": "michaelfolkson",
        "id": 16323900,
        "node_id": "MDQ6VXNlcjE2MzIzOTAw",
        "avatar_url": "https://avatars.githubusercontent.com/u/16323900?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/michaelfolkson",
        "html_url": "https://github.com/michaelfolkson",
        "followers_url": "https://api.github.com/users/michaelfolkson/followers",
        "following_url": "https://api.github.com/users/michaelfolkson/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/michaelfolkson/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/michaelfolkson/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
        "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
        "repos_url": "https://api.github.com/users/michaelfolkson/repos",
        "events_url": "https://api.github.com/users/michaelfolkson/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-905259534",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5204904217,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTIwNDkwNDIxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5204904217",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T07:38:06Z"
    },
    {
      "event": "subscribed",
      "id": 5204904222,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUyMDQ5MDQyMjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5204904222",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-25T07:38:06Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5247607389,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAE4yCJd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5247607389",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-02T13:45:02Z"
    },
    {
      "event": "labeled",
      "id": 5278387075,
      "node_id": "LE_lADOABII5845g1_izwAAAAE6ncuD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5278387075",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-09T13:04:54Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5357072557,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAE_TnCt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5357072557",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T16:08:19Z"
    },
    {
      "event": "unlabeled",
      "id": 5357080007,
      "node_id": "UNLE_lADOABII5845g1_izwAAAAE_To3H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5357080007",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T16:09:52Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 5357080657,
      "node_id": "LE_lADOABII5845g1_izwAAAAE_TpBR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5357080657",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T16:10:03Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 926757287,
      "node_id": "IC_kwDOABII5843PTGn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/926757287",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T16:17:17Z",
      "updated_at": "2021-09-24T16:17:17Z",
      "author_association": "MEMBER",
      "body": "Rebased since #22675 was merged. I've reduced this PR's size a little bit. It no longer adds the submitrawpackage RPC, but has unit tests. Mailing list post is up.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-926757287",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "unlabeled",
      "id": 5357632228,
      "node_id": "UNLE_lADOABII5845g1_izwAAAAE_Vvrk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5357632228",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-24T18:07:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5365606911,
      "node_id": "LE_lADOABII5845g1_izwAAAAE_0Kn_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5365606911",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-27T13:26:34Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5372438440,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFAOOeo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5372438440",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-28T09:24:32Z"
    },
    {
      "event": "commented",
      "id": 929016427,
      "node_id": "IC_kwDOABII5843X6pr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929016427",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-28T09:25:30Z",
      "updated_at": "2021-09-28T09:25:30Z",
      "author_association": "MEMBER",
      "body": "Rebased on master and squashed a couple commits",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-929016427",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "unlabeled",
      "id": 5372514023,
      "node_id": "UNLE_lADOABII5845g1_izwAAAAFAOg7n",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5372514023",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-28T09:36:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 5430684324,
      "node_id": "LE_lADOABII5845g1_izwAAAAFDsaqk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5430684324",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-07T19:40:48Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 946451358,
      "node_id": "IC_kwDOABII5844abOe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/946451358",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T07:47:28Z",
      "updated_at": "2021-10-19T07:48:13Z",
      "author_association": "MEMBER",
      "body": "Concept ACK.\r\n\r\nI agree with @ariard: I personally will use a (1 parent - 1 child) package for the current lightning anchor outputs scheme because it is time-sensitive and subject to attacks from a malicious counterparty.\r\n\r\nHowever, since it doesn't make the bitcoind code much more complex, I believe that allowing (N parents - 1 child) can be very beneficial to other off-chain schemes, so we shouldn't restrict them to (1 parent - 1 child).\r\n\r\nFor example, I would use it in lightning to bump multiple funding transactions (or mutual close transactions) that have a low feerate at once. That feels like a very reasonable use of (N parents - 1 child) that has no drawbacks whatsoever.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-946451358",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5483314367,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFG1Ly_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5483314367",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T07:47:29Z"
    },
    {
      "event": "subscribed",
      "id": 5483314372,
      "node_id": "SE_lADOABII5845g1_izwAAAAFG1LzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5483314372",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T07:47:29Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5485614740,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFG99aU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5485614740",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T14:10:00Z"
    },
    {
      "event": "unlabeled",
      "id": 5486437147,
      "node_id": "UNLE_lADOABII5845g1_izwAAAAFHBGMb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5486437147",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-19T16:08:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5492111248,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFHWveQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5492111248",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-20T13:54:14Z"
    },
    {
      "event": "commented",
      "id": 947853313,
      "node_id": "IC_kwDOABII5844fxgB",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947853313",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-20T16:54:39Z",
      "updated_at": "2021-10-20T16:54:39Z",
      "author_association": "MEMBER",
      "body": "Rebased, fixed a small bug caught by t-bast offline, and added a formal-ish doc that specifies the set of definitions and rules for packages.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-947853313",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "reviewed",
      "id": 784689556,
      "node_id": "PRR_kwDOABII584uxWmU",
      "url": null,
      "actor": null,
      "commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nGreat to see `doc/package_mempool_acceptance.md` :)\r\n\r\nW.r.t unsafety of multiple-commitments-one-child for lightning, I can propose a bolt/blip document explaining the pitfalls for anchor outputs. Other L2 protocols with time-sensitive requirements (e.g DLC/Revault) could be able to do so. I think that's better ecosystem-wise rather than a \"Motivation\" section in `package_mempool_acceptance` that we would need to update anytime a new use-case of package acceptance is designed (or just link to upper layer docs ?)\r\n\r\nStarted to reviewed until 78d3665",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-784689556",
      "submitted_at": "2021-10-20T17:09:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 785280952,
      "node_id": "PRR_kwDOABII584uzm-4",
      "url": null,
      "actor": null,
      "commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-785280952",
      "submitted_at": "2021-10-21T07:11:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5499800900,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFH0E1E",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5499800900",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-21T16:32:49Z"
    },
    {
      "event": "added_to_project",
      "id": 5500652904,
      "node_id": "ATPE_lADOABII5845g1_izwAAAAFH3U1o",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5500652904",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-21T19:13:56Z",
      "project_card": {
        "id": 71323709,
        "url": "https://api.github.com/projects/columns/cards/71323709",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "labeled",
      "id": 5504813891,
      "node_id": "LE_lADOABII5845g1_izwAAAAFIHMtD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5504813891",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-22T13:14:23Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "reviewed",
      "id": 787558713,
      "node_id": "PRR_kwDOABII584u8TE5",
      "url": null,
      "actor": null,
      "commit_id": "f3f4370401566d32e6e09ca17af9f534b8ad0750",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Reviewed until 5ab8cb23",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-787558713",
      "submitted_at": "2021-10-24T23:56:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 790406468,
      "node_id": "PRR_kwDOABII584vHKVE",
      "url": null,
      "actor": null,
      "commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I've reviewed the first 3 commits. Looking good so far!\r\n\r\nI suggest changing the word \"static\" in the first two commits to \"non-contextual\".",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-790406468",
      "submitted_at": "2021-10-27T10:53:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 790614043,
      "node_id": "PRR_kwDOABII584vH9Ab",
      "url": null,
      "actor": null,
      "commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-790614043",
      "submitted_at": "2021-10-27T16:21:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "commented",
      "id": 953117534,
      "node_id": "IC_kwDOABII5844z2te",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953117534",
      "actor": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-27T16:53:23Z",
      "updated_at": "2021-10-27T16:53:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK  ",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-953117534",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "commented",
      "id": 953814998,
      "node_id": "IC_kwDOABII58442g_W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/953814998",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T12:53:22Z",
      "updated_at": "2021-10-28T12:53:22Z",
      "author_association": "MEMBER",
      "body": "It seems that this PR is a bit large for reviewers, so I've opened #23381 with all of the no-behavior-change commits from this PR. Reviewing that one should be more mechanical. I will address review comments, but am marking this PR as a draft until that one is merged.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-953814998",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "convert_to_draft",
      "id": 5533915681,
      "node_id": "CTDE_lADOABII5845g1_izwAAAAFJ2Noh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5533915681",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T12:53:37Z"
    },
    {
      "event": "removed_from_project",
      "id": 5535207126,
      "node_id": "RFPE_lADOABII5845g1_izwAAAAFJ7I7W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5535207126",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-10-28T16:00:42Z",
      "project_card": {
        "id": 71323709,
        "url": "https://api.github.com/projects/columns/cards/71323709",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 5590711922,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFNO35y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5590711922",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e70fb87a4f8c3b9afab634be64ba7142edd49ddc",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e70fb87a4f8c3b9afab634be64ba7142edd49ddc",
      "created_at": "2021-11-09T15:46:44Z"
    },
    {
      "event": "commented",
      "id": 964323031,
      "node_id": "IC_kwDOABII5845embX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964323031",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T16:34:13Z",
      "updated_at": "2021-11-09T16:34:13Z",
      "author_association": "MEMBER",
      "body": "rebase plz",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-964323031",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592250070,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFNUvbW",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592250070",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T19:50:47Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5592377838,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFNVOnu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592377838",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T20:11:14Z"
    },
    {
      "event": "ready_for_review",
      "id": 5592457644,
      "node_id": "RFRE_lADOABII5845g1_izwAAAAFNViGs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5592457644",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-09T20:21:48Z"
    },
    {
      "event": "commented",
      "id": 964694631,
      "node_id": "IC_kwDOABII5845gBJn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964694631",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T01:22:58Z",
      "updated_at": "2021-11-10T01:22:58Z",
      "author_association": "MEMBER",
      "body": "Rebased, ready for review :)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-964694631",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "reviewed",
      "id": 802597495,
      "node_id": "PRR_kwDOABII584v1qp3",
      "url": null,
      "actor": null,
      "commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK https://github.com/bitcoin/bitcoin/pull/22674/commits/af762281be1a26dc89fa8edcae14eb187c31a185\r\n\r\nThere are subtleties with the `m_view` chain backend that are outside of my reach, and cache state as well, so worth having experienced mempool people look into it.",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-802597495",
      "submitted_at": "2021-11-10T13:49:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "added_to_project",
      "id": 5598807888,
      "node_id": "ATPE_lADOABII5845g1_izwAAAAFNtwdQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5598807888",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-10T17:31:47Z",
      "project_card": {
        "id": 72624778,
        "url": "https://api.github.com/projects/columns/cards/72624778",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 803121864,
      "node_id": "PRR_kwDOABII584v3qrI",
      "url": null,
      "actor": null,
      "commit_id": "40d3f98e7b3d9630f99efe06fba1f6a6a21794b5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK af762281be1a26dc89fa8edcae14eb187c31a185",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-803121864",
      "submitted_at": "2021-11-10T21:15:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 803259643,
      "node_id": "PRR_kwDOABII584v4MT7",
      "url": null,
      "actor": null,
      "commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK af762281be1a26dc89fa8edcae14eb187c31a185\r\n\r\nI'm new and don't have enough understanding on the interactions of this PR with the rest of the codebase, so this is as far as my review will go. I added some nits, apologies if they're _too nitty_ . Not sure yet where the threshold is, so feel free to ignore them of course.\r\n\r\nThanks for the detailed and consistent documentation.",
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-803259643",
      "submitted_at": "2021-11-11T15:17:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 806672769,
      "node_id": "PRR_kwDOABII584wFNmB",
      "url": null,
      "actor": null,
      "commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Still reviewing, I've not browse tests coverage so far.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-806672769",
      "submitted_at": "2021-11-16T02:01:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "commented",
      "id": 976737508,
      "node_id": "IC_kwDOABII5846N9Tk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976737508",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-23T15:40:12Z",
      "updated_at": "2021-11-23T15:40:12Z",
      "author_association": "MEMBER",
      "body": "Thanks for adding documentation on the P2P transaction policy. Some small suggestions:\r\n- Please create a ` doc/policy/README.md` that lists the files in the directory (this can be very brief right now, clearly, but can serve as an overview in the future when more documents are added)\r\n- Please add a link to `doc/policy/README.md` to `doc/README.md` so that everything can be found from the main README",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-976737508",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "reviewed",
      "id": 813888457,
      "node_id": "PRR_kwDOABII584wgvPJ",
      "url": null,
      "actor": null,
      "commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-813888457",
      "submitted_at": "2021-11-23T16:11:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 814358483,
      "node_id": "PRR_kwDOABII584wih_T",
      "url": null,
      "actor": null,
      "commit_id": "73fe6a19a97f1a7ca23ef55416b4497c372c8bb2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Finished a whole first parse. Overall good.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-814358483",
      "submitted_at": "2021-11-24T02:23:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDliMmZkY2E3ZjAzOTExYWM0MGZlMGY4YTBiNWRhNTM0YmVlNDU1NGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b2fdca7f03911ac40fe0f8a0b5da534bee4554b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9b2fdca7f03911ac40fe0f8a0b5da534bee4554b",
      "tree": {
        "sha": "8ac96fe74605aaf0d0288ef6ae25b0ddb3bb6435",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ac96fe74605aaf0d0288ef6ae25b0ddb3bb6435"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ae4ba481ce8f7da173bef24432729c87a36cb70",
          "sha": "8ae4ba481ce8f7da173bef24432729c87a36cb70",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8ae4ba481ce8f7da173bef24432729c87a36cb70"
        }
      ],
      "message": "[packages] add static IsChildWithParents function",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T12:46:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-16T09:29:11Z"
      },
      "sha": "9b2fdca7f03911ac40fe0f8a0b5da534bee4554b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJhMjYxNjlmNjAzNWMyMzgzNzhhM2M5NjQ3MjEzMzI4YTAwNmZhMjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba26169f6035c238378a3c9647213328a006fa23",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ba26169f6035c238378a3c9647213328a006fa23",
      "tree": {
        "sha": "39445873caaf7bb474e1e51a9d9f8483049fa448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39445873caaf7bb474e1e51a9d9f8483049fa448"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b2fdca7f03911ac40fe0f8a0b5da534bee4554b",
          "sha": "9b2fdca7f03911ac40fe0f8a0b5da534bee4554b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9b2fdca7f03911ac40fe0f8a0b5da534bee4554b"
        }
      ],
      "message": "[unit test] context-free package checks",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T12:48:23Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-16T14:08:33Z"
      },
      "sha": "ba26169f6035c238378a3c9647213328a006fa23"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGQ1OWRkYzVjM2QxYzAzNTQ3NGQ3YmM5ZmE5ZjhhMGVlYjFjODQ5OGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c",
      "tree": {
        "sha": "9be6b98492de028b2ab1176bc64738e6ff68f12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9be6b98492de028b2ab1176bc64738e6ff68f12d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba26169f6035c238378a3c9647213328a006fa23",
          "sha": "ba26169f6035c238378a3c9647213328a006fa23",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ba26169f6035c238378a3c9647213328a006fa23"
        }
      ],
      "message": "[packages/doc] define and document package rules\n\nCentral place for putting package-related info. This document or parts\nof it can also be easily ported to other places if deemed appropriate.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T15:33:07Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-10-20T11:02:18Z"
      },
      "sha": "d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE0NGEyOTA5OWE4NjVhYzFkYzNlNTI5MWQ5NTI5ZmJjY2E5YzgzYTQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/144a29099a865ac1dc3e5291d9529fbcca9c83a4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/144a29099a865ac1dc3e5291d9529fbcca9c83a4",
      "tree": {
        "sha": "d467b9018d73c51e321f58bb47d9d1509e7f668c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d467b9018d73c51e321f58bb47d9d1509e7f668c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c",
          "sha": "d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d59ddc5c3d1c035474d7bc9fa9f8a0eeb1c8498c"
        }
      ],
      "message": "[policy] require submitted packages to be child-with-unconfirmed-parents\n\nNote that this code path is not ever executed yet, because\nProcessNewPackage asserts test_accept=true.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T15:33:07Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-22T14:40:22Z"
      },
      "sha": "144a29099a865ac1dc3e5291d9529fbcca9c83a4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlM2ZmMTUxYTFmOTY2NTcyMGNkZjcwZDA3MmIwOThhMmY5NzI2YTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be3ff151a1f9665720cdf70d072b098a2f9726a9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be3ff151a1f9665720cdf70d072b098a2f9726a9",
      "tree": {
        "sha": "ca3c98168e9357de0dec83aceb7529e952e564de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca3c98168e9357de0dec83aceb7529e952e564de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/144a29099a865ac1dc3e5291d9529fbcca9c83a4",
          "sha": "144a29099a865ac1dc3e5291d9529fbcca9c83a4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/144a29099a865ac1dc3e5291d9529fbcca9c83a4"
        }
      ],
      "message": "[validation] full package accept + mempool submission",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T15:42:46Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-20T10:07:25Z"
      },
      "sha": "be3ff151a1f9665720cdf70d072b098a2f9726a9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDgzMTBkOTQyZTA0NmM1YTliNmJkOTBhZmRjZDNhZjY4ZGQ5MWUwODE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8310d942e046c5a9b6bd90afdcd3af68dd91e081",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8310d942e046c5a9b6bd90afdcd3af68dd91e081",
      "tree": {
        "sha": "71d05f6e3d9d314f37d02908216b12b1588e1c1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71d05f6e3d9d314f37d02908216b12b1588e1c1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be3ff151a1f9665720cdf70d072b098a2f9726a9",
          "sha": "be3ff151a1f9665720cdf70d072b098a2f9726a9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be3ff151a1f9665720cdf70d072b098a2f9726a9"
        }
      ],
      "message": "[packages] add sanity checks for package vs mempool limits",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T15:46:48Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-07T13:08:32Z"
      },
      "sha": "8310d942e046c5a9b6bd90afdcd3af68dd91e081"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGUxMmZhZmRhMmRmYmJkZjYzZjEyNWU1YWY3OTdlY2ZhYTY0ODhmNjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
      "tree": {
        "sha": "35bb2be46723a36f0cd474e53cc74c887c623447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35bb2be46723a36f0cd474e53cc74c887c623447"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8310d942e046c5a9b6bd90afdcd3af68dd91e081",
          "sha": "8310d942e046c5a9b6bd90afdcd3af68dd91e081",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8310d942e046c5a9b6bd90afdcd3af68dd91e081"
        }
      ],
      "message": "[validation] de-duplicate package transactions already in mempool\n\nAs node operators are free to set their mempool policies however they\nplease, it's possible for package transaction(s) to already be in the\nmempool. We definitely don't want to reject the entire package in that\ncase (as that could be a censorship vector).\n\nWe should still return the successful result to the caller, so add\nanother result type to MempoolAcceptResult.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T15:46:48Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-23T15:57:10Z"
      },
      "sha": "e12fafda2dfbbdf63f125e5af797ecfaa6488f66"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA0NmU4ZmYyNjRiZTZiODg4YzBmOWE5ZDgyMmUzMmFhNzRlMTliNzg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "tree": {
        "sha": "b0e1ed6716691296786fabb30bd754cc78a57f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0e1ed6716691296786fabb30bd754cc78a57f99"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
          "sha": "e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e12fafda2dfbbdf63f125e5af797ecfaa6488f66"
        }
      ],
      "message": "[unit test] package submission",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-11-29T16:07:18Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-24T16:02:37Z"
      },
      "sha": "046e8ff264be6b888c0f9a9d822e32aa74e19b78"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5686051356,
      "node_id": "HRFPE_lADOABII5845g1_izwAAAAFS6kIc",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5686051356",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T16:11:08Z"
    },
    {
      "event": "commented",
      "id": 981801320,
      "node_id": "IC_kwDOABII5846hRlo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/981801320",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-11-29T16:29:53Z",
      "updated_at": "2021-11-29T16:30:22Z",
      "author_association": "MEMBER",
      "body": "Thanks for the reviews! I've addressed comments and added the commit handling transactions already in mempool since it was the answer to a lot of review questions. Also added some tests and a doc/policy/README.md + link in doc/README.md.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-981801320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "commented",
      "id": 984684442,
      "node_id": "IC_kwDOABII5846sRea",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/984684442",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-02T14:35:41Z",
      "updated_at": "2021-12-02T14:35:41Z",
      "author_association": "MEMBER",
      "body": "Code review ACK 046e8ff264be6b888c0f9a9d822e32aa74e19b78\r\nChanges since af76228 look good to me. Thanks for adding tests and documentation.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-984684442",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "merged",
      "id": 5773938812,
      "node_id": "ME_lADOABII5845g1_izwAAAAFYJ1B8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5773938812",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "216f4ca9e7ccb1f0fcb9bab0f9940992a87ae55f",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/216f4ca9e7ccb1f0fcb9bab0f9940992a87ae55f",
      "created_at": "2021-12-15T19:43:06Z"
    },
    {
      "event": "closed",
      "id": 5773938831,
      "node_id": "CE_lADOABII5845g1_izwAAAAFYJ1CP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5773938831",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T19:43:06Z"
    },
    {
      "event": "removed_from_project",
      "id": 5774017333,
      "node_id": "RFPE_lADOABII5845g1_izwAAAAFYKIM1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5774017333",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-15T19:58:30Z",
      "project_card": {
        "id": 72624778,
        "url": "https://api.github.com/projects/columns/cards/72624778",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "referenced",
      "id": 5774128590,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFYKjXO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5774128590",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "45a1be76bd65b33a6f4898a9b7af2df17844d51d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/45a1be76bd65b33a6f4898a9b7af2df17844d51d",
      "created_at": "2021-12-15T20:21:32Z"
    },
    {
      "event": "reviewed",
      "id": 833528437,
      "node_id": "PRR_kwDOABII584xrqJ1",
      "url": null,
      "actor": null,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think it's better either to revert e12fafd (or past reviewers to look on it)\r\n\r\nThis commit is introducing a good chunk of context with implications for the rest of package relay support, it was not included in the branches previously reviewed and it has only been ACK'ed by 1 reviewer before merge.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-833528437",
      "submitted_at": "2021-12-16T02:24:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "commented",
      "id": 995783522,
      "node_id": "IC_kwDOABII5847WnNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/995783522",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z",
      "updated_at": "2021-12-16T12:45:02Z",
      "author_association": "MEMBER",
      "body": "Thanks @ariard for the prompt re-review!\r\n\r\n> I think it's better either to revert e12fafd (or past reviewers to look on it)\r\n\r\n(And re: IRC convos): I personally think e12fafda2dfbbdf63f125e5af797ecfaa6488f66 made sense for this PR and would have included it in the next one anyway, but I'm obviously biased as the author. I definitely welcome more review on it and can hold off on opening the next package mempool accept PR until it seems people are comfortable. If you have time @jnewbery @t-bast @stickies-v @achow101, we're requesting a look at e12fafda2dfbbdf63f125e5af797ecfaa6488f66 which was added between your ACKs and the merge. Thanks! :)",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#issuecomment-995783522",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22674"
    },
    {
      "event": "mentioned",
      "id": 5778100398,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFYZtCu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100398",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "subscribed",
      "id": 5778100405,
      "node_id": "SE_lADOABII5845g1_izwAAAAFYZtC1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100405",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "mentioned",
      "id": 5778100412,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFYZtC8",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100412",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "subscribed",
      "id": 5778100414,
      "node_id": "SE_lADOABII5845g1_izwAAAAFYZtC-",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100414",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "mentioned",
      "id": 5778100421,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFYZtDF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100421",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "subscribed",
      "id": 5778100426,
      "node_id": "SE_lADOABII5845g1_izwAAAAFYZtDK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100426",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "mentioned",
      "id": 5778100433,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFYZtDR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100433",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "subscribed",
      "id": 5778100437,
      "node_id": "SE_lADOABII5845g1_izwAAAAFYZtDV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100437",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "mentioned",
      "id": 5778100447,
      "node_id": "MEE_lADOABII5845g1_izwAAAAFYZtDf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100447",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "subscribed",
      "id": 5778100452,
      "node_id": "SE_lADOABII5845g1_izwAAAAFYZtDk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778100452",
      "actor": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T12:45:02Z"
    },
    {
      "event": "reviewed",
      "id": 834426999,
      "node_id": "PRR_kwDOABII584xvFh3",
      "url": null,
      "actor": null,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "https://github.com/bitcoin/bitcoin/pull/22674/commits/e12fafda2dfbbdf63f125e5af797ecfaa6488f66 looks good to me, I'm just unsure about the change in the tx results key set...",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-834426999",
      "submitted_at": "2021-12-16T17:55:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 834457349,
      "node_id": "PRR_kwDOABII584xvM8F",
      "url": null,
      "actor": null,
      "commit_id": "e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-834457349",
      "submitted_at": "2021-12-16T18:30:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "reviewed",
      "id": 837111576,
      "node_id": "PRR_kwDOABII584x5U8Y",
      "url": null,
      "actor": null,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-837111576",
      "submitted_at": "2021-12-21T10:59:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
    },
    {
      "event": "head_ref_deleted",
      "id": 5903557914,
      "node_id": "HRDE_lADOABII5845g1_izwAAAAFf4SUa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5903557914",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-01-17T10:57:54Z"
    },
    {
      "event": "referenced",
      "id": 5946774461,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFidJO9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5946774461",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "417e7503f80b8b9cfccd43131f313de8defc0ad5",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417e7503f80b8b9cfccd43131f313de8defc0ad5",
      "created_at": "2022-01-25T02:45:00Z"
    },
    {
      "event": "referenced",
      "id": 5971958293,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFj9NoV",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5971958293",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "81e7f6528eaaed69a6539676992c7b8270c74b19",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/81e7f6528eaaed69a6539676992c7b8270c74b19",
      "created_at": "2022-01-28T16:34:39Z"
    },
    {
      "event": "referenced",
      "id": 6116457018,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFskbo6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6116457018",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "bc49650b7c1240b076849bd805ac10e403764c33",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/bc49650b7c1240b076849bd805ac10e403764c33",
      "created_at": "2022-02-22T09:17:10Z"
    },
    {
      "event": "referenced",
      "id": 6119414281,
      "node_id": "REFE_lADOABII5845g1_izwAAAAFsvtoJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6119414281",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b2aae5647b3f312b8e5852f931be992a7b406ddd",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b2aae5647b3f312b8e5852f931be992a7b406ddd",
      "created_at": "2022-02-22T16:35:01Z"
    },
    {
      "event": "referenced",
      "id": 7801700475,
      "node_id": "REFE_lADOABII5845g1_izwAAAAHRBIB7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7801700475",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3addc7fab2d3266791942947b080f5d330c23c7b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/3addc7fab2d3266791942947b080f5d330c23c7b",
      "created_at": "2022-11-14T08:44:26Z"
    },
    {
      "event": "referenced",
      "id": 7822962194,
      "node_id": "REFE_lADOABII5845g1_izwAAAAHSSO4S",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7822962194",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "8608818eaa2c95825fcd31b2168ea95e975dc3b8",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/8608818eaa2c95825fcd31b2168ea95e975dc3b8",
      "created_at": "2022-11-16T11:32:25Z"
    },
    {
      "event": "referenced",
      "id": 7832136672,
      "node_id": "REFE_lADOABII5845g1_izwAAAAHS1Ovg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7832136672",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5b41420a65f257ba0ce4a24c10ede01f191801e2",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/5b41420a65f257ba0ce4a24c10ede01f191801e2",
      "created_at": "2022-11-17T09:55:16Z"
    },
    {
      "event": "referenced",
      "id": 7832136678,
      "node_id": "REFE_lADOABII5845g1_izwAAAAHS1Ovm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7832136678",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fddc6b49b69d356cbdcd465f87c8f0856b57a22b",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/fddc6b49b69d356cbdcd465f87c8f0856b57a22b",
      "created_at": "2022-11-17T09:55:17Z"
    },
    {
      "event": "locked",
      "id": 8243942747,
      "node_id": "LOE_lADOABII5845g1_izwAAAAHrYJVb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8243942747",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T10:08:15Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685983817",
      "pull_request_review_id": 726388097,
      "id": 685983817,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTk4MzgxNw==",
      "diff_hunk": "@@ -1023,6 +1023,131 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static RPCHelpMan submitrawpackage()",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "0ab20f3581a4f0933fcbf96613c308973e5bba93",
      "in_reply_to_id": null,
      "user": null,
      "body": "I have no clue about details of packages and related PRs. Interested in this RPC which can be helpful in my tests. Is this like broadcasting transactions in batches?\r\n\r\n```C++\r\nfor (int i = 0; i < MAX; i++) {\r\n  if (consensus and mempool policies) {\r\n  // add to broadcast queue\r\n} else {\r\n  // Error\r\n}\r\n}\r\n\r\n//BroadcastTransaction(node, queue);\r\n\r\n```\r\n\r\nIs it possible to select peer for broadcasting this package? Not sure if enough people will ever agree to add such option in `sendrawtransaction` but we can experiment with test RPCs if its easy to implement. Context: https://github.com/bitcoin/bitcoin/issues/21876\r\n\r\nSo RPC can have one argument to mention peer address.\r\n",
      "created_at": "2021-08-10T12:48:30Z",
      "updated_at": "2021-08-10T12:48:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r685983817",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685983817"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1026,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685987629",
      "pull_request_review_id": 726395047,
      "id": 685987629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTk4NzYyOQ==",
      "diff_hunk": "@@ -1023,6 +1023,131 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static RPCHelpMan submitrawpackage()",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "0ab20f3581a4f0933fcbf96613c308973e5bba93",
      "in_reply_to_id": 685983817,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is this like broadcasting transactions in batches?\r\n\r\nNo, but you can make multiple calls to `sendrawtransaction`\r\n\r\n> Is it possible to select peer for broadcasting this package?\r\n\r\nNo, I don't think that would be very helpful here. If you're interested in enabling specific functionality, perhaps open a PR?",
      "created_at": "2021-08-10T12:53:17Z",
      "updated_at": "2021-08-10T12:53:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r685987629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685987629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1026,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686001324",
      "pull_request_review_id": 726413839,
      "id": 686001324,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjAwMTMyNA==",
      "diff_hunk": "@@ -1023,6 +1023,131 @@ static RPCHelpMan testmempoolaccept()\n     };\n }\n \n+static RPCHelpMan submitrawpackage()",
      "path": "src/rpc/rawtransaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "0ab20f3581a4f0933fcbf96613c308973e5bba93",
      "in_reply_to_id": 685983817,
      "user": null,
      "body": "Thanks",
      "created_at": "2021-08-10T13:10:11Z",
      "updated_at": "2021-08-10T13:10:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r686001324",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686001324"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1026,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732922423",
      "pull_request_review_id": 784689556,
      "id": 732922423,
      "node_id": "PRRC_kwDOABII584rr4I3",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.\n  */\n enum class PackageValidationResult {\n     PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n-    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n-    PCKG_TX,                      //!< At least one tx is invalid.\n+    PCKG_BAD,                     //!< The package itself is invalid or malformed.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 13,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's your thinking to introduce a `PCKG_BAD` ? I don't see how it provides a supplemental or more restrictive information to the caller instead of relying on `PCKG_POLICY` and it's a bit confusing as the checks failed with `PCKG_BAD` are already located in `src/policy/packages.cpp`.",
      "created_at": "2021-10-20T15:53:21Z",
      "updated_at": "2021-10-20T17:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732922423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732922423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732923856",
      "pull_request_review_id": 784689556,
      "id": 732923856,
      "node_id": "PRRC_kwDOABII584rr4fQ",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"consensus rules\"",
      "created_at": "2021-10-20T15:54:58Z",
      "updated_at": "2021-10-20T17:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732923856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732923856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732956584",
      "pull_request_review_id": 784689556,
      "id": 732956584,
      "node_id": "PRRC_kwDOABII584rsAeo",
      "diff_hunk": "@@ -41,4 +41,12 @@ class PackageValidationState : public ValidationState<PackageValidationResult> {\n  */\n bool CheckPackage(const Package& txns, PackageValidationState& state);\n \n+/** Context-free check that a package is exactly one child and at least one of its parents. It is\n+ * expected to be sorted, which means the last transaction must be the child. The package cannot\n+ * contain any transactions that are not the child's parents.\n+ * @param[in]   exact   When true, return whether this package is exactly one child and all of its",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7a66557831f26caa1e9d122d959e18dc1f16730a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How are you aiming to use `exact`=true ? \r\n\r\nI understand that if you're aiming to submit the package to your local mempool, you know the state of it and you can adjust the package components to only what is needed (`exact`=false).\r\n\r\nHowever, if you submit a package over the p2p network, one can't assume a knowledge of the network mempools. A missing or replaced parent fails the propagation of the package. For this reason, a package broadcaster should always submit exact packages\r\n\r\nI'm just thinking we should keep the acceptance paths unified between submitting a package over RPC and submitting a package over p2p. ",
      "created_at": "2021-10-20T16:34:11Z",
      "updated_at": "2021-10-20T17:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732956584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732956584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732965588",
      "pull_request_review_id": 784689556,
      "id": 732965588,
      "node_id": "PRRC_kwDOABII584rsCrU",
      "diff_hunk": "@@ -503,6 +503,10 @@ class MemPoolAccept\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n         std::list<CTransactionRef> m_replaced_transactions;\n \n+        bool m_replacement_transaction;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "1a80d27a980762fd07dc2df5a36d2d2a16d2d5d1",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note to reviewers, this commits also cache if the candidate is a replacement transaction based on the presence of conflicting transactions.",
      "created_at": "2021-10-20T16:45:44Z",
      "updated_at": "2021-10-20T17:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732965588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732965588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732978827",
      "pull_request_review_id": 784689556,
      "id": 732978827,
      "node_id": "PRRC_kwDOABII584rsF6L",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 1,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "84215d4a1709c0bf1724ba8fe192e11f989b4cde",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe `doc/policy` or `doc/txrelay` ? I guess we'll have another doc for RBF revamp.\r\n\r\nRelated #22806 ",
      "created_at": "2021-10-20T17:02:44Z",
      "updated_at": "2021-10-20T17:09:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r732978827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732978827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733002610",
      "pull_request_review_id": 784799518,
      "id": 733002610,
      "node_id": "PRRC_kwDOABII584rsLty",
      "diff_hunk": "@@ -503,6 +503,10 @@ class MemPoolAccept\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n         std::list<CTransactionRef> m_replaced_transactions;\n \n+        bool m_replacement_transaction;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "1a80d27a980762fd07dc2df5a36d2d2a16d2d5d1",
      "in_reply_to_id": 732965588,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah, that came from a merge conflict with #22539 which removed it.",
      "created_at": "2021-10-20T17:34:16Z",
      "updated_at": "2021-10-20T17:34:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733002610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733002610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 534,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733009908",
      "pull_request_review_id": 784809037,
      "id": 733009908,
      "node_id": "PRRC_kwDOABII584rsNf0",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.\n  */\n enum class PackageValidationResult {\n     PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n-    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n-    PCKG_TX,                      //!< At least one tx is invalid.\n+    PCKG_BAD,                     //!< The package itself is invalid or malformed.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 13,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": 732922423,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "At some point we will have a P2P protocol for packages which we want to punish peers for violating, so we definitely want to distinguish between a network-wide rule violation and mempool rejection based on our local policy rules. In other words, this distinction mainly informs the net processing layer about the misbehavior of peers.\r\n\r\nWithin this PR, we obviously haven't defined P2P stuff yet, but I am attempting to formally specify what the rules are.\r\n\r\nSo these are all `PCKG_BAD` and, in the future, we'd want to punish a peer that gives us something like this:\r\n- more than 25 transactions\r\n- transactions aren't sorted\r\n- there are conflicts within the package\r\n\r\nBut these would be `PCKG_POLICY`:\r\n- package mempool ancestor/descendants exceed our limits\r\n- package feerate is below our mempool minimum",
      "created_at": "2021-10-20T17:44:10Z",
      "updated_at": "2021-10-20T17:44:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733009908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733009908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733019339",
      "pull_request_review_id": 784821434,
      "id": 733019339,
      "node_id": "PRRC_kwDOABII584rsPzL",
      "diff_hunk": "@@ -41,4 +41,12 @@ class PackageValidationState : public ValidationState<PackageValidationResult> {\n  */\n bool CheckPackage(const Package& txns, PackageValidationState& state);\n \n+/** Context-free check that a package is exactly one child and at least one of its parents. It is\n+ * expected to be sorted, which means the last transaction must be the child. The package cannot\n+ * contain any transactions that are not the child's parents.\n+ * @param[in]   exact   When true, return whether this package is exactly one child and all of its",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7a66557831f26caa1e9d122d959e18dc1f16730a",
      "in_reply_to_id": 732956584,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Correct, I expect all unconfirmed parents to be present, and P2P should be talking about full packages.\r\n\r\nAt some point, I was hoping to be able to statically verify that a transaction is exactly child-with-parents by requiring transactions for all of the child's inputs to be present, but I realized we have to allow the parents to confirm earlier than the child, and it's not reasonable to expect those confirmed parents to continue being relayed.\r\n\r\nSooooo yeah I'll remove it",
      "created_at": "2021-10-20T17:57:11Z",
      "updated_at": "2021-10-20T17:57:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733019339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733019339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733374828",
      "pull_request_review_id": 785280952,
      "id": 733374828,
      "node_id": "PRRC_kwDOABII584rtmls",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 11,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\nA **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\r\n```",
      "created_at": "2021-10-21T07:01:56Z",
      "updated_at": "2021-10-21T07:11:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733374828",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733374828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733376972",
      "pull_request_review_id": 785280952,
      "id": 733376972,
      "node_id": "PRRC_kwDOABII584rtnHM",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does that mean that if I have:\r\n\r\n-  tx1 in the mempool\r\n- tx2 and tx3 not yet published\r\n- childTx spending tx1, tx2 and tx3\r\n\r\nA package containing [tx2, tx3, childTx] is invalid?\r\nDo I need to put tx1 in that package?\r\nI plan on potentially funding CPFP children with unconfirmed inputs, that means I'd need an extra step to insert them in the package: but if they made it to the mempool on their own, it seems unnecessary, isn't it?\r\n\r\nIf the package [tx2, tx3, childTx] is valid, we should probably update the phrasing here to:\r\n\r\n```suggestion\r\nThe last transaction in the package is the child; each of its inputs must refer to a UTXO in the\r\ncurrent chain tip, the mempool or some preceding transaction in the package.\r\n```",
      "created_at": "2021-10-21T07:05:34Z",
      "updated_at": "2021-10-21T07:11:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733376972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733376972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733379748",
      "pull_request_review_id": 785280952,
      "id": 733379748,
      "node_id": "PRRC_kwDOABII584rtnyk",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.\n+\n+## Package Mempool Acceptance Rules\n+\n+The following rules are enforced for all packages:\n+\n+* Packages cannot exceed `MAX_PACKAGE_COUNT=25` count and `MAX_PACKAGE_SIZE=101KvB` total size\n+   (#20833)\n+\n+   - *Rationale*: This is already enforced as mempool ancestor/descendant limits. If\n+     transactions in a package are all related, exceeding this limit would mean that the package\n+     can either be split up or it wouldn't pass individual mempool policy.\n+\n+   - Note that, if these mempool limits change, package limits should be reconsidered. Users may\n+     also configure their mempool limits differently.\n+\n+* Packages must be topologically sorted. (#20833)\n+\n+* Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n+   the same inputs. Packages cannot have duplicate transactions. (#20833)\n+\n+* No transaction in a package can conflict with a mempool transaction. BIP125 Replace By Fee is\n+  disabled for packages. (#20833)\n+\n+   - RBF in packages may be enabled in the future.",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 38,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just to make sure I didn't mess something up: I was able to do package RBF from eclair based on your `package-mempool-accept` branch, was that expected?\r\n\r\nI had (localCommitTx, localAnchorTx) in my mempool, and I was able to replace it with (remoteCommitTx, remoteAnchorTx) that paid more fees (with both commit txs paying 0 fee).",
      "created_at": "2021-10-21T07:10:07Z",
      "updated_at": "2021-10-21T07:11:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733379748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733379748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733394543",
      "pull_request_review_id": 785307472,
      "id": 733394543,
      "node_id": "PRRC_kwDOABII584rtrZv",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.\n+\n+## Package Mempool Acceptance Rules\n+\n+The following rules are enforced for all packages:\n+\n+* Packages cannot exceed `MAX_PACKAGE_COUNT=25` count and `MAX_PACKAGE_SIZE=101KvB` total size\n+   (#20833)\n+\n+   - *Rationale*: This is already enforced as mempool ancestor/descendant limits. If\n+     transactions in a package are all related, exceeding this limit would mean that the package\n+     can either be split up or it wouldn't pass individual mempool policy.\n+\n+   - Note that, if these mempool limits change, package limits should be reconsidered. Users may\n+     also configure their mempool limits differently.\n+\n+* Packages must be topologically sorted. (#20833)\n+\n+* Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n+   the same inputs. Packages cannot have duplicate transactions. (#20833)\n+\n+* No transaction in a package can conflict with a mempool transaction. BIP125 Replace By Fee is\n+  disabled for packages. (#20833)\n+\n+   - RBF in packages may be enabled in the future.",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 38,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": 733379748,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes! That's just not in this PR yet so I didn't want an inaccurate doc",
      "created_at": "2021-10-21T07:31:26Z",
      "updated_at": "2021-10-21T07:31:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733394543",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733394543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733557562",
      "pull_request_review_id": 785529556,
      "id": 733557562,
      "node_id": "PRRC_kwDOABII584ruTM6",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": 733376972,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, based on these rules, you need to put tx1 in the package. I believe this is better because we can relay packages across the network without worrying about differences in mempool contents.\r\n\r\nI can see how it's inconvenient to need to track the other parents when you're submitting to your node. One thing I can offer is adding a bit of code to our client interface code to \"fill in\" the package using mempool contents before submitting via `ProcessNewPackage` - that should be easy enough to do.",
      "created_at": "2021-10-21T10:54:44Z",
      "updated_at": "2021-10-21T10:54:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733557562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733557562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733594049",
      "pull_request_review_id": 785579645,
      "id": 733594049,
      "node_id": "PRRC_kwDOABII584rucHB",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": 733376972,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I can see how it's inconvenient to need to track the other parents when you're submitting to your node. One thing I can offer is adding a bit of code to our client interface code to \"fill in\" the package using mempool contents before submitting via ProcessNewPackage - that should be easy enough to do.\r\n\r\nThat would be great!",
      "created_at": "2021-10-21T11:47:21Z",
      "updated_at": "2021-10-21T11:47:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733594049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733594049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733853963",
      "pull_request_review_id": 785941218,
      "id": 733853963,
      "node_id": "PRRC_kwDOABII584rvbkL",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a toplogically sorted package that consists of",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 11,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "35dd8dfcaf8f727b10e4e1b024c3f3f91ebb709b",
      "in_reply_to_id": 733374828,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-10-21T16:33:40Z",
      "updated_at": "2021-10-21T16:33:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733853963",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733853963"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 11,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733854506",
      "pull_request_review_id": 785942003,
      "id": 733854506,
      "node_id": "PRRC_kwDOABII584rvbsq",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept",
      "path": "doc/package_mempool_acceptance.md",
      "position": null,
      "original_position": 1,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "84215d4a1709c0bf1724ba8fe192e11f989b4cde",
      "in_reply_to_id": 732978827,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "makes sense, I've created a doc/policy folder. More documentation of policy to come :D",
      "created_at": "2021-10-21T16:34:25Z",
      "updated_at": "2021-10-21T16:34:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733854506",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733854506"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733854635",
      "pull_request_review_id": 785942223,
      "id": 733854635,
      "node_id": "PRRC_kwDOABII584rvbur",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": 732923856,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-10-21T16:34:36Z",
      "updated_at": "2021-10-21T16:34:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r733854635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733854635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 22,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734529807",
      "pull_request_review_id": 786830986,
      "id": 734529807,
      "node_id": "PRRC_kwDOABII584ryAkP",
      "diff_hunk": "@@ -41,4 +41,12 @@ class PackageValidationState : public ValidationState<PackageValidationResult> {\n  */\n bool CheckPackage(const Package& txns, PackageValidationState& state);\n \n+/** Context-free check that a package is exactly one child and at least one of its parents. It is\n+ * expected to be sorted, which means the last transaction must be the child. The package cannot\n+ * contain any transactions that are not the child's parents.\n+ * @param[in]   exact   When true, return whether this package is exactly one child and all of its",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7a66557831f26caa1e9d122d959e18dc1f16730a",
      "in_reply_to_id": 732956584,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed `exact` parameter",
      "created_at": "2021-10-22T13:14:03Z",
      "updated_at": "2021-10-22T13:14:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r734529807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/734529807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735178085",
      "pull_request_review_id": 787558713,
      "id": 735178085,
      "node_id": "PRRC_kwDOABII584r0e1l",
      "diff_hunk": "@@ -796,8 +807,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, /* limitancestors */ 2,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "f3f4370401566d32e6e09ca17af9f534b8ad0750",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we want to take opportunity to clarify the code, we can constify this magic value as `CARVEOUT_ANCESTOR_TX_LIMIT`.",
      "created_at": "2021-10-24T22:14:30Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735178085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735178085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735181313",
      "pull_request_review_id": 787558713,
      "id": 735181313,
      "node_id": "PRRC_kwDOABII584r0foB",
      "diff_hunk": "@@ -819,6 +827,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    return true;\n+}\n+\n+bool MemPoolAccept::MempoolChecks(Workspace& ws)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "f025db33a3e75be2880c7a5ac5aa26bc07d382ef",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think all the checks in this method are related to replacement maybe name could reflect that like `ReplacementChecks` ? `MempoolChecks` isn't really verbose w.r.t class `MemPoolAccept`.\r\n",
      "created_at": "2021-10-24T22:44:20Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735181313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735181313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735182591",
      "pull_request_review_id": 787558713,
      "id": 735182591,
      "node_id": "PRRC_kwDOABII584r0f7_",
      "diff_hunk": "@@ -60,6 +60,13 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+\n+// It doesn't make sense for package limits to exceed default mempool ancestor/descendant limits.",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "147199cc1a1a2e2248ddc1af0f72bd79e7dc53b1",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"Package evaluation if successful leads to acceptance of the component in the mempool, therefore the package limits must always bind to the mempool ancestor/descendant limits\", better ? ",
      "created_at": "2021-10-24T22:55:37Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735182591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735182591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735185991",
      "pull_request_review_id": 787558713,
      "id": 735185991,
      "node_id": "PRRC_kwDOABII584r0gxH",
      "diff_hunk": "@@ -1131,8 +1208,16 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);",
      "path": "src/validation.cpp",
      "position": 316,
      "original_position": 111,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we should keep the package API \"hard-to-misuse\" for the user.\r\n\r\nIIUC, this PR introduce a second definition of a package, divergent of the `testmempoolaccept`/`AcceptMultipleTransactions` one. This second definition is more restrictive as the package must be a child with all of its unconfirmed parents and sorted.\r\n\r\nIf a user sanitizes a package through `testmempoolaccept` with a 2-parent, 2-child to verify policy correctness.  Then calls `submitpackage`, this second RPC should fail while the package topology isn't changed.\r\n\r\nI think this can be concerning for L2 with pre-signed transactions, as this illegal package might be the only valid state owned by the L2 node to enforce her balance.",
      "created_at": "2021-10-24T23:22:24Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735185991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735185991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1339,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735187379",
      "pull_request_review_id": 787558713,
      "id": 735187379,
      "node_id": "PRRC_kwDOABII584r0hGz",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wonder if this check doesn't wrongly block some replacement.\r\n\r\nLet's say you have A + B already in the mempool, where B is a child of A. Then I submit A' + B, where A' is a _same-txid-different-witness_ replacement candidate of A, with an improved feerate. A'+B should replace A + B, however it will be rejected as B is already in the mempool ?",
      "created_at": "2021-10-24T23:33:38Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735187379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735187379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735187691",
      "pull_request_review_id": 787558713,
      "id": 735187691,
      "node_id": "PRRC_kwDOABII584r0hLr",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});",
      "path": "src/validation.cpp",
      "position": 205,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Duplicated checks with `AcceptMultipleTransactions` ? I think it's better to keep an unified package evaluation path between `testmempoolaccept`/`submitpackage`.",
      "created_at": "2021-10-24T23:36:19Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735187691",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735187691"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1201,
      "original_line": 1201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735188761",
      "pull_request_review_id": 787558713,
      "id": 735188761,
      "node_id": "PRRC_kwDOABII584r0hcZ",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can be `unconfirmed_parent_txids`. ",
      "created_at": "2021-10-24T23:44:53Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735188761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735188761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735189565",
      "pull_request_review_id": 787558713,
      "id": 735189565,
      "node_id": "PRRC_kwDOABII584r0ho9",
      "diff_hunk": "@@ -497,9 +505,9 @@ class MemPoolAccept\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n-    * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist.\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent, but must not\n+    * conflict with each other, and the transactions cannot already be in the mempool. Parents must",
      "path": "src/validation.cpp",
      "position": 51,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"and the transactions cannot already be in the mempool\" are you referring the check L1219 in `AcceptPackage` about child disallowed to conflict with the mempool ?",
      "created_at": "2021-10-24T23:51:05Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735189565",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735189565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735190012",
      "pull_request_review_id": 787558713,
      "id": 735190012,
      "node_id": "PRRC_kwDOABII584r0hv8",
      "diff_hunk": "@@ -992,22 +1007,90 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // This transaction should only count for fee estimation if:\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n+    // - it's not part of a package, which would likely mean its base feerate is not an accurate",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well, the base feerate of a package component is still offered to the miner, even if this component should not have been accepted in the mempool as a single tx ?\r\n\r\nI think a stronger rational is the lack of p2p packages for now, preventing a package to effectively propagate to miner mempools and as such be considered as a valid blockspace demand ?",
      "created_at": "2021-10-24T23:54:07Z",
      "updated_at": "2021-10-24T23:56:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735190012",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735190012"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1010,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735191959",
      "pull_request_review_id": 787571639,
      "id": 735191959,
      "node_id": "PRRC_kwDOABII584r0iOX",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.\n  */\n enum class PackageValidationResult {\n     PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n-    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n-    PCKG_TX,                      //!< At least one tx is invalid.\n+    PCKG_BAD,                     //!< The package itself is invalid or malformed.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 13,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": 732922423,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> So these are all PCKG_BAD and, in the future, we'd want to punish a peer that gives us something like this:\r\n\r\nI think we're never discouraging based on tx-relay or mempool policy violations because our peers can run a policy far different than ours ? Like a future version of  Core could have package with more than 25 component, a old peer connected would punish that peer for a behavior valid according to the relay rules of the former.\r\n\r\nDiscouraring/punishing on the rational of policy violations could trigger netsplits and I think that's why we're never marking a peer as `Misbehaving` in `MaybePunishNodeForPeer` for policy failure reasons.\r\n\r\nHowever, I could see that a ill-crafted package could be punished in the sense that `MAX_PEER_PACKAGE_ANNOUNCEMENTS` is dynamically constrained. But that would mean we have a stable package format across p2p package versions, which sounds a bit early to commit on IMO.\r\n\r\nLikely we need to think more about it, I would say for this PR it's a bit premature to introduce `PCKG_BAD` though if you think otherwise maybe better to document it's for future p2p purposes.",
      "created_at": "2021-10-25T00:09:53Z",
      "updated_at": "2021-10-25T00:09:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r735191959",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/735191959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736363205",
      "pull_request_review_id": 789138845,
      "id": 736363205,
      "node_id": "PRRC_kwDOABII584r5ALF",
      "diff_hunk": "@@ -796,8 +807,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (ws.m_vsize > EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, /* limitancestors */ 2,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "f3f4370401566d32e6e09ca17af9f534b8ad0750",
      "in_reply_to_id": 735178085,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good suggestion. I think I would want to do this in a separate PR, along with adding documentation in the doc/policy/ folder for mempool ancestor/descendant limits and CPFP carve out.",
      "created_at": "2021-10-26T10:00:40Z",
      "updated_at": "2021-10-26T10:00:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r736363205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/736363205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737298164",
      "pull_request_review_id": 790406468,
      "id": 737298164,
      "node_id": "PRRC_kwDOABII584r8kb0",
      "diff_hunk": "@@ -214,17 +223,15 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n-* Atomically test acceptance of a package. If the package only contains one tx, package rules still\n-* apply. Package validation does not allow BIP125 replacements, so the transaction(s) cannot spend\n-* the same inputs as any transaction in the mempool.\n-* @param[in]    txns                Group of transactions which may be independent or contain\n-*                                   parent-child dependencies. The transactions must not conflict\n-*                                   with each other, i.e., must not spend the same inputs. If any\n-*                                   dependencies exist, parents must appear anywhere in the list\n-*                                   before their children.\n-* @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n-* If a transaction fails, validation will exit early and some results may be missing.\n-*/\n+ * Validate a package for submission to the mempool.\n+ * @param[in]   test_accept     When true, run validation checks but don't submit to mempool.\n+ * @param[in]   txns            Package to be validated.\n+ *\n+ * See package_mempool_accept.md for documentation of package validation rules.",
      "path": "src/validation.h",
      "position": null,
      "original_position": 64,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Outdated name:\r\n```suggestion\r\n * See doc/policy/packages.md for documentation of package validation rules.\r\n```",
      "created_at": "2021-10-27T09:49:24Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737298164",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737298164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737303782",
      "pull_request_review_id": 790406468,
      "id": 737303782,
      "node_id": "PRRC_kwDOABII584r8lzm",
      "diff_hunk": "@@ -981,34 +1162,99 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 &&\n-        !m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n-                                   m_limit_descendant_size, err_string)) {\n-        // All transactions must have individually passed mempool ancestor and descendant limits\n-        // inside of PreChecks(), so this is separate from an individual transaction error.\n-        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n+    if (txns.size() > 1 && !PackageMempoolChecks(txns, workspaces, package_state)) {\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n     for (Workspace& ws : workspaces) {\n-        PrecomputedTransactionData txdata;\n-        if (!PolicyScriptChecks(args, ws, txdata)) {\n+        if (!PolicyScriptChecks(args, ws)) {\n             // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n-            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            package_state.Invalid(ws.m_state.GetResult() == TxValidationResult::TX_CONSENSUS\n+                                  ? PackageValidationResult::PCKG_TX_CONSENSUS\n+                                  : PackageValidationResult::PCKG_TX_POLICY,\n+                                  \"transaction failed\");\n             results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         if (args.m_test_accept) {\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                                                         ws.m_vsize, ws.m_base_fees));\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX_POLICY, \"partially submitted\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 629,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd suggest not using the word \"static\" here, which already has [multiple meanings in c++](https://en.cppreference.com/w/cpp/keyword/static) that don't apply here. I think \"context-free\" would be better.\r\n\r\nI'd also suggest changing the commit log from `[packages] add static IsChildWithParents function` to `[packages] add context-free IsChildWithParents function`",
      "created_at": "2021-10-27T09:56:17Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737303782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737303782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737305194",
      "pull_request_review_id": 790406468,
      "id": 737305194,
      "node_id": "PRRC_kwDOABII584r8mJq",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does this need to assert? Why not just fail the `if (package.size() < 2) return false;` test below and return `false`? The calling code already needs to handle that failure, and by definition the empty set is not a ChildWithParents.",
      "created_at": "2021-10-27T09:58:03Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737305194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737305194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737308326",
      "pull_request_review_id": 790406468,
      "id": 737308326,
      "node_id": "PRRC_kwDOABII584r8m6m",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe use `std::vector::back()`? That returns a reference to the last element in the vector. You've already established that exists by returning if `package.size < 2`.",
      "created_at": "2021-10-27T10:02:01Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737308326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737308326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737315979",
      "pull_request_review_id": 790406468,
      "id": 737315979,
      "node_id": "PRRC_kwDOABII584r8oyL",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;\n+    std::transform(child->vin.cbegin(), child->vin.cend(),\n+                   std::inserter(input_txids, input_txids.end()),\n+                   [](const auto& input) { return input.prevout.hash; });\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(parent_txids, parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't need to construct this `parent_txids` set. You just need to pass once through `package` from the start to the penultimate entry, checking that the hash of each transaction is in `input_txids` (and exiting early with failure if it's not found).",
      "created_at": "2021-10-27T10:11:49Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737315979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737315979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 78,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737317419",
      "pull_request_review_id": 790406468,
      "id": 737317419,
      "node_id": "PRRC_kwDOABII584r8pIr",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;",
      "path": "src/policy/packages.cpp",
      "position": 12,
      "original_position": 49,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there any advantage to this being an unordered set instead of a set? The size is small enough that the insertion/lookup complexity doesn't matter.",
      "created_at": "2021-10-27T10:13:43Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737317419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737317419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737327720",
      "pull_request_review_id": 790406468,
      "id": 737327720,
      "node_id": "PRRC_kwDOABII584r8rpo",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 27,
      "original_position": 41,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you check the `state.GetResult()` and `state.GetRejectReason()` are what you're expecting ( `PackageValidationResult::PCKG_BAD` and `\"package-not-sorted\"`)",
      "created_at": "2021-10-27T10:27:44Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737327720",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737327720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 140,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329053",
      "pull_request_review_id": 790406468,
      "id": 737329053,
      "node_id": "PRRC_kwDOABII584r8r-d",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 51,
      "original_position": 63,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n\r\n        // Now add the child to the package\r\n        package.push_back(MakeTransactionRef(child));\r\n```",
      "created_at": "2021-10-27T10:29:28Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329351",
      "pull_request_review_id": 790406468,
      "id": 737329351,
      "node_id": "PRRC_kwDOABII584r8sDH",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 46,
      "original_position": 58,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "check failure reason",
      "created_at": "2021-10-27T10:29:58Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329351",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329488",
      "pull_request_review_id": 790406468,
      "id": 737329488,
      "node_id": "PRRC_kwDOABII584r8sFQ",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 62,
      "original_position": 74,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "check failure reason",
      "created_at": "2021-10-27T10:30:08Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737329488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737329488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737330699",
      "pull_request_review_id": 790406468,
      "id": 737330699,
      "node_id": "PRRC_kwDOABII584r8sYL",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        CMutableTransaction mtx_parent_also_child;\r\n```\r\n\r\nto match the naming below",
      "created_at": "2021-10-27T10:31:53Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737330699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737330699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737331726",
      "pull_request_review_id": 790406468,
      "id": 737331726,
      "node_id": "PRRC_kwDOABII584r8soO",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 87,
      "original_position": 98,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps also check `{tx_parent_also_child, tx_parent, tx_child}`. I think it'll fail `CheckPackage()` since it's not sorted, but will succeed `IsChildWithParents()`.",
      "created_at": "2021-10-27T10:33:18Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737331726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737331726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737333312",
      "pull_request_review_id": 790406468,
      "id": 737333312,
      "node_id": "PRRC_kwDOABII584r8tBA",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nBOOST_FIXTURE_TEST_CASE(non_contextual_package_tests, TestChain100Setup)\r\n```",
      "created_at": "2021-10-27T10:35:35Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737333312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737333312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737334585",
      "pull_request_review_id": 790406468,
      "id": 737334585,
      "node_id": "PRRC_kwDOABII584r8tU5",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+    }",
      "path": "src/test/txpackage_tests.cpp",
      "position": 94,
      "original_position": 99,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Other possible unit tests (not necessarily in this PR):\r\n\r\n- too large package (26 txs)\r\n- too heavy package\r\n- conflicting txs in package\r\n- duplicate txs in package (with same and different witnesses)",
      "created_at": "2021-10-27T10:37:19Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737334585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737334585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737336363",
      "pull_request_review_id": 790406468,
      "id": 737336363,
      "node_id": "PRRC_kwDOABII584r8twr",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.",
      "path": "doc/policy/packages.md",
      "position": 9,
      "original_position": 9,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems sufficient for now. In the future, we might want to define a canonically sorted package, where the txs are sorted by generation, then by txid.",
      "created_at": "2021-10-27T10:39:47Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737336363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737336363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 9,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737337344",
      "pull_request_review_id": 790406468,
      "id": 737337344,
      "node_id": "PRRC_kwDOABII584r8uAA",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 6,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's unclear to me whether this definition implies that the graph is fully connected (i.e. every transaction in the package is (transitively) connected to every other transaction in the package through parent/child relationships).",
      "created_at": "2021-10-27T10:41:03Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737337344",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737337344"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737338894",
      "pull_request_review_id": 790406468,
      "id": 737338894,
      "node_id": "PRRC_kwDOABII584r8uYO",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps highlight that this means that a child-with-unconfirmed-parents is contextual on the block chain. It can only be defined uniquely in the context of a UTXO set (which can be represented by a chain tip block hash).",
      "created_at": "2021-10-27T10:43:16Z",
      "updated_at": "2021-10-27T10:53:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737338894",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737338894"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737422767",
      "pull_request_review_id": 790578151,
      "id": 737422767,
      "node_id": "PRRC_kwDOABII584r9C2v",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+    }",
      "path": "src/test/txpackage_tests.cpp",
      "position": 94,
      "original_position": 99,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737334585,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops. I see now that these are in txvalidation_tests.cpp. Why are some of the package unit tests in txpackage_tests.cpp and some in txvalidation_tests.cpp?",
      "created_at": "2021-10-27T12:39:48Z",
      "updated_at": "2021-10-27T12:39:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737422767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737422767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737448276",
      "pull_request_review_id": 790613944,
      "id": 737448276,
      "node_id": "PRRC_kwDOABII584r9JFU",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+    }",
      "path": "src/test/txpackage_tests.cpp",
      "position": 94,
      "original_position": 99,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737334585,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When I first added these tests in #20833, all the checks in `CheckPackage()` were inside `AcceptMultipleTransactions()` (which is why I'm calling `ProcessNewPackage()` to hit those errors). Now that they've been moved to their own function in packages.h, we can make the tests in txvalidation_tests.cpp simpler unit tests and move them to txpackage_tests.cpp.",
      "created_at": "2021-10-27T13:09:12Z",
      "updated_at": "2021-10-27T13:09:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737448276",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737448276"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737448337",
      "pull_request_review_id": 790614043,
      "id": 737448337,
      "node_id": "PRRC_kwDOABII584r9JGR",
      "diff_hunk": "@@ -760,25 +841,40 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n+bool MemPoolAccept::MempoolChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n+\n+    ws.m_replacement_transaction = ws.m_conflicts.size();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it's better to continue using `std::set::empty` rather than implicitly casting the int to a bool:\r\n\r\n```suggestion\r\n    ws.m_replacement_transaction = !ws.m_conflicts.empty();\r\n```",
      "created_at": "2021-10-27T13:09:15Z",
      "updated_at": "2021-10-27T16:40:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737448337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737448337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737467866",
      "pull_request_review_id": 790614043,
      "id": 737467866,
      "node_id": "PRRC_kwDOABII584r9N3a",
      "diff_hunk": "@@ -492,21 +562,36 @@ class MemPoolAccept\n     // only tests that are fast should be done here (to avoid CPU DoS).\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Run mempool-related checks like ancestor/descendant limits and RBF.\n+    bool MempoolChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Enforce mempool ancestor/descendant limits.\n+    bool PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                              std::vector<Workspace>& workspaces,\n+                              PackageValidationState& package_state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n     // limiting is performed, false otherwise.\n     bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Try to add all transactions to the mempool, atomically (either all of the transactions are\n+    // added or none). Returns true if all of the transactions are in the mempool after size\n+    // limiting is performed, false otherwise.\n+    bool FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces, PackageValidationState& package_state,\n+                         std::map<const uint256, const MempoolAcceptResult>& results)\n+                         EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: the lock annotation shouldn't be aligned with the open parens (since it's not contained in the parens):\r\n\r\n```suggestion\r\n    bool FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces, PackageValidationState& package_state,\r\n                         std::map<const uint256, const MempoolAcceptResult>& results)\r\n        EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\r\n```",
      "created_at": "2021-10-27T13:29:26Z",
      "updated_at": "2021-10-27T16:21:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r737467866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/737467866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 591,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738300529",
      "pull_request_review_id": 791742143,
      "id": 738300529,
      "node_id": "PRRC_kwDOABII584sAZJx",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 46,
      "original_position": 58,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737329351,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`IsChildWithParents()` just returns a bool and doesn't use a `PackageValidationState` so there is no failure reason.",
      "created_at": "2021-10-28T11:35:59Z",
      "updated_at": "2021-10-28T11:35:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738300529",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738300529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738300694",
      "pull_request_review_id": 791742404,
      "id": 738300694,
      "node_id": "PRRC_kwDOABII584sAZMW",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 62,
      "original_position": 74,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737329488,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`IsChildWithParents()` just returns a bool and doesn't use a `PackageValidationState` so there is no failure reason.",
      "created_at": "2021-10-28T11:36:16Z",
      "updated_at": "2021-10-28T11:36:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738300694",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738300694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738303538",
      "pull_request_review_id": 791746234,
      "id": 738303538,
      "node_id": "PRRC_kwDOABII584sAZ4y",
      "diff_hunk": "@@ -497,9 +505,9 @@ class MemPoolAccept\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n-    * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist.\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent, but must not\n+    * conflict with each other, and the transactions cannot already be in the mempool. Parents must",
      "path": "src/validation.cpp",
      "position": 51,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": 735189565,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that this is `AcceptMultipleTransactions` and not `AcceptPackage`.\r\n\r\nI'm referring to the check in`PreChecks()`, where it returns failure if the transaction is already in the mempool. So `AcceptMultipleTransactions` expects the `txns` passed in to not already be in the mempool. I think it's important to state this precondition in the function documentation.\r\n\r\nOn the other hand, `AcceptPackage` will allow transactions to already be in the mempool, and will de-duplicate them before passing them to `AcceptMultipleTransactions` (not included in this PR, but see #22290).",
      "created_at": "2021-10-28T11:40:21Z",
      "updated_at": "2021-10-28T11:40:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738303538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738303538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738321533",
      "pull_request_review_id": 791770683,
      "id": 738321533,
      "node_id": "PRRC_kwDOABII584sAeR9",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 46,
      "original_position": 58,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737329351,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":facepalm:",
      "created_at": "2021-10-28T12:05:33Z",
      "updated_at": "2021-10-28T12:05:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738321533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738321533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 159,
      "original_line": 159,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738321582",
      "pull_request_review_id": 791770750,
      "id": 738321582,
      "node_id": "PRRC_kwDOABII584sAeSu",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 62,
      "original_position": 74,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737329488,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ":facepalm: :facepalm:",
      "created_at": "2021-10-28T12:05:38Z",
      "updated_at": "2021-10-28T12:05:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738321582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738321582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738363889",
      "pull_request_review_id": 791829914,
      "id": 738363889,
      "node_id": "PRRC_kwDOABII584sAonx",
      "diff_hunk": "@@ -18,13 +18,15 @@ static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n- * transactions is invalid or the package itself violates our rules.\n- * We don't distinguish between consensus and policy violations right now.\n+ * transactions is invalid or the package itself fails. It's possible for failures to arise from\n+ * rule violations or mempool policy.\n  */\n enum class PackageValidationResult {\n     PCKG_RESULT_UNSET = 0,        //!< Initial value. The package has not yet been rejected.\n-    PCKG_POLICY,                  //!< The package itself is invalid (e.g. too many transactions).\n-    PCKG_TX,                      //!< At least one tx is invalid.\n+    PCKG_BAD,                     //!< The package itself is invalid or malformed.",
      "path": "src/policy/packages.h",
      "position": null,
      "original_position": 13,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "97124603adaf1e06322fe58cc55bf16b0a983305",
      "in_reply_to_id": 732922423,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah you're right, I was getting a little too excited :P will remove and put them all under `PCKG_POLICY`.",
      "created_at": "2021-10-28T12:59:20Z",
      "updated_at": "2021-10-28T12:59:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738363889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738363889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738364819",
      "pull_request_review_id": 791830806,
      "id": 738364819,
      "node_id": "PRRC_kwDOABII584sAo2T",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+    }",
      "path": "src/test/txpackage_tests.cpp",
      "position": 94,
      "original_position": 99,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737334585,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Now that they've been moved to their own function in packages.h, we can make the tests in txvalidation_tests.cpp simpler unit tests and move them to txpackage_tests.cpp.\r\n\r\nAdded this in #23381",
      "created_at": "2021-10-28T13:00:04Z",
      "updated_at": "2021-10-28T13:00:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738364819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738364819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 207,
      "original_line": 207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738365468",
      "pull_request_review_id": 791831694,
      "id": 738365468,
      "node_id": "PRRC_kwDOABII584sApAc",
      "diff_hunk": "@@ -819,6 +827,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    return true;\n+}\n+\n+bool MemPoolAccept::MempoolChecks(Workspace& ws)",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "f025db33a3e75be2880c7a5ac5aa26bc07d382ef",
      "in_reply_to_id": 735181313,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah that's a better name, done in #23381",
      "created_at": "2021-10-28T13:00:48Z",
      "updated_at": "2021-10-28T13:00:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738365468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738365468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 833,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738365579",
      "pull_request_review_id": 791831870,
      "id": 738365579,
      "node_id": "PRRC_kwDOABII584sApCL",
      "diff_hunk": "@@ -760,25 +841,40 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // to be secure by simply only having two immediately-spendable\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-        if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+        if (ws.m_vsize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+            !m_pool.CalculateMemPoolAncestors(*entry, ws.m_ancestors, /* limitancestors */ 2,\n+                m_limit_ancestor_size, ws.m_tx_limit_descendants + 1,\n+                ws.m_tx_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure ws.m_conflicts and ws.m_ancestors don't\n     // intersect.\n-    if (const auto err_string{EntriesAndTxidsDisjoint(setAncestors, setConflicts, hash)}) {\n+    if (const auto err_string{EntriesAndTxidsDisjoint(ws.m_ancestors, ws.m_conflicts, hash)}) {\n         // We classify this as a consensus error because a transaction depending on something it\n         // conflicts with would be inconsistent.\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-spends-conflicting-tx\", *err_string);\n     }\n \n+    return true;\n+}\n \n-    if (!setConflicts.empty()) {\n-        CFeeRate newFeeRate(nModifiedFees, nSize);\n+bool MemPoolAccept::MempoolChecks(Workspace& ws)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+\n+    const CTransaction& tx = *ws.m_ptx;\n+    const uint256& hash = ws.m_hash;\n+    TxValidationState& state = ws.m_state;\n+    const CTxMemPool::setEntries setIterConflicting = m_pool.GetIterSet(ws.m_conflicts);\n+\n+    ws.m_replacement_transaction = ws.m_conflicts.size();",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 299,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737448337,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23381",
      "created_at": "2021-10-28T13:00:57Z",
      "updated_at": "2021-10-28T13:00:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r738365579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/738365579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 875,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740626510",
      "pull_request_review_id": 794764177,
      "id": 740626510,
      "node_id": "PRRC_kwDOABII584sJRBO",
      "diff_hunk": "@@ -497,9 +505,9 @@ class MemPoolAccept\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n-    * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist.\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent, but must not\n+    * conflict with each other, and the transactions cannot already be in the mempool. Parents must",
      "path": "src/validation.cpp",
      "position": 51,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": 735189565,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's right, it's `AcceptMultipleTransactions`. I agree it's important to state requirements in function documentation.\r\n\r\nNote as a nit outside the scope of this PR, `testmempoolaccept` documentation doesn't seem to reflect the not-already-in-mempool condition  \"If multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other\"",
      "created_at": "2021-11-01T23:40:06Z",
      "updated_at": "2021-11-01T23:40:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r740626510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/740626510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745962362",
      "pull_request_review_id": 801783204,
      "id": 745962362,
      "node_id": "PRRC_kwDOABII584sdnt6",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;\n+        mtx_parent2.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent2.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent2);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 87,
      "original_position": 98,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737331726,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, added",
      "created_at": "2021-11-09T19:52:35Z",
      "updated_at": "2021-11-09T20:12:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745962362",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745962362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 200,
      "original_line": 200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745964912",
      "pull_request_review_id": 801797076,
      "id": 745964912,
      "node_id": "PRRC_kwDOABII584sdoVw",
      "diff_hunk": "@@ -497,9 +505,9 @@ class MemPoolAccept\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n-    * Multiple transaction acceptance. Transactions may or may not be interdependent,\n-    * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist.\n+    * Multiple transaction acceptance. Transactions may or may not be interdependent, but must not\n+    * conflict with each other, and the transactions cannot already be in the mempool. Parents must",
      "path": "src/validation.cpp",
      "position": 51,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": 735189565,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"package policies apply: the transactions cannot conflict with any mempool transactions or each other\"\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/8ae4ba481ce8f7da173bef24432729c87a36cb70/src/rpc/rawtransaction.cpp#L875-L876",
      "created_at": "2021-11-09T19:56:21Z",
      "updated_at": "2021-11-09T19:56:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745964912",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745964912"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 509,
      "original_line": 509,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745966322",
      "pull_request_review_id": 801802081,
      "id": 745966322,
      "node_id": "PRRC_kwDOABII584sdory",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});",
      "path": "src/validation.cpp",
      "position": 205,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735187691,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, duplicated for now. I think it's okay since this is a very cheap, context-free check. In the future, when `AcceptPackage` modifies the package (i.e. deduplicates transactions), it will make more sense to call `CheckPackage()` once again on the new set of transactions.",
      "created_at": "2021-11-09T19:58:04Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745966322",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745966322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1201,
      "original_line": 1201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745966499",
      "pull_request_review_id": 801802081,
      "id": 745966499,
      "node_id": "PRRC_kwDOABII584sdouj",
      "diff_hunk": "@@ -981,34 +1162,99 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 &&\n-        !m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n-                                   m_limit_descendant_size, err_string)) {\n-        // All transactions must have individually passed mempool ancestor and descendant limits\n-        // inside of PreChecks(), so this is separate from an individual transaction error.\n-        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n+    if (txns.size() > 1 && !PackageMempoolChecks(txns, workspaces, package_state)) {\n         return PackageMempoolAcceptResult(package_state, std::move(results));\n     }\n \n     for (Workspace& ws : workspaces) {\n-        PrecomputedTransactionData txdata;\n-        if (!PolicyScriptChecks(args, ws, txdata)) {\n+        if (!PolicyScriptChecks(args, ws)) {\n             // Exit early to avoid doing pointless work. Update the failed tx result; the rest are unfinished.\n-            package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+            package_state.Invalid(ws.m_state.GetResult() == TxValidationResult::TX_CONSENSUS\n+                                  ? PackageValidationResult::PCKG_TX_CONSENSUS\n+                                  : PackageValidationResult::PCKG_TX_POLICY,\n+                                  \"transaction failed\");\n             results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         if (args.m_test_accept) {\n             // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n             // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n             results.emplace(ws.m_ptx->GetWitnessHash(),\n-                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions), ws.m_base_fees));\n+                            MempoolAcceptResult::Success(std::move(ws.m_replaced_transactions),\n+                                                         ws.m_vsize, ws.m_base_fees));\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX_POLICY, \"partially submitted\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 629,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737303782,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, done",
      "created_at": "2021-11-09T19:58:17Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745966499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745966499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1207,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745971572",
      "pull_request_review_id": 801802081,
      "id": 745971572,
      "node_id": "PRRC_kwDOABII584sdp90",
      "diff_hunk": "@@ -1131,8 +1208,16 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);",
      "path": "src/validation.cpp",
      "position": 316,
      "original_position": 111,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735185991,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, I agree completely that we will end up with 3 flavors of packages. When we add `submitrawpackage`, it will be best to have `TestMultipleTransactions`, `PackageChildWithParents`, `PackageChildWithParents(test_accept=true)`. These would correspond with user-facing interfaces `testmempoolaccept`, `submitrawpackage`, and `testpackage` (?)",
      "created_at": "2021-11-09T20:03:11Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745971572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745971572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1339,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745972266",
      "pull_request_review_id": 801802081,
      "id": 745972266,
      "node_id": "PRRC_kwDOABII584sdqIq",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));",
      "path": "src/test/txpackage_tests.cpp",
      "position": 51,
      "original_position": 63,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737329053,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I feel like that comment is unnecessary?",
      "created_at": "2021-11-09T20:03:56Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745972266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745972266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745972614",
      "pull_request_review_id": 801802081,
      "id": 745972614,
      "node_id": "PRRC_kwDOABII584sdqOG",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;",
      "path": "src/policy/packages.cpp",
      "position": 12,
      "original_position": 49,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737317419,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No advantage, but no disadvantage afaik?",
      "created_at": "2021-11-09T20:04:14Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745972614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745972614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745979876",
      "pull_request_review_id": 801802081,
      "id": 745979876,
      "node_id": "PRRC_kwDOABII584sdr_k",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 47,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737308326,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done.",
      "created_at": "2021-11-09T20:11:25Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745979876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745979876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745980132",
      "pull_request_review_id": 801802081,
      "id": 745980132,
      "node_id": "PRRC_kwDOABII584sdsDk",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;\n+    std::transform(child->vin.cbegin(), child->vin.cend(),\n+                   std::inserter(input_txids, input_txids.end()),\n+                   [](const auto& input) { return input.prevout.hash; });\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(parent_txids, parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737315979,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done",
      "created_at": "2021-11-09T20:11:41Z",
      "updated_at": "2021-11-09T20:12:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745980132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745980132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 78,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745981456",
      "pull_request_review_id": 801815372,
      "id": 745981456,
      "node_id": "PRRC_kwDOABII584sdsYQ",
      "diff_hunk": "@@ -492,21 +562,36 @@ class MemPoolAccept\n     // only tests that are fast should be done here (to avoid CPU DoS).\n     bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Run mempool-related checks like ancestor/descendant limits and RBF.\n+    bool MempoolChecks(Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n+    // Enforce mempool ancestor/descendant limits.\n+    bool PackageMempoolChecks(const std::vector<CTransactionRef>& txns,\n+                              std::vector<Workspace>& workspaces,\n+                              PackageValidationState& package_state) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+\n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n-    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool PolicyScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Re-run the script checks, using consensus flags, and try to cache the\n     // result in the scriptcache. This should be done after\n     // PolicyScriptChecks(). This requires that all inputs either be in our\n     // utxo set or in the mempool.\n-    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData &txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Try to add the transaction to the mempool, removing any conflicts first.\n     // Returns true if the transaction is in the mempool after any size\n     // limiting is performed, false otherwise.\n     bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Try to add all transactions to the mempool, atomically (either all of the transactions are\n+    // added or none). Returns true if all of the transactions are in the mempool after size\n+    // limiting is performed, false otherwise.\n+    bool FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces, PackageValidationState& package_state,\n+                         std::map<const uint256, const MempoolAcceptResult>& results)\n+                         EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 147,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737467866,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2021-11-09T20:13:00Z",
      "updated_at": "2021-11-09T20:13:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745981456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745981456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 591,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 593,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745981773",
      "pull_request_review_id": 801815643,
      "id": 745981773,
      "node_id": "PRRC_kwDOABII584sdsdN",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child; each of its inputs must refer to a UTXO in the\n+current chain tip or some preceding transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737338894,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clarified",
      "created_at": "2021-11-09T20:13:18Z",
      "updated_at": "2021-11-09T20:13:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745981773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745981773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 13,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985220",
      "pull_request_review_id": 801819568,
      "id": 745985220,
      "node_id": "PRRC_kwDOABII584sdtTE",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a Directed Acyclic Graph (a\n+directed edge exists between a transaction that spends the output of another transaction).",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 6,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737337344,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added \"connected.\" I hesitate to write \"fully\" because I have sometimes seen \"fully connected\" used interchangeably with [complete](https://en.wikipedia.org/wiki/Complete_graph).",
      "created_at": "2021-11-09T20:16:31Z",
      "updated_at": "2021-11-09T20:16:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 6,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985401",
      "pull_request_review_id": 801819762,
      "id": 745985401,
      "node_id": "PRRC_kwDOABII584sdtV5",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737333312,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T20:16:44Z",
      "updated_at": "2021-11-09T20:16:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985954",
      "pull_request_review_id": 801820232,
      "id": 745985954,
      "node_id": "PRRC_kwDOABII584sdtei",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying file COPYING or\n+// http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <key_io.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(txpackage_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(static_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent2;",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 85,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737330699,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, done",
      "created_at": "2021-11-09T20:17:17Z",
      "updated_at": "2021-11-09T20:17:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745985954",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745985954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986406",
      "pull_request_review_id": 801820615,
      "id": 745986406,
      "node_id": "PRRC_kwDOABII584sdtlm",
      "diff_hunk": "@@ -992,22 +1007,90 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n \n     // This transaction should only count for fee estimation if:\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n+    // - it's not part of a package, which would likely mean its base feerate is not an accurate",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "eff3e48fae5c1adb6b4854b3c483e3e5020e47eb",
      "in_reply_to_id": 735190012,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, edited",
      "created_at": "2021-11-09T20:17:45Z",
      "updated_at": "2021-11-09T20:17:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986406",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986406"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1010,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986582",
      "pull_request_review_id": 801820762,
      "id": 745986582,
      "node_id": "PRRC_kwDOABII584sdtoW",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.\n+    std::unordered_set<uint256, SaltedTxidHasher> parent_txids;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 61,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735188761,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-09T20:17:57Z",
      "updated_at": "2021-11-09T20:17:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986582",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986582"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1221,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986951",
      "pull_request_review_id": 801821092,
      "id": 745986951,
      "node_id": "PRRC_kwDOABII584sdtuH",
      "diff_hunk": "@@ -60,6 +60,13 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+\n+// It doesn't make sense for package limits to exceed default mempool ancestor/descendant limits.",
      "path": "src/validation.h",
      "position": null,
      "original_position": 5,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "147199cc1a1a2e2248ddc1af0f72bd79e7dc53b1",
      "in_reply_to_id": 735182591,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Edited to be similar to this",
      "created_at": "2021-11-09T20:18:18Z",
      "updated_at": "2021-11-09T20:18:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745986951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745986951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745989263",
      "pull_request_review_id": 801823629,
      "id": 745989263,
      "node_id": "PRRC_kwDOABII584sduSP",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735187379,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In this case, B is already in the mempool and should be deduplicated (removed) from the package. That logic will be added in a future PR.",
      "created_at": "2021-11-09T20:20:37Z",
      "updated_at": "2021-11-09T20:20:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r745989263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/745989263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746590610",
      "pull_request_review_id": 802597495,
      "id": 746590610,
      "node_id": "PRRC_kwDOABII584sgBGS",
      "diff_hunk": "@@ -1074,9 +1182,76 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I found the similar comment in `packages.cpp` clearer: \"The package is expected to be sorted, so the last transaction is the child.\"\r\n\r\nI would clarify it to:\r\n\r\n```suggestion\r\n    // The package is expected to be sorted, so all transactions except the last one are the unconfirmed parents\r\n```\r\n",
      "created_at": "2021-11-10T13:33:51Z",
      "updated_at": "2021-11-10T13:49:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746590610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746590610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746968682",
      "pull_request_review_id": 803121864,
      "id": 746968682,
      "node_id": "PRRC_kwDOABII584shdZq",
      "diff_hunk": "@@ -1077,6 +1094,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "40d3f98e7b3d9630f99efe06fba1f6a6a21794b5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 40d3f98e7b3d9630f99efe06fba1f6a6a21794b5 \"[policy] require submitted packages to be child-with-unconfirmed-parents\"\r\n\r\nISTM this isn't that the transaction conflicts with the mempool but rather that it already exists in the mempool? A similar check is done in `PreChecks` where the wtxid is also checked. Should the wtxid be checked here as well?",
      "created_at": "2021-11-10T20:39:52Z",
      "updated_at": "2021-11-10T21:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746968682",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746968682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746975004",
      "pull_request_review_id": 803121864,
      "id": 746975004,
      "node_id": "PRRC_kwDOABII584she8c",
      "diff_hunk": "@@ -1077,6 +1094,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only",
      "path": "src/validation.cpp",
      "position": 222,
      "original_position": 66,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "40d3f98e7b3d9630f99efe06fba1f6a6a21794b5",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In 40d3f98e7b3d9630f99efe06fba1f6a6a21794b5 \"[policy] require submitted packages to be child-with-unconfirmed-parents\"\r\n\r\nWhy must non-package inputs be confirmed? From my understanding of `AcceptMultipleTransactions`, it would be fine to have transactions which have unconfirmed inputs so long as they are already in the mempool.",
      "created_at": "2021-11-10T20:49:51Z",
      "updated_at": "2021-11-10T21:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746975004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746975004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1218,
      "original_line": 1218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746979226",
      "pull_request_review_id": 803121864,
      "id": 746979226,
      "node_id": "PRRC_kwDOABII584shf-a",
      "diff_hunk": "@@ -474,6 +480,7 @@ class MemPoolAccept\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ true,\n                             /* m_allow_bip125_replacement */ false,\n+                            /* m_package_submission */ false,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "fd3dbcc7c74eb9da6631c217893c325266bbf2e1",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fd3dbcc7c74eb9da6631c217893c325266bbf2e1 \"[validation] full package accept + mempool submission\"\r\n\r\nPerhaps mention that this value is unused, so it is ok for it to be `false`? At first, this seemed incorrect since testing package acceptance should have the same parameters as actual package acceptance (modulo adding to the mempool).",
      "created_at": "2021-11-10T20:56:38Z",
      "updated_at": "2021-11-10T21:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746979226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746979226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746982966",
      "pull_request_review_id": 803121864,
      "id": 746982966,
      "node_id": "PRRC_kwDOABII584shg42",
      "diff_hunk": "@@ -992,20 +1007,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "fd3dbcc7c74eb9da6631c217893c325266bbf2e1",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fd3dbcc7c74eb9da6631c217893c325266bbf2e1 \"[validation] full package accept + mempool submission\"\r\n\r\nIf these are never supposed to fail, then shouldn't these be an assertion rather than returning a failure?",
      "created_at": "2021-11-10T21:02:39Z",
      "updated_at": "2021-11-10T21:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r746982966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/746982966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1041,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747005936",
      "pull_request_review_id": 803172688,
      "id": 747005936,
      "node_id": "PRRC_kwDOABII584shmfw",
      "diff_hunk": "@@ -1077,6 +1094,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.cbegin() + (package.size() - 1),\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only",
      "path": "src/validation.cpp",
      "position": 222,
      "original_position": 66,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "40d3f98e7b3d9630f99efe06fba1f6a6a21794b5",
      "in_reply_to_id": 746975004,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We would still be able to validate the package if it was missing parents that were already in our mempool, but it means our peer sent us a malformed package (in the future when we have package relay).",
      "created_at": "2021-11-10T21:39:04Z",
      "updated_at": "2021-11-10T21:39:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747005936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747005936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1218,
      "original_line": 1218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747073711",
      "pull_request_review_id": 803259643,
      "id": 747073711,
      "node_id": "PRRC_kwDOABII584sh3Cv",
      "diff_hunk": "@@ -60,3 +60,20 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    if (package.size() < 2) return false;\n+\n+    // The package is expected to be sorted, so the last transaction is the child.\n+    const auto& child = package.back();\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;\n+    std::transform(child->vin.cbegin(), child->vin.cend(),\n+                   std::inserter(input_txids, input_txids.end()),\n+                   [](const auto& input) { return input.prevout.hash; });\n+\n+    // Every transaction must be a parent of the last transaction in the package.\n+    return std::all_of(package.cbegin(), package.cbegin() + package.size() - 1,\n+                       [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: since we've already asserted that package.size() >= 2, I think this can be slightly simplified to\r\n\r\n```suggestion\r\n    return std::all_of(package.cbegin(), package.cend() - 1,\r\n                       [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });\r\n```\r\n\r\nalso in [validation.cpp](https://github.com/bitcoin/bitcoin/pull/22674/commits/40d3f98e7b3d9630f99efe06fba1f6a6a21794b5#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R1124)",
      "created_at": "2021-11-10T23:49:39Z",
      "updated_at": "2021-11-11T15:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747073711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747073711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 77,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747080683",
      "pull_request_review_id": 803259643,
      "id": 747080683,
      "node_id": "PRRC_kwDOABII584sh4vr",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: is there a reason for not just using the Package alias?\r\n```suggestion\r\n        Package package;\r\n```",
      "created_at": "2021-11-11T00:07:09Z",
      "updated_at": "2021-11-11T15:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747080683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747080683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747115964",
      "pull_request_review_id": 803259643,
      "id": 747115964,
      "node_id": "PRRC_kwDOABII584siBW8",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: mtx_child spends 49, but only has 20+20 vin. It doesn't affect the tests, but it confused me for a while. ",
      "created_at": "2021-11-11T00:36:42Z",
      "updated_at": "2021-11-11T15:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747115964",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747115964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747572765",
      "pull_request_review_id": 803259643,
      "id": 747572765,
      "node_id": "PRRC_kwDOABII584sjw4d",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+        // IsChildWithParents does not detect unsorted parents.\n+        BOOST_CHECK(IsChildWithParents({tx_parent_also_child, tx_parent, tx_child}));\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_parent_also_child, tx_parent, tx_child}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated packages are not allowed in package submission.",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "stickies-v",
        "id": 69010457,
        "node_id": "MDQ6VXNlcjY5MDEwNDU3",
        "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/stickies-v",
        "html_url": "https://github.com/stickies-v",
        "followers_url": "https://api.github.com/users/stickies-v/followers",
        "following_url": "https://api.github.com/users/stickies-v/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/stickies-v/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/stickies-v/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
        "organizations_url": "https://api.github.com/users/stickies-v/orgs",
        "repos_url": "https://api.github.com/users/stickies-v/repos",
        "events_url": "https://api.github.com/users/stickies-v/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/stickies-v/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: I think you meant to say \"Unrelated transactions\"?\r\n```suggestion\r\n    // Unrelated transactions are not allowed in package submission.\r\n```",
      "created_at": "2021-11-11T14:59:54Z",
      "updated_at": "2021-11-11T15:17:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r747572765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/747572765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749781522",
      "pull_request_review_id": 806672769,
      "id": 749781522,
      "node_id": "PRRC_kwDOABII584ssMIS",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child, and its package can be canonically defined based\n+on the current state: each of its inputs must refer to a UTXO in the current chain tip or some\n+preceding transaction in the package.\n+\n+## Package Mempool Acceptance Rules\n+\n+The following rules are enforced for all packages:\n+\n+* Packages cannot exceed `MAX_PACKAGE_COUNT=25` count and `MAX_PACKAGE_SIZE=101KvB` total size\n+   (#20833)\n+\n+   - *Rationale*: This is already enforced as mempool ancestor/descendant limits. If\n+     transactions in a package are all related, exceeding this limit would mean that the package\n+     can either be split up or it wouldn't pass individual mempool policy.\n+\n+   - Note that, if these mempool limits change, package limits should be reconsidered. Users may\n+     also configure their mempool limits differently.\n+\n+* Packages must be topologically sorted. (#20833)\n+\n+* Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n+   the same inputs. Packages cannot have duplicate transactions. (#20833)\n+\n+* No transaction in a package can conflict with a mempool transaction. BIP125 Replace By Fee is\n+  currently disabled for packages. (#20833)\n+\n+   - Package RBF may be enabled in the future.\n+\n+* When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n+  descendants and ancestors is considered. (#21800)\n+\n+   - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n+     heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n+     the other transactions.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n+test accepts):\n+\n+* Packages must be child-with-unconfirmed-parents packages. (#22674)\n+\n+   - *Rationale*: This allows for fee-bumping by CPFP. Allowing multiple parents makes it possible\n+     to fee-bump a batch of transactions. Restricting packages to a defined topology is easier to\n+     reason about and simplifies the validation logic greatly.",
      "path": "doc/policy/packages.md",
      "position": 56,
      "original_position": 55,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I checked the rules present in `ProcessPackage`/`AcceptPackage`/`AcceptMultipleTransactions`. There are 2  package policies I can see missing.\r\n\r\nThe first one is the \"package memory usage too high\". That being said this check is host-dependent so it would be too artificial to expect users to respect it. In practice, you will hit first `MAX_PACKAGE_SIZE`.\r\n\r\nThe second one is the package must be at least 2-txn sized, otherwise you will fail on `IsChildWithParents` first check. It might be obvious from the \"child-with-unconfirmed-parents packages\" definition, though good to explicit requirement.\r\n\r\nDo you want to add to this specification that it's \"unstable\" or \"work-in-progress\" and shouldn't be strongly rely on by users for now ? \r\n\r\nAlso I recommend to add a safety warning for the \"Packages must be child-with-unconfirmed-parents packages\" rule, such as \"Please note the usage of multiple-parents one-child *might* be unsafe for your use-case and should be weigh in with care\" (see previous [comment](https://github.com/bitcoin/bitcoin/pull/22674#pullrequestreview-784689556)).",
      "created_at": "2021-11-16T00:25:57Z",
      "updated_at": "2021-11-16T02:01:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749781522",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749781522"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749834798",
      "pull_request_review_id": 806672769,
      "id": 749834798,
      "node_id": "PRRC_kwDOABII584ssZIu",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC the design rational behind this check is to prevent unbounded mempool growth in-between individual transaction acceptance and final call to `LimitMempoolSize` ?\r\n\r\nIntuitively, I would say package memory usage is already bounded by `MAX_PACKAGE_SIZE` and `MAX_STANDARD_TX_WEIGHT`, even if we have to assume malloc overhead, `total_memory_usage` should stay correlated enough to total vsize, to not have to introduce a new check ? ",
      "created_at": "2021-11-16T01:41:28Z",
      "updated_at": "2021-11-16T02:01:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749834798",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749834798"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749836165",
      "pull_request_review_id": 806672769,
      "id": 749836165,
      "node_id": "PRRC_kwDOABII584ssZeF",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+\n+        // Mempool ancestors may have changed since the last calculation done in PreChecks, since\n+        // package ancestors have already been submitted. Since PreChecks() and\n+        // PackageMempoolChecks() both enforce ancestor/descendant limits, this should never fail.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,",
      "path": "src/validation.cpp",
      "position": 137,
      "original_position": 134,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this check should never fail, is it introduced as an additional belt-and-suspender of `PreChecks`, in case we asserted package ancestors/descendants limits with wrong relaxation ?",
      "created_at": "2021-11-16T01:45:07Z",
      "updated_at": "2021-11-16T02:01:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749836165",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749836165"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1055,
      "original_line": 1055,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749838563",
      "pull_request_review_id": 806672769,
      "id": 749838563,
      "node_id": "PRRC_kwDOABII584ssaDj",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+\n+        // Mempool ancestors may have changed since the last calculation done in PreChecks, since\n+        // package ancestors have already been submitted. Since PreChecks() and\n+        // PackageMempoolChecks() both enforce ancestor/descendant limits, this should never fail.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end. Since\n+        // LimitMempoolSize() won't be called, this should never fail.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    if (!all_submitted) return false;\n+\n+    // Find the wtxids of the transactions that made it into the mempool. Allow partial submission,\n+    // but don't report success unless they all made it into the mempool.\n+    for (Workspace& ws : workspaces) {\n+        if (m_pool.exists(GenTxid::Wtxid(ws.m_ptx->GetWitnessHash()))) {",
      "path": "src/validation.cpp",
      "position": 166,
      "original_position": 162,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What are the reasons for a package transaction to not exist in the mempool at that step ?\r\n\r\nIf it has failed the script checks, we should have marked `all_submitted` as false and returned early. Asking the question because `FinalizePackage` comment explicitly says that package acceptance should have been atomically or not (\"either all of the transactions are added or none\") .",
      "created_at": "2021-11-16T01:51:31Z",
      "updated_at": "2021-11-16T02:01:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749838563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749838563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1084,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749841646",
      "pull_request_review_id": 806672769,
      "id": 749841646,
      "node_id": "PRRC_kwDOABII584ssazu",
      "diff_hunk": "@@ -1074,9 +1182,76 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");",
      "path": "src/validation.cpp",
      "position": 189,
      "original_position": 185,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you're overriding the `m_result` of package_state, which could have been set first in `FinalizePackage` ? ",
      "created_at": "2021-11-16T01:59:57Z",
      "updated_at": "2021-11-16T02:01:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r749841646",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/749841646"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1185,
      "original_line": 1185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755286913",
      "pull_request_review_id": 813888457,
      "id": 755286913,
      "node_id": "PRRC_kwDOABII584tBMOB",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child, and its package can be canonically defined based\n+on the current state: each of its inputs must refer to a UTXO in the current chain tip or some",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was a bit confused by \"UTXO in the current chain tip\" here. I understand that you mean \"UTXO in the UTXO set as of the current chain tip\", but i first interpreted it as \"a UTXO in the chain-tip block\".",
      "created_at": "2021-11-23T16:11:04Z",
      "updated_at": "2021-11-23T16:11:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755286913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755286913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755309288",
      "pull_request_review_id": 813912814,
      "id": 755309288,
      "node_id": "PRRC_kwDOABII584tBRro",
      "diff_hunk": "@@ -60,3 +60,28 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(!package.empty());\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+\n+    if (package.size() < 2) return false;\n+\n+    const auto& child = package[package.size() - 1];\n+\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;",
      "path": "src/policy/packages.cpp",
      "position": 12,
      "original_position": 49,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "5ab8cb23e46152957d80f777310ec2493427a19e",
      "in_reply_to_id": 737317419,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Defaulting to unordered set unless there's a reason to need ordering for determinism makes sense, imo.",
      "created_at": "2021-11-23T16:29:58Z",
      "updated_at": "2021-11-23T16:29:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755309288",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755309288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755641690",
      "pull_request_review_id": 814358483,
      "id": 755641690,
      "node_id": "PRRC_kwDOABII584tCi1a",
      "diff_hunk": "@@ -60,6 +60,15 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+\n+// If a package is submitted, it must be within the mempool's ancestor/descendant limits. Since a\n+// submitted package must be child-with-unconfirmed-parents (all of the transactions are an ancestor\n+// of the child), it doesn't make sense for package limits to exceed default mempool package limits.",
      "path": "src/validation.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "73fe6a19a97f1a7ca23ef55416b4497c372c8bb2",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe the sentence could be better phrased than \"make sense\", like \"As submitted package are ultimately upper bounded by in-mempool package limits, ensure that package acceptance limits are encompassed by the in-mempool ones\" ?\r\n\r\nNote, the mempool package limits can be adjusted by the node settings, e.g size=100. In that case, we refuse package, of which the size has been considered as acceptable by the node operator. I think it's not a big deal, as those settings are rarely tweaked, but maybe batching applications are concerned ?",
      "created_at": "2021-11-24T02:11:48Z",
      "updated_at": "2021-11-24T02:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755641690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755641690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755645458",
      "pull_request_review_id": 814358483,
      "id": 755645458,
      "node_id": "PRRC_kwDOABII584tCjwS",
      "diff_hunk": "@@ -207,4 +207,84 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n     }\n }\n \n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated packages are not allowed in package submission.\n+    Package package_unrelated;\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto mtx = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[i + 25], /* vout */ 0,\n+                                                 /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                 /* output_destination */ parent_locking_script,\n+                                                 /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+        package_unrelated.emplace_back(MakeTransactionRef(mtx));\n+    }\n+    auto result_unrelated_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                     package_unrelated, /* test_accept */ false);\n+    BOOST_CHECK(result_unrelated_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    // Parent and Child (and Grandchild) Package\n+    Package package_parent_child;\n+    Package package_3gen;\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ parent_locking_script,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_parent_child.push_back(tx_parent);\n+    package_3gen.push_back(tx_parent);\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n+    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n+                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n+                                                   /* output_destination */ child_locking_script,\n+                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_parent_child.push_back(tx_child);\n+    package_3gen.push_back(tx_child);\n+\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript grandchild_locking_script = GetScriptForDestination(PKHash(grandchild_key.GetPubKey()));\n+    auto mtx_grandchild = CreateValidMempoolTransaction(/* input_transaction */ tx_child, /* vout */ 0,\n+                                                       /* input_height */ 101, /* input_signing_key */ child_key,\n+                                                       /* output_destination */ grandchild_locking_script,\n+                                                       /* output_amount */ CAmount(47 * COIN), /* submit */ false);\n+    CTransactionRef tx_grandchild = MakeTransactionRef(mtx_grandchild);\n+    package_3gen.push_back(tx_grandchild);\n+\n+    // 3 Generations is not allowed.\n+    auto result_3gen_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                package_3gen, /* test_accept */ false);\n+    BOOST_CHECK(result_3gen_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you have test coverage for the `AcceptPackage`-specific checks \"conflicts-with-mempool\" and \"package-not-child-with-unconfirmed-parents\" ? They might be already exercised elsewhere.",
      "created_at": "2021-11-24T02:23:12Z",
      "updated_at": "2021-11-24T02:23:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r755645458",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755645458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758407993",
      "pull_request_review_id": 817863035,
      "id": 758407993,
      "node_id": "PRRC_kwDOABII584tNGM5",
      "diff_hunk": "@@ -992,20 +1007,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "fd3dbcc7c74eb9da6631c217893c325266bbf2e1",
      "in_reply_to_id": 746982966,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would only fail if there is some serious bug in our consensus/policy code such that policy script checks are looser than consensus. If such a bug exists and an attacker finds it before we do, having an assertion here allows the attacker to crash nodes by sending out transactions exploiting it. However, it'd definitely be good to throw in debug mode so that we can hope to catch it in testing/fuzzing: see #23590",
      "created_at": "2021-11-29T14:22:21Z",
      "updated_at": "2021-11-29T14:22:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758407993",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758407993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1041,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758514969",
      "pull_request_review_id": 818009893,
      "id": 758514969,
      "node_id": "PRRC_kwDOABII584tNgUZ",
      "diff_hunk": "@@ -1074,9 +1182,76 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // The package must be 1 child with all of its unconfirmed parents.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 217,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 746590610,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added to the comment",
      "created_at": "2021-11-29T16:11:33Z",
      "updated_at": "2021-11-29T16:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758514969",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758514969"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1220,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516418",
      "pull_request_review_id": 818011825,
      "id": 758516418,
      "node_id": "PRRC_kwDOABII584tNgrC",
      "diff_hunk": "@@ -1077,6 +1094,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(GenTxid::Txid(child->GetHash()))) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflicts-with-mempool\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "40d3f98e7b3d9630f99efe06fba1f6a6a21794b5",
      "in_reply_to_id": 746968682,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right - that comment didn't match the code. I've removed this now, since it's not relevant until package RBF",
      "created_at": "2021-11-29T16:13:00Z",
      "updated_at": "2021-11-29T16:13:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516751",
      "pull_request_review_id": 818012308,
      "id": 758516751,
      "node_id": "PRRC_kwDOABII584tNgwP",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+        // IsChildWithParents does not detect unsorted parents.\n+        BOOST_CHECK(IsChildWithParents({tx_parent_also_child, tx_parent, tx_child}));\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_parent_also_child, tx_parent, tx_child}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated packages are not allowed in package submission.",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 747572765,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, good catch :)",
      "created_at": "2021-11-29T16:13:21Z",
      "updated_at": "2021-11-29T16:13:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516978",
      "pull_request_review_id": 818012613,
      "id": 758516978,
      "node_id": "PRRC_kwDOABII584tNgzy",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 747080683,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-11-29T16:13:35Z",
      "updated_at": "2021-11-29T16:13:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758516978",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758516978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758517510",
      "pull_request_review_id": 818013320,
      "id": 758517510,
      "node_id": "PRRC_kwDOABII584tNg8G",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 749834798,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah you're right, this is probably overkill. I've removed it.",
      "created_at": "2021-11-29T16:14:08Z",
      "updated_at": "2021-11-29T16:14:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758517510",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758517510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1042,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758518641",
      "pull_request_review_id": 818014821,
      "id": 758518641,
      "node_id": "PRRC_kwDOABII584tNhNx",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+\n+        // Mempool ancestors may have changed since the last calculation done in PreChecks, since\n+        // package ancestors have already been submitted. Since PreChecks() and\n+        // PackageMempoolChecks() both enforce ancestor/descendant limits, this should never fail.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,",
      "path": "src/validation.cpp",
      "position": 137,
      "original_position": 134,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 749836165,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've added a comment to explain why we need to do this - `addUnchecked` needs a `setAncestors`. We need to recalculate it in here because the transaction might have new ancestors (i.e. preceding transactions in the package that were submitted).",
      "created_at": "2021-11-29T16:15:18Z",
      "updated_at": "2021-11-29T16:15:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758518641",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758518641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1055,
      "original_line": 1055,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758519467",
      "pull_request_review_id": 818015874,
      "id": 758519467,
      "node_id": "PRRC_kwDOABII584tNhar",
      "diff_hunk": "@@ -1074,9 +1182,76 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");",
      "path": "src/validation.cpp",
      "position": 189,
      "original_position": 185,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 749841646,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point. Removed the `package_state` stuff from `FinalizePackage()`.",
      "created_at": "2021-11-29T16:16:06Z",
      "updated_at": "2021-11-29T16:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758519467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758519467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1185,
      "original_line": 1185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758520232",
      "pull_request_review_id": 818016897,
      "id": 758520232,
      "node_id": "PRRC_kwDOABII584tNhmo",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child, and its package can be canonically defined based\n+on the current state: each of its inputs must refer to a UTXO in the current chain tip or some",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 14,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 755286913,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to \"each of its inputs must be available in the UTXO set as of the current chain tip\"",
      "created_at": "2021-11-29T16:16:56Z",
      "updated_at": "2021-11-29T16:16:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758520232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758520232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758520836",
      "pull_request_review_id": 818017679,
      "id": 758520836,
      "node_id": "PRRC_kwDOABII584tNhwE",
      "diff_hunk": "@@ -60,6 +60,15 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 101;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 25;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 101;\n+\n+// If a package is submitted, it must be within the mempool's ancestor/descendant limits. Since a\n+// submitted package must be child-with-unconfirmed-parents (all of the transactions are an ancestor\n+// of the child), it doesn't make sense for package limits to exceed default mempool package limits.",
      "path": "src/validation.h",
      "position": null,
      "original_position": 7,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "73fe6a19a97f1a7ca23ef55416b4497c372c8bb2",
      "in_reply_to_id": 755641690,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to:\r\n\r\n// If a package is submitted, it must be within the mempool's ancestor/descendant limits. Since a\r\n// submitted package must be child-with-unconfirmed-parents (all of the transactions are an ancestor\r\n// of the child), package limits are ultimately bounded by mempool package limits. Ensure that the\r\n// defaults reflect this constraint.",
      "created_at": "2021-11-29T16:17:31Z",
      "updated_at": "2021-11-29T16:17:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758520836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758520836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758521523",
      "pull_request_review_id": 818018559,
      "id": 758521523,
      "node_id": "PRRC_kwDOABII584tNh6z",
      "diff_hunk": "@@ -207,4 +207,84 @@ BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n     }\n }\n \n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated packages are not allowed in package submission.\n+    Package package_unrelated;\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto mtx = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[i + 25], /* vout */ 0,\n+                                                 /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                 /* output_destination */ parent_locking_script,\n+                                                 /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+        package_unrelated.emplace_back(MakeTransactionRef(mtx));\n+    }\n+    auto result_unrelated_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                     package_unrelated, /* test_accept */ false);\n+    BOOST_CHECK(result_unrelated_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    // Parent and Child (and Grandchild) Package\n+    Package package_parent_child;\n+    Package package_3gen;\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ parent_locking_script,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_parent_child.push_back(tx_parent);\n+    package_3gen.push_back(tx_parent);\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n+    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n+                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n+                                                   /* output_destination */ child_locking_script,\n+                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_parent_child.push_back(tx_child);\n+    package_3gen.push_back(tx_child);\n+\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript grandchild_locking_script = GetScriptForDestination(PKHash(grandchild_key.GetPubKey()));\n+    auto mtx_grandchild = CreateValidMempoolTransaction(/* input_transaction */ tx_child, /* vout */ 0,\n+                                                       /* input_height */ 101, /* input_signing_key */ child_key,\n+                                                       /* output_destination */ grandchild_locking_script,\n+                                                       /* output_amount */ CAmount(47 * COIN), /* submit */ false);\n+    CTransactionRef tx_grandchild = MakeTransactionRef(mtx_grandchild);\n+    package_3gen.push_back(tx_grandchild);\n+\n+    // 3 Generations is not allowed.\n+    auto result_3gen_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                package_3gen, /* test_accept */ false);\n+    BOOST_CHECK(result_3gen_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 755645458,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've removed the `conflicts-with-mempool` logic, since it's not relevant right now. Added a test for `package-not-child-with-unconfirmed-parents`.",
      "created_at": "2021-11-29T16:18:13Z",
      "updated_at": "2021-11-29T16:18:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758521523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758521523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758521922",
      "pull_request_review_id": 818019122,
      "id": 758521922,
      "node_id": "PRRC_kwDOABII584tNiBC",
      "diff_hunk": "@@ -114,4 +114,177 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        std::vector<CTransactionRef> package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(49 * COIN, spk));",
      "path": "src/test/txpackage_tests.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 747115964,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to spend 39",
      "created_at": "2021-11-29T16:18:40Z",
      "updated_at": "2021-11-29T16:18:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758521922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758521922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758522091",
      "pull_request_review_id": 818019352,
      "id": 758522091,
      "node_id": "PRRC_kwDOABII584tNiDr",
      "diff_hunk": "@@ -60,3 +60,20 @@ bool CheckPackage(const Package& txns, PackageValidationState& state)\n     }\n     return true;\n }\n+\n+bool IsChildWithParents(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    if (package.size() < 2) return false;\n+\n+    // The package is expected to be sorted, so the last transaction is the child.\n+    const auto& child = package.back();\n+    std::unordered_set<uint256, SaltedTxidHasher> input_txids;\n+    std::transform(child->vin.cbegin(), child->vin.cend(),\n+                   std::inserter(input_txids, input_txids.end()),\n+                   [](const auto& input) { return input.prevout.hash; });\n+\n+    // Every transaction must be a parent of the last transaction in the package.\n+    return std::all_of(package.cbegin(), package.cbegin() + package.size() - 1,\n+                       [&input_txids](const auto& ptx) { return input_txids.count(ptx->GetHash()) > 0; });",
      "path": "src/policy/packages.cpp",
      "position": null,
      "original_position": 19,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 747073711,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed both",
      "created_at": "2021-11-29T16:18:50Z",
      "updated_at": "2021-11-29T16:18:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758522091",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758522091"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": 77,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758522794",
      "pull_request_review_id": 818020304,
      "id": 758522794,
      "node_id": "PRRC_kwDOABII584tNiOq",
      "diff_hunk": "@@ -992,20 +1007,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 100,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "fd3dbcc7c74eb9da6631c217893c325266bbf2e1",
      "in_reply_to_id": 746982966,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added `Assume(false)` to all of the \"should never fail\" checks so they throw in debug mode.",
      "created_at": "2021-11-29T16:19:35Z",
      "updated_at": "2021-11-29T16:19:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758522794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758522794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1041,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758524316",
      "pull_request_review_id": 818022350,
      "id": 758524316,
      "node_id": "PRRC_kwDOABII584tNimc",
      "diff_hunk": "@@ -0,0 +1,55 @@\n+# Package Mempool Accept\n+\n+## Definitions\n+\n+A **package** is an ordered list of transactions, representable by a connected Directed Acyclic\n+Graph (a directed edge exists between a transaction that spends the output of another transaction).\n+\n+For every transaction `t` in a **topologically sorted** package, if any of its parents are present\n+in the package, they appear somewhere in the list before `t`.\n+\n+A **child-with-unconfirmed-parents** package is a topologically sorted package that consists of\n+exactly one child and all of its unconfirmed parents (no other transactions may be present).\n+The last transaction in the package is the child, and its package can be canonically defined based\n+on the current state: each of its inputs must refer to a UTXO in the current chain tip or some\n+preceding transaction in the package.\n+\n+## Package Mempool Acceptance Rules\n+\n+The following rules are enforced for all packages:\n+\n+* Packages cannot exceed `MAX_PACKAGE_COUNT=25` count and `MAX_PACKAGE_SIZE=101KvB` total size\n+   (#20833)\n+\n+   - *Rationale*: This is already enforced as mempool ancestor/descendant limits. If\n+     transactions in a package are all related, exceeding this limit would mean that the package\n+     can either be split up or it wouldn't pass individual mempool policy.\n+\n+   - Note that, if these mempool limits change, package limits should be reconsidered. Users may\n+     also configure their mempool limits differently.\n+\n+* Packages must be topologically sorted. (#20833)\n+\n+* Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n+   the same inputs. Packages cannot have duplicate transactions. (#20833)\n+\n+* No transaction in a package can conflict with a mempool transaction. BIP125 Replace By Fee is\n+  currently disabled for packages. (#20833)\n+\n+   - Package RBF may be enabled in the future.\n+\n+* When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n+  descendants and ancestors is considered. (#21800)\n+\n+   - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n+     heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n+     the other transactions.\n+\n+The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n+test accepts):\n+\n+* Packages must be child-with-unconfirmed-parents packages. (#22674)\n+\n+   - *Rationale*: This allows for fee-bumping by CPFP. Allowing multiple parents makes it possible\n+     to fee-bump a batch of transactions. Restricting packages to a defined topology is easier to\n+     reason about and simplifies the validation logic greatly.",
      "path": "doc/policy/packages.md",
      "position": 56,
      "original_position": 55,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 749781522,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1. I've removed the \"package memory usage too high\" check\r\n2. Added a comment that packages must contain at least 2 transactions\r\n3. Added a disclaimer that the policy docs aren't exhaustive\r\n4. Added a warning that multi-parent-1-child may be unsafe for some use cases",
      "created_at": "2021-11-29T16:21:11Z",
      "updated_at": "2021-11-29T16:21:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758524316",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758524316"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758524903",
      "pull_request_review_id": 818023209,
      "id": 758524903,
      "node_id": "PRRC_kwDOABII584tNivn",
      "diff_hunk": "@@ -474,6 +480,7 @@ class MemPoolAccept\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ true,\n                             /* m_allow_bip125_replacement */ false,\n+                            /* m_package_submission */ false,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "fd3dbcc7c74eb9da6631c217893c325266bbf2e1",
      "in_reply_to_id": 746979226,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment for this",
      "created_at": "2021-11-29T16:21:51Z",
      "updated_at": "2021-11-29T16:21:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758524903",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758524903"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 483,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758527589",
      "pull_request_review_id": 818026894,
      "id": 758527589,
      "node_id": "PRRC_kwDOABII584tNjZl",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a static check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_BAD, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    LOCK(m_pool.cs);\n+    const auto& child = package[package.size() - 1];\n+    // The child is never allowed to conflict with the mempool.\n+    if (m_pool.exists(child->GetHash())) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 56,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735187379,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok I've added the deduplication logic into this PR (see \"[validation] de-duplicate package transactions already in mempool\" commit). Now, if a same-txid-different-witness transaction is in the mempool, we'll treat it as already-in-mempool. We can add witness replacement later when we have that.",
      "created_at": "2021-11-29T16:24:45Z",
      "updated_at": "2021-11-29T16:24:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758527589",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758527589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758528793",
      "pull_request_review_id": 818028442,
      "id": 758528793,
      "node_id": "PRRC_kwDOABII584tNjsZ",
      "diff_hunk": "@@ -1088,6 +1105,66 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Static package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});",
      "path": "src/validation.cpp",
      "position": 205,
      "original_position": 44,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735187691,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added deduplication logic, so the input to `AcceptMultipleTransactions()` is not necessarily the same input to `AcceptPackage()`.",
      "created_at": "2021-11-29T16:25:56Z",
      "updated_at": "2021-11-29T16:25:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r758528793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758528793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1201,
      "original_line": 1201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770130932",
      "pull_request_review_id": 833528437,
      "id": 770130932,
      "node_id": "PRRC_kwDOABII584t50P0",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");",
      "path": "src/validation.cpp",
      "position": 241,
      "original_position": 241,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note, I think the error string is a little bit confusing here.\r\n\r\nThe error sounds to suggest the package is invalid due to _not_ being a child with unconfirmed parents. However, a package can be valid if parents are in different state than unconfirmed transactions in the mempool, namely already included in the chain tip. Reading back `packages.md`, the fact that the parents inputs can be already available in the UTXO set is laid out in the \"Definitions\" section, but not in the \"Rules\" ones. A hurried user could think a package must only be made of unconfirmed parents, a restriction on the utility of the feature.\r\n\r\nTo reduce risks of confusion, I think the confirmed-parents allowance could be mentioned in the \"Rules\" section for redundancy and the message error here could be \"missing-parents-from-package-or-utxo-set\".\r\n\r\n",
      "created_at": "2021-12-16T00:09:41Z",
      "updated_at": "2021-12-16T02:24:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770130932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770130932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1237,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770156708",
      "pull_request_review_id": 833528437,
      "id": 770156708,
      "node_id": "PRRC_kwDOABII584t56ik",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions",
      "path": "src/validation.cpp",
      "position": 252,
      "original_position": 252,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While I agree on the end goal to avoid introducing tx-relay censorship vector, I disagree on assigning mempool policies heterogeneity as the root cause. If a user decides for a highly-restrictive policy (e.g bumping `mintxrelayfee`), as protocol developers, there is not that much we can do to prevent such \"self\"-censorship.\r\n\r\nWhat we would like to avoid is offering a naive pinning trick to a malicious counterparty in the context of time-sensitive multi-party protocols. E.g, in Lightning, a counterparty catches at early propagation a commitment transaction A from the holder, attaches a low-feerate child B' on its own anchor output, then propagates widely this malicious package by mass-connecting. When the honest package A + B is reaching the majority of the network, it fails package acceptance if we don't have a relaxation to re-evaluate package even if a subset of components are already in the mempool.",
      "created_at": "2021-12-16T01:22:30Z",
      "updated_at": "2021-12-16T02:24:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770156708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770156708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1248,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770162566",
      "pull_request_review_id": 833528437,
      "id": 770162566,
      "node_id": "PRRC_kwDOABII584t57-G",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the",
      "path": "src/validation.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is a behavior unsafe for the unwarranted user.\r\n\r\nIn the context of multi-party protocol, a malicious counterparty broadcast a transaction A' with an inflated witness. When the package A+B issued by a honest participant is entering into the mempool, A' is swapped in place of A. However, A has a far smallest witness, thus swapping for A' effectively downgrades the package feerate. This breaks the fee-bumping expectation of the honest participant, as a malleated package is now propagating on the network, instead of the higher one.\r\n\r\nAs of today, I don't know deployed protocols which would be affected by this package feerate-downgrade issue. That said, with the activation of Taproot it's now far easier to introduce applications/protocols vulnerable, as shared-owners of a utxo might have witnesses unfairly asymmetric in weight due to the script path spend control block.\r\n\r\nI assume this behavior should be corrected if witness replacement is implemented. However, I think we shouldn't make assumptions it's done before package relay. In the meantime, I think it's better to not introduce unsafe or obscure behaviors, of which the curation might be missed by future reviewers. I would say it's better to just fail package acceptance if a same txid, different wtxid already exists in the mempool (same behavior than single-transaction acceptance in `PreChecks`).",
      "created_at": "2021-12-16T01:39:25Z",
      "updated_at": "2021-12-16T02:24:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770162566",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770162566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1267,
      "original_line": 1267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770174654",
      "pull_request_review_id": 833528437,
      "id": 770174654,
      "node_id": "PRRC_kwDOABII584t5-6-",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As future package components should be evaluated on the union of the fees instead of the transaction ones to decide acceptance, uncareful deduplication could provoke unexpected package submission failures.\r\n\r\nLet's say you have the package A+B+C, where A and B are parents of C, A and C are low-feerate, B is high-feerate. If B is already in the mempool, when the package A+B+C is received, B is dedup, then the union of fees of A+C is realized, it's too low to satisfy the mempool min fee, the packages is rejected.\r\n\r\nTo avoid this behavior, we should compute the union of fees pre-dedup in `AcceptPackage`, then pass down the result to `AcceptMultipleTransactions`. It's open if future `testmempoolaccept` of multiple transaction should be also based on the union of fees, or we think it's an acceptable divergence  w.r.t package submission. I think we should have a TODO pointing to that context.\r\n\r\nFurther, I think deduplication is also introducing issues w.r.t ancestors/descendants limits. If we decide to relay the package on the positive result from `AcceptMultipleTransactions`, a dedup package might have lower ancestors/descendants limits than the complete one we announce to our peers.",
      "created_at": "2021-12-16T02:15:25Z",
      "updated_at": "2021-12-16T02:24:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770174654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770174654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770482574",
      "pull_request_review_id": 834007823,
      "id": 770482574,
      "node_id": "PRRC_kwDOABII584t7KGO",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");",
      "path": "src/validation.cpp",
      "position": 241,
      "original_position": 241,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770130932,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> However, a package can be valid if parents are in different state than unconfirmed transactions in the mempool, namely already included in the chain tip.\r\n\r\nThis is not the case. If the package contains a parent that is already confirmed, it is an invalid package. This is because we don't want to rescan previous blocks for the parent transaction (we might not have them if we're pruning); we only use the UTXO set.\r\n\r\n> A hurried user could think a package must only be made of unconfirmed parents, a restriction on the utility of the feature.\r\n\r\nThis would be correct. A package must only have unconfirmed parents.",
      "created_at": "2021-12-16T12:10:04Z",
      "updated_at": "2021-12-16T12:10:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770482574",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770482574"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1237,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770485273",
      "pull_request_review_id": 834011670,
      "id": 770485273,
      "node_id": "PRRC_kwDOABII584t7KwZ",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions",
      "path": "src/validation.cpp",
      "position": 252,
      "original_position": 252,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770156708,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would this be a more comprehensive comment?\r\n\r\n\"Node operators are free to set their mempool policies however they please, nodes may receive transactions in different orders, and malicious counterparties may try to take advantage of policy differences to pin transactions. As such, it's possible for some package transaction(s) to already be in the mempool, and we don't want to reject the entire package in that case (as that could be a censorship vector).\"\r\n",
      "created_at": "2021-12-16T12:14:03Z",
      "updated_at": "2021-12-16T12:14:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770485273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770485273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1248,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770499498",
      "pull_request_review_id": 834031727,
      "id": 770499498,
      "node_id": "PRRC_kwDOABII584t7OOq",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the",
      "path": "src/validation.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770162566,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> In the context of multi-party protocol, a malicious counterparty broadcast a transaction A' with an inflated witness. When the package A+B issued by a honest participant is entering into the mempool, A' is swapped in place of A. However, A has a far smallest witness, thus swapping for A' effectively downgrades the package feerate.\r\n\r\nAs specified in the [proposal](https://gist.github.com/glozow/dc4e9d5c5b14ade7cdfac40f43adb18a#fee-related-checks-use-package-feerate): \"We use the package feerate of the package _after deduplication_\" which is intended to avoid an issue like this, and others. More rationale is included in the proposal.\r\n\r\n> This breaks the fee-bumping expectation of the honest participant, as a malleated package is now propagating on the network, instead of the higher one.\r\n\r\nGiven that the feerate of A' was sufficient to enter the mempool, this is made no worse or better with the introduction of package mempool accept, as we're treating A' vs A identically to how we treat individual transactions. We will deduplicate A from the package and assess B individually; its package feerate only includes the transactions that are not already in the mempool. Of course this means the ancestor score of B once everything is submitted is lower, but the danger has not been made worse by package mempool acceptance, as **we would have the same result if B was received as an individual transaction.**\r\n\r\n> I assume this behavior should be corrected if witness replacement is implemented.\r\n\r\nYes exactly. I still stipulate that package RBF and witness replacements can be worked on in parallel; both are improvements but neither requires the other. I've tried to document the limitation (known to both single transactions and packages) in the code, as seen in this diff.\r\n",
      "created_at": "2021-12-16T12:34:29Z",
      "updated_at": "2021-12-16T12:34:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770499498",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770499498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1267,
      "original_line": 1267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770501747",
      "pull_request_review_id": 834035139,
      "id": 770501747,
      "node_id": "PRRC_kwDOABII584t7Oxz",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the",
      "path": "src/validation.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770162566,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I would say it's better to just fail package acceptance if a same txid, different wtxid already exists in the mempool (same behavior than single-transaction acceptance in PreChecks).\r\n\r\nI think this is worse than the bloated-witness problem acknowledged above. If A' is already in the mempool and:\r\n- A and B are received separately as individual transactions -> A is rejected and B is accepted\r\n- A+B is received as a package -> package fails, B is rejected.\r\n\r\nThis makes package acceptance more strict than individual transaction acceptance, which is something we want to avoid.",
      "created_at": "2021-12-16T12:38:04Z",
      "updated_at": "2021-12-16T12:38:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770501747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770501747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1267,
      "original_line": 1267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770504569",
      "pull_request_review_id": 834039027,
      "id": 770504569,
      "node_id": "PRRC_kwDOABII584t7Pd5",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Let's say you have the package A+B+C, where A and B are parents of C, A and C are low-feerate, B is high-feerate. If B is already in the mempool, when the package A+B+C is received, B is dedup, then the union of fees of A+C is realized, it's too low to satisfy the mempool min fee, the packages is rejected.\r\n> To avoid this behavior, we should compute the union of fees pre-dedup in AcceptPackage, then pass down the result to AcceptMultipleTransactions.\r\n\r\nIt is actually incentive-compatible to reject this package. B's fees should not supplement A's fees, because B does not depend on A; including B in the package feerate would be \"sibling-pays-for-sibling\" behavior. I've illustrated this in [examples Q1 and Q2](https://gist.github.com/glozow/dc4e9d5c5b14ade7cdfac40f43adb18a#always-try-individual-submission-first).",
      "created_at": "2021-12-16T12:42:02Z",
      "updated_at": "2021-12-16T12:42:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770504569",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770504569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770514854",
      "pull_request_review_id": 834053990,
      "id": 770514854,
      "node_id": "PRRC_kwDOABII584t7R-m",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Further, I think deduplication is also introducing issues w.r.t ancestors/descendants limits. If we decide to relay the package on the positive result from AcceptMultipleTransactions, a dedup package might have lower ancestors/descendants limits than the complete one we announce to our peers.\r\n\r\nNo, we'll still enforce ancestor/descendant limits on the package in the same way. The package transactions that are already in the mempool will be included in ancestor counts. The nice thing about a child-with-parents package is that all package transactions are ancestors of the child transaction so we won't under/overestimate :).\r\n\r\nSince we always have _all_ of the unconfirmed parents in the package, mempool contents won't affect whether our package is within the limits specified by the protocol.\r\n\r\nFor example, if we can't have more than 25 in a package but somebody has a package where the child has 30 in-mempool ancestors, regardless of the size of the package after deduplication, the package is defined as child-with-all-unconfirmed-parents. Thus, since it has 30 unconfirmed ancestors, the defined package has a size of 31 and is too big.",
      "created_at": "2021-12-16T12:56:55Z",
      "updated_at": "2021-12-16T12:56:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770514854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770514854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770778021",
      "pull_request_review_id": 834420224,
      "id": 770778021,
      "node_id": "PRRC_kwDOABII584t8SOl",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the",
      "path": "src/validation.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770162566,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @glozow's proposed behavior to use the existing mempool transaction (for now) in case it has a different wtxid. From what I see, the worse that can happen if that the sender proposed a package with feerate F1, and it ends up having feerate F2 < F1.\r\n\r\nA sender that doesn't see its transaction included should keep bumping the child, so it should eventually confirm, it will just cost more than expected, but I don't think it introduces a fundamental attack vector (at least I currently don't see one).\r\n\r\nAnd we can later implement replacement to choose between A and A' the one with the smallest weight (which is incentives compatible as it pays a higher feerate).\r\n\r\n",
      "created_at": "2021-12-16T17:48:05Z",
      "updated_at": "2021-12-16T17:48:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770778021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770778021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1267,
      "original_line": 1267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770780107",
      "pull_request_review_id": 834423265,
      "id": 770780107,
      "node_id": "PRRC_kwDOABII584t8SvL",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It is actually incentive-compatible to reject this package. B's fees should not supplement A's fees, because B does not depend on A; including B in the package feerate would be \"sibling-pays-for-sibling\" behavior. \r\n\r\nI agree with that. @ariard if you also agree with that, is the rest of your comment resolved? Or is there a part I'm missing?",
      "created_at": "2021-12-16T17:51:12Z",
      "updated_at": "2021-12-16T17:51:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770780107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770780107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770782822",
      "pull_request_review_id": 834426999,
      "id": 770782822,
      "node_id": "PRRC_kwDOABII584t8TZm",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this change can be problematic. Now we don't know what the keys are for this map (txid or wtxid).\r\nAre callers expected to just try both?",
      "created_at": "2021-12-16T17:54:55Z",
      "updated_at": "2021-12-16T17:55:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770782822",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770782822"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770792482",
      "pull_request_review_id": 834440743,
      "id": 770792482,
      "node_id": "PRRC_kwDOABII584t8Vwi",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770782822,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Essentially yes, so that we can handle same-txid-different-witness. It's \"if you can't find it by wtxid then try txid because it may have been swapped out.\"\r\n\r\nI also considered adding a special result type like `ResultType::WITNESS_SWAPPED` to communicate  \"try again using txid\" to the caller (would that be better?).\r\n\r\nAnother approach is to include the entire transaction in the `MempoolAcceptResult`, but it seems weird if the result transaction's wtxid doesn't match the key wtxid.\r\n\r\nIt's a little ugly, but I'm not sure if there's a cleaner way to do this?",
      "created_at": "2021-12-16T18:09:01Z",
      "updated_at": "2021-12-16T18:09:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770792482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770792482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770798873",
      "pull_request_review_id": 834449775,
      "id": 770798873,
      "node_id": "PRRC_kwDOABII584t8XUZ",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770782822,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I also considered adding a special result type like ResultType::WITNESS_SWAPPED to communicate \"try again using txid\" to the caller (would that be better?).\r\n\r\nIt does feel better to me, but there's a part of your answer I don't understand.\r\nThis case only happens when the mempool contain a \"same txid, different wtxid\" entry, right?\r\nLet's call A our proposed tx and A' the mempool \"same txid, different wtxid\" tx.\r\nWhy can't you simply use A `wtxid` as the key in the `m_tx_results` map (even if A' is actually used)?\r\nWhy do you want the caller to try again? If the caller sees that the result type is `ResultType::WITNESS_SWAPPED` this should give them all the information they need?",
      "created_at": "2021-12-16T18:18:21Z",
      "updated_at": "2021-12-16T18:18:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770798873",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770798873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770804029",
      "pull_request_review_id": 834457349,
      "id": 770804029,
      "node_id": "PRRC_kwDOABII584t8Yk9",
      "diff_hunk": "@@ -1238,7 +1242,49 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     m_view.SetBackend(m_dummy);\n \n     LOCK(m_pool.cs);\n-    return AcceptMultipleTransactions(package, args);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);",
      "path": "src/validation.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
      "in_reply_to_id": null,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In e12fafda2dfbbdf63f125e5af797ecfaa6488f66 \"[validation] de-duplicate package transactions already in mempool\"\r\n\r\nShouldn't this be `txid` since if `wtxid` were in the mempool, the previous `if` would be the path taken?\r\n\r\n```suggestion\r\n            auto iter = m_pool.GetIter(txid);\r\n```\r\n\r\nThere also does not appear to be any tests for this case.",
      "created_at": "2021-12-16T18:25:52Z",
      "updated_at": "2021-12-16T18:35:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770804029",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770804029"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1270,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770808025",
      "pull_request_review_id": 834463333,
      "id": 770808025,
      "node_id": "PRRC_kwDOABII584t8ZjZ",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770782822,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree with @t-bast, I think it should be the original wtxid with a witness swapped result type.",
      "created_at": "2021-12-16T18:32:05Z",
      "updated_at": "2021-12-16T18:32:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r770808025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/770808025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771000061",
      "pull_request_review_id": 834710899,
      "id": 771000061,
      "node_id": "PRRC_kwDOABII584t9Ib9",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");",
      "path": "src/validation.cpp",
      "position": 241,
      "original_position": 241,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770130932,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> This is not the case. If the package contains a parent that is already confirmed, it is an invalid package.\r\n\r\nMy mistake, I should have precised, \"a package can be valid if _the child_ parents are in different state than unconfirmed transactions in the mempool, namely already included in the chain tip\" so we agree here.\r\n\r\n > This would be correct. A package must only have unconfirmed parents.\r\n \r\n Yes, though the package _child_ is allowed to have not-in-the-package-confirmed-parents. I was intending to hightlight that `packages.md` is not explicit on that. I think it can be precised later. ",
      "created_at": "2021-12-16T23:53:54Z",
      "updated_at": "2021-12-16T23:53:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771000061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771000061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1237,
      "original_line": 1237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771001482",
      "pull_request_review_id": 834712590,
      "id": 771001482,
      "node_id": "PRRC_kwDOABII584t9IyK",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions",
      "path": "src/validation.cpp",
      "position": 252,
      "original_position": 252,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770156708,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> may try to take advantage of policy differences to pin transactions\r\n\r\n\"or transactions propagation delays\" (i.e bypass `_INVENTORY_BROADCAST_INTERVAL` timers)\"\r\n\r\nOtherwise, far better, good to me.",
      "created_at": "2021-12-16T23:57:54Z",
      "updated_at": "2021-12-17T00:03:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771001482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771001482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1248,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771024369",
      "pull_request_review_id": 834738835,
      "id": 771024369,
      "node_id": "PRRC_kwDOABII584t9OXx",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the",
      "path": "src/validation.cpp",
      "position": 271,
      "original_position": 271,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770162566,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> As specified in the proposal: \"We use the package feerate of the package after deduplication\" which is intended to avoid an issue like this, and others. More rationale is included in the proposal.\r\n\r\nYes, I've browsed against the gist and it doesn't precise in details how the deduplication is operated, at least on the witness replacement case (I think ?).\r\n\r\n> Given that the feerate of A' was sufficient to enter the mempool, this is made no worse or better with the introduction of package mempool accept, as we're treating A' vs A identically to how we treat individual transactions. We will deduplicate A from the package and assess B individually; its package feerate only includes the transactions that are not already in the mempool. Of course this means the ancestor score of B once everything is submitted is lower, but the danger has not been made worse by package mempool acceptance, as we would have the same result if B was received as an individual transaction.\r\n\r\nYes, I agree package mempool accept hasn't worsen that case compared to the individual transaction processing.\r\n\r\nNote, my comment was about the future when package relay is supported, if we forget to operate incentives compatibles witness replacement in the case of incoming A' smaller than already in-mempool A. If we p2p relay the with-dedup-transactions package, that would constitute an attack vector as A + B have a smaller feerate than A' + B.\r\n\r\nCurrently, this is the code behavior though I think we all agree to correct that in the future. I think it's nice to either update the gist or leave a more detailed comment in the code, and thus ease future review/implementation work.\r\n\r\n> Yes exactly. I still stipulate that package RBF and witness replacements can be worked on in parallel\r\n\r\nI don't fundamentally disagree on working them in parallel, beyond the scarcity of review bandwidth.\r\n\r\n> This makes package acceptance more strict than individual transaction acceptance, which is something we want to avoid.\r\n\r\nActually, I think package acceptance is stricter than individual transaction acceptance, at least at package limits evaluation (`CheckPackageLimits`). User-wise, I still think it's better to _fail loudly_ than _silently accept a mutant_, though if we can't agree here, maybe at least warn back the user about the wtxid swap ?",
      "created_at": "2021-12-17T00:58:04Z",
      "updated_at": "2021-12-17T00:58:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771024369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771024369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1267,
      "original_line": 1267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771033712",
      "pull_request_review_id": 834749017,
      "id": 771033712,
      "node_id": "PRRC_kwDOABII584t9Qpw",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> It is actually incentive-compatible to reject this package. B's fees should not supplement A's fees, because B does not depend on A; including B in the package feerate would be \"sibling-pays-for-sibling\" behavior. I've illustrated this in examples Q1 and Q2.\r\n\r\nYou're right, that wouldn't be incentive-compatible. It also points that a naive implementation of fee union would be flawed, and that packages fees should be computed in topological descending order. \r\n\r\n> No, we'll still enforce ancestor/descendant limits on the package in the same way. The package transactions that are already in the mempool will be included in ancestor counts. The nice thing about a child-with-parents package is that all package transactions are ancestors of the child transaction so we won't under/overestimate :).\r\n\r\nRight, at the individual transaction level. At the package-level, in `CheckPackageLimits`, which is processed after deduplication, a parent transaction is accounted both as the child ancestor _and_ as a package member in the check against `limitAncestorCount` (L271, in `src/txmempool.cpp`). If we prune the package size at deduplication, we might pass that check, which would be fail by a peer with a mempool, lacking the dedup elements ? ",
      "created_at": "2021-12-17T01:23:40Z",
      "updated_at": "2021-12-17T01:23:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771033712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771033712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771309913",
      "pull_request_review_id": 835111934,
      "id": 771309913,
      "node_id": "PRRC_kwDOABII584t-UFZ",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770782822,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I will open a PR to change this. Thanks very much for your reviews! :)",
      "created_at": "2021-12-17T11:04:17Z",
      "updated_at": "2021-12-17T11:04:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771309913",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771309913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771316848",
      "pull_request_review_id": 835121568,
      "id": 771316848,
      "node_id": "PRRC_kwDOABII584t-Vxw",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> At the package-level, in `CheckPackageLimits`, which is processed after deduplication, a parent transaction is accounted both as the child ancestor _and_ as a package member in the check against `limitAncestorCount` (L271, in `src/txmempool.cpp`). If we prune the package size at deduplication, we might pass that check, which would be fail by a peer with a mempool, lacking the dedup elements ?\r\n\r\nNope, this is a fair concern, but I made sure to make it impossible for a package transaction to be double-counted after de-duplication. See this assertion that transactions passed in to `CheckPackageLimits()` must not be in the mempool:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/8c0bd871fcf6c5ff5851ccb18a7bc7554a0484b0/src/validation.cpp#L931-L936",
      "created_at": "2021-12-17T11:15:48Z",
      "updated_at": "2021-12-17T11:15:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771316848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771316848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520085",
      "pull_request_review_id": 835412585,
      "id": 771520085,
      "node_id": "PRRC_kwDOABII584t_HZV",
      "diff_hunk": "@@ -191,7 +211,7 @@ struct PackageMempoolAcceptResult\n {\n     const PackageValidationState m_state;\n     /**\n-    * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n+    * Map from (w)txid to finished MempoolAcceptResults. The client is responsible",
      "path": "src/validation.h",
      "position": 65,
      "original_position": 65,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770782822,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed in #23804",
      "created_at": "2021-12-17T16:17:01Z",
      "updated_at": "2021-12-17T16:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771520085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520247",
      "pull_request_review_id": 835412585,
      "id": 771520247,
      "node_id": "PRRC_kwDOABII584t_Hb3",
      "diff_hunk": "@@ -1238,7 +1242,49 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n     m_view.SetBackend(m_dummy);\n \n     LOCK(m_pool.cs);\n-    return AcceptMultipleTransactions(package, args);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);",
      "path": "src/validation.cpp",
      "position": 41,
      "original_position": 41,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "e12fafda2dfbbdf63f125e5af797ecfaa6488f66",
      "in_reply_to_id": 770804029,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Addressed in #23804",
      "created_at": "2021-12-17T16:17:15Z",
      "updated_at": "2021-12-17T16:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771520247",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520247"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1270,
      "original_line": 1270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520428",
      "pull_request_review_id": 835412585,
      "id": 771520428,
      "node_id": "PRRC_kwDOABII584t_Hes",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions",
      "path": "src/validation.cpp",
      "position": 252,
      "original_position": 252,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770156708,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Applied your suggestion in #23804",
      "created_at": "2021-12-17T16:17:31Z",
      "updated_at": "2021-12-17T16:17:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r771520428",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771520428"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1248,
      "original_line": 1248,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772023698",
      "pull_request_review_id": 835923510,
      "id": 772023698,
      "node_id": "PRRC_kwDOABII584uBCWS",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(wtxid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else if (m_pool.exists(GenTxid::Txid(txid))) {\n+            // Transaction with the same non-witness data but different witness (same txid,\n+            // different wtxid) already exists in the mempool.\n+            //\n+            // We don't allow replacement transactions right now, so just swap the package\n+            // transaction for the mempool one. Note that we are ignoring the validity of the\n+            // package transaction passed in.\n+            // TODO: allow witness replacement in packages.\n+            auto iter = m_pool.GetIter(wtxid);\n+            assert(iter != std::nullopt);\n+            results.emplace(txid, MempoolAcceptResult::MempoolTx(iter.value()->GetTxSize(), iter.value()->GetFee()));\n+        } else {\n+            // Transaction does not already exist in the mempool.\n+            txns_new.push_back(tx);\n+        }\n+    }\n+\n+    // Nothing to do if the entire package has already been submitted.\n+    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Validate the (deduplicated) transactions as a package.\n+    auto submission_result = AcceptMultipleTransactions(txns_new, args);",
      "path": "src/validation.cpp",
      "position": 286,
      "original_position": 286,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 770174654,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes my concern is if we relay the de-dup transactions as part of the p2p package we announce to our peer. A package A is evaluated as valid by Alice because she is dedup'ing half-of-the-package due to already in-mempool transaction. The whole package is relayed to Bob, who has an empty mempool. The whole package is evaluated and fails against `CheckPackageLimits`. \r\n\r\nThat said, I'm making assumptions on the p2p package mechanism, which has not been yet formalized. I'm making a mental note and I would say let's think about it more when p2p is introduced. We can still correct `AcceptPackage` back then.",
      "created_at": "2021-12-20T00:28:31Z",
      "updated_at": "2021-12-20T00:28:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772023698",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772023698"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1282,
      "original_line": 1282,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772899269",
      "pull_request_review_id": 837111576,
      "id": 772899269,
      "node_id": "PRRC_kwDOABII584uEYHF",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];",
      "path": "src/validation.cpp",
      "position": 214,
      "original_position": 214,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps:\r\n\r\n```suggestion\r\n    assert(package.size() > 1);\r\n    const auto& child = package.back();\r\n```\r\n\r\nThe size of the package has been checked in `IsChildWithParents()`, but good to check here as a reminder to the developer and in case `IsChildWithParents()` is ever changed. Alternatively:\r\n\r\n```suggestion\r\n    // package size must be > 1 from check in `IsChildWithParents()`\r\n    const auto& child = package.back();\r\n```\r\n",
      "created_at": "2021-12-21T07:50:18Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772899269",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772899269"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1210,
      "original_line": 1210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772899862",
      "pull_request_review_id": 837111576,
      "id": 772899862,
      "node_id": "PRRC_kwDOABII584uEYQW",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 218,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    std::transform(package.cbegin(), package.cend() - 1,\r\n```",
      "created_at": "2021-12-21T07:51:28Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772899862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772899862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1214,
      "original_line": 1214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772911401",
      "pull_request_review_id": 837111576,
      "id": 772911401,
      "node_id": "PRRC_kwDOABII584uEbEp",
      "diff_hunk": "@@ -1131,8 +1208,16 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);",
      "path": "src/validation.cpp",
      "position": 316,
      "original_position": 111,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "7f8ba8db736377c8e0c48d67f7da757b9111dd84",
      "in_reply_to_id": 735185991,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Totally agree that these interfaces should be split up. We can :bike: :hut: the naming in a future PR.",
      "created_at": "2021-12-21T08:10:18Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772911401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772911401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1339,
      "original_line": 1339,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772923827",
      "pull_request_review_id": 837111576,
      "id": 772923827,
      "node_id": "PRRC_kwDOABII584uEeGz",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 149,
      "original_position": 149,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't like this call into `Finalize()` from `FinalizePackage()`. You've essentially added a boolean parameter to `Finalize()` (by adding `m_package_submission` to `ATMPArgs`), that controls which parts of `Finalize()` are run. That's usually a bit of a red flag.\r\n\r\nCurrently, the only part of `Finalize()` that you need is the call to `addUnchecked()` (transaction replacement is currently disabled for packages, and `validForFeeEstimation` and `LimitMempoolSize()` are gated on `m_package_submission`). I think you should just bring the call to `addUnchecked()` directly into `FinalizePackage()`.",
      "created_at": "2021-12-21T08:28:12Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772923827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772923827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": 1064,
      "original_start_line": 1064,
      "start_side": "RIGHT",
      "line": 1067,
      "original_line": 1067,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772926683",
      "pull_request_review_id": 837111576,
      "id": 772926683,
      "node_id": "PRRC_kwDOABII584uEezb",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 128,
      "original_position": 128,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is there a good reason that `ConsensusScriptChecks()` is inside `FinalizePackage()` when validating a package, but called before `Finalize()` when validating a single transaction? I think it'd be clearer if there was symmetry between the two (i.e. `ConsensusScriptChecks()` is called directly from `AcceptMultipleTransactions()`).\r\n\r\nThere's also the inconsistency that testmempoolaccept for a single transaction _will_ call `ConsensusScriptChecks()`, but won't call `ConsensusScriptChecks()` for packages.",
      "created_at": "2021-12-21T08:32:21Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772926683",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772926683"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1046,
      "original_line": 1046,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772927225",
      "pull_request_review_id": 837111576,
      "id": 772927225,
      "node_id": "PRRC_kwDOABII584uEe75",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;",
      "path": "src/validation.cpp",
      "position": 136,
      "original_position": 136,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe:\r\n\r\n```suggestion\r\n        std::string unused_err_string;\r\n```",
      "created_at": "2021-12-21T08:33:07Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772927225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772927225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1054,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772928752",
      "pull_request_review_id": 837111576,
      "id": 772928752,
      "node_id": "PRRC_kwDOABII584uEfTw",
      "diff_hunk": "@@ -975,20 +1007,96 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    // The mempool will not be trimmed between individual transaction submissions. Don't allow\n+    // memory usage of the mempool to exceed the max by more than MAX_DISCONNECTED_TX_POOL_SIZE.\n+    // This is different from the total virtual size of the transactions.\n+    const unsigned int total_memory_usage = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](unsigned int sum, const auto& ws) { return sum + ws.m_entry->DynamicMemoryUsage(); });\n+    if (total_memory_usage > MAX_DISCONNECTED_TX_POOL_SIZE * 1000) {\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package memory usage too high\");\n+    }\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        // Since PolicyScriptChecks() passed, this should never fail.\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+\n+        // Mempool ancestors may have changed since the last calculation done in PreChecks, since\n+        // package ancestors have already been submitted. Since PreChecks() and\n+        // PackageMempoolChecks() both enforce ancestor/descendant limits, this should never fail.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end. Since\n+        // LimitMempoolSize() won't be called, this should never fail.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            all_submitted = package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    if (!all_submitted) return false;\n+\n+    // Find the wtxids of the transactions that made it into the mempool. Allow partial submission,\n+    // but don't report success unless they all made it into the mempool.\n+    for (Workspace& ws : workspaces) {\n+        if (m_pool.exists(GenTxid::Wtxid(ws.m_ptx->GetWitnessHash()))) {",
      "path": "src/validation.cpp",
      "position": 166,
      "original_position": 162,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "af762281be1a26dc89fa8edcae14eb187c31a185",
      "in_reply_to_id": 749838563,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Transactions could have been removed in the `LimitMempoolSize()` call. Perhaps \"either all of the transactions are added or none\" is from an earlier branch? The function comment now says \"The package may end up partially-submitted after size limitting\".",
      "created_at": "2021-12-21T08:35:22Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772928752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772928752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1084,
      "original_line": 1084,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772934994",
      "pull_request_review_id": 837111576,
      "id": 772934994,
      "node_id": "PRRC_kwDOABII584uEg1S",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);",
      "path": "src/validation.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this also needs to be `m_pool.GetIter(txid)` as below (https://github.com/bitcoin/bitcoin/pull/22674/files#r770804029). `CTxMemPool::GetIter()` takes a txid, so this lookup will fail if wtxid != txid.",
      "created_at": "2021-12-21T08:44:33Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772934994",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772934994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1259,
      "original_line": 1259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772943392",
      "pull_request_review_id": 837111576,
      "id": 772943392,
      "node_id": "PRRC_kwDOABII584uEi4g",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 149,
      "original_position": 149,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks to me like calling `addUnchecked()` (via `Finalize()`) for a transaction that's already in the mempool will cause problems (in `addUnchecked()`, `mapTx.insert()` will return the existing mempool transaction, and then various state will be incorrectly updated).\r\n\r\nI think the later commit e12fafda2dfbbdf63f125e5af797ecfaa6488f66 _[validation] de-duplicate package transactions already in mempool_ prevents this by deduplicating transactions in the package. However, that's not at all obvious since the checking code is quite removed from this call. I'd suggest:\r\n\r\n- Assume() that the transaction is not in the mempool here (and don't call `addUnchecked()` if it is)\r\n- inside `addUnchecked()`, assert that the transaction is not in the mempool.",
      "created_at": "2021-12-21T08:56:02Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r772943392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772943392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1067,
      "original_line": 1067,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773004810",
      "pull_request_review_id": 837111576,
      "id": 773004810,
      "node_id": "PRRC_kwDOABII584uEx4K",
      "diff_hunk": "@@ -564,6 +589,14 @@ class MemPoolAccept\n     // limiting is performed, false otherwise.\n     bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Submit all transactions to the mempool and call ConsensusScriptChecks to add to the script\n+    // cache - should only be called after successful validation of all transactions in the package.\n+    // The package may end up partially-submitted after size limitting; returns true if all",
      "path": "src/validation.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // The package may end up partially-submitted after size limiting; returns true if all\r\n```",
      "created_at": "2021-12-21T10:14:16Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773004810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773004810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 594,
      "original_line": 594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773013162",
      "pull_request_review_id": 837111576,
      "id": 773013162,
      "node_id": "PRRC_kwDOABII584uEz6q",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since LimitMempoolSize() won't be called, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    if (!all_submitted) return false;",
      "path": "src/validation.cpp",
      "position": 161,
      "original_position": 161,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure about this `all_submitted` variable. It seems like it's being used to try to gracefully handle logic errors (eg the package size calculations were incorrect, or `Finalize()` unexpectedly returns false). However, I don't think it really is graceful. If one of those conditions fails, then you'll have called `addUnchecked()` for the transactions, but you'll never make it to `GetMainSignals().TransactionAddedToMempool()` below (i.e. transactions will be added to the mempool without the relevant signal being fired).\r\n\r\nI think it may be best to remove this line and rely on the logic below to correctly set the mempool accept results and fire the right signal.",
      "created_at": "2021-12-21T10:24:52Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773013162",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773013162"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1079,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773015922",
      "pull_request_review_id": 837111576,
      "id": 773015922,
      "node_id": "PRRC_kwDOABII584uE0ly",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");",
      "path": "src/validation.cpp",
      "position": 189,
      "original_position": 189,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"submission failed\" doesn't add any new information. I think `FinalizePackage()` can only fail due to:\r\n\r\n- logic error\r\n- mempool full (package partially accepted or not accepted)\r\n\r\nCan we distinguish those and return the information in the `PackageValidationState` object?",
      "created_at": "2021-12-21T10:28:24Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773015922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773015922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1185,
      "original_line": 1185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773017836",
      "pull_request_review_id": 837111576,
      "id": 773017836,
      "node_id": "PRRC_kwDOABII584uE1Ds",
      "diff_hunk": "@@ -1114,19 +1324,31 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n                                                    const Package& package, bool test_accept)\n {\n     AssertLockHeld(cs_main);\n-    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n     assert(!package.empty());\n     assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);\n+        }\n+    }();\n \n     // Uncache coins pertaining to transactions that were not submitted to the mempool.\n-    for (const COutPoint& hashTx : coins_to_uncache) {\n-        active_chainstate.CoinsTip().Uncache(hashTx);\n+    // Ensure the coins cache is still within limits.",
      "path": "src/validation.cpp",
      "position": 323,
      "original_position": 323,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this comment be above the `BlockValidationState state_dummy;` line?",
      "created_at": "2021-12-21T10:31:01Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773017836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773017836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1344,
      "original_line": 1344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773025187",
      "pull_request_review_id": 837111576,
      "id": 773025187,
      "node_id": "PRRC_kwDOABII584uE22j",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible",
      "path": "src/validation.cpp",
      "position": 250,
      "original_position": 250,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is necessarily due to node operators setting different policies. It may just be that a different peer sent us one of the parent transactions individually.",
      "created_at": "2021-12-21T10:41:34Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773025187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773025187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1246,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773027195",
      "pull_request_review_id": 837111576,
      "id": 773027195,
      "node_id": "PRRC_kwDOABII584uE3V7",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);",
      "path": "src/validation.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772934994,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In fact, I think for now you can just search for the txid using `m_pool.GetIter(txid)` and collapse the two cases (already in mempool, same-txid-different-wtxid in mempool) into one.",
      "created_at": "2021-12-21T10:44:24Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773027195",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773027195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1259,
      "original_line": 1259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773033521",
      "pull_request_review_id": 837111576,
      "id": 773033521,
      "node_id": "PRRC_kwDOABII584uE44x",
      "diff_hunk": "@@ -974,6 +974,8 @@ static RPCHelpMan testmempoolaccept()\n             continue;\n         }\n         const auto& tx_result = it->second;\n+        // Package testmempoolaccept doesn't allow transactions to already be in the mempool.\n+        CHECK_NONFATAL(tx_result.m_result_type != MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How is this enforced? More specifically, what happens if `testmempoolaccept` is called with multiple transactions where one or more is already in the mempool? It looks to me like the assert in `PackageMempoolChecks()` could be triggered.",
      "created_at": "2021-12-21T10:53:40Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773033521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773033521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": 977,
      "original_start_line": 977,
      "start_side": "RIGHT",
      "line": 978,
      "original_line": 978,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773037608",
      "pull_request_review_id": 837111576,
      "id": 773037608,
      "node_id": "PRRC_kwDOABII584uE54o",
      "diff_hunk": "@@ -114,4 +114,217 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(39 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+        // IsChildWithParents does not detect unsorted parents.\n+        BOOST_CHECK(IsChildWithParents({tx_parent_also_child, tx_parent, tx_child}));\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_parent_also_child, tx_parent, tx_child}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated transactions are not allowed in package submission.\n+    Package package_unrelated;\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto mtx = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[i + 25], /* vout */ 0,\n+                                                 /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                 /* output_destination */ parent_locking_script,\n+                                                 /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+        package_unrelated.emplace_back(MakeTransactionRef(mtx));\n+    }\n+    auto result_unrelated_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                     package_unrelated, /* test_accept */ false);\n+    BOOST_CHECK(result_unrelated_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    // Parent and Child (and Grandchild) Package\n+    Package package_parent_child;\n+    Package package_3gen;\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ parent_locking_script,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_parent_child.push_back(tx_parent);\n+    package_3gen.push_back(tx_parent);\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n+    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n+                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n+                                                   /* output_destination */ child_locking_script,\n+                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_parent_child.push_back(tx_child);\n+    package_3gen.push_back(tx_child);\n+\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript grandchild_locking_script = GetScriptForDestination(PKHash(grandchild_key.GetPubKey()));\n+    auto mtx_grandchild = CreateValidMempoolTransaction(/* input_transaction */ tx_child, /* vout */ 0,\n+                                                       /* input_height */ 101, /* input_signing_key */ child_key,\n+                                                       /* output_destination */ grandchild_locking_script,\n+                                                       /* output_amount */ CAmount(47 * COIN), /* submit */ false);\n+    CTransactionRef tx_grandchild = MakeTransactionRef(mtx_grandchild);\n+    package_3gen.push_back(tx_grandchild);\n+\n+    // 3 Generations is not allowed.\n+    {\n+        auto result_3gen_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                    package_3gen, /* test_accept */ false);\n+        BOOST_CHECK(result_3gen_submit.m_state.IsInvalid());\n+        BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+    }\n+\n+    // Child with missing parent.\n+    mtx_child.vin.push_back(CTxIn(COutPoint(package_unrelated[0]->GetHash(), 0)));\n+    Package package_missing_parent;\n+    package_missing_parent.push_back(tx_parent);\n+    package_missing_parent.push_back(MakeTransactionRef(mtx_child));\n+    {\n+        const auto result_missing_parent = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                             package_missing_parent, /* test_accept */ false);\n+        BOOST_CHECK(result_missing_parent.m_state.IsInvalid());\n+        BOOST_CHECK_EQUAL(result_missing_parent.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(result_missing_parent.m_state.GetRejectReason(), \"package-not-child-with-unconfirmed-parents\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    }\n+\n+    // Submit package with parent + child.\n+    {\n+        const auto submit_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                           package_parent_child, /* test_accept */ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_parent_child.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_parent_child.m_state.GetRejectReason());\n+        auto it_parent = submit_parent_child.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_parent_child.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_parent_child.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_state.IsValid());\n+        BOOST_CHECK(it_child != submit_parent_child.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_state.IsValid());\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+    }\n+\n+    // Already-in-mempool transactions should be detected and de-duplicated.",
      "path": "src/test/txpackage_tests.cpp",
      "position": 197,
      "original_position": 197,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": null,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This tests the result when both transactions in the package are already in the mempool. It would be nice to test what happens when a package is a mix of transactions already in the mempool and new transactions.",
      "created_at": "2021-12-21T10:59:33Z",
      "updated_at": "2021-12-21T10:59:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r773037608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773037608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780212108",
      "pull_request_review_id": 846534594,
      "id": 780212108,
      "node_id": "PRRC_kwDOABII584ugReM",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 128,
      "original_position": 128,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772926683,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We need to call `ConsensusScriptChecks()` + submit for each transaction in sequence (and cannot call all the `ConsensusScriptChecks()`s together, then submit them all together), because of the sanity checks inside `ConsensusScriptChecks()` that all coins are available. So unless we put all of the logic from `FinalizePackage()` into `AcceptMultipleTransactions()`, I don't think it's possible to make these patterns the same.\r\n\r\nHowever, I'm happy to rename it to `SubmitPackage()` or something so it doesn't seem like there's _supposed_ to be a pattern.  AFAIK `ConsensusScriptChecks()` is really part of submission logic.",
      "created_at": "2022-01-07T11:39:52Z",
      "updated_at": "2022-01-07T11:39:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780212108",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780212108"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1046,
      "original_line": 1046,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780339417",
      "pull_request_review_id": 846721525,
      "id": 780339417,
      "node_id": "PRRC_kwDOABII584ugwjZ",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible",
      "path": "src/validation.cpp",
      "position": 250,
      "original_position": 250,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773025187,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, that's stated right after the comma.",
      "created_at": "2022-01-07T15:31:19Z",
      "updated_at": "2022-01-07T15:31:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780339417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780339417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1246,
      "original_line": 1246,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780340064",
      "pull_request_review_id": 846722428,
      "id": 780340064,
      "node_id": "PRRC_kwDOABII584ugwtg",
      "diff_hunk": "@@ -974,6 +974,8 @@ static RPCHelpMan testmempoolaccept()\n             continue;\n         }\n         const auto& tx_result = it->second;\n+        // Package testmempoolaccept doesn't allow transactions to already be in the mempool.\n+        CHECK_NONFATAL(tx_result.m_result_type != MempoolAcceptResult::ResultType::MEMPOOL_ENTRY);",
      "path": "src/rpc/rawtransaction.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773033521,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "testmempoolaccept doesn't allow already-in-mempool transactions, so it will be rejected",
      "created_at": "2022-01-07T15:32:15Z",
      "updated_at": "2022-01-07T15:32:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780340064",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780340064"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": 977,
      "original_start_line": 977,
      "start_side": "RIGHT",
      "line": 978,
      "original_line": 978,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780366983",
      "pull_request_review_id": 846760879,
      "id": 780366983,
      "node_id": "PRRC_kwDOABII584ug3SH",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 149,
      "original_position": 149,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772923827,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for your feedback! I actually don't think it'd be cleaner to move `addUnchecked()` to that function even though it's the only package-related thing that's done in `Finalize()` right now. It repeats code, and will be worse in the future: we'll also need to remove replacements later with package RBF (and flag valid for fee estimation with package relay). The boolean has 2 uses now, and I intend to use it later for fee-related logic too.\r\n\r\nThat being said, I can see how the calling relationships are different from expectations, so I'll renamed `FinalizePackage` to `SubmitPackage` in the followup. Hopefully that makes it more clear that it's not supposed to be analogous to `Finalize()`.",
      "created_at": "2022-01-07T16:12:08Z",
      "updated_at": "2022-01-07T16:12:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780366983",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780366983"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": 1064,
      "original_start_line": 1064,
      "start_side": "RIGHT",
      "line": 1067,
      "original_line": 1067,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780371738",
      "pull_request_review_id": 846767934,
      "id": 780371738,
      "node_id": "PRRC_kwDOABII584ug4ca",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,\n+                   std::inserter(unconfirmed_parent_txids, unconfirmed_parent_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+\n+    // All child inputs must refer to a preceding package transaction or a confirmed UTXO. The only\n+    // way to verify this is to look up the child's inputs in our current coins view (not including\n+    // mempool), and enforce that all parents not present in the package be available at chain tip.\n+    // Since this check can bring new coins into the coins cache, keep track of these coins and\n+    // uncache them if we don't end up submitting this package to the mempool.\n+    const CCoinsViewCache& coins_tip_cache = m_active_chainstate.CoinsTip();\n+    for (const auto& input : child->vin) {\n+        if (!coins_tip_cache.HaveCoinInCache(input.prevout)) {\n+            args.m_coins_to_uncache.push_back(input.prevout);\n+        }\n+    }\n+    // Using the MemPoolAccept m_view cache allows us to look up these same coins faster later.\n+    // This should be connecting directly to CoinsTip, not to m_viewmempool, because we specifically\n+    // require inputs to be confirmed if they aren't in the package.\n+    m_view.SetBackend(m_active_chainstate.CoinsTip());\n+    const auto package_or_confirmed = [this, &unconfirmed_parent_txids](const auto& input) {\n+         return unconfirmed_parent_txids.count(input.prevout.hash) > 0 || m_view.HaveCoin(input.prevout);\n+    };\n+    if (!std::all_of(child->vin.cbegin(), child->vin.cend(), package_or_confirmed)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-unconfirmed-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+    // Protect against bugs where we pull more inputs from disk that miss being added to\n+    // coins_to_uncache. The backend will be connected again when needed in PreChecks.\n+    m_view.SetBackend(m_dummy);\n+\n+    LOCK(m_pool.cs);\n+    std::map<const uint256, const MempoolAcceptResult> results;\n+    // As node operators are free to set their mempool policies however they please, it's possible\n+    // for package transaction(s) to already be in the mempool, and we don't want to reject the\n+    // entire package in that case (as that could be a censorship vector).  Filter the transactions\n+    // that are already in mempool and add their information to results, since we already have them.\n+    std::vector<CTransactionRef> txns_new;\n+    for (const auto& tx : package) {\n+        const auto& wtxid = tx->GetWitnessHash();\n+        const auto& txid = tx->GetHash();\n+        // There are 3 possibilities: already in mempool, same-txid-diff-wtxid already in mempool,\n+        // or not in mempool. An already confirmed tx is treated as one not in mempool, because all\n+        // we know is that the inputs aren't available.\n+        if (m_pool.exists(GenTxid::Wtxid(wtxid))) {\n+            // Exact transaction already exists in the mempool.\n+            auto iter = m_pool.GetIter(wtxid);",
      "path": "src/validation.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772934994,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> CTxMemPool::GetIter() takes a txid, so this lookup will fail if wtxid != txid.\r\n\r\nDoes it? I think since mapTx indexes by txid and wtxid, it might allow both? The test passes when txid != wtxid. Either way, thanks for the good catch, should probably make that interface clearer...\r\n\r\n> In fact, I think for now you can just search for the txid using m_pool.GetIter(txid) and collapse the two cases (already in mempool, same-txid-different-wtxid in mempool) into one.\r\n\r\nEven though the two cases are treated the same, they probably won't be in the future, which is why I separated the branches in this PR. Now, given that they're already separate, I don't think it makes much sense to collapse them and then separate them again when we need to.",
      "created_at": "2022-01-07T16:19:55Z",
      "updated_at": "2022-01-07T16:19:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780371738",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780371738"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1259,
      "original_line": 1259,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780386941",
      "pull_request_review_id": 846789411,
      "id": 780386941,
      "node_id": "PRRC_kwDOABII584ug8J9",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 149,
      "original_position": 149,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772943392,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's actually prevented from the get-go, since `AcceptMultipleTransactions()` rejects the whole list of transactions if there are any that already exist in the mempool. The de-duplication logic allows us to only pass the not-already-in-mempool transactions.\r\n\r\nI agree it's helpful and more future-proof to add some sanity checks, since calling `addUnchecked()` on a transaction that's already in the mempool would be awful.",
      "created_at": "2022-01-07T16:42:52Z",
      "updated_at": "2022-01-07T16:42:52Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780386941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780386941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1067,
      "original_line": 1067,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780397851",
      "pull_request_review_id": 846804627,
      "id": 780397851,
      "node_id": "PRRC_kwDOABII584ug-0b",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since LimitMempoolSize() won't be called, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    if (!all_submitted) return false;",
      "path": "src/validation.cpp",
      "position": 161,
      "original_position": 161,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773013162,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yikes! You're right, we shouldn't quit early here, because then the notifications don't fire in the (rare) case we have a partial submission.",
      "created_at": "2022-01-07T16:59:26Z",
      "updated_at": "2022-01-07T16:59:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780397851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780397851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1079,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426567",
      "pull_request_review_id": 846846537,
      "id": 780426567,
      "node_id": "PRRC_kwDOABII584uhF1H",
      "diff_hunk": "@@ -1114,19 +1324,31 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n                                                    const Package& package, bool test_accept)\n {\n     AssertLockHeld(cs_main);\n-    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n     assert(!package.empty());\n     assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n \n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n-    auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n-    const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+    const auto result = [&]() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+        AssertLockHeld(cs_main);\n+        if (test_accept) {\n+            auto args = MemPoolAccept::ATMPArgs::PackageTestAccept(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n+        } else {\n+            auto args = MemPoolAccept::ATMPArgs::PackageChildWithParents(chainparams, GetTime(), coins_to_uncache);\n+            return MemPoolAccept(pool, active_chainstate).AcceptPackage(package, args);\n+        }\n+    }();\n \n     // Uncache coins pertaining to transactions that were not submitted to the mempool.\n-    for (const COutPoint& hashTx : coins_to_uncache) {\n-        active_chainstate.CoinsTip().Uncache(hashTx);\n+    // Ensure the coins cache is still within limits.",
      "path": "src/validation.cpp",
      "position": 323,
      "original_position": 323,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773017836,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:47:34Z",
      "updated_at": "2022-01-07T17:47:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780426567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1344,
      "original_line": 1344,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426804",
      "pull_request_review_id": 846846819,
      "id": 780426804,
      "node_id": "PRRC_kwDOABII584uhF40",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");",
      "path": "src/validation.cpp",
      "position": 189,
      "original_position": 189,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773015922,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:47:54Z",
      "updated_at": "2022-01-07T17:47:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780426804",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1185,
      "original_line": 1185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426858",
      "pull_request_review_id": 846846882,
      "id": 780426858,
      "node_id": "PRRC_kwDOABII584uhF5q",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since LimitMempoolSize() won't be called, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+    }\n+\n+    // It may or may not be the case that all the transactions made it into the mempool. Regardless,\n+    // make sure we haven't exceeded max mempool size.\n+    LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(),\n+                     gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000,\n+                     std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    if (!all_submitted) return false;",
      "path": "src/validation.cpp",
      "position": 161,
      "original_position": 161,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773013162,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:47:59Z",
      "updated_at": "2022-01-07T17:47:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780426858",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426858"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1079,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426889",
      "pull_request_review_id": 846846938,
      "id": 780426889,
      "node_id": "PRRC_kwDOABII584uhF6J",
      "diff_hunk": "@@ -564,6 +589,14 @@ class MemPoolAccept\n     // limiting is performed, false otherwise.\n     bool Finalize(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n+    // Submit all transactions to the mempool and call ConsensusScriptChecks to add to the script\n+    // cache - should only be called after successful validation of all transactions in the package.\n+    // The package may end up partially-submitted after size limitting; returns true if all",
      "path": "src/validation.cpp",
      "position": 71,
      "original_position": 71,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773004810,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:48:03Z",
      "updated_at": "2022-01-07T17:48:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780426889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780426889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 594,
      "original_line": 594,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427024",
      "pull_request_review_id": 846847161,
      "id": 780427024,
      "node_id": "PRRC_kwDOABII584uhF8Q",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;\n+        if(!m_pool.CalculateMemPoolAncestors(*ws.m_entry, ws.m_ancestors, m_limit_ancestors,\n+                                             m_limit_ancestor_size, m_limit_descendants,\n+                                             m_limit_descendant_size, err_string)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PreChecks() and PackageMempoolChecks() both enforce limits, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+        // If we call LimitMempoolSize() for each individual Finalize(), the mempool will not take\n+        // the transaction's descendant feerate into account because it hasn't seen them yet. Also,\n+        // we risk evicting a transaction that a subsequent package transaction depends on. Instead,\n+        // allow the mempool to temporarily bypass limits, the maximum package size) while\n+        // submitting transactions individually and then trim at the very end.\n+        if (!Finalize(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 149,
      "original_position": 149,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772943392,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added assertions in #23804",
      "created_at": "2022-01-07T17:48:20Z",
      "updated_at": "2022-01-07T17:48:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780427024",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427024"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1067,
      "original_line": 1067,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427081",
      "pull_request_review_id": 846847246,
      "id": 780427081,
      "node_id": "PRRC_kwDOABII584uhF9J",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {\n+            results.emplace(ws.m_ptx->GetWitnessHash(), MempoolAcceptResult::Failure(ws.m_state));\n+            // Since PolicyScriptChecks() passed, this should never fail.\n+            all_submitted = Assume(false);\n+        }\n+\n+        // Re-calculate mempool ancestors to call addUnchecked(). They may have changed since the\n+        // last calculation done in PreChecks, since package ancestors have already been submitted.\n+        std::string err_string;",
      "path": "src/validation.cpp",
      "position": 136,
      "original_position": 136,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772927225,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:48:25Z",
      "updated_at": "2022-01-07T17:48:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780427081",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427081"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1054,
      "original_line": 1054,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427160",
      "pull_request_review_id": 846847364,
      "id": 780427160,
      "node_id": "PRRC_kwDOABII584uhF-Y",
      "diff_hunk": "@@ -975,20 +1012,88 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n+    // - it's not part of a package. Since package relay is not currently supported, this\n+    // transaction has not necessarily been accepted to miners' mempools.\n+    bool validForFeeEstimation = !bypass_limits && !args.m_package_submission && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, ws.m_ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n-    if (!bypass_limits) {\n+    // If we are validating a package, don't trim here because we could evict a previous transaction\n+    // in the package. LimitMempoolSize() should be called at the very end to make sure the mempool\n+    // is still within limits and package submission happens atomically.\n+    if (!args.m_package_submission && !bypass_limits) {\n         LimitMempoolSize(m_pool, m_active_chainstate.CoinsTip(), gArgs.GetIntArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetIntArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(GenTxid::Txid(hash)))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n     return true;\n }\n \n+bool MemPoolAccept::FinalizePackage(const ATMPArgs& args, std::vector<Workspace>& workspaces,\n+                                    PackageValidationState& package_state,\n+                                    std::map<const uint256, const MempoolAcceptResult>& results)\n+{\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(m_pool.cs);\n+    bool all_submitted = true;\n+    // ConsensusScriptChecks adds to the script cache and is therefore consensus-critical;\n+    // CheckInputsFromMempoolAndCache asserts that transactions only spend coins available from the\n+    // mempool or UTXO set. Submit each transaction to the mempool immediately after calling\n+    // ConsensusScriptChecks to make the outputs available for subsequent transactions.\n+    for (Workspace& ws : workspaces) {\n+        if (!ConsensusScriptChecks(args, ws)) {",
      "path": "src/validation.cpp",
      "position": 128,
      "original_position": 128,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772926683,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Renamed in #23804",
      "created_at": "2022-01-07T17:48:34Z",
      "updated_at": "2022-01-07T17:48:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780427160",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427160"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1046,
      "original_line": 1046,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427248",
      "pull_request_review_id": 846847503,
      "id": 780427248,
      "node_id": "PRRC_kwDOABII584uhF_w",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];\n+    // The package must be 1 child with all of its unconfirmed parents. The package is expected to\n+    // be sorted, so the last transaction is the child.\n+    std::unordered_set<uint256, SaltedTxidHasher> unconfirmed_parent_txids;\n+    std::transform(package.cbegin(), package.end() - 1,",
      "path": "src/validation.cpp",
      "position": 218,
      "original_position": 218,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772899862,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:48:44Z",
      "updated_at": "2022-01-07T17:48:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780427248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1214,
      "original_line": 1214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427282",
      "pull_request_review_id": 846847554,
      "id": 780427282,
      "node_id": "PRRC_kwDOABII584uhGAS",
      "diff_hunk": "@@ -1074,9 +1179,114 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         }\n     }\n \n+    if (args.m_test_accept) return PackageMempoolAcceptResult(package_state, std::move(results));\n+\n+    if (!FinalizePackage(args, workspaces, package_state, results)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_TX, \"submission failed\");\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     return PackageMempoolAcceptResult(package_state, std::move(results));\n }\n \n+PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    PackageValidationState package_state;\n+\n+    // Check that the package is well-formed. If it isn't, we won't try to validate any of the\n+    // transactions and thus won't return any MempoolAcceptResults, just a package-wide error.\n+\n+    // Context-free package checks.\n+    if (!CheckPackage(package, package_state)) return PackageMempoolAcceptResult(package_state, {});\n+\n+    // All transactions in the package must be a parent of the last transaction. This is just an\n+    // opportunity for us to fail fast on a context-free check without taking the mempool lock.\n+    if (!IsChildWithParents(package)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-child-with-parents\");\n+        return PackageMempoolAcceptResult(package_state, {});\n+    }\n+\n+    const auto& child = package[package.size() - 1];",
      "path": "src/validation.cpp",
      "position": 214,
      "original_position": 214,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 772899269,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in #23804",
      "created_at": "2022-01-07T17:48:47Z",
      "updated_at": "2022-01-07T17:48:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r780427282",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/780427282"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1210,
      "original_line": 1210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/785967862",
      "pull_request_review_id": 854347990,
      "id": 785967862,
      "node_id": "PRRC_kwDOABII584u2Or2",
      "diff_hunk": "@@ -114,4 +114,217 @@ BOOST_FIXTURE_TEST_CASE(package_validation_tests, TestChain100Setup)\n     // Check that mempool size hasn't changed.\n     BOOST_CHECK_EQUAL(m_node.mempool->size(), initialPoolSize);\n }\n+\n+BOOST_FIXTURE_TEST_CASE(noncontextual_package_tests, TestChain100Setup)\n+{\n+    // The signatures won't be verified so we can just use a placeholder\n+    CKey placeholder_key;\n+    placeholder_key.MakeNewKey(true);\n+    CScript spk = GetScriptForDestination(PKHash(placeholder_key.GetPubKey()));\n+    CKey placeholder_key_2;\n+    placeholder_key_2.MakeNewKey(true);\n+    CScript spk2 = GetScriptForDestination(PKHash(placeholder_key_2.GetPubKey()));\n+\n+    // Parent and Child Package\n+    {\n+        auto mtx_parent = CreateValidMempoolTransaction(m_coinbase_txns[0], 0, 0, coinbaseKey, spk,\n+                                                        CAmount(49 * COIN), /* submit */ false);\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        auto mtx_child = CreateValidMempoolTransaction(tx_parent, 0, 101, placeholder_key, spk2,\n+                                                       CAmount(48 * COIN), /* submit */ false);\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_child, tx_parent}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+    }\n+\n+    // 24 Parents and 1 Child\n+    {\n+        Package package;\n+        CMutableTransaction child;\n+        for (int i{0}; i < 24; ++i) {\n+            auto parent = MakeTransactionRef(CreateValidMempoolTransaction(m_coinbase_txns[i + 1],\n+                                             0, 0, coinbaseKey, spk, CAmount(48 * COIN), false));\n+            package.emplace_back(parent);\n+            child.vin.push_back(CTxIn(COutPoint(parent->GetHash(), 0)));\n+        }\n+        child.vout.push_back(CTxOut(47 * COIN, spk2));\n+\n+        // The child must be in the package.\n+        BOOST_CHECK(!IsChildWithParents(package));\n+\n+        // The parents can be in any order.\n+        FastRandomContext rng;\n+        Shuffle(package.begin(), package.end(), rng);\n+        package.push_back(MakeTransactionRef(child));\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(CheckPackage(package, state));\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        package.erase(package.begin());\n+        BOOST_CHECK(IsChildWithParents(package));\n+\n+        // The package cannot have unrelated transactions.\n+        package.insert(package.begin(), m_coinbase_txns[0]);\n+        BOOST_CHECK(!IsChildWithParents(package));\n+    }\n+\n+    // 2 Parents and 1 Child where one parent depends on the other.\n+    {\n+        CMutableTransaction mtx_parent;\n+        mtx_parent.vin.push_back(CTxIn(COutPoint(m_coinbase_txns[0]->GetHash(), 0)));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk));\n+        mtx_parent.vout.push_back(CTxOut(20 * COIN, spk2));\n+        CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+\n+        CMutableTransaction mtx_parent_also_child;\n+        mtx_parent_also_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 0)));\n+        mtx_parent_also_child.vout.push_back(CTxOut(20 * COIN, spk));\n+        CTransactionRef tx_parent_also_child = MakeTransactionRef(mtx_parent_also_child);\n+\n+        CMutableTransaction mtx_child;\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent->GetHash(), 1)));\n+        mtx_child.vin.push_back(CTxIn(COutPoint(tx_parent_also_child->GetHash(), 0)));\n+        mtx_child.vout.push_back(CTxOut(39 * COIN, spk));\n+        CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+\n+        PackageValidationState state;\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_child}));\n+        BOOST_CHECK(IsChildWithParents({tx_parent, tx_parent_also_child, tx_child}));\n+        // IsChildWithParents does not detect unsorted parents.\n+        BOOST_CHECK(IsChildWithParents({tx_parent_also_child, tx_parent, tx_child}));\n+        BOOST_CHECK(CheckPackage({tx_parent, tx_parent_also_child, tx_child}, state));\n+        BOOST_CHECK(!CheckPackage({tx_parent_also_child, tx_parent, tx_child}, state));\n+        BOOST_CHECK_EQUAL(state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(state.GetRejectReason(), \"package-not-sorted\");\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_submission_tests, TestChain100Setup)\n+{\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey parent_key;\n+    parent_key.MakeNewKey(true);\n+    CScript parent_locking_script = GetScriptForDestination(PKHash(parent_key.GetPubKey()));\n+\n+    // Unrelated transactions are not allowed in package submission.\n+    Package package_unrelated;\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto mtx = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[i + 25], /* vout */ 0,\n+                                                 /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                 /* output_destination */ parent_locking_script,\n+                                                 /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+        package_unrelated.emplace_back(MakeTransactionRef(mtx));\n+    }\n+    auto result_unrelated_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                     package_unrelated, /* test_accept */ false);\n+    BOOST_CHECK(result_unrelated_submit.m_state.IsInvalid());\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+    BOOST_CHECK_EQUAL(result_unrelated_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    // Parent and Child (and Grandchild) Package\n+    Package package_parent_child;\n+    Package package_3gen;\n+    auto mtx_parent = CreateValidMempoolTransaction(/* input_transaction */ m_coinbase_txns[0], /* vout */ 0,\n+                                                    /* input_height */ 0, /* input_signing_key */ coinbaseKey,\n+                                                    /* output_destination */ parent_locking_script,\n+                                                    /* output_amount */ CAmount(49 * COIN), /* submit */ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_parent_child.push_back(tx_parent);\n+    package_3gen.push_back(tx_parent);\n+\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript child_locking_script = GetScriptForDestination(PKHash(child_key.GetPubKey()));\n+    auto mtx_child = CreateValidMempoolTransaction(/* input_transaction */ tx_parent, /* vout */ 0,\n+                                                   /* input_height */ 101, /* input_signing_key */ parent_key,\n+                                                   /* output_destination */ child_locking_script,\n+                                                   /* output_amount */ CAmount(48 * COIN), /* submit */ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_parent_child.push_back(tx_child);\n+    package_3gen.push_back(tx_child);\n+\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript grandchild_locking_script = GetScriptForDestination(PKHash(grandchild_key.GetPubKey()));\n+    auto mtx_grandchild = CreateValidMempoolTransaction(/* input_transaction */ tx_child, /* vout */ 0,\n+                                                       /* input_height */ 101, /* input_signing_key */ child_key,\n+                                                       /* output_destination */ grandchild_locking_script,\n+                                                       /* output_amount */ CAmount(47 * COIN), /* submit */ false);\n+    CTransactionRef tx_grandchild = MakeTransactionRef(mtx_grandchild);\n+    package_3gen.push_back(tx_grandchild);\n+\n+    // 3 Generations is not allowed.\n+    {\n+        auto result_3gen_submit = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                    package_3gen, /* test_accept */ false);\n+        BOOST_CHECK(result_3gen_submit.m_state.IsInvalid());\n+        BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(result_3gen_submit.m_state.GetRejectReason(), \"package-not-child-with-parents\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+    }\n+\n+    // Child with missing parent.\n+    mtx_child.vin.push_back(CTxIn(COutPoint(package_unrelated[0]->GetHash(), 0)));\n+    Package package_missing_parent;\n+    package_missing_parent.push_back(tx_parent);\n+    package_missing_parent.push_back(MakeTransactionRef(mtx_child));\n+    {\n+        const auto result_missing_parent = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                             package_missing_parent, /* test_accept */ false);\n+        BOOST_CHECK(result_missing_parent.m_state.IsInvalid());\n+        BOOST_CHECK_EQUAL(result_missing_parent.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(result_missing_parent.m_state.GetRejectReason(), \"package-not-child-with-unconfirmed-parents\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+\n+    }\n+\n+    // Submit package with parent + child.\n+    {\n+        const auto submit_parent_child = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                           package_parent_child, /* test_accept */ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_parent_child.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_parent_child.m_state.GetRejectReason());\n+        auto it_parent = submit_parent_child.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_parent_child.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_parent_child.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_state.IsValid());\n+        BOOST_CHECK(it_child != submit_parent_child.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_state.IsValid());\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+    }\n+\n+    // Already-in-mempool transactions should be detected and de-duplicated.",
      "path": "src/test/txpackage_tests.cpp",
      "position": 197,
      "original_position": 197,
      "commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "original_commit_id": "046e8ff264be6b888c0f9a9d822e32aa74e19b78",
      "in_reply_to_id": 773037608,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in #23804",
      "created_at": "2022-01-17T12:41:36Z",
      "updated_at": "2022-01-17T12:41:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22674#discussion_r785967862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/785967862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22674"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 310,
      "original_line": 310,
      "side": "RIGHT"
    }
  ]
}