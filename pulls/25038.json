{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038",
    "id": 924531761,
    "node_id": "PR_kwDOABII5843Gzwx",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25038",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25038.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25038.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
    "number": 25038,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "policy: nVersion=3 and Package RBF",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is built on top of https://github.com/bitcoin/bitcoin/pull/26933 - please review that first.\r\nSee #27463 for overall project tracking.\r\n\r\nThis PR contains 2 projects: v3 policy and package RBF. Mailing list posts: [package RBF 1](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019464.html) and [V3 + package RBF 2](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html). It stems from a long discussion about RBF pinning, across a [mailing list thread](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-January/019817.html) and [gist](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff).\r\n\r\nV3 Policy: A simple set of additional policy rules applied to transactions with their `nVersion` field set to 3. These rules are designed to be anti-DoS (effectively limits cluster size without specifically adding cluster-based logic to the mempool) and enable the node to efficiently assess incentive compatibility. If adopted by many nodes in the network, V3 mitigates various RBF pinning attacks. See doc/policy/version3_transactions.md for the exact rules and rationale, and [these review club notes](bitcoincore.reviews/25038) for more background and discussion.\r\n\r\nPackage RBF: In addition to allowing a child to pay for its parents within the package, also allow the child to pay for replacing the parent's conflicts. For example, this allows LN users to replace commitment transactions existing in the mempool, simply by broadcasting their respective commitment transactions with a high-fee child. The commitment transactions can be signed with 0 fees, which means no overpaying.",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      },
      {
        "id": 1392286103,
        "node_id": "MDU6TGFiZWwxMzkyMjg2MTAz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review",
        "name": "Needs Conceptual Review",
        "description": "",
        "color": "fef2c0",
        "default": false
      }
    ],
    "created_at": "2022-04-30T00:24:31Z",
    "updated_at": "2023-05-09T16:36:23Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "f34038c7f47e7fa6ee6c59f7c6e12948a358f21f",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "glozow:package-rbf",
      "ref": "package-rbf",
      "sha": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 244262754,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNDQyNjI3NTQ=",
        "name": "bitcoin",
        "full_name": "glozow/bitcoin",
        "owner": {
          "login": "glozow",
          "id": 25183001,
          "node_id": "MDQ6VXNlcjI1MTgzMDAx",
          "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/glozow",
          "html_url": "https://github.com/glozow",
          "followers_url": "https://api.github.com/users/glozow/followers",
          "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
          "organizations_url": "https://api.github.com/users/glozow/orgs",
          "repos_url": "https://api.github.com/users/glozow/repos",
          "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/glozow/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/glozow/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/glozow/bitcoin",
        "archive_url": "https://api.github.com/repos/glozow/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/glozow/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/glozow/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/glozow/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/glozow/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/glozow/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/glozow/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/glozow/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/glozow/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/glozow/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/glozow/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/glozow/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/glozow/bitcoin/events",
        "forks_url": "https://api.github.com/repos/glozow/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/glozow/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/glozow/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/glozow/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/glozow/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/glozow/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/glozow/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/glozow/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/glozow/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/glozow/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/glozow/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/glozow/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/glozow/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/glozow/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/glozow/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/glozow/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:glozow/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/glozow/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/glozow/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/glozow/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/glozow/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/glozow/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/glozow/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/glozow/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/glozow/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/glozow/bitcoin/hooks",
        "svn_url": "https://github.com/glozow/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 7,
        "watchers_count": 7,
        "size": 225090,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-02T10:00:34Z",
        "created_at": "2020-03-02T02:31:56Z",
        "updated_at": "2022-01-07T17:55:23Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "54e07a05b28d2bca8fc08cca0bf6e7ddf6762488",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
      }
    },
    "author_association": "MEMBER",
    "draft": true,
    "additions": 1842,
    "deletions": 228,
    "changed_files": 30,
    "commits": 27,
    "review_comments": 210,
    "comments": 24
  },
  "events": [
    {
      "event": "labeled",
      "id": 6527241360,
      "node_id": "LE_lADOABII585I0To3zwAAAAGFDcyQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6527241360",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-30T00:24:52Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 6527241362,
      "node_id": "LE_lADOABII585I0To3zwAAAAGFDcyS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6527241362",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-30T00:24:52Z",
      "label": {
        "name": "Needs Conceptual Review",
        "color": "fef2c0"
      }
    },
    {
      "event": "commented",
      "id": 1113911849,
      "node_id": "IC_kwDOABII585CZPIp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1113911849",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-04-30T04:17:13Z",
      "updated_at": "2023-05-07T07:04:10Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| Concept ACK | [theStack](https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1318865644) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27491](https://github.com/bitcoin/bitcoin/pull/27491) (refactor: Move chain constants to the util library by TheCharlatan)\n* [#27432](https://github.com/bitcoin/bitcoin/pull/27432) (contrib: add tool to convert compact-serialized UTXO set to SQLite database by theStack)\n* [#27353](https://github.com/bitcoin/bitcoin/pull/27353) (refactor (tidy): Fixes after enable-debug configure by TheCharlatan)\n* [#27018](https://github.com/bitcoin/bitcoin/pull/27018) (mempool / miner: regularly flush <=0-fee entries and mine everything in the mempool by glozow)\n* [#26711](https://github.com/bitcoin/bitcoin/pull/26711) (validate package transactions with their in-package ancestor sets by glozow)\n* [#26525](https://github.com/bitcoin/bitcoin/pull/26525) (Remove -mempoolfullrbf option by BitcoinErrorLog)\n* [#26451](https://github.com/bitcoin/bitcoin/pull/26451) (Enforce incentive compatibility for all RBF replacements by sdaftuar)\n* [#20892](https://github.com/bitcoin/bitcoin/pull/20892) (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1113911849",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "review_requested",
      "id": 6529391533,
      "node_id": "RRE_lADOABII585I0To3zwAAAAGFLput",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6529391533",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-01T11:43:20Z",
      "requested_reviewer": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6529391534,
      "node_id": "RRE_lADOABII585I0To3zwAAAAGFLpuu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6529391534",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-01T11:43:20Z",
      "requested_reviewer": {
        "login": "darosior",
        "id": 22457751,
        "node_id": "MDQ6VXNlcjIyNDU3NzUx",
        "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/darosior",
        "html_url": "https://github.com/darosior",
        "followers_url": "https://api.github.com/users/darosior/followers",
        "following_url": "https://api.github.com/users/darosior/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/darosior/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/darosior/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
        "organizations_url": "https://api.github.com/users/darosior/orgs",
        "repos_url": "https://api.github.com/users/darosior/repos",
        "events_url": "https://api.github.com/users/darosior/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/darosior/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "review_requested",
      "id": 6529391536,
      "node_id": "RRE_lADOABII585I0To3zwAAAAGFLpuw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6529391536",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-01T11:43:21Z",
      "requested_reviewer": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1116158353,
      "node_id": "IC_kwDOABII585ChzmR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116158353",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-03T14:21:14Z",
      "updated_at": "2022-05-03T14:21:14Z",
      "author_association": "MEMBER",
      "body": "```\r\n$ ./test/lint/lint-python.py\r\ntest/functional/feature_package_rbf.py:18:1: F401 'test_framework.util.assert_equal' imported but unused\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1116158353",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "comment_deleted",
      "id": 6570554553,
      "node_id": "CDE_lADOABII585I0To3zwAAAAGHorS5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6570554553",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-09T07:00:03Z"
    },
    {
      "event": "reviewed",
      "id": 966801973,
      "node_id": "PRR_kwDOABII5845oDo1",
      "url": null,
      "actor": null,
      "commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Just a first parse",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-966801973",
      "submitted_at": "2022-05-09T22:25:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 967623639,
      "node_id": "PRR_kwDOABII5845rMPX",
      "url": null,
      "actor": null,
      "commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-967623639",
      "submitted_at": "2022-05-10T12:14:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 6617264351,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGKa3Df",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6617264351",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-16T15:34:56Z"
    },
    {
      "event": "comment_deleted",
      "id": 6652952174,
      "node_id": "CDE_lADOABII585I0To3zwAAAAGMi_5u",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6652952174",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T19:15:02Z"
    },
    {
      "event": "comment_deleted",
      "id": 6652952734,
      "node_id": "CDE_lADOABII585I0To3zwAAAAGMjACe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6652952734",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T19:15:08Z"
    },
    {
      "event": "comment_deleted",
      "id": 6652953181,
      "node_id": "CDE_lADOABII585I0To3zwAAAAGMjAJd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6652953181",
      "actor": {
        "login": "hebasto",
        "id": 32963518,
        "node_id": "MDQ6VXNlcjMyOTYzNTE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hebasto",
        "html_url": "https://github.com/hebasto",
        "followers_url": "https://api.github.com/users/hebasto/followers",
        "following_url": "https://api.github.com/users/hebasto/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hebasto/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hebasto/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
        "organizations_url": "https://api.github.com/users/hebasto/orgs",
        "repos_url": "https://api.github.com/users/hebasto/repos",
        "events_url": "https://api.github.com/users/hebasto/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hebasto/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-05-20T19:15:14Z"
    },
    {
      "event": "commented",
      "id": 1145285891,
      "node_id": "IC_kwDOABII585EQ60D",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1145285891",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T19:58:23Z",
      "updated_at": "2022-06-02T19:58:23Z",
      "author_association": "MEMBER",
      "body": "@t-bast \r\n\r\n> to have 100 outputs and broadcast one child tx per output, you're already hitting the 100 transactions limit...\r\n\r\nThey cannot create this chain to begin with as from any single unconfirmed transaction with confirmed parents, you can only make 25 transactions.\r\n\r\nSo if you for example had >4 commitment transactions that you want to CPFP with a single bump transaction, this is where the limit can be hit.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1145285891",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "mentioned",
      "id": 6731252790,
      "node_id": "MEE_lADOABII585I0To3zwAAAAGRNsQ2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6731252790",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T19:58:23Z"
    },
    {
      "event": "subscribed",
      "id": 6731252793,
      "node_id": "SE_lADOABII585I0To3zwAAAAGRNsQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6731252793",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T19:58:23Z"
    },
    {
      "event": "commented",
      "id": 1145404055,
      "node_id": "IC_kwDOABII585ERXqX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1145404055",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T22:26:32Z",
      "updated_at": "2022-06-02T22:26:32Z",
      "author_association": "MEMBER",
      "body": "> They cannot create this chain to begin with as from any single unconfirmed transaction with confirmed parents, you can only make 25 transactions.\r\n\r\nRight, I had forgotten that restriction! However, this 25 descendants chain limit is only a configuration parameter on bitcoind, not a BIP 125 requirement, right? So in theory we cannot fully rely on it, nothing prevents an attacker to inject a 100 descendants chain in miners mempools if they have configured their bitcoind differently (or even use a different implementation)?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1145404055",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1145431949,
      "node_id": "IC_kwDOABII585EReeN",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1145431949",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T23:21:47Z",
      "updated_at": "2022-06-02T23:21:47Z",
      "author_association": "MEMBER",
      "body": "@t-bast unlikely but true, seems like something to consider scaling with other policies to be more robust?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1145431949",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "mentioned",
      "id": 6732293390,
      "node_id": "MEE_lADOABII585I0To3zwAAAAGRRqUO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6732293390",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T23:21:47Z"
    },
    {
      "event": "subscribed",
      "id": 6732293394,
      "node_id": "SE_lADOABII585I0To3zwAAAAGRRqUS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6732293394",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T23:21:47Z"
    },
    {
      "event": "commented",
      "id": 1145451225,
      "node_id": "IC_kwDOABII585ERjLZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1145451225",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-02T23:49:38Z",
      "updated_at": "2022-06-02T23:49:38Z",
      "author_association": "MEMBER",
      "body": "> this 25 descendants chain limit is only a configuration parameter on bitcoind, not a BIP 125 requirement\r\n\r\nNote that BIP 125 enforcement could be considered a configuration parameter too -- eg knots nodes will allow replacement of any tx, whether they signal or not.\r\n\r\nPerhaps something we could consider is defining a service bit to correspond with a relay policy, and have nodes preferential peer with other nodes who set that bit; that way you're more likely for nodes that support a particular policy to form a fully connected graph, and thus have a path to any miners that also accept that relay policy. Knots defines an experimental service bit for full-RBF nodes https://github.com/bitcoinknots/bitcoin/blob/23.x-knots/src/init.cpp#L1103 . ",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1145451225",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "reviewed",
      "id": 995003793,
      "node_id": "PRR_kwDOABII5847To2R",
      "url": null,
      "actor": null,
      "commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-995003793",
      "submitted_at": "2022-06-03T14:36:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "referenced",
      "id": 6818574066,
      "node_id": "REFE_lADOABII585I0To3zwAAAAGWay7y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6818574066",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "d6832217ef45ea0c858e3fcdec5d4fe87097c839",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/d6832217ef45ea0c858e3fcdec5d4fe87097c839",
      "created_at": "2022-06-16T07:09:41Z"
    },
    {
      "event": "referenced",
      "id": 6821754314,
      "node_id": "REFE_lADOABII585I0To3zwAAAAGWm7XK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6821754314",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "457143b0d89bf7876bda60e57619c2cad198ba48",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/457143b0d89bf7876bda60e57619c2cad198ba48",
      "created_at": "2022-06-16T14:55:04Z"
    },
    {
      "event": "commented",
      "id": 1161852823,
      "node_id": "IC_kwDOABII585FQHeX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1161852823",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-21T14:51:39Z",
      "updated_at": "2022-06-21T14:51:39Z",
      "author_association": "MEMBER",
      "body": "I have added a first set of tests to eclair that exercise the package-rbf logic: https://github.com/ACINQ/eclair/commit/4f583b5725cba6594388d54c0b31affc1bf8cddf\r\n\r\nI extracted the transactions as test vectors here: https://gist.github.com/t-bast/7c553e61ff2bee3720ff4f7db04cc1b3\r\nI'm not sure how easy it will be to translate them to bitcoin core tests, you'll need to re-generate some of the inputs and re-sign the commit transactions. The file should have all the required data, but it may be quite painful still...\r\n\r\nThe third test vector triggers the following error: `Internal bug detected: \"it != package_result.m_tx_results.end()\"`",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1161852823",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "labeled",
      "id": 6912492480,
      "node_id": "LE_lADOABII585I0To3zwAAAAGcBEPA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6912492480",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-06-30T16:47:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1178787330,
      "node_id": "IC_kwDOABII585GQt4C",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1178787330",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-08T09:50:59Z",
      "updated_at": "2022-07-08T09:50:59Z",
      "author_association": "MEMBER",
      "body": "Apologies for the delay, I am rebasing + working on the following:\r\n\r\n- Some unit tests for RBF code\r\n- Adding an ancestor feerate rule https://github.com/bitcoin/bitcoin/pull/25038#discussion_r907576864\r\n- Adding a set of rules for nVersion=3, i.e. stricter ancestor/descendant limits, inheritance, signaling for RBF, etc. https://github.com/bitcoin/bitcoin/pull/25038#discussion_r908996095 Won't be a finalized proposal, I'm hoping that having code written will help us iterate on what those rules should be.\r\n\r\nWill update soon!",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1178787330",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7019124665,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGiX1e5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7019124665",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T09:42:02Z"
    },
    {
      "event": "renamed",
      "id": 7019130505,
      "node_id": "RTE_lADOABII585I0To3zwAAAAGiX26J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7019130505",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T09:42:48Z",
      "rename": {
        "from": "BIP125-based Package RBF",
        "to": "policy: nVersion=3 and Package RBF"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7019206760,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGiYJho",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7019206760",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T09:53:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7019476942,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGiZLfO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7019476942",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T10:31:14Z"
    },
    {
      "event": "unlabeled",
      "id": 7020432112,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAGic0rw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7020432112",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-19T12:52:04Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1043617508,
      "node_id": "PRR_kwDOABII584-NFbk",
      "url": null,
      "actor": null,
      "commit_id": "a639f4f51fc291ab88811120241b560e9e81e823",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1043617508",
      "submitted_at": "2022-07-19T15:27:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1053636482,
      "node_id": "PRR_kwDOABII584-zTeC",
      "url": null,
      "actor": null,
      "commit_id": "a639f4f51fc291ab88811120241b560e9e81e823",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1053636482",
      "submitted_at": "2022-07-28T07:57:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "commented",
      "id": 1198039341,
      "node_id": "IC_kwDOABII585HaKEt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1198039341",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T11:52:57Z",
      "updated_at": "2022-07-28T11:52:57Z",
      "author_association": "MEMBER",
      "body": "> we should probably bikeshed the protocol hard-coded value and use the lowest value we can to minimize the harm a malicious child tx can do.\r\n\r\nHere's my reasoning for the current value (4000vB), but open to feedback and I will of course add the rationale to the version3_transactions.md doc:\r\n\r\n- Upper bound: the larger we make this limit, the more vbytes we may need to replace. With default limits, if the child is e.g. 100,000vB, that might be an additional 100,000sat or more, depending on the feerate.\r\n- Lower bound: the smaller we make this limit, the fewer UTXOs we can use to fund this fee-bump. If we require all fee-bumps to only use 1 UTXO, for example, we're be requiring wallets to always maintain a pool of high-value UTXOs, one for each channel they might close.\r\n\r\nIf you're broadcasting commitment tx  `commit_a` and 4000vB is the largest output your counterparty can attach to their commitment tx `commit_b`, you can easily meet `(commit_b.fees + 4000 * minfeerate) + (incrementalfeerate * commit_a.size)` fee to replace.\r\n\r\n4000vB should give you at least 50 inputs depending on the output type, which I'm guessing is a reasonable restriction.\r\nIf you say, hey, 10 inputs is enough, then we could lower this to 1000vB.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1198039341",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "labeled",
      "id": 7083179307,
      "node_id": "LE_lADOABII585I0To3zwAAAAGmML0r",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7083179307",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-28T16:43:59Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1198946822,
      "node_id": "IC_kwDOABII585HdnoG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1198946822",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T07:01:31Z",
      "updated_at": "2022-07-29T07:01:31Z",
      "author_association": "MEMBER",
      "body": "> Here's my reasoning for the current value (4000vB), but open to feedback and I will of course add the rationale to the version3_transactions.md doc\r\n\r\nThanks for the explanation!\r\n\r\n> 4000vB should give you at least 50 inputs depending on the output type, which I'm guessing is a reasonable restriction.\r\nIf you say, hey, 10 inputs is enough, then we could lower this to 1000vB.\r\n\r\nSince that child transaction is only bringing fees, it shouldn't need a big input amount, so I'd say 50 inputs is clearly too much, 10 inputs should be more than enough, shouldn't it?",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1198946822",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1199383646,
      "node_id": "IC_kwDOABII585HfSRe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1199383646",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:24:26Z",
      "updated_at": "2022-07-29T14:26:23Z",
      "author_association": "MEMBER",
      "body": "@t-bast and I realized that under this proposal, even excluding ephemeral outputs, we can do all the anchor improvements up/to the \"ephemeral\" part for ln-penatly.\r\n\r\ni.e. Change to an OP_TRUE single anchor output for commitment transaction, but right at the relay output dust level. \r\n\r\nWouldn't be applicable to eltoo-like constructs, but these are more rare it seems. Most contract types can survive bleeding off a few sats once. e.g. batched payouts, coinjoins, ln-penalty\r\n\r\nScope creep to OP_TRUE becoming a standard output(up to 1 a tx?) to relay might be worth it? We can figure out the ephemeral part as a nice cleanup of current protocols further in future, and fix for eltoo-like stuff.\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1199383646",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "mentioned",
      "id": 7089885530,
      "node_id": "MEE_lADOABII585I0To3zwAAAAGmlxFa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7089885530",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:24:26Z"
    },
    {
      "event": "subscribed",
      "id": 7089885537,
      "node_id": "SE_lADOABII585I0To3zwAAAAGmlxFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7089885537",
      "actor": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-29T14:24:26Z"
    },
    {
      "event": "commented",
      "id": 1201038111,
      "node_id": "IC_kwDOABII585HlmMf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1201038111",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-01T10:51:55Z",
      "updated_at": "2022-08-01T10:51:55Z",
      "author_association": "MEMBER",
      "body": "> Since that child transaction is only bringing fees, it shouldn't need a big input amount, so I'd say 50 inputs is clearly too much, 10 inputs should be more than enough, shouldn't it?\r\n\r\nOh great! Then I'll limit the v3 child to 1000vB. Very simple :ok_hand: :grinning:",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1201038111",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7111105481,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGn2tvJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111105481",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T15:37:04Z"
    },
    {
      "event": "unlabeled",
      "id": 7111482225,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAGn4Jtx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7111482225",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-02T16:26:09Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "labeled",
      "id": 7116900553,
      "node_id": "LE_lADOABII585I0To3zwAAAAGoM0jJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7116900553",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-03T09:24:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7145928083,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGp7jWT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7145928083",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T10:42:58Z"
    },
    {
      "event": "unlabeled",
      "id": 7146046607,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAGp8ASP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7146046607",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-08T11:00:52Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 7231112750,
      "node_id": "REFE_lADOABII585I0To3zwAAAAGvAgYu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7231112750",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c5f0cbefa369b0e4d99a4f871e6334955d537c1f",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/c5f0cbefa369b0e4d99a4f871e6334955d537c1f",
      "created_at": "2022-08-22T09:36:00Z"
    },
    {
      "event": "labeled",
      "id": 7231589358,
      "node_id": "LE_lADOABII585I0To3zwAAAAGvCUvu",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7231589358",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-22T10:38:46Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7297820111,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGy--XP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7297820111",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-31T16:07:05Z"
    },
    {
      "event": "unlabeled",
      "id": 7298543268,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAGzBu6k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7298543268",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-31T17:55:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7304467492,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGzYVQk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7304467492",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-01T11:47:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7313733403,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAGz7rcb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7313733403",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-02T14:28:18Z"
    },
    {
      "event": "ready_for_review",
      "id": 7316879833,
      "node_id": "RFRE_lADOABII585I0To3zwAAAAG0HrnZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7316879833",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T10:14:31Z"
    },
    {
      "event": "commented",
      "id": 1236090013,
      "node_id": "IC_kwDOABII585JrTyd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1236090013",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-03T10:16:17Z",
      "updated_at": "2022-09-03T10:16:17Z",
      "author_association": "MEMBER",
      "body": "Ready for review! Writing a mailing list post at the moment. You can also look at doc/policy/packages.md and doc/policy/version3_transactions.md.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1236090013",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7448103345,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAG78Qmx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7448103345",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T14:55:56Z"
    },
    {
      "event": "commented",
      "id": 1256371309,
      "node_id": "IC_kwDOABII585K4rRt",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256371309",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-09-23T15:38:41Z",
      "updated_at": "2022-09-23T15:38:41Z",
      "author_association": "MEMBER",
      "body": "Rebase + deleted some unused code + tweak to the signaling logic. Posted to the mailing list just now https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1256371309",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "reviewed",
      "id": 1124964475,
      "node_id": "PRR_kwDOABII585DDZh7",
      "url": null,
      "actor": null,
      "commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1124964475",
      "submitted_at": "2022-09-29T12:26:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "labeled",
      "id": 7549703143,
      "node_id": "LE_lADOABII585I0To3zwAAAAHB_1Pn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7549703143",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-10-09T17:41:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1155350107,
      "node_id": "PRR_kwDOABII585E3T5b",
      "url": null,
      "actor": null,
      "commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "bunch of comments, didn't comb through final functional tests, but I'll wait for the latest rework of the proposal",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1155350107",
      "submitted_at": "2022-10-26T15:34:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1159042215,
      "node_id": "PRR_kwDOABII585FFZSn",
      "url": null,
      "actor": null,
      "commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1159042215",
      "submitted_at": "2022-10-27T21:02:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1160226123,
      "node_id": "PRR_kwDOABII585FJ6VL",
      "url": null,
      "actor": null,
      "commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1160226123",
      "submitted_at": "2022-11-01T17:07:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7722224548,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHMR8uk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7722224548",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T11:05:35Z"
    },
    {
      "event": "unlabeled",
      "id": 7722959136,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAHMUwEg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7722959136",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-02T12:39:01Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1165637368,
      "node_id": "PRR_kwDOABII585Fejb4",
      "url": null,
      "actor": null,
      "commit_id": "18076ccda8351b08e8c27613f3a2f92228110ede",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1165637368",
      "submitted_at": "2022-11-02T16:40:57Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7734380730,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHNAUi6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7734380730",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-03T17:14:48Z"
    },
    {
      "event": "reviewed",
      "id": 1167410333,
      "node_id": "PRR_kwDOABII585FlUSd",
      "url": null,
      "actor": null,
      "commit_id": "78333c1cde5b3c71f663ff861d8464430fb1ca74",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1167410333",
      "submitted_at": "2022-11-03T17:39:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7734674551,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHNBcR3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7734674551",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-03T17:54:09Z"
    },
    {
      "event": "reviewed",
      "id": 1167512793,
      "node_id": "PRR_kwDOABII585FltTZ",
      "url": null,
      "actor": null,
      "commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1167512793",
      "submitted_at": "2022-11-03T18:57:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1167522786,
      "node_id": "PRR_kwDOABII585Flvvi",
      "url": null,
      "actor": null,
      "commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1167522786",
      "submitted_at": "2022-11-03T19:05:20Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1168927850,
      "node_id": "PRR_kwDOABII585FrGxq",
      "url": null,
      "actor": null,
      "commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1168927850",
      "submitted_at": "2022-11-04T17:19:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7742893609,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHNgy4p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7742893609",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T17:58:43Z"
    },
    {
      "event": "commented",
      "id": 1303979737,
      "node_id": "IC_kwDOABII585NuSbZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1303979737",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-04T18:26:42Z",
      "updated_at": "2022-11-04T18:26:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Adding a note here: \r\n\r\nif we're doing nVersion 3, we should also fix the lack of discouragement for uninterpreted nSequence values and arguments to CSV/CLTV. see https://github.com/bitcoin/bitcoin/pull/22871",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1303979737",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "convert_to_draft",
      "id": 7835086985,
      "node_id": "CTDE_lADOABII585I0To3zwAAAAHTAfCJ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7835086985",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-17T15:29:13Z"
    },
    {
      "event": "commented",
      "id": 1320295394,
      "node_id": "IC_kwDOABII585Oshvi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1320295394",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-18T17:07:09Z",
      "updated_at": "2022-11-18T17:08:26Z",
      "author_association": "MEMBER",
      "body": "This is mentioned in a few other places, but Rule 3 pinning via additional ancestor is still not resolved with the multi-parent-1-child case. Quick diagram to illustrate - this was pointed out to me by @instagibbs.\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/202760386-96466fd8-659b-40fe-a943-529fcdd8dd84.png)\r\n\r\nWorking on further restricting the rules to 1-parent-1-child since that eliminates the possibility of a conflict's high fees diluted by ancestors. Will add more tests as well, and then will take out of draft when finished.\r\n\r\n> if we're doing nVersion 3, we should also fix the lack of discouragement for uninterpreted nSequence values and arguments to CSV/CLTV. see https://github.com/bitcoin/bitcoin/pull/22871\r\n\r\nWill consider adding this if people feel strongly. Wondering if others on this thread have thoughts on it?",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1320295394",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "mentioned",
      "id": 7845773071,
      "node_id": "MEE_lADOABII585I0To3zwAAAAHTpP8P",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7845773071",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-18T17:07:09Z"
    },
    {
      "event": "subscribed",
      "id": 7845773086,
      "node_id": "SE_lADOABII585I0To3zwAAAAHTpP8e",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7845773086",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-18T17:07:10Z"
    },
    {
      "event": "comment_deleted",
      "id": 7855732584,
      "node_id": "CDE_lADOABII585I0To3zwAAAAHUPPdo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7855732584",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-21T09:57:32Z"
    },
    {
      "event": "labeled",
      "id": 7902913177,
      "node_id": "LE_lADOABII585I0To3zwAAAAHXDOKZ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7902913177",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T13:23:23Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7905215202,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHXMALi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7905215202",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T17:28:32Z"
    },
    {
      "event": "unlabeled",
      "id": 7905320583,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAHXMZ6H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7905320583",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-11-28T17:44:31Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1196723893,
      "node_id": "PRR_kwDOABII585HVI61",
      "url": null,
      "actor": null,
      "commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> if we're doing nVersion 3, we should also fix the lack of discouragement for uninterpreted nSequence values and arguments to CSV/CLTV. see https://github.com/bitcoin/bitcoin/pull/22871\r\n\r\nIIRC with #22871, the main standing concern was the risk of breaking applications actually using nSequence undefined value for any semantic. I don't think this a concern anymore if we restrain only for nVersion=3 as those transactions are not standard today and no one should use them.  ",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1196723893",
      "submitted_at": "2022-11-29T01:50:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1197642959,
      "node_id": "PRR_kwDOABII585HYpTP",
      "url": null,
      "actor": null,
      "commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1197642959",
      "submitted_at": "2022-11-29T16:10:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7941555296,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHZWoRg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7941555296",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-02T15:14:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7942031223,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHZYcd3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7942031223",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-02T16:16:09Z"
    },
    {
      "event": "labeled",
      "id": 7956431655,
      "node_id": "LE_lADOABII585I0To3zwAAAAHaPYMn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7956431655",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-05T15:56:19Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1339129671,
      "node_id": "IC_kwDOABII585P0X9H",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1339129671",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-12-06T10:46:40Z",
      "updated_at": "2022-12-06T10:46:40Z",
      "author_association": "MEMBER",
      "body": "This PR is open for review but leaving as draft, attempting to shave off the beginning commits in #26646 to make this smaller and v3-focused.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1339129671",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "reviewed",
      "id": 1209171268,
      "node_id": "PRR_kwDOABII585IEn1E",
      "url": null,
      "actor": null,
      "commit_id": "0c089a327a70d16f824b1b4dfd029d260cc43f09",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1209171268",
      "submitted_at": "2022-12-07T21:49:56Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1238807826,
      "node_id": "PRR_kwDOABII585J1rUS",
      "url": null,
      "actor": null,
      "commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1238807826",
      "submitted_at": "2023-01-06T12:59:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "reviewed",
      "id": 1238852886,
      "node_id": "PRR_kwDOABII585J12UW",
      "url": null,
      "actor": null,
      "commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1238852886",
      "submitted_at": "2023-01-06T13:41:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "referenced",
      "id": 8201687295,
      "node_id": "REFE_lADOABII585I0To3zwAAAAHo29D_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8201687295",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "26002570ab600bc653433693b7492b85965ccbce",
      "commit_url": "https://api.github.com/repos/bitcoin-core/gui/commits/26002570ab600bc653433693b7492b85965ccbce",
      "created_at": "2023-01-11T13:26:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8202597792,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHo6bWg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8202597792",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T15:01:48Z"
    },
    {
      "event": "commented",
      "id": 1378893658,
      "node_id": "IC_kwDOABII585SMD9a",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378893658",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T15:02:51Z",
      "updated_at": "2023-01-11T15:02:51Z",
      "author_association": "MEMBER",
      "body": "Last push is just a rebase. Still need to do:\r\n- Not allowing non-v3 below minrelayfee in package CPFP. Currently working on test util to raise mempool min feerate for this.\r\n- Removing below-minrelayfee-and-no-longer-bumped transactions after replacement.",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1378893658",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1378903453,
      "node_id": "IC_kwDOABII585SMGWd",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378903453",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T15:08:17Z",
      "updated_at": "2023-01-11T15:08:17Z",
      "author_association": "MEMBER",
      "body": "> Not allowing non-v3 below minrelayfee in package CPFP. Currently working on test util to raise mempool min feerate for this.\r\n\r\nImplication being a v1/2 transaction cannot be 0-fee and bumped by child?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1378903453",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1378910122,
      "node_id": "IC_kwDOABII585SMH-q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1378910122",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T15:11:05Z",
      "updated_at": "2023-01-11T15:16:30Z",
      "author_association": "MEMBER",
      "body": "> Implication being a v1/2 transaction cannot be 0-fee and bumped by child?\r\n\r\nYes unfortunately, unless there is a better alternative... see ~08:16 in https://gnusha.org/bitcoin-core-dev/2022-12-16.log",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1378910122",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "referenced",
      "id": 8202941772,
      "node_id": "REFE_lADOABII585I0To3zwAAAAHo7vVM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8202941772",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f5d8392ffe25829a68d48ab35fe08eacd691babd",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/f5d8392ffe25829a68d48ab35fe08eacd691babd",
      "created_at": "2023-01-11T15:37:23Z"
    },
    {
      "event": "unlabeled",
      "id": 8203178621,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAHo8pJ9",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8203178621",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-11T16:02:49Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8246650711,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHriedX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8246650711",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T15:06:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8246841016,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHrjM64",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8246841016",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T15:23:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8247152503,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHrkY93",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8247152503",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-17T15:54:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8313594715,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAHvh2Nb",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8313594715",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-19T16:03:29Z"
    },
    {
      "event": "commented",
      "id": 1405944407,
      "node_id": "IC_kwDOABII585TzQJX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1405944407",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T02:33:34Z",
      "updated_at": "2023-01-27T02:33:34Z",
      "author_association": "MEMBER",
      "body": "Lightning legacy channel types (before BOLT9's `option_anchors_output` / `option_anchors_zero_fee_htlc_tx`) presents the issue of counterparty's second-stage HTLC transactons malleable enough to opt-out from BIP125 replacement rules (the preimage path on the local commitment transaction offered output and the timeout path on the local commitment transaction accepted output). This path can be leveraged by a counterarty not only to do opt-out pinning but also for rule #3 style of pinning, where the second-stage HTLC transaction is malleated to a high-fee/low-feerate.\r\n\r\nThis repleaceability issue is moving away with `option_anchors_zero_fee_htlc_tx`, where all the second-stage spends must\r\nsignal replacement due to the new CSV 1 to satisfy. This anchor states are currently signed under nversion=2, assuming\r\nwe have [dynamic upgrades](https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-July/002763.html), a new channel type with states committing to nversion=3 could be deployed in-flight (i.e without confirming on-chain new funding outputs). Those channels would be safe against rule #3 style of pinning, as if old RBF opt-in nversion=2 states are used for pinning, under the proposed policy rules (\"All directly conflicting transactions signal replaceability explicitly, either through  BIP125 or V3.\", the incentive-compatible enhanced RBF rules should apply.\r\n\r\nAs of today, `option_anchors_zero_fee_htlc_tx` is enabled by default by Eclair (since [v0.7.0](https://github.com/ACINQ/eclair/blob/master/docs/release-notes/eclair-v0.7.0.md)) and LND (since [v.0.12.0](https://github.com/lightningnetwork/lnd/releases/tag/v0.12.0-beta)). This is not deployed by default by CLN and LDK. So we would still have probably tens of thousands of legacy channels forever exposed to pinning attacks mitigated by nversion=3. For this subset, this is a wonder if we would like to introduce some \"retro-active\" policy effect, where nversion=3 effects are granted to the legacy channel types with some at-broadcast opt-in mechanism. E.g a signature from a pubkey of the funding output committing to a package version bit. Of course, this would be more technical complexity on the Core-side, at the security and economic benefit of Lightning channels, so trade-off.\r\n\r\nLightning node operators of legacy channel types could be also just force-close all channels, and re-open new safer ones.\r\nAssuming it's done in an asynchronous fashion (to avoid accidental flood&loot situations) and mempool fees, this should\r\nbe okay. On the other hand, I can see the operators incentives to keep unsafe channel open to preserve good reputation\r\naccumulated in routing algorithms.\r\n\r\nPersonally, I think the deployment cost are low enough on the Lightning-side to not bother with dedicated \"retro-active\"\r\npolicy mechanism on the Core-side, at least in this case. Though this is only my own appreciation of the deployment cost\r\nand it's highly probable we'll have newer policy to deploy in the future and interactions with channel types, so I think\r\nit can valuable to think about it.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1405944407",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1406087647,
      "node_id": "IC_kwDOABII585TzzHf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406087647",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T06:38:08Z",
      "updated_at": "2023-01-27T06:38:08Z",
      "author_association": "MEMBER",
      "body": "> For this subset, this is a wonder if we would like to introduce some \"retro-active\" policy effect\r\n\r\nThe alternative approach would be for early lightning adopters to update their channel on-chain to permanently invalidate any old states that might enable pinning (eg, by splicing some funds in or out)... Simple is better than complicated.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1406087647",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "commented",
      "id": 1406965582,
      "node_id": "IC_kwDOABII585T3JdO",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1406965582",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-27T19:14:55Z",
      "updated_at": "2023-01-27T19:14:55Z",
      "author_association": "MEMBER",
      "body": "> The alternative approach would be for early lightning adopters to update their channel on-chain to permanently invalidate any old states that might enable pinning (eg, by splicing some funds in or out)... Simple is better than complicated.\r\n\r\nOn this present case, this is my thinking too (\"I think the deployment cost are low enough on the Lightning-side to not bother with dedicated \"retro-active\" policy mechanism on the Core-side\"). However, deployment workaround for new channel types have already been[ proposed in the past](https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-March/003531.html), and to avoid hard synchronisation issue (i.e provoking mempool backlogs) we might have to rely on \"retro-active\" police deployment in the future. That said, we probably still have one or two orders of magnitude of the number of Lightning channels growth before this starts to be a concern.",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1406965582",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    },
    {
      "event": "reviewed",
      "id": 1318865644,
      "node_id": "PRR_kwDOABII585OnErs",
      "url": null,
      "actor": null,
      "commit_id": "c27864fbca2421eeb64f13a803f7b4393999e1cf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK\r\n\r\nLeft some nit comments below, mostly docs and functional test related stuff.",
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1318865644",
      "submitted_at": "2023-03-01T01:16:06Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "labeled",
      "id": 8798094453,
      "node_id": "LE_lADOABII585I0To3zwAAAAIMaER1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8798094453",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-03-20T18:45:39Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFjNDYzZTg3ZGY3Mjg2ODk3MDE4MTBjMzk2MTE1NWM0OWZkYzViMzE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac463e87df728689701810c3961155c49fdc5b31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ac463e87df728689701810c3961155c49fdc5b31",
      "tree": {
        "sha": "c19a3b7f7d97a31b222e6af277df13c3e6527973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c19a3b7f7d97a31b222e6af277df13c3e6527973"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b9fedd2211851a70d2d82dea04420e9b87bfff9",
          "sha": "6b9fedd2211851a70d2d82dea04420e9b87bfff9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9fedd2211851a70d2d82dea04420e9b87bfff9"
        }
      ],
      "message": "[test util] mock mempool minimum feerate",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T08:52:25Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T11:00:49Z"
      },
      "sha": "ac463e87df728689701810c3961155c49fdc5b31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGM0NTU0ZmU4OTRkN2FmOGU2NjZmNWQ0MjRkZWNjZGRmNTE2NzEzZWY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4554fe894d7af8e666f5d424deccddf516713ef",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c4554fe894d7af8e666f5d424deccddf516713ef",
      "tree": {
        "sha": "e77c446b853e1bef05e8802ccc3780d96b9f775a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e77c446b853e1bef05e8802ccc3780d96b9f775a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac463e87df728689701810c3961155c49fdc5b31",
          "sha": "ac463e87df728689701810c3961155c49fdc5b31",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ac463e87df728689701810c3961155c49fdc5b31"
        }
      ],
      "message": "[test] package cpfp bumps parents <mempoolminfee but >=minrelaytxfee",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T08:52:25Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T15:37:25Z"
      },
      "sha": "c4554fe894d7af8e666f5d424deccddf516713ef"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDU2M2EyZWU0ZjU2NGM4ZWE1ZjgzMTNkNzExYjE5NmUyNjA1NjhjMDQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/563a2ee4f564c8ea5f8313d711b196e260568c04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/563a2ee4f564c8ea5f8313d711b196e260568c04",
      "tree": {
        "sha": "5e4c10d2a89e4a7254670b6565585c451c8803ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e4c10d2a89e4a7254670b6565585c451c8803ab"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5e4c10d2a89e4a7254670b6565585c451c8803ab\nparent c4554fe894d7af8e666f5d424deccddf516713ef\nauthor glozow <gloriajzhao@gmail.com> 1673953273 +0000\ncommitter glozow <gloriajzhao@gmail.com> 1681721639 +0100\n\n[policy] disallow transactions under min relay fee, even in packages\n\nAvoid adding transactions below min relay feerate because, even if they\nwere bumped through CPFP when entering the mempool, we do not have a\nDoS-resistant way of ensuring they always remain bumped.  In the future,\nthis rule can be relaxed (e.g. to allow packages to bump 0-fee\ntransactions) if we find a way to do so.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8Z9f8rBYnsNBIgBFugP02+DGP7QFAmQ9CScACgkQugP02+DG\nP7TBKA/7B1Va8PnivSWJ4pd5X8aUrw+ucCZwd1eNEz199EdYGgtfigHq7UaFaQFl\nYeFu8jtN30iVGvdnxIwOGMMdK/AlfzRe2axlV8PKODa43wRT9MIZpb/byUOfByZJ\nFmCl3hthCHIypbXYy+VcpNz4xoGFm9JfeqfGKeJ39DKFPdV3Hcl7aAE1BGUM/bIm\nCUuBn2VANyI2kesyH2QP1odJpj6ROOaKllGMyV8r+Df7UoXXKVRA1CpEHlGnGboy\ns0FJbxDlNtL+pO++9D6toUwWCeXVEG/Ss1Ei7bR8HeJxfbOve0fmxF3SXo2XDHiY\nq6lTa8Zx/bq17sxRUuZSNnFjPbOFCoIwLVRkp9DHX07OtR5GFENgU2+t8N7KgQgD\n++4TXdUdIznWtbAWsCkBNcMaEm2tB4cE1QxhdoXXuwwjIKWxrsfpMzwaiLK+RRdJ\nHG3eSFzRuWtTfUqNteFDKEoggYmHXRUYCGrGPqZJgrq2KIYJQ+ppb7+e3cvS/d9E\nHxRQb4jcLfaA9xZYo1fi0VuORy/yj5hOs/RG5fSLCiW1o7jeV1raTgXeCtTuGaYg\ncugQajBY9dURRi3iQLDXOXVmKBnm29geQIt4Mqn5pvL8R95U60XkSPlvYZ8Scxox\n4NMl17OfozxXpRQaxBhbnJBbSHTJ5ioHB2TfKR/zrOi5KxwleDA=\n=Sc+E\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4554fe894d7af8e666f5d424deccddf516713ef",
          "sha": "c4554fe894d7af8e666f5d424deccddf516713ef",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c4554fe894d7af8e666f5d424deccddf516713ef"
        }
      ],
      "message": "[policy] disallow transactions under min relay fee, even in packages\n\nAvoid adding transactions below min relay feerate because, even if they\nwere bumped through CPFP when entering the mempool, we do not have a\nDoS-resistant way of ensuring they always remain bumped.  In the future,\nthis rule can be relaxed (e.g. to allow packages to bump 0-fee\ntransactions) if we find a way to do so.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T08:53:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T11:01:13Z"
      },
      "sha": "563a2ee4f564c8ea5f8313d711b196e260568c04"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI1MWViY2NjMjhlNjZjMTgyMmFiMjJkMmQxNzhiZTU1YzY2MTgxOTY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b51ebccc28e66c1822ab22d2d178be55c6618196",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b51ebccc28e66c1822ab22d2d178be55c6618196",
      "tree": {
        "sha": "7f7172636f6d95ec16fd7245c34ece542831603a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f7172636f6d95ec16fd7245c34ece542831603a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/563a2ee4f564c8ea5f8313d711b196e260568c04",
          "sha": "563a2ee4f564c8ea5f8313d711b196e260568c04",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/563a2ee4f564c8ea5f8313d711b196e260568c04"
        }
      ],
      "message": "[validation] set PackageValidationState when mempool full",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T09:52:04Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-24T15:31:28Z"
      },
      "sha": "b51ebccc28e66c1822ab22d2d178be55c6618196"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJmNzdmYzljYjQ1MjA5YjljNTYwMjA4YzY1YWJjOTQyMDljZDc5MTk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf77fc9cb45209b9c560208c65abc94209cd7919",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/bf77fc9cb45209b9c560208c65abc94209cd7919",
      "tree": {
        "sha": "fed21d42608e7149542cc94ff2b5e25eca717bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed21d42608e7149542cc94ff2b5e25eca717bdc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fed21d42608e7149542cc94ff2b5e25eca717bdc\nparent b51ebccc28e66c1822ab22d2d178be55c6618196\nauthor glozow <gloriajzhao@gmail.com> 1681730704 +0100\ncommitter glozow <gloriajzhao@gmail.com> 1681731323 +0100\n\n[test] mempool full in package accept\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8Z9f8rBYnsNBIgBFugP02+DGP7QFAmQ9LvsACgkQugP02+DG\nP7Q2PQ//V6xnlqVbM72qIoMz+Y0DIzXNuwVpAjYxTPz3xroasqU8ogZf9k0HczF3\nk5egnXLJy4cyoIg/vGIp3yUUkpHO6dtqDKD71N+YQRiVRGkkCsdSdxBEwemSOiNN\nfl9mHzp5x30YExMiFE5vsZJH9yL1CbYOx62X5D1kR8JfDB7RRtLJkzRQhDTySZQt\nFUaESeydzjYc/TNfAw6h7arLgIqZMbIIb0UW0no0bIgBLKnGnUrfiCibWLR727V3\nzCg9d4ETK/whHcIpwb7AzH6dwaC3cLaOmfFZoNz3kg4lhUkgSQrh1K/n1gHIy/aF\nCZtNDCr1fqDKDIawy3yv/A7ebMAIYYibFllLDDVQDN5U4VRQ/DjlulVZggZ1s73f\nQMlY3XnwXH+5T9JxgJD8bMERPY5vBlFMt0h4w/Coz6VkYCAxETZEsspxiHQpWpGz\nHQM38+ZLcK2PNoNBWJ11TODvVk5S8sfmk9jbIuTFT7afuXq+ML7fHxO2GW++4aS4\ngXkvvT3Jfp4cOMrfrcZ9jhCubFNCqm1sYjTk9OHCja2FdjeooquomyrdqOgcPhrz\ntqeo1Utfhws/Sn4jO5RJ04/PkhGE71i1z2QGmynjwasqXC9nqx7azGs9mIbUzwxj\naA0Y0SvXJ8Ng1wfjDc3fRg0FJsChsiuOr4S6BOFV+jTcTWnK2MI=\n=Kq/7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b51ebccc28e66c1822ab22d2d178be55c6618196",
          "sha": "b51ebccc28e66c1822ab22d2d178be55c6618196",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b51ebccc28e66c1822ab22d2d178be55c6618196"
        }
      ],
      "message": "[test] mempool full in package accept",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T11:35:23Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T11:25:04Z"
      },
      "sha": "bf77fc9cb45209b9c560208c65abc94209cd7919"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDlkNWVmZjRiZWI3ZjdlODFmNDZlZTU1ZjRhOWYzY2U0NjgwM2FiMGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f",
      "tree": {
        "sha": "bcffd76a2b9ac969d82a412896c6d3fe93f57cc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcffd76a2b9ac969d82a412896c6d3fe93f57cc1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf77fc9cb45209b9c560208c65abc94209cd7919",
          "sha": "bf77fc9cb45209b9c560208c65abc94209cd7919",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/bf77fc9cb45209b9c560208c65abc94209cd7919"
        }
      ],
      "message": "[rpc] allow submitpackage to be called outside of regtest",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T12:37:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-11T15:07:34Z"
      },
      "sha": "9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVkNjA0NWE4Zjk5ZjE0OTg3OTc3ZTEzZmFhMTg2NWMzYmY1Njg5MGY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed6045a8f99f14987977e13faa1865c3bf56890f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6045a8f99f14987977e13faa1865c3bf56890f",
      "tree": {
        "sha": "374e9f9cb28e9b3ea0049eda7a025c7fe3502409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/374e9f9cb28e9b3ea0049eda7a025c7fe3502409"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f",
          "sha": "9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9d5eff4beb7f7e81f46ee55f4a9f3ce46803ab0f"
        }
      ],
      "message": "[mempool] evict everything below min relay fee in TrimToSize()\n\nAt this point it's not expected that there are any such transactions,\nexcept from reorgs and possibly when loading from mempool.dat.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T12:37:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T13:43:27Z"
      },
      "sha": "ed6045a8f99f14987977e13faa1865c3bf56890f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDI0YjUwMzUxNmM0YTBlMjZjZGFhYjg4OTkyNDI1ODJkMjc4NzNhMjg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24b503516c4a0e26cdaab8899242582d27873a28",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/24b503516c4a0e26cdaab8899242582d27873a28",
      "tree": {
        "sha": "1461f8a904932f603697f9806af5002277921543",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1461f8a904932f603697f9806af5002277921543"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed6045a8f99f14987977e13faa1865c3bf56890f",
          "sha": "ed6045a8f99f14987977e13faa1865c3bf56890f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6045a8f99f14987977e13faa1865c3bf56890f"
        }
      ],
      "message": "[test framework] return txhex from create_lots_of_big_transactions",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T12:37:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-19T10:33:54Z"
      },
      "sha": "24b503516c4a0e26cdaab8899242582d27873a28"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY1MGQzODZmMmQ0YjA1ZmNhMDMwYmU5Y2M5YWNjNTA3NTQwOWI1ZWE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/650d386f2d4b05fca030be9cc9acc5075409b5ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/650d386f2d4b05fca030be9cc9acc5075409b5ea",
      "tree": {
        "sha": "4a4eaeecbf97b262a9feb8c0bb3edd075f4c6f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a4eaeecbf97b262a9feb8c0bb3edd075f4c6f24"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24b503516c4a0e26cdaab8899242582d27873a28",
          "sha": "24b503516c4a0e26cdaab8899242582d27873a28",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/24b503516c4a0e26cdaab8899242582d27873a28"
        }
      ],
      "message": "[test] raise wallet_abandonconflict -minrelaytxfee settings\n\nTLDR This test needs to be tweaked because it currently relies on\nsuboptimal behavior in order to pass, and that behavior is changed in\nthe next commit.\n\nThe intention of the test is to set a high -minrelaytxfee\nsuch that these transactions are rejected in LoadMempool() and\nin CWallet::ResumbitWalletTransactions().\n\nHowever, while the parent transactions are below minrelaytxfee, they\neach have descendants high enough feerate to bump them past the\nminrelaytxfee (observe that the `assert_greater_than` checks fail\nif given the original amount of 0.0001). These transactions will be kept\nafter the mempool persists packages, causing the original test to fail.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T12:37:31Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-19T15:12:26Z"
      },
      "sha": "650d386f2d4b05fca030be9cc9acc5075409b5ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBhNGVjYzlkNTUyZThkMzZhOTgwYzE2ZjgyM2ViNmJiNGNiMTQ5NjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a4ecc9d552e8d36a980c16f823eb6bb4cb14966",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4ecc9d552e8d36a980c16f823eb6bb4cb14966",
      "tree": {
        "sha": "d26883e7cb4a48100716ebf0f37023f29d4dc18e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d26883e7cb4a48100716ebf0f37023f29d4dc18e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d26883e7cb4a48100716ebf0f37023f29d4dc18e\nparent 650d386f2d4b05fca030be9cc9acc5075409b5ea\nauthor glozow <gloriajzhao@gmail.com> 1674124458 +0000\ncommitter glozow <gloriajzhao@gmail.com> 1681748324 +0100\n\n[mempool] persist packages across restart\n\nHold pool.cs the entire time otherwise wallet resubmissions may call\nTrimtoSize() in between loading transactions from disk.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE8Z9f8rBYnsNBIgBFugP02+DGP7QFAmQ9cWQACgkQugP02+DG\nP7TF0xAAkj6B5O2tPQfdRpmK2wajFpYt/mvOPnOsw0oZfIDuwBxPHOV4eNic0TIM\nkyTXya8SfXqSfgHQL2C9eZ4pFArbMnXdmouBEAKSqhdNFCCzyr+yyHItkSG44byu\njRgpUplQSEbGcPuWzNtLghheT5uwfKfdeyxfCANkTddNLsZITwWK5zfyIaznND4E\ngA9MzD0z/vlT6EgKaySUH3GNFSYDvuzDR07/J1o1zgXM6HVA+QVxfkAO0dZPDh+l\nLBNiUIE32DRz0JZ2ruexlCaGtDvcBKPbwuD4UT6Pa+Ly7fO5QcNVyoOHVE9xiVwY\naQtWswwtW2RPWB/NTgx5zvTY7miOejphkdRaD7Wz05D7TV79acvMMdJF2hRw+30W\nfLLK8eljX2/2P4JnCRmvCBHRUMHl+UP/O5jKzziurRENvnjgwMiiYSSVSZDzmh8e\nb8TgwbjOQ669xOY+RP7DWgeY5Ec3s1w7dNSWP5+Eg2xNXJlj+y3N8d+20UqCMFS8\n+pyuM1BYlJLN+gXlXpLchRRD9CC5y3402Z1za/YoD5L8rhF6qL11eVTIZRwkxo2z\nMDU695aeGht+Ckjx2HLDJy9Ka9VihsDfiUpOKU8oHatFUrPpQJgoAVZaZohoTBHD\nCrKduiuJmliDR5Ux0RlL3XZkCwrJ9qm/rJa8BL+OLleDFQBVyOo=\n=x1oV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/650d386f2d4b05fca030be9cc9acc5075409b5ea",
          "sha": "650d386f2d4b05fca030be9cc9acc5075409b5ea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/650d386f2d4b05fca030be9cc9acc5075409b5ea"
        }
      ],
      "message": "[mempool] persist packages across restart\n\nHold pool.cs the entire time otherwise wallet resubmissions may call\nTrimtoSize() in between loading transactions from disk.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T16:18:44Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-19T10:34:18Z"
      },
      "sha": "0a4ecc9d552e8d36a980c16f823eb6bb4cb14966"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDEyZTQwOWZjZTJkNjFjMWQxYWQ2ZGJlY2VlOTYyYTQ4NmY3ZWU4ZWM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12e409fce2d61c1d1ad6dbecee962a486f7ee8ec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/12e409fce2d61c1d1ad6dbecee962a486f7ee8ec",
      "tree": {
        "sha": "8da0ae20167bc9283b1e7e5d4ba70a396a114384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8da0ae20167bc9283b1e7e5d4ba70a396a114384"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a4ecc9d552e8d36a980c16f823eb6bb4cb14966",
          "sha": "0a4ecc9d552e8d36a980c16f823eb6bb4cb14966",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0a4ecc9d552e8d36a980c16f823eb6bb4cb14966"
        }
      ],
      "message": "[doc] cpfp carveout is excluded in packages\n\nAdd a test to demonstrate that the testmempoolaccept error message is\nchanging in the next commit, but the behavior is otherwise the same.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-11-03T12:36:12Z"
      },
      "sha": "12e409fce2d61c1d1ad6dbecee962a486f7ee8ec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGVmNmJmMDBjODRlNTFiODc4ZDE3NzFiNzAxZDc2YTVmOGUwYjlkZGE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef6bf00c84e51b878d1771b701d76a5f8e0b9dda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6bf00c84e51b878d1771b701d76a5f8e0b9dda",
      "tree": {
        "sha": "c6113432ba035c700333b34cd650a6ab9647229c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6113432ba035c700333b34cd650a6ab9647229c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12e409fce2d61c1d1ad6dbecee962a486f7ee8ec",
          "sha": "12e409fce2d61c1d1ad6dbecee962a486f7ee8ec",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/12e409fce2d61c1d1ad6dbecee962a486f7ee8ec"
        }
      ],
      "message": "[validation] explicitly disable carveouts from ProcessNewPackage\n\nExit early - previously, a carve out could have been granted in\nPreChecks() but then nullified in PackageMempoolChecks() when\nCheckPackageLimits() is called with the default limits.\n\nThe only external behavior change is a different error message.\nPreviously, it would have given a \"package-mempool-limits\" error.\nMulti-transaction testmempoolaccept is documented as experimental.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-11-03T14:16:53Z"
      },
      "sha": "ef6bf00c84e51b878d1771b701d76a5f8e0b9dda"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGYwYTdiZjNiMDQwNzg2ZTIwMmYwYTVlNmJjYjgwOWEyMDAzZjRlYzk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9",
      "tree": {
        "sha": "7710f7fdda87cae8fd8485085c6ac38a6339a4ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7710f7fdda87cae8fd8485085c6ac38a6339a4ff"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef6bf00c84e51b878d1771b701d76a5f8e0b9dda",
          "sha": "ef6bf00c84e51b878d1771b701d76a5f8e0b9dda",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef6bf00c84e51b878d1771b701d76a5f8e0b9dda"
        }
      ],
      "message": "[validation] call AcceptSingleTransaction when only 1 package tx left\n\nAvoid calling PackageMempoolChecks() when there is only 1 transaction.\nNote to reviewers: there is a slight change in the error type returned,\nas shown in the txpackage_tests change.  When a transaction is the last\none left in the package and its fee is too low, this returns a PCKG_TX\ninstead of PCKG_POLICY. This interface is clearer;\n\"package-fee-too-low\" for 1 transaction would be a bit misleading.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-12-15T18:00:04Z"
      },
      "sha": "f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDZlNWFiZTMwZTQ4MTg0MDAyMmFkYTM2MTg4NDNhNzVkNDkwYjU2ZDA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5abe30e481840022ada3618843a75d490b56d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5abe30e481840022ada3618843a75d490b56d0",
      "tree": {
        "sha": "d645522d811642872136f944685daae464e59707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d645522d811642872136f944685daae464e59707"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9",
          "sha": "f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f0a7bf3b040786e202f0a5e6bcb809a2003f4ec9"
        }
      ],
      "message": "[doc] nVersion 3 and package rbf policies",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-04-29T23:42:18Z"
      },
      "sha": "6e5abe30e481840022ada3618843a75d490b56d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGFkN2RjY2U4MTZjNDY5NWEwZGM3MmRiMDUyZGU0MzM1ZTk4MzczNjA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad7dcce816c4695a0dc72db052de4335e9837360",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ad7dcce816c4695a0dc72db052de4335e9837360",
      "tree": {
        "sha": "aedfefc0d2b9980da9494b6e5461d113177d7ce2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aedfefc0d2b9980da9494b6e5461d113177d7ce2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e5abe30e481840022ada3618843a75d490b56d0",
          "sha": "6e5abe30e481840022ada3618843a75d490b56d0",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6e5abe30e481840022ada3618843a75d490b56d0"
        }
      ],
      "message": "[policy] policy rules for nVersion=3",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-07-05T12:14:08Z"
      },
      "sha": "ad7dcce816c4695a0dc72db052de4335e9837360"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDViMmExMTFjZDE5ZjU5MTU5MWY4OWY5ZjU4NzFkYjA0ZjBiNTg4OWQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b2a111cd19f591591f89f9f5871db04f0b5889d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2a111cd19f591591f89f9f5871db04f0b5889d",
      "tree": {
        "sha": "61509e51580723e0975b9777f4afb5a760ad0629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61509e51580723e0975b9777f4afb5a760ad0629"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad7dcce816c4695a0dc72db052de4335e9837360",
          "sha": "ad7dcce816c4695a0dc72db052de4335e9837360",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ad7dcce816c4695a0dc72db052de4335e9837360"
        }
      ],
      "message": "[policy] allow V3 transactions under certain conditions",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:58Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-07-05T13:13:21Z"
      },
      "sha": "5b2a111cd19f591591f89f9f5871db04f0b5889d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDY2YzBhOGZhZGZjYjA1ODdiZTA0NGU4Zjk4ZDRkMGVlNmZlM2U4ZDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5",
      "tree": {
        "sha": "bde3a9d70361d7e7c888fa3461a3fe591fba47c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bde3a9d70361d7e7c888fa3461a3fe591fba47c8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b2a111cd19f591591f89f9f5871db04f0b5889d",
          "sha": "5b2a111cd19f591591f89f9f5871db04f0b5889d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5b2a111cd19f591591f89f9f5871db04f0b5889d"
        }
      ],
      "message": "[test framework] parameterize version in create_self_transfer",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-08-31T15:50:09Z"
      },
      "sha": "66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI2YWUyMmM5ZmM4NDVkMDkyMTdlNmJlZDhlMzFiZWI0MTMzM2JiMDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6ae22c9fc845d09217e6bed8e31beb41333bb06",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ae22c9fc845d09217e6bed8e31beb41333bb06",
      "tree": {
        "sha": "61954a4a08f952d6cdfd6724ba5f5b27853940d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61954a4a08f952d6cdfd6724ba5f5b27853940d9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5",
          "sha": "66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/66c0a8fadfcb0587be044e8f98d4d0ee6fe3e8d5"
        }
      ],
      "message": "[functional test] v3 transaction submission",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:32:59Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-08-31T14:38:42Z"
      },
      "sha": "b6ae22c9fc845d09217e6bed8e31beb41333bb06"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1ZDJkMDMyODg0MGMwMmM5NTEyZGU3ZDdkNmIyNGNlNzBmYjQyNTI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05d2d0328840c02c9512de7d7d6b24ce70fb4252",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/05d2d0328840c02c9512de7d7d6b24ce70fb4252",
      "tree": {
        "sha": "54b1b4a5a674ad09ae64492f3e088e3afa74475f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54b1b4a5a674ad09ae64492f3e088e3afa74475f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6ae22c9fc845d09217e6bed8e31beb41333bb06",
          "sha": "b6ae22c9fc845d09217e6bed8e31beb41333bb06",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b6ae22c9fc845d09217e6bed8e31beb41333bb06"
        }
      ],
      "message": "[policy] allow individual v3 txns to be below min relay feerate\n\nAs long as they are otherwise paid for, i.e. through package CPFP.\nIf a v3 transaction loses its sponsor, we can evict them with no trouble\nbecause it will not have other descendants or ancestors to make the\nfeerate assessment more complicated.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:34:29Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T13:43:27Z"
      },
      "sha": "05d2d0328840c02c9512de7d7d6b24ce70fb4252"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGJlMzYzNTBkNTcxMmM4ZDM3MGQ5OGVkZDM2OGE3OTg0MDFmMTQ3YjM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be36350d5712c8d370d98edd368a798401f147b3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/be36350d5712c8d370d98edd368a798401f147b3",
      "tree": {
        "sha": "2d4f35b63b16aaeb873747032638adbeab8b048c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d4f35b63b16aaeb873747032638adbeab8b048c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05d2d0328840c02c9512de7d7d6b24ce70fb4252",
          "sha": "05d2d0328840c02c9512de7d7d6b24ce70fb4252",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05d2d0328840c02c9512de7d7d6b24ce70fb4252"
        }
      ],
      "message": "[refactor] make some members MemPoolAccept-wide\n\nNo change in behavior.\n\nFor single transaction acceptance, this is a simple refactor:\nWorkspace::m_all_conflicting         -> MemPoolAccept::m_all_conflicts\nWorkspace::m_replacement_transaction -> MemPoolAccept::m_rbf\nWorkspace::m_conflicting_fees        -> MemPoolAccept::m_conflicting_fees\nWorkspace::m_conflicting_size        -> MemPoolAccept::m_conflicting_size\nWorkspace::m_replaced_transactions   -> MemPoolAccept::m_replaced_transactions\n\nAnd local variables m_total_vsize and m_total_modified_fees are now\nMemPoolAccept members so they can be accessed from PackageMempoolChecks.\n\nWe want these to be package-wide variables because\n- Transactions could conflict with the same tx (just not the same\nprevout), or their conflicts could share descendants.\n- We want to compare conflicts with the package fee rather than\nindividual transaction fee.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:26Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T15:39:35Z"
      },
      "sha": "be36350d5712c8d370d98edd368a798401f147b3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGI3Y2JiNmZiYmI0NWZhMDdiMWQ1MmQwNWM4NGE2OTJmYWQ3MDI2N2Q",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7cbb6fbbb45fa07b1d52d05c84a692fad70267d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cbb6fbbb45fa07b1d52d05c84a692fad70267d",
      "tree": {
        "sha": "c4a1d437882ddc286491e35f73d046b535579340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4a1d437882ddc286491e35f73d046b535579340"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be36350d5712c8d370d98edd368a798401f147b3",
          "sha": "be36350d5712c8d370d98edd368a798401f147b3",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/be36350d5712c8d370d98edd368a798401f147b3"
        }
      ],
      "message": "[policy] check whether replacement is more incentive compatible\n\nAvoid accepting replacements that are not more incentive compatible to\nmine.  For now, as a conservative estimate, require that the minimum\nbetween the transaction's individual feerate and ancestor feerate is\nhigher than the individual feerates of directly conflicting transactions\nand the ancestor feerates of all original transactions.\n\nNote that a package/transaction's ancestor feerate is not perfectly\nrepresentative of its incentive compatibility; it may overestimate (some\nsubset of the ancestors could be included by itself if it has other\nhigh-feerate descendants or are themselves higher feerate than this\npackage/transaction). This is a conservative estimate and works for now.\n\nCo-authored-by: Suhas Daftuar <sdaftuar@chaincode.com>",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-07-05T16:32:29Z"
      },
      "sha": "b7cbb6fbbb45fa07b1d52d05c84a692fad70267d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGEyYTQyMWEzNTYwYWJlYWE0MGZlMjE5NTg3NmZlNTdhNmY0YTI1OGI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a421a3560abeaa40fe2195876fe57a6f4a258b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a421a3560abeaa40fe2195876fe57a6f4a258b",
      "tree": {
        "sha": "ba383d4f08daddcfbab0dfeefbf04144d5f1c642",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba383d4f08daddcfbab0dfeefbf04144d5f1c642"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7cbb6fbbb45fa07b1d52d05c84a692fad70267d",
          "sha": "b7cbb6fbbb45fa07b1d52d05c84a692fad70267d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cbb6fbbb45fa07b1d52d05c84a692fad70267d"
        }
      ],
      "message": "[refactor] rename entries to be more descriptive",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-11-02T15:46:40Z"
      },
      "sha": "a2a421a3560abeaa40fe2195876fe57a6f4a258b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGIzNmZhMzE2NDhkNGI0ODcwYjQ0OTE4OWQ0ZTM2YWMxNDQzODExNzY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b36fa31648d4b4870b449189d4e36ac144381176",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b36fa31648d4b4870b449189d4e36ac144381176",
      "tree": {
        "sha": "733c74649498aa040038714eab44c652ef4c4dcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733c74649498aa040038714eab44c652ef4c4dcd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a421a3560abeaa40fe2195876fe57a6f4a258b",
          "sha": "a2a421a3560abeaa40fe2195876fe57a6f4a258b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a421a3560abeaa40fe2195876fe57a6f4a258b"
        }
      ],
      "message": "[unit test] for CheckAncestorScores",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-09-28T15:38:59Z"
      },
      "sha": "b36fa31648d4b4870b449189d4e36ac144381176"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDRiYmIzYWE1YmJhZjhlZGJkZTRiMGI4YjQ0OTMwZWMzZGFkNDM5MDY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906",
      "tree": {
        "sha": "f12fdf292cf7124dd6cbc95af61a2affe554860b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f12fdf292cf7124dd6cbc95af61a2affe554860b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b36fa31648d4b4870b449189d4e36ac144381176",
          "sha": "b36fa31648d4b4870b449189d4e36ac144381176",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b36fa31648d4b4870b449189d4e36ac144381176"
        }
      ],
      "message": "[packages/policy] implement package RBF",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T17:30:00Z"
      },
      "sha": "4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGNkNzdjZWIwMjRiYmExMWI5OTZlMjMxY2NiNTQxMjg0OGU1MjU4NjY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd77ceb024bba11b996e231ccb5412848e525866",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cd77ceb024bba11b996e231ccb5412848e525866",
      "tree": {
        "sha": "735cf42072e2f0fca1df6f64dbf7e5de01a8469f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/735cf42072e2f0fca1df6f64dbf7e5de01a8469f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906",
          "sha": "4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4bbb3aa5bbaf8edbde4b0b8b44930ec3dad43906"
        }
      ],
      "message": "[doc] doc assumptions package RBF\n\nTry to prevent accidental future breakage and document some assumptions\nthat would break package RBF if changed.",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-11-28T16:48:36Z"
      },
      "sha": "cd77ceb024bba11b996e231ccb5412848e525866"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDBjMDAzMWI2NWQzNjYwMmRhMWNkNTA1MzBjNWMzNTg3NzkxMGIyOGQ",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c0031b65d36602da1cd50530c5c35877910b28d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0c0031b65d36602da1cd50530c5c35877910b28d",
      "tree": {
        "sha": "9656954ff6b2fcca229839ea11a6b71f148c0423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9656954ff6b2fcca229839ea11a6b71f148c0423"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd77ceb024bba11b996e231ccb5412848e525866",
          "sha": "cd77ceb024bba11b996e231ccb5412848e525866",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/cd77ceb024bba11b996e231ccb5412848e525866"
        }
      ],
      "message": "[test util] CreateValidMempoolTransaction version parameter, always signal bip125",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2022-11-28T16:24:50Z"
      },
      "sha": "0c0031b65d36602da1cd50530c5c35877910b28d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGMxYmQxZTFmOGU2MzVlMjgwM2UxMWU5MDJhN2QwZjk1YzZiM2ViZjk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "tree": {
        "sha": "ba9143d6620dfd3e4eabe3bac7633f8d9ec8293c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba9143d6620dfd3e4eabe3bac7633f8d9ec8293c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c0031b65d36602da1cd50530c5c35877910b28d",
          "sha": "0c0031b65d36602da1cd50530c5c35877910b28d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0c0031b65d36602da1cd50530c5c35877910b28d"
        }
      ],
      "message": "[test] package rbf",
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-04-17T17:36:27Z"
      },
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2023-01-17T13:52:44Z"
      },
      "sha": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 9027454969,
      "node_id": "HRFPE_lADOABII585I0To3zwAAAAIaFAf5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9027454969",
      "actor": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-17T17:42:02Z"
    },
    {
      "event": "unlabeled",
      "id": 9028406889,
      "node_id": "UNLE_lADOABII585I0To3zwAAAAIaIo5p",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9028406889",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-04-17T19:27:33Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 1407698195,
      "node_id": "PRR_kwDOABII585T58UT",
      "url": null,
      "actor": null,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#pullrequestreview-1407698195",
      "submitted_at": "2023-05-01T15:05:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
    },
    {
      "event": "labeled",
      "id": 9202830793,
      "node_id": "LE_lADOABII585I0To3zwAAAAIkiA3J",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/9202830793",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-09T16:36:22Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 1540509142,
      "node_id": "IC_kwDOABII585b0k3W",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540509142",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-05-09T16:36:23Z",
      "updated_at": "2023-05-09T16:36:23Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#issuecomment-1540509142",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25038"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868430869",
      "pull_request_review_id": 966801973,
      "id": 868430869,
      "node_id": "PRRC_kwDOABII584zwzQV",
      "diff_hunk": "@@ -502,7 +505,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ false,\n-                            /* m_allow_bip125_replacement */ false,\n+                            /* m_allow_bip125_replacement */ true,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reason to not turn `PackageTestAccept` as `true` too ?",
      "created_at": "2022-05-09T20:34:11Z",
      "updated_at": "2022-05-09T22:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r868430869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868430869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868495787",
      "pull_request_review_id": 966801973,
      "id": 868495787,
      "node_id": "PRRC_kwDOABII584zxDGr",
      "diff_hunk": "@@ -975,13 +1006,89 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC given that `PackageMempoolChecks` happens after package dedup there should not be remaining already-in-mempool transactions at that stage in `txns` ? So no descendants that could be `to-be-replaced mempool entries` to subtract or are you thinking to something else ? ",
      "created_at": "2022-05-09T21:42:14Z",
      "updated_at": "2022-05-09T22:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r868495787",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868495787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868503310",
      "pull_request_review_id": 966801973,
      "id": 868503310,
      "node_id": "PRRC_kwDOABII584zxE8O",
      "diff_hunk": "@@ -928,6 +952,9 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n \n+    m_rbf = ws.m_conflicts.size() > 0;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if this check isn't already redundant given that calling `ReplacementChecks` in `AcceptSingleTransaction` is dependent on `m_rbf=true` or unless there is another code path where it makes sense ?",
      "created_at": "2022-05-09T21:50:22Z",
      "updated_at": "2022-05-09T22:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r868503310",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868503310"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868529657",
      "pull_request_review_id": 966801973,
      "id": 868529657,
      "node_id": "PRRC_kwDOABII584zxLX5",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.\n+\n+4. The package fee after deduplication pays an absolute fee of at least the sum paid by the\n+   original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 45,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Depending on the design of p2p packages, we might relay the \"full-non-dedup\" version of the package as our peers might not have the same mempool composition. So the additional fees might have to be paid on the non-dedup package. I don't think we have to settle the question now though we might have to rework package-RBF in function of p2p design ?",
      "created_at": "2022-05-09T22:20:36Z",
      "updated_at": "2022-05-09T22:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r868529657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868529657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868533379",
      "pull_request_review_id": 966801973,
      "id": 868533379,
      "node_id": "PRRC_kwDOABII584zxMSD",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.\n+\n+4. The package fee after deduplication pays an absolute fee of at least the sum paid by the\n+   original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth after deduplication at or\n+   above the rate set by the node's incremental relay feerate. For example, if the incremental relay\n+   feerate is 1 satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the\n+   package fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 51,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it could be a limitation for second-layer package issuers, where a child-with-parents package aims to replace more than 5 LN commitment transactions at the same time. A counterparty could extend the 5 non-related commitment transactions descendants until reaching max in-mempool limits, thus interfering with their potential package-RBF.\r\n\r\nAm I correct ? That said, I remember we've already said that child-with-parents to replace multiple LN commitment transactions open the door to malicious interferences.",
      "created_at": "2022-05-09T22:25:01Z",
      "updated_at": "2022-05-09T22:25:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r868533379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/868533379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869137839",
      "pull_request_review_id": 967623639,
      "id": 869137839,
      "node_id": "PRRC_kwDOABII584zzf2v",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 34,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This rule startled me a bit at first, it may be worth mentioning that if you want to update the package's child, you should do a normal RBF of just that child.\r\n\r\nWhat you mean is that package-rbf applies for the case where we want for example to replace `{commitTxAlice, anchorAlice}` by `{commitTxBob, anchorBob}` where `commitTxAlice` and `commitTxBob` conflict, but we cannot use package-rbf to replace `{commitTxAlice, anchorAlice1}` by `{commitTxAlice, anchorAlice2}` where `anchorAlice2` pays more fees than `anchorAlice1`. In that case we should submit `anchorAlice2` alone and it will go through the usual RBF rules. Is that correct?\r\n\r\nAlso you don't want to mix up package-rbf and normal rbf, so a child tx cannot create conflicts \"outside of the package\" IIUC.",
      "created_at": "2022-05-10T11:46:25Z",
      "updated_at": "2022-05-10T12:14:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r869137839",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869137839"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869152001",
      "pull_request_review_id": 967623639,
      "id": 869152001,
      "node_id": "PRRC_kwDOABII584zzjUB",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My head hurts :laughing: \r\n\r\nI'm not 100% sure I'm understanding this rule correctly, can you let me know if the following example makes sense?\r\n\r\nLet's imagine we have `{commitTxAlice, anchorTxAlice}` in the mempool that we want to replace.\r\nWhat we really want to do is to replace `commitTxAlice` by `commitTxBob` (the child is just a tool to achieve that).\r\nWe ask `bitcoind` to `fundrawtransaction` to ensure our `anchorTxBob` adds enough funds.\r\n`bitcoind` adds an unconfirmed (but safe) wallet input:\r\n\r\n```\r\n+-------------+\r\n| commitTxBob |---------+\r\n+-------------+         |      +-------------+\r\n                        |      |             |\r\n+------------------+    +----->| anchorTxBob |\r\n| previousWalletTx |---------->|             |\r\n+------------------+           +-------------+\r\n```\r\n\r\nIf we include `previousWalletTx` in the package, this package-rbf would work, right?\r\nBut if we don't include `previousWalletTx` in the package, this would be rejected?\r\n\r\nBut what if `previousWalletTx` itself has an unconfirmed parent?\r\nWe cannot include this grand-parent in the package (since packages are only parents-with-single-child).\r\n\r\nThis isn't directly bringing an unconfirmed input, but it is indirectly bringing one. Is that ok? If that's ok, why wouldn't it be ok to just allow adding new unconfirmed inputs in the first place?",
      "created_at": "2022-05-10T12:03:32Z",
      "updated_at": "2022-05-10T12:14:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r869152001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869152001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869160432",
      "pull_request_review_id": 967623639,
      "id": 869160432,
      "node_id": "PRRC_kwDOABII584zzlXw",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.\n+\n+4. The package fee after deduplication pays an absolute fee of at least the sum paid by the\n+   original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth after deduplication at or\n+   above the rate set by the node's incremental relay feerate. For example, if the incremental relay\n+   feerate is 1 satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the\n+   package fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 51,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 868533379,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this issue can unfortunately arise even when you're replacing a single LN commitment transaction.\r\nImagine that you're trying to replace `{commitTxAlice, anchorTxAlice}` but Alice has created `anchorTxAlice` to have 100 outputs and broadcast one child tx per output, you're already hitting the 100 transactions limit...\r\n\r\nI believe that the only thing that can save Bob here is to broadcast `{commitTxAlice, anchorTxBob}` by relying on the CPFP carve-out rule to get Alice's commitment to confirm. But in order to do that, Bob needs to somehow get the signed `commitTxAlice` (which never appeared in his mempool since his mempool contains `commitTxBob`).\r\n\r\nSo this rule is an issue for L2 protocols, but it is also a protection against high mempool churn, so it's hard to draw the line.",
      "created_at": "2022-05-10T12:12:45Z",
      "updated_at": "2022-05-10T12:14:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r869160432",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/869160432"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873782940",
      "pull_request_review_id": 974037959,
      "id": 873782940,
      "node_id": "PRRC_kwDOABII5840FN6c",
      "diff_hunk": "@@ -502,7 +505,7 @@ class MemPoolAccept\n                             /* m_bypass_limits */ false,\n                             /* m_coins_to_uncache */ coins_to_uncache,\n                             /* m_test_accept */ false,\n-                            /* m_allow_bip125_replacement */ false,\n+                            /* m_allow_bip125_replacement */ true,",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 868430869,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This RBF policy is essentially treating the package as \"one big transaction,\" which works because everything is in the ancestor set of the child. PackageTestAccept doesn't impose any topology restrictions - it even allows unrelated transactions to be submitted as a group. So it wouldn't make sense to use each other's fees.",
      "created_at": "2022-05-16T14:16:28Z",
      "updated_at": "2022-05-16T14:36:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r873782940",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873782940"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 515,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873799952",
      "pull_request_review_id": 974037959,
      "id": 873799952,
      "node_id": "PRRC_kwDOABII5840FSEQ",
      "diff_hunk": "@@ -975,13 +1006,89 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 221,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 868495787,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I mean a situation like this:\r\n\r\n<img width=\"673\" alt=\"image\" src=\"https://user-images.githubusercontent.com/25183001/168615825-6251d4d6-97b6-45cf-ada7-91c6a1d9ce45.png\">\r\n\r\n\r\n{A, B, C} are in the mempool, and A is already at the descendant limit (101KvB). {X, Y, Z} is a package where X conflicts with B and will replace {B, C}. However, when we run descendant limit checks, it will look like A's descendants include {B, C, X, Z} and reject it. But actually A's descendants will only include {X, Z} after the replacement.",
      "created_at": "2022-05-16T14:31:01Z",
      "updated_at": "2022-05-16T14:36:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r873799952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873799952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1028,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873809115",
      "pull_request_review_id": 974075624,
      "id": 873809115,
      "node_id": "PRRC_kwDOABII5840FUTb",
      "diff_hunk": "@@ -928,6 +952,9 @@ bool MemPoolAccept::ReplacementChecks(Workspace& ws)\n     const uint256& hash = ws.m_hash;\n     TxValidationState& state = ws.m_state;\n \n+    m_rbf = ws.m_conflicts.size() > 0;",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 868503310,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah good point, I forgot I had moved this to the bottom of PreChecks.",
      "created_at": "2022-05-16T14:38:52Z",
      "updated_at": "2022-05-16T14:38:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r873809115",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873809115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 955,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873820419",
      "pull_request_review_id": 974093538,
      "id": 873820419,
      "node_id": "PRRC_kwDOABII5840FXED",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.\n+\n+4. The package fee after deduplication pays an absolute fee of at least the sum paid by the\n+   original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth after deduplication at or\n+   above the rate set by the node's incremental relay feerate. For example, if the incremental relay\n+   feerate is 1 satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the\n+   package fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 51,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 868533379,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think it could be a limitation for second-layer package issuers, where a child-with-parents package aims to replace more than 5 LN commitment transactions at the same time. A counterparty could extend the 5 non-related commitment transactions descendants until reaching max in-mempool limits, thus interfering with their potential package-RBF.\r\n\r\nYeah, batching multiple commitment transaction replacements isn't very safe. That's why we have the \"Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers should take caution if utilizing multi-parent packages.\" in the [doc](https://github.com/bitcoin/bitcoin/blob/master/doc/policy/packages.md#package-mempool-acceptance-rules).\r\n\r\n> I believe this issue can unfortunately arise even when you're replacing a single LN commitment transaction.\r\n\r\nI don't think this scenario is possible with our current mempool policy. With our descendant limit at 25,  `anchorTxAlice` wouldn't be able to have 100 children.",
      "created_at": "2022-05-16T14:47:38Z",
      "updated_at": "2022-05-16T14:47:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r873820419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873820419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873854502",
      "pull_request_review_id": 974143032,
      "id": 873854502,
      "node_id": "PRRC_kwDOABII5840FfYm",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 34,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 869137839,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes you're right. Thanks for the feedback and clear explanation, adding some similar language to the doc!",
      "created_at": "2022-05-16T15:17:45Z",
      "updated_at": "2022-05-16T15:17:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r873854502",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/873854502"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 126,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/875569716",
      "pull_request_review_id": 976493853,
      "id": 875569716,
      "node_id": "PRRC_kwDOABII5840MCI0",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 869152001,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Gotcha, thanks for the confirmation, we'll deal with that limitation then, it's already a good start. And hopefully we'll eventually figure out better RBF rules for both single txs and packages!",
      "created_at": "2022-05-18T07:41:31Z",
      "updated_at": "2022-05-18T07:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r875569716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/875569716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878468366",
      "pull_request_review_id": 980563664,
      "id": 878468366,
      "node_id": "PRRC_kwDOABII5840XF0O",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 869152001,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(Sorry for my earlier comment, I was confused)\r\n\r\n> If we include previousWalletTx in the package, this package-rbf would work, right?\r\n\r\nYes. It's fine because it's one of the direct parents of `anchorTxBob`.\r\n\r\n> But if we don't include previousWalletTx in the package, this would be rejected?\r\n\r\nIf you mean `anchorTxBob` now only has 1 unconfirmed input, `commitTxBob`, actually this would be accepted.\r\n\r\nIf you mean that `previousWalletTx` was submitted ahead of time, that should still be okay because the code will remember to exempt `previousWalletTx` from the \"no new unconfirmed\" rule.\r\n\r\n> But what if previousWalletTx itself has an unconfirmed parent?\r\n\r\nBased on this rule, if `previousWalletTx` has another unconfirmed parent, this would be rejected.",
      "created_at": "2022-05-20T19:00:15Z",
      "updated_at": "2022-05-20T19:00:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r878468366",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/878468366"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/880098512",
      "pull_request_review_id": 982646813,
      "id": 880098512,
      "node_id": "PRRC_kwDOABII5840dTzQ",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 869152001,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for the clarification! I'll create extensive tests of this behavior and will report back.",
      "created_at": "2022-05-24T06:18:49Z",
      "updated_at": "2022-05-24T06:18:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r880098512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/880098512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889005663",
      "pull_request_review_id": 995003793,
      "id": 889005663,
      "node_id": "PRRC_kwDOABII5840_SZf",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Since we are introducing a new form of RBF that doesn't currently exist, now might be the best time to at least improve the BIP 125 rules to be incentive compatible in all situations (though this comes at the cost of making replacements potentially more expensive).\r\n\r\nIn particular what I have in mind is that we require the ancestor feerate of the child transaction to be higher than the actual feerate of all transactions that would be evicted. This is conservative but I think would ensure that we don't have any situations where there are transactions being replaced that might appear in the next block, while the new transactions do not.\r\n\r\nWould this be too conservative for the use cases that we have in mind?",
      "created_at": "2022-06-03T14:36:20Z",
      "updated_at": "2022-06-03T14:36:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r889005663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889005663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889037679",
      "pull_request_review_id": 995049541,
      "id": 889037679,
      "node_id": "PRRC_kwDOABII5840_aNv",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you elaborate with an example? It's possible I don't have the same mental mapping to terms and do not understand the scenario.",
      "created_at": "2022-06-03T15:11:26Z",
      "updated_at": "2022-06-03T15:11:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r889037679",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889037679"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889064935",
      "pull_request_review_id": 995088589,
      "id": 889064935,
      "node_id": "PRRC_kwDOABII5840_g3n",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure -- consider the case where you have a transaction A(100vb, 1sat/vb) and child B (100vb, 10sat/vb) in the mempool.  Total fees = 1100 sat.\r\n\r\nA package comes in with parent A'(100vb, 1sat/vb) and child B'(1000vb, 2.5sat/vb).  Total package fees = 2600 sat.\r\n\r\nUnder the rules described here, package (A', B') could replace (A, B) in the mempool, because total fees are paid for and there's enough left over fee to pay the incremental relay fee of the new package (1500 sat/1100 vb). Also the package feerate is higher than that of the direct conflicts[1].\r\n\r\nThe deficiency in the logic is that we're not looking at the feerates of the transactions that would be evicted -- even though their absolute fee is being paid, their feerate could be even higher than the transactions that would replace them.  Calculating the effective feerate that such a transaction would have in our mining code is tricky (because a sibling could pay for an ancestor, it's not quite right to just consider ancestor feerate), but using its feerate is a conservative check here -- any descendant that is paying for its confirmation would be caught in this logic, and its (higher) feerate considered if necessary.\r\n\r\nFor evaluating the mining suitability of the new transactions coming in, I think we can just look at the ancestor feerate of the package, which is a lower bound on the attractiveness of the new transactions.  (I think this would also allow us to relax the rule against new unconfirmed inputs.)\r\n\r\n[1] In looking at this example, I noticed that BIP 125 as drafted seems to misstate an important check we perform in our current RBF policy, namely that we compare the feerate of a new transaction coming in to the feerate of the existing transactions that it directly conflicts with.  (Without this check, a small high fee transaction could be replaced by a large low fee transaction!). From my first glance at the code in this PR, it looks like the code itself does a similar check for packages (comparing the package feerate to the feerate of the direct conflicts) so that is good at least, but the description of the logic in the documentation should point out that there is some feerate check happening as well.\r\n\r\n",
      "created_at": "2022-06-03T15:44:22Z",
      "updated_at": "2022-06-03T16:01:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r889064935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889064935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889076418",
      "pull_request_review_id": 995104339,
      "id": 889076418,
      "node_id": "PRRC_kwDOABII5840_jrC",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's ancient lore by now, but I'm not sure it's a \"mis-statement\" or just incentive incompatible stuff no one implements(becase feerate check is cheap). I agree with your reading of current texts either way and agree pulling that into the text is the right thing to do. ",
      "created_at": "2022-06-03T15:58:32Z",
      "updated_at": "2022-06-03T15:59:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r889076418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/889076418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/898197226",
      "pull_request_review_id": 1007815154,
      "id": 898197226,
      "node_id": "PRRC_kwDOABII5841iWbq",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> require the ancestor feerate of the child transaction to be higher than the actual feerate of all transactions that would be evicted. This is conservative but I think would ensure that we don't have any situations where there are transactions being replaced that might appear in the next block, while the new transactions do not.\r\n\r\nI think this is a sensible addition. I cannot think of any easy attacks since it's only the directly conflicting transactions and not their descendants (i.e. I don't have the concerns stated in https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-1004774370).\r\n\r\nBtw, don't we want min(package feerate, child ancestor feerate)?\r\n\r\nIn pseudocode for a child-with-unconfirmed-parents package: \r\n```\r\nfor each tx in directly_conflicting_transactions:\r\n    if min(package_feerate, child.ancestor_feerate) <= tx.individual_feerate\r\n        fail\r\n```\r\n\r\nWith this, do you think it would be acceptable to remove the \"no new unconfirmed inputs\" rule in package RBF?\r\n\r\n\r\n> we compare the feerate of a new transaction coming in to the feerate of the existing transactions that it directly conflicts with\r\n\r\nRight, this wasn't in BIP 125. I also misinterpreted that part of the code to be part of the other fee-related rules and just a \"fail fast\" piece of logic, and didn't include it in # #23711 either (gah!). Just opened #25382 to add test coverage for it in isolation + add it to doc/policy/replacements.md",
      "created_at": "2022-06-15T16:38:13Z",
      "updated_at": "2022-06-15T16:38:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r898197226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/898197226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901614084",
      "pull_request_review_id": 1012200644,
      "id": 901614084,
      "node_id": "PRRC_kwDOABII5841vYoE",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> it's only the directly conflicting transactions and not their descendants\r\n\r\nCould you clarify that? I'm not sure whether @sdaftuar's example contradicts this claim or not.\r\n\r\nLet's consider a mempool containing transaction A (1000vb, 1sat/vb), child B (1000vb, 10sat/vb) and grand-child C (100vb, 100sat/vb).\r\n\r\nIf we want to replace this with a package containing transaction A' (1000vb, 1sat/vb) and child B' (1000vb, 20sat/vb), would that work? Or would we be forced to match the 100 sat/vb of grand-child C (since @sdaftuar says the ancestor feerate of that package must be higher than the _actual_ feerate of _all_ transactions that would be evicted)? If so, that would be an issue, an attacker could always put a low-fee high-feerate descendant to make it very expensive to replace the first transaction in the chain, can't they?\r\n\r\n",
      "created_at": "2022-06-20T12:34:46Z",
      "updated_at": "2022-06-20T12:49:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r901614084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/901614084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902725385",
      "pull_request_review_id": 1013757208,
      "id": 902725385,
      "node_id": "PRRC_kwDOABII5841zn8J",
      "diff_hunk": "@@ -117,3 +118,30 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package, including those that do not directly conflict with any mempool\n+   transactions, only include an unconfirmed input if that input was included in one of the directly\n+   conflicting transactions or is from another transaction in the package.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "abef97a6945df9f98d2c3a67bc2b1cbf0225fdbf",
      "in_reply_to_id": 869152001,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's looking good with the current state of the PR, I am able to include new unconfirmed inputs that themselves have an unconfirmed parent as shown by [this test](https://gist.github.com/t-bast/7c553e61ff2bee3720ff4f7db04cc1b3#batching-commitment-fee-bump) :+1: ",
      "created_at": "2022-06-21T14:53:12Z",
      "updated_at": "2022-06-21T14:53:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r902725385",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902725385"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 130,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902757779",
      "pull_request_review_id": 1013804318,
      "id": 902757779,
      "node_id": "PRRC_kwDOABII5841zv2T",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> > require the ancestor feerate of the child transaction to be higher than the actual feerate of all transactions that would be evicted. This is conservative but I think would ensure that we don't have any situations where there are transactions being replaced that might appear in the next block, while the new transactions do not.\r\n> \r\n> I think this is a sensible addition. I cannot think of any easy attacks since it's only the directly conflicting transactions and not their descendants (i.e. I don't have the concerns stated in [#23121 (comment)](https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-1004774370)).\r\n\r\nAh, in writing this I overlooked what you had written up in that comment and forgot about that concern.  When I commented before I did indeed mean to suggest that we'd compare our estimated mining score of the new child transaction (`min(package feerate, ancestor feerate)` as you say) with the actual feerate of all the transactions that would be evicted, and not just the direct conflicts -- if we only compare to the feerate of direct conflicts, then I believe it is still possible for a transaction that would be included in the next block to be replaced by a transaction that will confirm much later.\r\n\r\nHowever now you have reminded me of the other concern, which is that a high actual feerate (but low ancestor feerate) transaction could be used to pin a package and make it difficult to evict.  I'm not sure what to do about this!  \r\n\r\nPerhaps a simple, good enough approach might be to require that the child transaction's score is better than the ancestor feerate of all the transactions that would be evicted, and the actual feerates of the direct conflicts?  I just think we should do something to ensure that a new transaction package isn't strictly worse than something that would be evicted.  We'd still be missing the case where something being evicted has a lower ancestor score than its actual mining score because of an unrelated transaction that is paying for a low feerate parent, but maybe that is an edge case that we can overlook (especially since the total fees in the mempool are still going up and the first order approximation of mining desirability is also going up).  \r\n\r\nI was trying to think about whether this approach might be attackable in some way to either muck with fee estimation or attack someone's mempool with low quality transactions, but I need to give it more thought.\r\n\r\nAn alternate approach to this problem might be to define some new (opt in) relay policy that limits the scope of descendant transactions in some way, and then only implement a package RBF policy that would interact with transactions that meet that limited criteria.  That might be a good direction to go if our broader attempts at this problem result in behavior that's not incentive compatible..?\r\n",
      "created_at": "2022-06-21T15:20:47Z",
      "updated_at": "2022-06-21T15:20:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r902757779",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/902757779"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903654520",
      "pull_request_review_id": 1015048923,
      "id": 903654520,
      "node_id": "PRRC_kwDOABII58413Kx4",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Perhaps a simple, good enough approach might be to require that the child transaction's score is better than the ancestor feerate of all the transactions that would be evicted, and the actual feerates of the direct conflicts?\r\n\r\nTo my understanding of this dual-criteria approach (better ancestor score than the set of evicted transactions and better feerate of the direct conflicts) I'm not sure it's robust against pinning attackers.\r\n\r\nLet's say you have a mempool containing parent A (1000vb, 1 sat/vb), parent B (1000vb, 2 sat/vb) and child C (100vb, 20 sat/vb). You would like to replace C with newer transaction C' (100vb, 10 sat/vb) spending parent A and parent D (1000vb, 20 sat/vb). While the ancestor score of C' is better than C, the feerate is far less compelling and it should be rejected by the mempool. However, the low-ancestor score child C should not be mined for a while and the pin succeeds, if this scenario is correct.\r\n\r\n> An alternate approach to this problem might be to define some new (opt in) relay policy that limits the scope of descendant transactions in some way, and then only implement a package RBF policy that would interact with transactions that meet that limited criteria.\r\n\r\nI don't know if any opt-in approach limiting the size of the package (both ancestors/descendants) is compatible with miners incentives. I think a pinning attacker would be always able to attach an ancestor beyond the limit downgrading the high-feerate replacement candidate ancestor score.\r\n\r\nI'm not sure if we have considered other scoring approach like best-ancestor-score of the latest generation of package transactions. I.e, if you have parent A, parent B and child C and grandchild D, and you would like to replace with new package parent A, parent E and child C' you evaluate ancestor score of C' against grandchild D. I think it could be a correct answer to the miner viewpoint \"Which competing chain of transactions is the most interesting to include ?\". Though I don't know if it's fully incentive compatible.",
      "created_at": "2022-06-22T12:00:25Z",
      "updated_at": "2022-06-22T12:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r903654520",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/903654520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/907576864",
      "pull_request_review_id": 1020463621,
      "id": 907576864,
      "node_id": "PRRC_kwDOABII5842GIYg",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  When I commented before I did indeed mean to suggest that we'd compare our estimated mining score of the new child ...\r\n> However now you have reminded me of the other concern, which is that a high actual feerate (but low ancestor feerate) transaction could be used to pin a package and make it difficult to evict. I'm not sure what to do about this!\r\n\r\nMy bad about misunderstanding your original suggestion! Yes, this is my concern with it and I'm glad you agree.\r\n\r\n> Perhaps a simple, good enough approach might be to require that the child transaction's score is better than the ancestor feerate of all the transactions that would be evicted, and the actual feerates of the direct conflicts?\r\n\r\nI think this would be fine, definitely an improvement upon our current logic. I can't really think of a strong attack, will think about it more.\r\n\r\n> Let's say you have a mempool containing parent A ...\r\n> While the ancestor score of C' is better than C, the feerate is far less compelling and it should be rejected by the mempool.\r\n\r\nIIUC since we use the minimum of ancestor feerate and individual feerate, this example doesn't break it, since we'd use `C'`'s individual feerate of 10sat/vB to compare to `C`'s individual feerate of 20sat/vB.\r\n\r\nThe natural \"attack\" scenario might be:\r\nA counterparty broadcasts their tx A (which we'll want to replace). They also broadcast an unrelated high-fee tx B (50sat/vB), and a child C which spends from A and B. Since C spends from B, it has a high ancestor feerate (even though they wouldn't be mined together), and is thus harder to replace. But since B is high feerate, it will be mined soon, so we're probably fine.\r\n\r\n> An alternate approach to this problem might be to define some new (opt in) relay policy that limits the scope of descendant transactions in some way, and then only implement a package RBF policy that would interact with transactions that meet that limited criteria. That might be a good direction to go if our broader attempts at this problem result in behavior that's not incentive compatible..?\r\n\r\nI'm now pretty convinced that opt-in shrinking ancestor/descendant limits is the way to go (ping @instagibbs who had ideas about this being necessary in the future). Maybe we start allowing nVersion=3 (or whatever signal we decide) and it doubles as a signal for package RBF and stricter limits (and BIP 125 signaling would not be used for package RBF).\r\n\r\nA few questions:\r\n\r\n- Is it possible to have single transaction limits as well (e.g. a single transaction cannot be more than 10KvB)? If so, that seems simpler than restricting descendants based on the size of the original transaction. Or would that be a bad idea, since it would also imply fewer possible in-flight HTLCs?\r\n- In this policy, I think we would want to require \"any tx spending from an unconfirmed nVersion=3 tx must also be nVersion=3?\" And if a nVersion=3 transaction has ancestors that aren't nVersion=3, we'd use the stricter limits? Following that, I guess we would also need \"any tx replacing an nVersion=3 tx must also be nVersion=3?\"\r\n- Assuming we can figure out something sensible, it seems better to have both ancestor and descendant limits? Adding descendant limits resolves the \"you must pay for all conflicts\" type of pinning. But adding an ancestor limit could be beneficial in resolving the \"create a replacement tx with a giant ancestor\" type pinning.",
      "created_at": "2022-06-27T16:30:42Z",
      "updated_at": "2022-06-27T16:30:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r907576864",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/907576864"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/907628486",
      "pull_request_review_id": 1020539586,
      "id": 907628486,
      "node_id": "PRRC_kwDOABII5842GU_G",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've posted this privately in a few places, but here's a likely incomplete discussion of the opt-in limit reduction discussion, aimed at LN/eltoo problems, but by no means limited to them: https://gist.github.com/instagibbs/b3095752d6289ab52166c04df55c1c19\r\n\r\n\"complete package\" limits seem to be inherent to any usable solution",
      "created_at": "2022-06-27T17:29:45Z",
      "updated_at": "2022-06-27T17:29:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r907628486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/907628486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908996095",
      "pull_request_review_id": 1022474615,
      "id": 908996095,
      "node_id": "PRRC_kwDOABII5842Li3_",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Assuming we can figure out something sensible, it seems better to have both ancestor and descendant limits? Adding descendant limits resolves the \"you must pay for all conflicts\" type of pinning. But adding an ancestor limit could be beneficial in resolving the \"create a replacement tx with a giant ancestor\" type pinning.\r\n\r\nYeah I was thinking in this direction as well.  I wonder if we could find some super minimal use case, like a 2-transaction package replacing another 2-transaction package, and just implement that to start.  I think the rough idea would be:\r\n- some opt-in flag (eg nVersion=3, or anything else) indicates that a transaction can't have more than 1 in-mempool descendant with no more than X vbytes of total size.  Any descendant is also not allowed to have more than 1 ancestor.\r\n- When a 1-child, 1-parent package comes in, if it conflicts with at most 1 opt-in package, allow for RBF semantics along the lines of what we're discussing. In this case, I think we would require the package feerate to be greater than the ancestor feerates of both transactions that would be replaced (along with the total fee check, and the incremental relay fee check).\r\n\r\nWould there be value to any layer 2 projects if something this minimal were to be implemented?  ",
      "created_at": "2022-06-28T21:37:48Z",
      "updated_at": "2022-06-28T21:37:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r908996095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/908996095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909245000",
      "pull_request_review_id": 1022798326,
      "id": 909245000,
      "node_id": "PRRC_kwDOABII5842MfpI",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would be very valuable for lightning. @instagibbs has explored that space recently.\r\n\r\nA single descendant is too limiting though: in the lightning case, each participant has its own anchor output, so we need to allow 2 descendants if we apply that rule to the commitment transaction.",
      "created_at": "2022-06-29T06:30:29Z",
      "updated_at": "2022-06-29T06:30:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r909245000",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909245000"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909507429",
      "pull_request_review_id": 1023167805,
      "id": 909507429,
      "node_id": "PRRC_kwDOABII5842Nftl",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [1] In looking at this example, I noticed that BIP 125 as drafted seems to misstate an important check we perform in our current RBF policy, namely that we compare the feerate of a new transaction coming in to the feerate of the existing transactions that it directly conflicts with.\r\n\r\nPerhaps we should aim for a new rbf bip that describes bitcoin core's actual policy for both rbf of single txs and packages of txs, and document that we implement the new bip, and not 125?",
      "created_at": "2022-06-29T11:18:15Z",
      "updated_at": "2022-06-29T11:18:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r909507429",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909507429"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909641486",
      "pull_request_review_id": 1023374053,
      "id": 909641486,
      "node_id": "PRRC_kwDOABII5842OAcO",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To recap my thoughts:\r\n\r\n0) I really think this direction is somewhere we need to go. The fact that in my sketches I can *get rid of carveout*, and naively support N-party contracts speaks to me that we're on the right path. The fact it makes simple systems like batched payouts potentially more robust is also a win.\r\n\r\n1) I am 99% sure we want to limit *entire* package limits to make rule#3 pinning not a kill shot for replacement replacement\r\n\r\n2) @t-bast  Ephemeral dust, or dust values that are immediately spent within the package, enable LN and other systems to switch over to a single anchor output, obviating the requirement for carveout rules, and would fit within the one-parent-one-child pattern.\r\n\r\nWe could expand this to two direct children limit, and preserve the carveout to make sure currently deployed systems get benefits, assuming it's not otherwise a DoS/incentive compatible issue\r\n\r\n3) Another nice-to-have would be forced signaling of replacability of the child tx, since the single-anchor spend is mostly freeform. We can work around this via \"0 CSV OP_1ADD\" scriptpubkey which forces RBF signaling, but something to consider. Full RBF solves this longer term as well.",
      "created_at": "2022-06-29T13:34:33Z",
      "updated_at": "2022-06-29T13:34:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r909641486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909641486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909654053",
      "pull_request_review_id": 1023391629,
      "id": 909654053,
      "node_id": "PRRC_kwDOABII5842ODgl",
      "diff_hunk": "@@ -117,3 +118,36 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+Child-with-unconfirmed-parents packages may replace mempool transactions under the following conditions:\n+\n+1. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+2. The directly conflicting transactions all signal replaceability explicitly.\n+\n+3. All transactions in the package only include an unconfirmed input if that input was included in\n+   one of the directly conflicting transactions or is from another transaction in the package. This\n+   rule applies to the transactions that do not directly conflict with any mempool transactions.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+\n+5. The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 56,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "da7cc60fb59f8cd366312af7bc6f3b7fe4f5c82a",
      "in_reply_to_id": 889005663,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> @t-bast Ephemeral dust, or dust values that are immediately spent within the package, enable LN and other systems to switch over to a single anchor output, obviating the requirement for carveout rules, and would fit within the one-parent-one-child pattern.\r\n\r\n:100: \r\n\r\n> We could expand this to two direct children limit, and preserve the carveout to make sure currently deployed systems get benefits, assuming it's not otherwise a DoS/incentive compatible issue\r\n\r\nDon't bother if it's only for lightning, since we'll need a (small) change on the commitment transaction format to benefit from it, we might as well directly switch to a single anchor output.",
      "created_at": "2022-06-29T13:44:39Z",
      "updated_at": "2022-06-29T13:44:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r909654053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/909654053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924626968",
      "pull_request_review_id": 1043617508,
      "id": 924626968,
      "node_id": "PRRC_kwDOABII5843HLAY",
      "diff_hunk": "@@ -117,3 +118,63 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. The package is child-with-parents.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages.\n+\n+However, allowing replacement for all ancestor packages also might not make sense due to the\n+increased complexity.\n+\n+2. At least one of the following signaling conditions is met:\n+\n+    1a. All of the directly conflicting transactions signal BIP125 replaceability explicitly.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 44,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "All of the directly conflicting transactions already in mempool?",
      "created_at": "2022-07-19T15:10:14Z",
      "updated_at": "2022-07-19T15:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924626968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924626968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924636307",
      "pull_request_review_id": 1043617508,
      "id": 924636307,
      "node_id": "PRRC_kwDOABII5843HNST",
      "diff_hunk": "@@ -117,3 +118,63 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. The package is child-with-parents.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages.\n+\n+However, allowing replacement for all ancestor packages also might not make sense due to the\n+increased complexity.\n+\n+2. At least one of the following signaling conditions is met:\n+\n+    1a. All of the directly conflicting transactions signal BIP125 replaceability explicitly.\n+\n+        *Rationale*: Any transaction that is replaceable without package RBF should still be\n+        replaceable.\n+\n+    1b. All directly conflicting transactions have `nVersion=3` and each package transaction that\n+        conflicts with a mempool transaction also has `nVersion=3`.\n+\n+        *Rationale*: This helps preserve the mempool policy that any transaction spending an\n+        unconfirmed `nVersion=3` transaction must also have `nVersion=3`. Otherwise, the child of a\n+        `nVersion=3` transaction could be replaced by a non-`nVersion=3` transaction, and thus there\n+        would be an `nVersion=3` transaction in the mempool with a non-`nVersion=3` child.\n+\n+        *Rationale*: Since V3 is inherited, this form of RBF signaling is implicitly inherited. That is,\n+        while a V3 transaction is unconfirmed, any descendant(s) accepted to the mempool must also be\n+        V3 and are thus also replaceable.\n+\n+3. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+4. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+5. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual\n+transactions](./mempool-replacements.md), treating the package (after deduplication) as one\n+composite transaction. This works because all of the transactions in a\n+child-with-unconfirmed-parents package are in the ancestor set of the child transaction.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 88,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "replaced",
      "created_at": "2022-07-19T15:15:33Z",
      "updated_at": "2022-07-19T15:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924636307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924636307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924649289",
      "pull_request_review_id": 1043617508,
      "id": 924649289,
      "node_id": "PRRC_kwDOABII5843HQdJ",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this falls short in that the parent V3 transaction can be just south of 101kvB, even in ANYONECANPAY and SIGHASH_SINGLE like scenarios where additional inputs cannot be excluded by the presigning parties.\r\n\r\nIn imprecise language, this is what I expect to be required to solve it: \"When evaluating a V3 transaction, if its total mempool package size after entry into the mempool would exceed 4000 virtual bytes, it is rejected.\"",
      "created_at": "2022-07-19T15:24:30Z",
      "updated_at": "2022-07-19T15:27:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924649289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924649289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924672736",
      "pull_request_review_id": 1043673914,
      "id": 924672736,
      "node_id": "PRRC_kwDOABII5843HWLg",
      "diff_hunk": "@@ -117,3 +118,63 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. The package is child-with-parents.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages.\n+\n+However, allowing replacement for all ancestor packages also might not make sense due to the\n+increased complexity.\n+\n+2. At least one of the following signaling conditions is met:\n+\n+    1a. All of the directly conflicting transactions signal BIP125 replaceability explicitly.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 44,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924626968,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, same as here: https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md#current-replace-by-fee-policy\r\n> A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they spend one or more of the same inputs.",
      "created_at": "2022-07-19T15:43:39Z",
      "updated_at": "2022-07-19T15:43:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924672736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924672736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 136,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924673763",
      "pull_request_review_id": 1043675337,
      "id": 924673763,
      "node_id": "PRRC_kwDOABII5843HWbj",
      "diff_hunk": "@@ -117,3 +118,63 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. The package is child-with-parents.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages.\n+\n+However, allowing replacement for all ancestor packages also might not make sense due to the\n+increased complexity.\n+\n+2. At least one of the following signaling conditions is met:\n+\n+    1a. All of the directly conflicting transactions signal BIP125 replaceability explicitly.\n+\n+        *Rationale*: Any transaction that is replaceable without package RBF should still be\n+        replaceable.\n+\n+    1b. All directly conflicting transactions have `nVersion=3` and each package transaction that\n+        conflicts with a mempool transaction also has `nVersion=3`.\n+\n+        *Rationale*: This helps preserve the mempool policy that any transaction spending an\n+        unconfirmed `nVersion=3` transaction must also have `nVersion=3`. Otherwise, the child of a\n+        `nVersion=3` transaction could be replaced by a non-`nVersion=3` transaction, and thus there\n+        would be an `nVersion=3` transaction in the mempool with a non-`nVersion=3` child.\n+\n+        *Rationale*: Since V3 is inherited, this form of RBF signaling is implicitly inherited. That is,\n+        while a V3 transaction is unconfirmed, any descendant(s) accepted to the mempool must also be\n+        V3 and are thus also replaceable.\n+\n+3. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+4. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+5. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual\n+transactions](./mempool-replacements.md), treating the package (after deduplication) as one\n+composite transaction. This works because all of the transactions in a\n+child-with-unconfirmed-parents package are in the ancestor set of the child transaction.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 88,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924636307,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same as here: https://github.com/bitcoin/bitcoin/blob/master/doc/policy/mempool-replacements.md#current-replace-by-fee-policy\r\n\r\nWould it be more clear if I change the terms, or repeat them in this doc?",
      "created_at": "2022-07-19T15:44:38Z",
      "updated_at": "2022-07-19T15:44:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924673763",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924673763"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924683437",
      "pull_request_review_id": 1043689319,
      "id": 924683437,
      "node_id": "PRRC_kwDOABII5843HYyt",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Happy to change this of course, but just want to clarify what you're suggesting.\r\n\r\n> In imprecise language, this is what I expect to be required to solve it: \"When evaluating a V3 transaction, if its total mempool package size after entry into the mempool would exceed 4000 virtual bytes, it is rejected.\"\r\n\r\nI interpret this to mean that we should change both ancestor and descendant limits to 4000vB. This also means an individual V3 tx is not allowed to be more than 4000vB by itself. So in the LN case, a commitment tx isn't allowed to be more than 4000vB. I believe this would necessitate lowering the max in-flight HTLC limit. Is that accurate and if so, is it ok?",
      "created_at": "2022-07-19T15:53:34Z",
      "updated_at": "2022-07-19T15:53:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924683437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924683437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924689587",
      "pull_request_review_id": 1043697896,
      "id": 924689587,
      "node_id": "PRRC_kwDOABII5843HaSz",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Your comment seems correct. Will have to think about this some more with respect to the case today.\r\n\r\nedit: Looks like that works out to ~85 HTLC outputs or so naively in the layered commitment style setting",
      "created_at": "2022-07-19T15:59:17Z",
      "updated_at": "2022-07-19T16:17:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r924689587",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/924689587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925104761",
      "pull_request_review_id": 1044303782,
      "id": 925104761,
      "node_id": "PRRC_kwDOABII5843I_p5",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I believe this falls short in that the parent V3 transaction can be just south of 101kvB,\r\n\r\nCorrect me if I'm wrong, but I think this case would be something like: you're trying to confirm tx A which pays no fees itself; your counterparty publishes a package of tx A, B and C; C spends both A and B; A and C are both small, but B is 99kvB with an ephemeral output that is spent by C. You can't replace C without also replacing B because of the ephemeral output.\r\n\r\nWhat you could do, if the ephemeral output is anyone can spend, is replace C in two steps: one that creates tx D that spends B's ephemeral output (it's anyone can spend), which costs you C's fees plus epsilon; then you create tx E that spends A with your desired feerate. So you're paying ~100kvB at the \"backlog\" rate here. \r\n\r\nWith a 4kvB \"related txs\" limit, I think the worst case setup is just A is small (100vB) and is spent by B which is large (3900vB), so you have to pay at least 3.9kvB at the backlog rate plus epsilon to replace it with something smaller, but that's clearly already 25x better. Even if the backlog rate is not much smaller than the next block rate, you're only overpaying by at most 39x rather than perhaps 1000x here.\r\n\r\n> I interpret this to mean that we should change both ancestor and descendant limits to 4000vB. \r\n\r\nHmm, I think the worst case scenario here would still be bad:\r\n\r\n * A is spent by {B1,..,B20} (descendent count = 21 so less than 25)\r\n * B1 also spends C1, B2 also spends C2, etc; all via ephemeral outputs\r\n * A, Bn are 100vB each; Cn is 3800vB each\r\n\r\nA has a descendent size of 2100vB; Bn has an ancestor size of 4000vB and a descendent size of 100vB; Cn has a descendent size of 3900vB. So the 4000vB restriction is okay.\r\n\r\nBut replacing A thus means Bn are invalid, which then means Cn are invalid due to the now unspent ephemeral outputs, which means you're replacing 78kvB in the mempool, not just 4kvB.",
      "created_at": "2022-07-20T02:24:37Z",
      "updated_at": "2022-07-20T02:24:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r925104761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925104761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925333875",
      "pull_request_review_id": 1044641067,
      "id": 925333875,
      "node_id": "PRRC_kwDOABII5843J3lz",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ajtowns Note that ephemeral outputs aren't proposed here, just the anc/desc limits.\r\n\r\nAlso note that V3 descendant count is limited to 2 (i.e. a V3 transaction can only have 1 descendant), so A can't be spent by {B1...B20}. But of course B1 could spend a bunch of things, up to {C1...C23}.\r\n\r\nGood point that with ephemeral outputs replacing a child means we need to remove the parent as well. I'm experimenting with implementing it, and my idea was to require the parent (the one with the dust output) pay 0 fee so it can't stay in the mempool by itself. We'd still want to prevent replacing a large volume of transactions (i.e. include it in the RBF 100 limit), but users/devs don't have to worry about high costs of replacement since its fee is 0?\r\n\r\nI'm thinking about ephemeral outputs but hoping to minimize the scope of this proposal. Correct me if I'm wrong, but it seems ephemeral outputs are not needed to make package relay work for LN penalty without pinning attacks. We could do ephemeral outputs as a next step - IIUC ephemeral outputs would be a \"loosening\" of policy rules so we could add it on to V3 rules later?",
      "created_at": "2022-07-20T08:37:48Z",
      "updated_at": "2022-07-20T08:37:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r925333875",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925333875"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925605697",
      "pull_request_review_id": 1045028017,
      "id": 925605697,
      "node_id": "PRRC_kwDOABII5843K59B",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ephemeral outputs for ln-penalty are nice but definitely a stretch goal. I'm assuming some form exists for eltoo.\r\n\r\nKeeping inline with what is proposed here:\r\n\r\nFor eltoo purposes, there's no reason we cannot restrict each presigned transaction to having a single input only, and only the one ephemeral anchor for spending. Whenever a proper replacement for rule#3 is figured out, the one-input restriction could be relaxed for eltoo construction, and more typical ANYONECANPAY constructions likely work after this as well.",
      "created_at": "2022-07-20T13:26:36Z",
      "updated_at": "2022-07-20T13:29:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r925605697",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925605697"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925639336",
      "pull_request_review_id": 1045076631,
      "id": 925639336,
      "node_id": "PRRC_kwDOABII5843LCKo",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  But replacing A thus means Bn are invalid, which then means Cn are invalid due to the now unspent ephemeral outputs, which means you're replacing 78kvB in the mempool, not just 4kvB.\r\n\r\nTo be clear, as long as we have sane DoS limits in place, to the RBF-ing party, they don't care about these extra bytes as they wouldn't be paying for those additional bytes(by package CPFP logic already in place, the child is already paying for parent). These further-restricted limits are not about stopping network DoS, but about pinning.\r\n\r\nedit: Ok, the marginal DoS is there unless you ensure the dust-having transactions are unattractive to mine on their own, which 0-fee is definitely sufficient to do.",
      "created_at": "2022-07-20T13:55:39Z",
      "updated_at": "2022-07-20T14:02:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r925639336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/925639336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931306607",
      "pull_request_review_id": 1052854140,
      "id": 931306607,
      "node_id": "PRRC_kwDOABII5843gpxv",
      "diff_hunk": "@@ -117,3 +118,63 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. The package is child-with-parents.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages.\n+\n+However, allowing replacement for all ancestor packages also might not make sense due to the\n+increased complexity.\n+\n+2. At least one of the following signaling conditions is met:\n+\n+    1a. All of the directly conflicting transactions signal BIP125 replaceability explicitly.\n+\n+        *Rationale*: Any transaction that is replaceable without package RBF should still be\n+        replaceable.\n+\n+    1b. All directly conflicting transactions have `nVersion=3` and each package transaction that\n+        conflicts with a mempool transaction also has `nVersion=3`.\n+\n+        *Rationale*: This helps preserve the mempool policy that any transaction spending an\n+        unconfirmed `nVersion=3` transaction must also have `nVersion=3`. Otherwise, the child of a\n+        `nVersion=3` transaction could be replaced by a non-`nVersion=3` transaction, and thus there\n+        would be an `nVersion=3` transaction in the mempool with a non-`nVersion=3` child.\n+\n+        *Rationale*: Since V3 is inherited, this form of RBF signaling is implicitly inherited. That is,\n+        while a V3 transaction is unconfirmed, any descendant(s) accepted to the mempool must also be\n+        V3 and are thus also replaceable.\n+\n+3. The child transaction does not conflict with any transactions in the mempool.\n+\n+*Rationale*: Reduce complexity. Package RBF is intended for scenarios in which the user cannot\n+change the parent transaction (e.g. they were presigned with an untrusted party), but has control\n+over the child. For example, Package RBF can be used to replace the commitment transaction of an LN\n+counterparty by attaching a high-fee child to an anchor output. If the user later wants to update\n+the child (e.g. a further fee-bump), that can be done using a single transaction.\n+\n+4. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+5. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: These fee-related rules are identical to the replacement [policy for individual\n+transactions](./mempool-replacements.md), treating the package (after deduplication) as one\n+composite transaction. This works because all of the transactions in a\n+child-with-unconfirmed-parents package are in the ancestor set of the child transaction.\n+\n+6. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 88,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924636307,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "being explicit is always better imo",
      "created_at": "2022-07-27T17:08:39Z",
      "updated_at": "2022-07-27T17:08:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r931306607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931306607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931892775",
      "pull_request_review_id": 1053636482,
      "id": 931892775,
      "node_id": "PRRC_kwDOABII5843i44n",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a639f4f51fc291ab88811120241b560e9e81e823",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe this is a naive question, but is there a way we can make that value configurable instead of using a protocol hard-coded value?\r\n\r\nInformally, any v3 transaction would include a _descendant_max_weight_ somewhere (handwave, handwave), covered by signatures. This lets L2 contracts decide what values are acceptable for each tx type. For example, in the anchor outputs LN-penalty case, we know that commit txs only need an anchor child that can be constrained to be quite small, so commit txs could use a low value here, that can take into account the maximum weight of a commit tx.\r\n\r\nOr would this be adding too much complexity for only a marginal improvement? If so, we should probably bikeshed the protocol hard-coded value and use the lowest value we can to minimize the harm a malicious child tx can do.",
      "created_at": "2022-07-28T07:50:43Z",
      "updated_at": "2022-07-28T07:57:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r931892775",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931892775"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931897761",
      "pull_request_review_id": 1053636482,
      "id": 931897761,
      "node_id": "PRRC_kwDOABII5843i6Gh",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I believe this falls short in that the parent V3 transaction can be just south of 101kvB, even in ANYONECANPAY and SIGHASH_SINGLE like scenarios where additional inputs cannot be excluded by the presigning parties.\r\n\r\nCan't we easily fix that by relaxing the 100kvB policy limit to be 104kvB for v3 transactions?",
      "created_at": "2022-07-28T07:55:40Z",
      "updated_at": "2022-07-28T07:57:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r931897761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/931897761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932350557",
      "pull_request_review_id": 1054281170,
      "id": 932350557,
      "node_id": "PRRC_kwDOABII5843kopd",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a639f4f51fc291ab88811120241b560e9e81e823",
      "in_reply_to_id": 931892775,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's definitely doable under an annex field regime(input commits to total package size), but it's a question of complexity.\r\n\r\nI do think this kind of system would allow ANYONECANPAY style contracts to be secure against pinning, so it's definitely worth further exploration.",
      "created_at": "2022-07-28T15:02:44Z",
      "updated_at": "2022-07-28T15:02:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r932350557",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932350557"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932352799",
      "pull_request_review_id": 1054284270,
      "id": 932352799,
      "node_id": "PRRC_kwDOABII5843kpMf",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Can't we easily fix that by relaxing the 100kvB policy limit to be 104kvB for v3 transactions?\r\n\r\nYou would still have to replace 100kvB of griefing txns in general, so that doesn't sidestep the issue?",
      "created_at": "2022-07-28T15:03:50Z",
      "updated_at": "2022-07-28T15:03:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r932352799",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932352799"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932929342",
      "pull_request_review_id": 1055095825,
      "id": 932929342,
      "node_id": "PRRC_kwDOABII5843m18-",
      "diff_hunk": "@@ -0,0 +1,16 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The following set of policies apply to V3 transactions:\n+\n+1. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+2. A V3 transaction can be replaced by another V3 transaction, even if it does not signal BIP125\n+   replaceability. Use the (`-mempoolfullrbf`) configuration option to allow transaction\n+   replacement without enforcement of any opt-in signaling rule.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+4. A V3 transaction that has a V3 ancestor cannot be larger than 4000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 16,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18630747af9e5967b229fbe80f9cadf6ceb29252",
      "in_reply_to_id": 924649289,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That is true, it's more important to focus on the general issue taking the parents into account, you're right, setting a limit on the whole v3 package would be useful.",
      "created_at": "2022-07-29T07:02:34Z",
      "updated_at": "2022-07-29T07:03:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r932929342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/932929342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 16,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983307823",
      "pull_request_review_id": 1124964475,
      "id": 983307823,
      "node_id": "PRRC_kwDOABII5846nBYv",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original",
      "path": "doc/policy/packages.md",
      "position": 101,
      "original_position": 34,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\ntransactions. A directly conflicting transaction and its descendants (together, \"original\r\n```",
      "created_at": "2022-09-29T09:34:58Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983307823",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983307823"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983325287",
      "pull_request_review_id": 1124964475,
      "id": 983325287,
      "node_id": "PRRC_kwDOABII5846nFpn",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.\n+\n+3. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: Prevent network-wide DoS where replacements using the same outpoints are relayed over\n+and over again; require the replacement transactions to pay for relay using \"new\" fees. This\n+rule is taken from the [replacement policy for individual transactions](./mempool-replacements.md),\n+treating the package as one composite transaction.\n+\n+5. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": 146,
      "original_position": 78,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was wondering whether this could be a pinning vector when used with v3 transactions, but it's not :tada: \r\n\r\nPackages are by default restricted to 25 elements, so in theory we're safe, but since this value is configurable, we cannot completely rely on this protection. However, the size restriction on the v3 child ensures that it cannot be bumping 100 parent transactions, so this ensures that we're really safe (unless I'm missing something)!",
      "created_at": "2022-09-29T09:51:33Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983325287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983325287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983426844",
      "pull_request_review_id": 1124964475,
      "id": 983426844,
      "node_id": "PRRC_kwDOABII5846necc",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 3,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\nA transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\r\n```\r\n\r\nOr start the sentence with \"Transactions with their\".",
      "created_at": "2022-09-29T11:32:03Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983426844",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983426844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983433128",
      "pull_request_review_id": 1124964475,
      "id": 983433128,
      "node_id": "PRRC_kwDOABII5846nf-o",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe an unrelated question, but currently bitcoind doesn't let us create a transaction that has no outputs. In the context of CPFP, transactions with no outputs can be very useful: if you have inputs that let you reach the desired package feerate without creating any change, that's what you want to do. But currently we can't, so we have to overshoot the input amount and add a change output.\r\n\r\nIs there a consensus rule that disallows transactions with no outputs in blocks? If not, it would be quite useful to allow v3 transactions that have no outputs, introducing that new version is a good opportunity to do that.",
      "created_at": "2022-09-29T11:39:28Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983433128",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983433128"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983461693",
      "pull_request_review_id": 1124964475,
      "id": 983461693,
      "node_id": "PRRC_kwDOABII5846nm89",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can we relax the `replacement_ancestor_feerate` for v3 transactions? What would be ideal would be to simply ignore unconfirmed v3 ancestors from this calculation (some kind of `replacement_non_v3_ancestor_feerate`), which I believe is ok from an incentives' point of view given the other restrictions on v3 packages.\r\n\r\nOtherwise we will have the following issue:\r\n\r\n- a commitment transaction pays 0 fees and weighs 19,000 vbytes (it has many HTLCs)\r\n- an attacker publishes a CPFP v3 child that weighs 1,000 vbytes and has an individual feerate of e.g. 100 sat/byte\r\n- the package feerate ends up being 5 sat/byte, and the package doesn't confirm\r\n- if a feerate of 20 sat/byte for the package was enough to get the package confirmed, the honest participant would target that and thus create a CPFP v3 child with a feerate of 400 sat/byte\r\n- but that would be rejected under the current rules, and the honest participant is forced to make the _package feerate_ be 100 sat/byte, which is extremely expensive\r\n\r\nI'm realizing now that this is actually just another way of formulating @instagibbs's proposal to evict v3 siblings: when the direct conflict is a v3 transaction with an unconfirmed v3 parent, it would be great to only compare their individual feerates.",
      "created_at": "2022-09-29T12:10:57Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983461693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983461693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983462411",
      "pull_request_review_id": 1124964475,
      "id": 983462411,
      "node_id": "PRRC_kwDOABII5846nnIL",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n```suggestion\r\n/** Maximum virtual size of a tx which spends from an unconfirmed V3 transaction, in vB. */\r\n```",
      "created_at": "2022-09-29T12:11:40Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983462411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983462411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983469696",
      "pull_request_review_id": 1124964475,
      "id": 983469696,
      "node_id": "PRRC_kwDOABII5846no6A",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 32,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It looks like part of this comment should be on the CheckV3Inheritance overload below, the one that takes a `ptx` as argument?",
      "created_at": "2022-09-29T12:17:50Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983469696",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983469696"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983472562",
      "pull_request_review_id": 1124964475,
      "id": 983472562,
      "node_id": "PRRC_kwDOABII5846npmy",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Shouldn't we call `CheckV3Inheritance` here instead of letting the caller check that before? There are no cases where we want to call `ApplyV3Rules` without also checking v3 inheritance, are there?",
      "created_at": "2022-09-29T12:20:51Z",
      "updated_at": "2022-09-29T12:26:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983472562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983472562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983510957",
      "pull_request_review_id": 1125250108,
      "id": 983510957,
      "node_id": "PRRC_kwDOABII5846ny-t",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.\n+\n+3. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: Prevent network-wide DoS where replacements using the same outpoints are relayed over\n+and over again; require the replacement transactions to pay for relay using \"new\" fees. This\n+rule is taken from the [replacement policy for individual transactions](./mempool-replacements.md),\n+treating the package as one composite transaction.\n+\n+5. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": 146,
      "original_position": 78,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983325287,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yep! It should basically be impossible to hit this limit in the commitment tx bumping case. Your commitment tx will only conflict with that 1 commitment tx, and it cannot have more than 1 descendant as a V3 transaction, even if the node has configured a larger `-limitdescendantcount`.",
      "created_at": "2022-09-29T12:58:29Z",
      "updated_at": "2022-09-29T12:58:30Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983510957",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983510957"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983517504",
      "pull_request_review_id": 1125260129,
      "id": 983517504,
      "node_id": "PRRC_kwDOABII5846n0lA",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To clarify, is the second v3 child (400sat/vbyte) replacing the first v3 child (100sat/vbyte) only? Assuming the commitment tx is already in the mempool. In that case, it would just be single transaction replacement so this rule isn't used. Just the individual feerates are compared, and the child is accepted. Maybe I'm misunderstanding the scenario though?",
      "created_at": "2022-09-29T13:04:40Z",
      "updated_at": "2022-09-29T13:04:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983517504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983517504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983529152",
      "pull_request_review_id": 1125277737,
      "id": 983529152,
      "node_id": "PRRC_kwDOABII5846n3bA",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah good point, seems perfectly reasonable to me to have no payments in a CPFP transaction. I agree it seems like it would be fine to allow empty vout. But it looks like non-empty vout is indeed a consensus rule.\r\nSee `CheckTransaction`:\r\nhttps://github.com/bitcoin/bitcoin/blob/291e363ce500e492475c4ccd189ea1d031c43613/src/consensus/tx_check.cpp#L16-L17\r\nWhich is called by `CheckBlock`:\r\nhttps://github.com/bitcoin/bitcoin/blob/291e363ce500e492475c4ccd189ea1d031c43613/src/validation.cpp#L3370-L3381",
      "created_at": "2022-09-29T13:15:25Z",
      "updated_at": "2022-09-29T13:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983529152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983529152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983535342",
      "pull_request_review_id": 1125277737,
      "id": 983535342,
      "node_id": "PRRC_kwDOABII5846n47u",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Extra trivia: seems like this consensus rule has been here since the very beginning :smiling_face_with_tear: can't believe Satoshi didn't predict the need for CPFPing presigned transactions. \r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/4405b78d6059e536c36974088a8ed4d9f0f29898/main.h#L443-L448",
      "created_at": "2022-09-29T13:20:59Z",
      "updated_at": "2022-09-29T13:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983535342",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983535342"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983538284",
      "pull_request_review_id": 1125277737,
      "id": 983538284,
      "node_id": "PRRC_kwDOABII5846n5ps",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 32,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983469696,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah yes :+1: thanks!",
      "created_at": "2022-09-29T13:23:31Z",
      "updated_at": "2022-09-29T13:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983538284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983538284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": 30,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983538945",
      "pull_request_review_id": 1125292444,
      "id": 983538945,
      "node_id": "PRRC_kwDOABII5846n50B",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.\n+\n+3. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.\n+   The additional fees (difference between absolute fee paid by the package after deduplication and the\n+   sum paid by the original transactions) pays for the package's bandwidth at or above the rate set\n+   by the node's incremental relay feerate. For example, if the incremental relay feerate is 1\n+   satoshi/vB and the package after deduplication contains 500 virtual bytes total, then the package\n+   fees after deduplication is at least 500 satoshis higher than the sum of the original transactions.\n+\n+*Rationale*: Prevent network-wide DoS where replacements using the same outpoints are relayed over\n+and over again; require the replacement transactions to pay for relay using \"new\" fees. This\n+rule is taken from the [replacement policy for individual transactions](./mempool-replacements.md),\n+treating the package as one composite transaction.\n+\n+5. The number of original transactions does not exceed 100.",
      "path": "doc/policy/packages.md",
      "position": 146,
      "original_position": 78,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983325287,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "snuck in a fix for rule#5 pinning, nice. Probably should be noted somewhere.",
      "created_at": "2022-09-29T13:24:06Z",
      "updated_at": "2022-09-29T13:24:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983538945",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983538945"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 190,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983571470",
      "pull_request_review_id": 1125341415,
      "id": 983571470,
      "node_id": "PRRC_kwDOABII5846oBwO",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we cannot do only individual replacement here, if the attacker publishes their commit + their child, and the honest participants wants to publish their own commit + their child (because for some reason they never receive the attacker's package in their mempool so cannot attach a CPFP to that commit).\r\n\r\nSo this is actually slightly different from the v3 sibling eviction problem, which as you point out probably just works :tm: with individual replacement rules already.",
      "created_at": "2022-09-29T13:51:07Z",
      "updated_at": "2022-09-29T13:51:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983571470",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983571470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983582699",
      "pull_request_review_id": 1125355594,
      "id": 983582699,
      "node_id": "PRRC_kwDOABII5846oEfr",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Is there a consensus rule that disallows transactions with no outputs in blocks?\r\n\r\nYes. It's a hard rule.",
      "created_at": "2022-09-29T13:57:37Z",
      "updated_at": "2022-09-29T13:57:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983582699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983582699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983583700",
      "pull_request_review_id": 1125356533,
      "id": 983583700,
      "node_id": "PRRC_kwDOABII5846oEvU",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not yet 100% sure whether package RBF currently lets us replace `[CommitTxA (19,000 vbytes, 0 sat/byte), AnchorTxA (1,000 vbytes, 20 sat/byte)]` with `[CommitTxB (19,000 vbytes, 0 sat/byte), AnchorTxB (1,000 vbytes, 80 sat/byte)]`, where all txs are v3 (which is the issue I'm trying to describe here).\r\n\r\nI probably just need to write a test for it and see for myself, but what do you think?",
      "created_at": "2022-09-29T13:58:08Z",
      "updated_at": "2022-09-29T13:58:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983583700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983583700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983585405",
      "pull_request_review_id": 1125277737,
      "id": 983585405,
      "node_id": "PRRC_kwDOABII5846oFJ9",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I see okay so the situation is:\r\n\r\noriginal transactions = commitment_A + cpfp_A\r\nreplacement transactions (package) = commitment_B + cpfp_B\r\n- commitment_A: 19,000vB, 0sat.\r\n    - individual feerate = 0sat/vB\r\n    - ancestor feerate = 0sat/vB\r\n- cpfp_A: 1000vbytes, 100,000sat.\r\n    - individual feerate = 100sat/vB\r\n    - ancestor feerate = 5sat/vB\r\n- commitment_B: 19,000vB, 0sat.\r\n    - individual feerate = 0sat/vB\r\n    - ancestor feerate = 0sat/vB\r\n- cpfp_B: 1000vB, 400,000sat.\r\n    - individual feerate = 400sat/vB\r\n    - ancestor feerate = 20sat/vB\r\npackage feerate = 20sat/vB\r\n\r\n`replacement_miner_score` = minimum(package feerate, ancestor feerate) = 20sat/vB\r\nthe rule is that `replacement_miner_score` must be higher than\r\n- the direct conflict's (commitment_A) indivdual feerate = 0sat/vB\r\n- the original transactions' (commitment_A, cpfp_A) ancestor feerates = 0sat/vB and 5sat/vB\r\n\r\nSo this should be fine AFAICT",
      "created_at": "2022-09-29T13:59:31Z",
      "updated_at": "2022-09-29T13:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983585405",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983585405"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983590391",
      "pull_request_review_id": 1125366791,
      "id": 983590391,
      "node_id": "PRRC_kwDOABII5846oGX3",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's too bad! Damn you Satoshi, you could have thought about this...",
      "created_at": "2022-09-29T14:03:35Z",
      "updated_at": "2022-09-29T14:03:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983590391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983590391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983590484",
      "pull_request_review_id": 1125366957,
      "id": 983590484,
      "node_id": "PRRC_kwDOABII5846oGZU",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "OP_RETURN outputs can be pretty small :)",
      "created_at": "2022-09-29T14:03:41Z",
      "updated_at": "2022-09-29T14:03:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983590484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983590484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983592907",
      "pull_request_review_id": 1125372242,
      "id": 983592907,
      "node_id": "PRRC_kwDOABII5846oG_L",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "t-bast",
        "id": 31281497,
        "node_id": "MDQ6VXNlcjMxMjgxNDk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/31281497?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/t-bast",
        "html_url": "https://github.com/t-bast",
        "followers_url": "https://api.github.com/users/t-bast/followers",
        "following_url": "https://api.github.com/users/t-bast/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/t-bast/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/t-bast/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/t-bast/subscriptions",
        "organizations_url": "https://api.github.com/users/t-bast/orgs",
        "repos_url": "https://api.github.com/users/t-bast/repos",
        "events_url": "https://api.github.com/users/t-bast/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/t-bast/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's great! I'll write a test for this in eclair anyway, thanks for clearing that up :+1: ",
      "created_at": "2022-09-29T14:05:40Z",
      "updated_at": "2022-09-29T14:05:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983592907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983592907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983669489",
      "pull_request_review_id": 1125485823,
      "id": 983669489,
      "node_id": "PRRC_kwDOABII5846oZrx",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mm, could have a 0-value OP_RETURN?",
      "created_at": "2022-09-29T15:05:10Z",
      "updated_at": "2022-09-29T15:05:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983669489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983669489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983671304",
      "pull_request_review_id": 1125488650,
      "id": 983671304,
      "node_id": "PRRC_kwDOABII5846oaII",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 43,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983433128,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, you'll pay 8+1+1 bytes for the output",
      "created_at": "2022-09-29T15:06:46Z",
      "updated_at": "2022-09-29T15:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r983671304",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/983671304"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004862848",
      "pull_request_review_id": 1155350107,
      "id": 1004862848,
      "node_id": "PRRC_kwDOABII58475P2A",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 35,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"evicted in the event of a replacement\" is a tautology, it's being replaced so obviously it's being evicted.\r\n\r\nsuggested: \"in the event of mempool entry of the new transaction\"",
      "created_at": "2022-10-25T19:00:17Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004862848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004862848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004866030",
      "pull_request_review_id": 1155350107,
      "id": 1004866030,
      "node_id": "PRRC_kwDOABII58475Qnu",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 20,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "... for non-V3 transactions",
      "created_at": "2022-10-25T19:04:08Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004866030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004866030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004867023",
      "pull_request_review_id": 1155350107,
      "id": 1004867023,
      "node_id": "PRRC_kwDOABII58475Q3P",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 44,
      "original_position": 22,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "based on discussion at Coredev: Any ancestor as well!",
      "created_at": "2022-10-25T19:05:27Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004867023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004867023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004868277",
      "pull_request_review_id": 1155350107,
      "id": 1004868277,
      "node_id": "PRRC_kwDOABII58475RK1",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 29,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"Just like any other policy measure, it does not effect validity of data in blocks.\"",
      "created_at": "2022-10-25T19:06:56Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004868277",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004868277"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004876143",
      "pull_request_review_id": 1155350107,
      "id": 1004876143,
      "node_id": "PRRC_kwDOABII58475TFv",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be",
      "path": "doc/policy/version3_transactions.md",
      "position": 83,
      "original_position": 45,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The pinning \"damage\" is specifically bounded between the tx size of whatever an honest user would have needed to make to bump, and the total allowed limit. For example, if a wallet only needs half the space for an honest fee bump, an attacker is bound to a 2x fee pin attack, maximum, instead of 200x without V3 rules.\r\n\r\nMight want to mention that it bounds the economic damage by ~100x in a digestible form.",
      "created_at": "2022-10-25T19:16:32Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004876143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004876143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004882194",
      "pull_request_review_id": 1155350107,
      "id": 1004882194,
      "node_id": "PRRC_kwDOABII58475UkS",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.\n+\n+3. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 66,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"The duduplicated package\" just to make it abundantly clear.",
      "created_at": "2022-10-25T19:24:01Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004882194",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004882194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004884944",
      "pull_request_review_id": 1155350107,
      "id": 1004884944,
      "node_id": "PRRC_kwDOABII58475VPQ",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 17,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "or wallets that want robust RBF abilities...",
      "created_at": "2022-10-25T19:27:24Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004884944",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004884944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004887453",
      "pull_request_review_id": 1155350107,
      "id": 1004887453,
      "node_id": "PRRC_kwDOABII58475V2d",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 30,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/must also have/must also be/",
      "created_at": "2022-10-25T19:30:31Z",
      "updated_at": "2022-10-26T15:34:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004887453",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004887453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004893307",
      "pull_request_review_id": 1155350107,
      "id": 1004893307,
      "node_id": "PRRC_kwDOABII58475XR7",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 38,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggestion: rename arg to `checked_package` ",
      "created_at": "2022-10-25T19:37:59Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004893307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004893307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004895010",
      "pull_request_review_id": 1155350107,
      "id": 1004895010,
      "node_id": "PRRC_kwDOABII58475Xsi",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** Filters the ancestors, returning the ones which are nVersion=3 (\"V3 ancestors\"). */\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 54,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "make explicit what is returned",
      "created_at": "2022-10-25T19:40:13Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004895010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004895010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004897242",
      "pull_request_review_id": 1155350107,
      "id": 1004897242,
      "node_id": "PRRC_kwDOABII58475YPa",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/must also have/must also be/",
      "created_at": "2022-10-25T19:43:05Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004897242",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004897242"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004899136",
      "pull_request_review_id": 1155350107,
      "id": 1004899136,
      "node_id": "PRRC_kwDOABII58475YtA",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004897242,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "please make it explicit what is being returned",
      "created_at": "2022-10-25T19:45:27Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004899136",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004899136"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004937926",
      "pull_request_review_id": 1155350107,
      "id": 1004937926,
      "node_id": "PRRC_kwDOABII58475iLG",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/tx_v3_from_v2_and_v3/tx_v2_from_v2_and_v3/ ?",
      "created_at": "2022-10-25T20:32:04Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004937926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004937926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004938752",
      "pull_request_review_id": 1155350107,
      "id": 1004938752,
      "node_id": "PRRC_kwDOABII58475iYA",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we also need positive test cases of `CheckV3Inheritance`",
      "created_at": "2022-10-25T20:33:08Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004938752",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004938752"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004941161",
      "pull_request_review_id": 1155350107,
      "id": 1004941161,
      "node_id": "PRRC_kwDOABII58475i9p",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has too many direct parents.\n+    {\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+        mempool_outpoints.resize(25);\n+        for (size_t i{0}; i < 24; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(1), /*version=*/2);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(COutPoint{mempool_tx->GetHash(), 0});\n+        }\n+        auto tx_v3_many_parents = make_tx(mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_parents, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Configuration where the tx is in a many-generation chain.\n+    auto last_outpoint{random_outpoints(1)[0]};\n+    for (size_t i{0}; i < 25; ++i) {\n+        auto mempool_tx = make_tx({last_outpoint}, /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(mempool_tx));\n+        last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+    }\n+    {\n+        auto tx_v3_many_generation = make_tx({last_outpoint}, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_generation), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_generation, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // V3 tx cannot have too large ancestor size\n+    std::vector<COutPoint> large_mempool_outpoints;\n+    large_mempool_outpoints.resize(10);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why bother with the loop vs one huge tx?",
      "created_at": "2022-10-25T20:36:14Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004941161",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004941161"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004942013",
      "pull_request_review_id": 1155350107,
      "id": 1004942013,
      "node_id": "PRRC_kwDOABII58475jK9",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has too many direct parents.\n+    {\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+        mempool_outpoints.resize(25);\n+        for (size_t i{0}; i < 24; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(1), /*version=*/2);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(COutPoint{mempool_tx->GetHash(), 0});\n+        }\n+        auto tx_v3_many_parents = make_tx(mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_parents, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Configuration where the tx is in a many-generation chain.\n+    auto last_outpoint{random_outpoints(1)[0]};\n+    for (size_t i{0}; i < 25; ++i) {\n+        auto mempool_tx = make_tx({last_outpoint}, /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(mempool_tx));\n+        last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+    }\n+    {\n+        auto tx_v3_many_generation = make_tx({last_outpoint}, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_generation), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_generation, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // V3 tx cannot have too large ancestor size\n+    std::vector<COutPoint> large_mempool_outpoints;\n+    large_mempool_outpoints.resize(10);\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto large_mempool_tx = make_tx(random_outpoints(200), /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(large_mempool_tx));\n+        large_mempool_outpoints.emplace_back(COutPoint{large_mempool_tx->GetHash(), 0});\n+    }\n+    {\n+        auto tx_v3_large_parents = make_tx(large_mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_large_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 10);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_large_parents, ancestors, empty_conflicts_set).has_value());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's assert up here what size this is, since I'm unsure how big 10 200-input txs are, off-hand",
      "created_at": "2022-10-25T20:37:21Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004942013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004942013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004955271",
      "pull_request_review_id": 1155350107,
      "id": 1004955271,
      "node_id": "PRRC_kwDOABII58475maH",
      "diff_hunk": "@@ -745,9 +746,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                 // check all unconfirmed ancestors; otherwise an opt-in ancestor\n                 // might be replaced, causing removal of this descendant.\n                 //\n-                // If replaceability signaling is ignored due to node setting,\n-                // replacement is always allowed.\n-                if (!m_pool.m_full_rbf && !SignalsOptInRBF(*ptxConflicting)) {\n+                // All V3 transactions are considered replaceable.\n+                //\n+                // Replaceability signaling of the original transactions may be\n+                // ignored due to node setting.\n+                if (!m_pool.m_full_rbf && !SignalsOptInRBF(*ptxConflicting) && ptxConflicting->nVersion != 3) {",
      "path": "src/validation.cpp",
      "position": 190,
      "original_position": 19,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c82f832ddd3306c84b70410b306a6a29cee87a91",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thought: do we just want to make the version check a thing in `SignalsOptInRBF`?",
      "created_at": "2022-10-25T20:54:02Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004955271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004955271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 777,
      "original_line": 777,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004958560",
      "pull_request_review_id": 1155350107,
      "id": 1004958560,
      "node_id": "PRRC_kwDOABII58475nNg",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 31,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just do a single generate of 110 if you need 10 coins",
      "created_at": "2022-10-25T20:58:07Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004958560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004958560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004960576",
      "pull_request_review_id": 1155350107,
      "id": 1004960576,
      "node_id": "PRRC_kwDOABII58475ntA",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 85,
      "original_position": 48,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "clear out mempool via miner, to make it clear what's in flight in test",
      "created_at": "2022-10-25T21:00:41Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004960576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004960576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004963312",
      "pull_request_review_id": 1155350107,
      "id": 1004963312,
      "node_id": "PRRC_kwDOABII58475oXw",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 64,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "change *all* these checks to `getrawmempool` for strict assertion there is a single tx, and the hash is as expected",
      "created_at": "2022-10-25T21:04:19Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004963312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004963312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004964328",
      "pull_request_review_id": 1155350107,
      "id": 1004964328,
      "node_id": "PRRC_kwDOABII58475ono",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 74,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "mine a block for simpler reading of test",
      "created_at": "2022-10-25T21:05:43Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004964328",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004964328"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004965337",
      "pull_request_review_id": 1155350107,
      "id": 1004965337,
      "node_id": "PRRC_kwDOABII58475o3Z",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 100,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "repeat of https://github.com/bitcoin/bitcoin/pull/25038/commits/c11fb499f182306f635ea9457ec4574b2992e185#diff-15a1888c9151fc1d182c23e34b71d691f70df448bceb9eb78c8296f18854b6a3R67 ?",
      "created_at": "2022-10-25T21:07:04Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004965337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004965337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004966712",
      "pull_request_review_id": 1155350107,
      "id": 1004966712,
      "node_id": "PRRC_kwDOABII58475pM4",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 141,
      "original_position": 109,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "assert that `fullrbf` is false in `getmempoolinfo`... just in case",
      "created_at": "2022-10-25T21:08:56Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004966712",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004966712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 141,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004968205",
      "pull_request_review_id": 1155350107,
      "id": 1004968205,
      "node_id": "PRRC_kwDOABII58475pkN",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        assert node.getmempoolentry(tx_v3_no_bip125[\"txid\"])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_no_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_no_bip125[\"txid\"])\n+\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"nonstandard\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 139,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we get a better error description?",
      "created_at": "2022-10-25T21:10:54Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004968205",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004968205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004968938",
      "pull_request_review_id": 1155350107,
      "id": 1004968938,
      "node_id": "PRRC_kwDOABII58475pvq",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        assert node.getmempoolentry(tx_v3_no_bip125[\"txid\"])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_no_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_no_bip125[\"txid\"])\n+\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 132,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "let's also have an example that *just* makes it in",
      "created_at": "2022-10-25T21:11:52Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1004968938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1004968938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005720112",
      "pull_request_review_id": 1155350107,
      "id": 1005720112,
      "node_id": "PRRC_kwDOABII58478hIw",
      "diff_hunk": "@@ -1182,7 +1197,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "dd8d0af4a27bf4c299a1af8de4dbe0c139dba730",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note: a test that this commit fixes the purported future bug would be a good idea",
      "created_at": "2022-10-26T13:56:32Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005720112",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005720112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005728498",
      "pull_request_review_id": 1155350107,
      "id": 1005728498,
      "node_id": "PRRC_kwDOABII58478jLy",
      "diff_hunk": "@@ -1001,6 +1001,9 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n     std::string err_string;\n+    // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n+    // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n+    // PreChecks), they do not apply here.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "bb1b7ee6c6843c5e0e4d991d31034e8a6ba83310",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the idea being, carveouts are only useful in the individual tx scenario, not package context? i.e., you wouldn't need to propagate *both* anchor spends on a commit tx in a package, which busts original limits?",
      "created_at": "2022-10-26T14:03:21Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005728498",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005728498"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005731264",
      "pull_request_review_id": 1155350107,
      "id": 1005731264,
      "node_id": "PRRC_kwDOABII58478j3A",
      "diff_hunk": "@@ -569,18 +569,11 @@ class MemPoolAccept\n         std::set<uint256> m_conflicts;\n         /** Iterators to mempool entries that this transaction directly conflicts with. */\n         CTxMemPool::setEntries m_iters_conflicting;\n-        /** Iterators to all mempool entries that would be replaced by this transaction, including",
      "path": "src/validation.cpp",
      "position": 111,
      "original_position": 4,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "459a82c3a1277a7d13a36be5d47bf799ece78143",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "to belabor the commit text:\r\n\r\n\"Transactions could conflict with the same tx\"\r\n\r\nmeaning transactions in the same package can conflict with the same original tx, so for package evaluation, we only want to count these once?",
      "created_at": "2022-10-26T14:05:38Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005731264",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005731264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005741932",
      "pull_request_review_id": 1155350107,
      "id": 1005741932,
      "node_id": "PRRC_kwDOABII58478mds",
      "diff_hunk": "@@ -225,6 +226,60 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+\n+    // Tests for CheckMinerScores\n+    // Don't allow replacements with a low ancestor feerate.\n+    BOOST_CHECK(CheckMinerScores(/*replacement_fees=*/entry1->GetFee(),\n+                                 /*replacement_vsize=*/entry1->GetTxSize(),\n+                                 /*ancestors=*/{entry5},",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "5cc295b8ef46c78a093f249b70304eae3ec169b9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can we \"watermark\" the entry names with if they're low or high, or just grab a renamed copy?",
      "created_at": "2022-10-26T14:14:16Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005741932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005741932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005748598",
      "pull_request_review_id": 1155350107,
      "id": 1005748598,
      "node_id": "PRRC_kwDOABII58478oF2",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you state in the comment what the practical effect(s) of not accounting for this difference is?",
      "created_at": "2022-10-26T14:19:43Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005748598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005748598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005755274",
      "pull_request_review_id": 1155350107,
      "id": 1005755274,
      "node_id": "PRRC_kwDOABII58478puK",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Transactions must pay for their own replacements unless they are V3.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Don't understand this comment",
      "created_at": "2022-10-26T14:25:09Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005755274",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005755274"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1033,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005833244",
      "pull_request_review_id": 1155350107,
      "id": 1005833244,
      "node_id": "PRRC_kwDOABII584788wc",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Transactions must pay for their own replacements unless they are V3.\n+    if (args.m_package_feerates) {\n+        for (const auto& ws : workspaces) {\n+            // If this transaction has a conflict, it must be V3.\n+            if (!ws.m_iters_conflicting.empty() && ws.m_ptx->nVersion != 3) {\n+                return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: V3 required\");\n+            }\n+        }\n+    }\n+\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const auto hash = workspaces[workspaces.size() - 1].m_ptx->GetHash();\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (Workspace& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    // Check that the union of all collective conflicts and ancestors is disjoint.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "to rephrase: make sure original conflicting txs are not being used by the replacement package itself?",
      "created_at": "2022-10-26T15:23:10Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005833244",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005833244"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005841411",
      "pull_request_review_id": 1155350107,
      "id": 1005841411,
      "node_id": "PRRC_kwDOABII58478-wD",
      "diff_hunk": "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+from random import choice\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coins, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a child-with-parents package using the parent_coins passed in.\n+        Each coin in parent_coins will be used to fund 1 parent transaction.\n+        Each parent will have 1 output. The parents' outputs will be used to fund 1 child\n+        transaction. Thus, the package will contain len(parent_coins) + 1 transactions.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr.\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        package_hex = []\n+        package_txns = []\n+        child_inputs = []\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        for coin in parent_coins:\n+            parent_result = self.wallet.create_self_transfer(\n+                fee_rate=0,\n+                fee=parent_fee,\n+                utxo_to_spend=coin,\n+                sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr, # prevent identical txids",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 63,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "prevent identical txids between different packages, I presume",
      "created_at": "2022-10-26T15:29:34Z",
      "updated_at": "2022-10-26T15:34:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1005841411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1005841411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007373334",
      "pull_request_review_id": 1159042215,
      "id": 1007373334,
      "node_id": "PRRC_kwDOABII5848C0wW",
      "diff_hunk": "@@ -1206,10 +1321,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [this](const auto& tx) {\n+        return Workspace(tx, m_limit_descendants, m_limit_descendant_size);\n+    });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": 485,
      "original_position": 384,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is broken, it's only considering the deduplicated package, which \"blinds\" this evaluation from checking if the in-mempool parent is V3. Hence, the child as V2 would be accepted, even if parent in mempool was V3.\r\n",
      "created_at": "2022-10-27T21:02:21Z",
      "updated_at": "2022-10-27T21:02:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1007373334",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007373334"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1389,
      "original_line": 1389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007390538",
      "pull_request_review_id": 1159061008,
      "id": 1007390538,
      "node_id": "PRRC_kwDOABII5848C49K",
      "diff_hunk": "@@ -1206,10 +1321,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [this](const auto& tx) {\n+        return Workspace(tx, m_limit_descendants, m_limit_descendant_size);\n+    });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": 485,
      "original_position": 384,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 1007373334,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also see `CheckV3Inheritance` call on L932",
      "created_at": "2022-10-27T21:21:34Z",
      "updated_at": "2022-10-27T21:21:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1007390538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007390538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1389,
      "original_line": 1389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007394116",
      "pull_request_review_id": 1159065134,
      "id": 1007394116,
      "node_id": "PRRC_kwDOABII5848C51E",
      "diff_hunk": "@@ -1206,10 +1321,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [this](const auto& tx) {\n+        return Workspace(tx, m_limit_descendants, m_limit_descendant_size);\n+    });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": 485,
      "original_position": 384,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 1007373334,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok is this a quick check that misses these scenarios, then `PreCheck` later calls it again with all ancestors? ",
      "created_at": "2022-10-27T21:26:01Z",
      "updated_at": "2022-10-27T21:26:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1007394116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007394116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1389,
      "original_line": 1389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007396026",
      "pull_request_review_id": 1159067163,
      "id": 1007396026,
      "node_id": "PRRC_kwDOABII5848C6S6",
      "diff_hunk": "@@ -1206,10 +1321,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n \n     std::vector<Workspace> workspaces{};\n     workspaces.reserve(txns.size());\n-    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n-                   [](const auto& tx) { return Workspace(tx); });\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces), [this](const auto& tx) {\n+        return Workspace(tx, m_limit_descendants, m_limit_descendant_size);\n+    });\n     std::map<const uint256, const MempoolAcceptResult> results;\n \n+    if (const auto v3_violation{CheckV3Inheritance(txns)}) {",
      "path": "src/validation.cpp",
      "position": 485,
      "original_position": 384,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 1007373334,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah ok, the mempool lock comment. got it!",
      "created_at": "2022-10-27T21:28:13Z",
      "updated_at": "2022-10-27T21:28:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1007396026",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1007396026"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1389,
      "original_line": 1389,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008135966",
      "pull_request_review_id": 1160171084,
      "id": 1008135966,
      "node_id": "PRRC_kwDOABII5848Fu8e",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 44,
      "original_position": 22,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004867023,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, working on this! Sorry for the delay!",
      "created_at": "2022-10-28T14:33:47Z",
      "updated_at": "2022-10-28T14:33:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1008135966",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008135966"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008171877",
      "pull_request_review_id": 1160226123,
      "id": 1008171877,
      "node_id": "PRRC_kwDOABII5848F3tl",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    CTxMemPool::setEntries v3_ancestors{GetV3Ancestors(ancestors)};\n+\n+    // Note that this code assumes that any V3 transaction can only have 1 descendant.",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Comment should probably note that the check happens just below. As is it sounds like it's happening via caller",
      "created_at": "2022-10-28T15:09:12Z",
      "updated_at": "2022-11-01T17:07:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1008171877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008171877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008172263",
      "pull_request_review_id": 1160226123,
      "id": 1008172263,
      "node_id": "PRRC_kwDOABII5848F3zn",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    CTxMemPool::setEntries v3_ancestors{GetV3Ancestors(ancestors)};\n+\n+    // Note that this code assumes that any V3 transaction can only have 1 descendant.\n+    // If there are any V3 ancestors, this is the only child allowed.\n+    if (v3_ancestors.size() > 0) {\n+        // This tx is a child of a V3 tx. To avoid RBF pinning, it can't be too large.\n+        if (tx_vsize > V3_CHILD_MAX_SIZE) {\n+            return strprintf(\"tx is too big: %u virtual bytes\", tx_vsize);\n+        }\n+    }\n+    for (const auto& entry : v3_ancestors) {",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add an explicit comment here what this check is",
      "created_at": "2022-10-28T15:09:35Z",
      "updated_at": "2022-11-01T17:07:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1008172263",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1008172263"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010259479",
      "pull_request_review_id": 1163083483,
      "id": 1010259479,
      "node_id": "PRRC_kwDOABII5848N1YX",
      "diff_hunk": "@@ -745,9 +746,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                 // check all unconfirmed ancestors; otherwise an opt-in ancestor\n                 // might be replaced, causing removal of this descendant.\n                 //\n-                // If replaceability signaling is ignored due to node setting,\n-                // replacement is always allowed.\n-                if (!m_pool.m_full_rbf && !SignalsOptInRBF(*ptxConflicting)) {\n+                // All V3 transactions are considered replaceable.\n+                //\n+                // Replaceability signaling of the original transactions may be\n+                // ignored due to node setting.\n+                if (!m_pool.m_full_rbf && !SignalsOptInRBF(*ptxConflicting) && ptxConflicting->nVersion != 3) {",
      "path": "src/validation.cpp",
      "position": 190,
      "original_position": 19,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c82f832ddd3306c84b70410b306a6a29cee87a91",
      "in_reply_to_id": 1004955271,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought about that approach, but it's used for RPC info \"bip125-replaceable\" (and somewhere in the wallet iirc).\r\nThough maybe that's a good thing (and we should move towards renaming that field to \"replaceable\" or something).",
      "created_at": "2022-11-01T09:46:32Z",
      "updated_at": "2022-11-01T09:58:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1010259479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010259479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 777,
      "original_line": 777,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010260726",
      "pull_request_review_id": 1163083483,
      "id": 1010260726,
      "node_id": "PRRC_kwDOABII5848N1r2",
      "diff_hunk": "@@ -1001,6 +1001,9 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n     std::string err_string;\n+    // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n+    // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n+    // PreChecks), they do not apply here.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "bb1b7ee6c6843c5e0e4d991d31034e8a6ba83310",
      "in_reply_to_id": 1005728498,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah exactly. And that would never happen since 2 children + 1 parent is not an accepted package topology anyway.",
      "created_at": "2022-11-01T09:48:11Z",
      "updated_at": "2022-11-01T09:58:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1010260726",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010260726"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1006,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010263457",
      "pull_request_review_id": 1163083483,
      "id": 1010263457,
      "node_id": "PRRC_kwDOABII5848N2Wh",
      "diff_hunk": "@@ -225,6 +226,60 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+\n+    // Tests for CheckMinerScores\n+    // Don't allow replacements with a low ancestor feerate.\n+    BOOST_CHECK(CheckMinerScores(/*replacement_fees=*/entry1->GetFee(),\n+                                 /*replacement_vsize=*/entry1->GetTxSize(),\n+                                 /*ancestors=*/{entry5},",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "5cc295b8ef46c78a093f249b70304eae3ec169b9",
      "in_reply_to_id": 1005741932,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "sorry what do you mean? Like rename the variables to indicate fee e.g. `entry5_low` ?",
      "created_at": "2022-11-01T09:51:43Z",
      "updated_at": "2022-11-01T09:58:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1010263457",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010263457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010264943",
      "pull_request_review_id": 1163083483,
      "id": 1010264943,
      "node_id": "PRRC_kwDOABII5848N2tv",
      "diff_hunk": "@@ -569,18 +569,11 @@ class MemPoolAccept\n         std::set<uint256> m_conflicts;\n         /** Iterators to mempool entries that this transaction directly conflicts with. */\n         CTxMemPool::setEntries m_iters_conflicting;\n-        /** Iterators to all mempool entries that would be replaced by this transaction, including",
      "path": "src/validation.cpp",
      "position": 111,
      "original_position": 4,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "459a82c3a1277a7d13a36be5d47bf799ece78143",
      "in_reply_to_id": 1005731264,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes. I can elaborate in commit message",
      "created_at": "2022-11-01T09:53:43Z",
      "updated_at": "2022-11-01T09:58:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1010264943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010264943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 574,
      "original_line": 574,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010678995",
      "pull_request_review_id": 1160226123,
      "id": 1010678995,
      "node_id": "PRRC_kwDOABII5848PbzT",
      "diff_hunk": "@@ -182,3 +182,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,\n+                                            int64_t replacement_vsize,\n+                                            const CTxMemPool::setEntries& ancestors,\n+                                            const CTxMemPool::setEntries& direct_conflicts,\n+                                            const CTxMemPool::setEntries& original_transactions)\n+{\n+        const CFeeRate replacement_individual_feerate(replacement_fees, replacement_vsize);\n+        // Ancestor feerate is the total modified fees divided by the total size. To get the\n+        // ancestor feerate, add up all the individual modified fees and sizes. Don't try to use the\n+        // cached ancestor fees and sizes because entries may have overlapping ancestors.\n+        for (CTxMemPool::txiter it : ancestors) {\n+            replacement_fees += it->GetModifiedFee();\n+            replacement_vsize += it->GetTxSize();\n+        }\n+        const CFeeRate replacement_ancestor_feerate(replacement_fees, replacement_vsize);\n+        // A package/transaction's ancestor feerate is not equivalent to the miner score; it may\n+        // overestimate. Some subset of the ancestors could be included by itself if it has other\n+        // high-feerate descendants or are themselves higher feerate than this package/transaction.\n+        // For now, as a conservative estimate, use the minimum between the transaction's individual\n+        // feerate and ancestor feerate.\n+        const CFeeRate replacement_miner_score = std::min(replacement_individual_feerate, replacement_ancestor_feerate);",
      "path": "src/policy/rbf.cpp",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983461693,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This rule is still sometimes problematic *if* you are doing batch fee bumping.\r\n\r\nLet's imagine the case where we have two separate channels, symmetrical commitment transactions(for clarity of argument).\r\n\r\nIf commitment_A is in the miner's mempool, and Bob wants to fee bump commitment_A as well as CPFP commitment_B(different channel!) into the miner's mempool, Bob will have to pay the replaced cpfp_A's feerate for the entire CPFP commitment_B + cpfp_B package.\r\n\r\nIn other words, batch bumping is probably not a good idea unless you know package RBF will evict the sponsored transaction directly.",
      "created_at": "2022-11-01T17:06:52Z",
      "updated_at": "2022-11-01T17:08:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1010678995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1010678995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915284",
      "pull_request_review_id": 1165464616,
      "id": 1011915284,
      "node_id": "PRRC_kwDOABII5848UJoU",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 20,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004866030,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Deleted comment",
      "created_at": "2022-11-02T15:12:00Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011915284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915419",
      "pull_request_review_id": 1165464616,
      "id": 1011915419,
      "node_id": "PRRC_kwDOABII5848UJqb",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 3,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983426844,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done",
      "created_at": "2022-11-02T15:12:04Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011915419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915747",
      "pull_request_review_id": 1165464616,
      "id": 1011915747,
      "node_id": "PRRC_kwDOABII5848UJvj",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 44,
      "original_position": 22,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004867023,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done and documented",
      "created_at": "2022-11-02T15:12:15Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011915747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011915747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011924419",
      "pull_request_review_id": 1165464616,
      "id": 1011924419,
      "node_id": "PRRC_kwDOABII5848UL3D",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 35,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004862848,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed, hopefully clearer now",
      "created_at": "2022-11-02T15:17:21Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011924419",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011924419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 127,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011925792",
      "pull_request_review_id": 1165464616,
      "id": 1011925792,
      "node_id": "PRRC_kwDOABII5848UMMg",
      "diff_hunk": "@@ -117,3 +118,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted in the event of a replacement.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.\n+\n+3. The minimum between package feerate and ancestor feerate of the child is not lower than the\n+   individual feerates of all directly conflicting transactions and the ancestor feerates of all\n+   original transactions.\n+\n+*Rationale*: Attempt to ensure that the replacement transactions are not less incentive-compatible\n+to mine.\n+\n+4. The package fee pays an absolute fee of at least the sum paid by the original transactions.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 66,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004882194,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2022-11-02T15:18:01Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011925792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011925792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 158,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011927231",
      "pull_request_review_id": 1165464616,
      "id": 1011927231,
      "node_id": "PRRC_kwDOABII5848UMi_",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 29,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004868277,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clarified",
      "created_at": "2022-11-02T15:18:44Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011927231",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011927231"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011927764",
      "pull_request_review_id": 1165464616,
      "id": 1011927764,
      "node_id": "PRRC_kwDOABII5848UMrU",
      "diff_hunk": "@@ -0,0 +1,62 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") are allowed in mempool and\n+transaction relay.\n+\n+The policy rules set for V3 transactions is intended to aid contract or L2 protocols in which\n+transactions are signed by untrusted counterparties well before broadcast time, e.g. the Lightning\n+Network (LN). Since these contracting transactions are shared between multiple parties and mempool\n+congestion is difficult to predict, mempool policy restrictions may accidentally allow a malicious\n+party to pin a transaction.  The goal here is create a policy for V3 transactions that retains\n+DoS-resistance and accepts transactions that are incentive-compatible to mine, while also avoiding\n+specific pinning attacks.\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee]. Use the (`-mempoolfullrbf`) configuration option to\n+allow transaction replacement without enforcement of any opt-in signaling rule.\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: The descendant of a *confirmed* V3 transaction does not need to be V3.\n+\n+3. A V3 transaction cannot have more than 1 descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+4. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be",
      "path": "doc/policy/version3_transactions.md",
      "position": 83,
      "original_position": 45,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "add1250fdabc27a94fd12bd21525da91e9e70b89",
      "in_reply_to_id": 1004876143,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a note about 1/100",
      "created_at": "2022-11-02T15:19:01Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011927764",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011927764"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 83,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011936854",
      "pull_request_review_id": 1165464616,
      "id": 1011936854,
      "node_id": "PRRC_kwDOABII5848UO5W",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 64,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983472562,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, thanks!",
      "created_at": "2022-11-02T15:24:04Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011936854",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011936854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011938593",
      "pull_request_review_id": 1165464616,
      "id": 1011938593,
      "node_id": "PRRC_kwDOABII5848UPUh",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    CTxMemPool::setEntries v3_ancestors{GetV3Ancestors(ancestors)};\n+\n+    // Note that this code assumes that any V3 transaction can only have 1 descendant.",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 78,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1008171877,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Deleted, I confused myself too. Thanks",
      "created_at": "2022-11-02T15:25:00Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011938593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011938593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011954857",
      "pull_request_review_id": 1165464616,
      "id": 1011954857,
      "node_id": "PRRC_kwDOABII5848UTSp",
      "diff_hunk": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n+#include <policy/contract_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_pair(it->second, tx->GetWitnessHash());\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    const auto version{ptx->nVersion};\n+    if (version == 3) return std::nullopt;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors)\n+{\n+    CTxMemPool::setEntries v3_ancestors;\n+    for (const auto& entry : ancestors) {\n+        if (entry->GetTx().nVersion == 3) {\n+            v3_ancestors.insert(entry);\n+        }\n+    }\n+    return v3_ancestors;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    CTxMemPool::setEntries v3_ancestors{GetV3Ancestors(ancestors)};\n+\n+    // Note that this code assumes that any V3 transaction can only have 1 descendant.\n+    // If there are any V3 ancestors, this is the only child allowed.\n+    if (v3_ancestors.size() > 0) {\n+        // This tx is a child of a V3 tx. To avoid RBF pinning, it can't be too large.\n+        if (tx_vsize > V3_CHILD_MAX_SIZE) {\n+            return strprintf(\"tx is too big: %u virtual bytes\", tx_vsize);\n+        }\n+    }\n+    for (const auto& entry : v3_ancestors) {",
      "path": "src/policy/contract_policy.cpp",
      "position": null,
      "original_position": 86,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1008172263,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-02T15:34:33Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011954857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011954857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011956687",
      "pull_request_review_id": 1165464616,
      "id": 1011956687,
      "node_id": "PRRC_kwDOABII5848UTvP",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 19,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 983462411,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done",
      "created_at": "2022-11-02T15:36:01Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011956687",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011956687"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 19,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011956968",
      "pull_request_review_id": 1165464616,
      "id": 1011956968,
      "node_id": "PRRC_kwDOABII5848UTzo",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 17,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004884944,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed, that does sound cooler",
      "created_at": "2022-11-02T15:36:13Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011956968",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011956968"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011957441",
      "pull_request_review_id": 1165464616,
      "id": 1011957441,
      "node_id": "PRRC_kwDOABII5848UT7B",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 30,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004887453,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-02T15:36:37Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011957441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011957441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 30,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011958071",
      "pull_request_review_id": 1165464616,
      "id": 1011958071,
      "node_id": "PRRC_kwDOABII5848UUE3",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 38,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004893307,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed the function to take any list of transactions, so won't rename",
      "created_at": "2022-11-02T15:37:08Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011958071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011958071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011959914",
      "pull_request_review_id": 1165464616,
      "id": 1011959914,
      "node_id": "PRRC_kwDOABII5848UUhq",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** Filters the ancestors, returning the ones which are nVersion=3 (\"V3 ancestors\"). */\n+CTxMemPool::setEntries GetV3Ancestors(const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.\n+ */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 54,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004895010,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-02T15:38:33Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011959914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011959914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011960079",
      "pull_request_review_id": 1165464616,
      "id": 1011960079,
      "node_id": "PRRC_kwDOABII5848UUkP",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_CONTRACT_POLICY_H\n+#define BITCOIN_POLICY_CONTRACT_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which are\n+// intended for use in contracting protocols.\n+\n+/** Maximum virtual size of a tx which spends from a V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including a tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.\n+/** Maximum number of transactions including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{DEFAULT_ANCESTOR_LIMIT};\n+/** Maximum total virtual size of transactions, in KvB, including a tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_SIZE_LIMIT_KVB{DEFAULT_ANCESTOR_SIZE_LIMIT_KVB};\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. Check this rule\n+ * for ptx and a package that may contain its unconfirmed ancestors. It's fine if ptx is one of the\n+ * transactions in the package, and it's fine if none of the transactions are ancestors of ptx.\n+ * Assumes the transactions are sorted topologically and have no conflicts, i.e.,\n+ * CheckPackage(package) passed.\n+ * @returns a pair of wtxids (parent, child) where the parent is V3 but the child is not V3, if at\n+ * least one exists. Otherwise std::nullopt.\n+ */\n+std::optional<std::pair<uint256, uint256>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also have V3. */",
      "path": "src/policy/contract_policy.h",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "67cc7a25d37e2d21645beda589b23222251d22d5",
      "in_reply_to_id": 1004897242,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done and done",
      "created_at": "2022-11-02T15:38:41Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011960079",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011960079"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011961178",
      "pull_request_review_id": 1165464616,
      "id": 1011961178,
      "node_id": "PRRC_kwDOABII5848UU1a",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": 1004937926,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, unsure why I flipped the name. Fixed.",
      "created_at": "2022-11-02T15:39:32Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011961178",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011961178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011961307",
      "pull_request_review_id": 1165464616,
      "id": 1011961307,
      "node_id": "PRRC_kwDOABII5848UU3b",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": 1004938752,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added, thanks",
      "created_at": "2022-11-02T15:39:38Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011961307",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011961307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011980663",
      "pull_request_review_id": 1165464616,
      "id": 1011980663,
      "node_id": "PRRC_kwDOABII5848UZl3",
      "diff_hunk": "@@ -225,6 +226,60 @@ BOOST_FIXTURE_TEST_CASE(rbf_helper_functions, TestChain100Setup)\n \n     const auto spends_conflicting_confirmed = make_tx({m_coinbase_txns[0], m_coinbase_txns[1]}, {45 * CENT});\n     BOOST_CHECK(HasNoNewUnconfirmed(*spends_conflicting_confirmed.get(), pool, {entry1, entry3}) == std::nullopt);\n+\n+    // Tests for CheckMinerScores\n+    // Don't allow replacements with a low ancestor feerate.\n+    BOOST_CHECK(CheckMinerScores(/*replacement_fees=*/entry1->GetFee(),\n+                                 /*replacement_vsize=*/entry1->GetTxSize(),\n+                                 /*ancestors=*/{entry5},",
      "path": "src/test/rbf_tests.cpp",
      "position": null,
      "original_position": 17,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "5cc295b8ef46c78a093f249b70304eae3ec169b9",
      "in_reply_to_id": 1005741932,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, renamed them all",
      "created_at": "2022-11-02T15:54:22Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1011980663",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1011980663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012013820",
      "pull_request_review_id": 1165464616,
      "id": 1012013820,
      "node_id": "PRRC_kwDOABII5848Uhr8",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has too many direct parents.\n+    {\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+        mempool_outpoints.resize(25);\n+        for (size_t i{0}; i < 24; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(1), /*version=*/2);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(COutPoint{mempool_tx->GetHash(), 0});\n+        }\n+        auto tx_v3_many_parents = make_tx(mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_parents, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Configuration where the tx is in a many-generation chain.\n+    auto last_outpoint{random_outpoints(1)[0]};\n+    for (size_t i{0}; i < 25; ++i) {\n+        auto mempool_tx = make_tx({last_outpoint}, /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(mempool_tx));\n+        last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+    }\n+    {\n+        auto tx_v3_many_generation = make_tx({last_outpoint}, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_generation), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_generation, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // V3 tx cannot have too large ancestor size\n+    std::vector<COutPoint> large_mempool_outpoints;\n+    large_mempool_outpoints.resize(10);",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": 1004941161,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because each parent needs to be below 100kvb and parent+child needs to be above 101KvB. If there's only 1 parent, then the child needs to be >1000vB to get us across 101KvB, but that is violating a different v3 rule as well.",
      "created_at": "2022-11-02T16:20:12Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1012013820",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012013820"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012036391",
      "pull_request_review_id": 1165464616,
      "id": 1012036391,
      "node_id": "PRRC_kwDOABII5848UnMn",
      "diff_hunk": "@@ -49,4 +51,159 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    uint64_t no_limit = std::numeric_limits<uint64_t>::max();\n+    std::string placeholder_str;\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    CTxMemPool::setEntries ancestors;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 2);\n+        auto v3_ancestors = GetV3Ancestors(ancestors);\n+        BOOST_CHECK(v3_ancestors.size() == 1);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, ancestors).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has too many direct parents.\n+    {\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+        mempool_outpoints.resize(25);\n+        for (size_t i{0}; i < 24; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(1), /*version=*/2);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(COutPoint{mempool_tx->GetHash(), 0});\n+        }\n+        auto tx_v3_many_parents = make_tx(mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_parents, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // Configuration where the tx is in a many-generation chain.\n+    auto last_outpoint{random_outpoints(1)[0]};\n+    for (size_t i{0}; i < 25; ++i) {\n+        auto mempool_tx = make_tx({last_outpoint}, /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(mempool_tx));\n+        last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+    }\n+    {\n+        auto tx_v3_many_generation = make_tx({last_outpoint}, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_many_generation), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 25);\n+        BOOST_CHECK(ancestors.size() + 1 > V3_ANCESTOR_LIMIT);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_many_generation, ancestors, empty_conflicts_set).has_value());\n+        ancestors.clear();\n+    }\n+\n+    // V3 tx cannot have too large ancestor size\n+    std::vector<COutPoint> large_mempool_outpoints;\n+    large_mempool_outpoints.resize(10);\n+    for (size_t i{0}; i < 10; ++i) {\n+        auto large_mempool_tx = make_tx(random_outpoints(200), /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(large_mempool_tx));\n+        large_mempool_outpoints.emplace_back(COutPoint{large_mempool_tx->GetHash(), 0});\n+    }\n+    {\n+        auto tx_v3_large_parents = make_tx(large_mempool_outpoints, /*version=*/3);\n+        pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_large_parents), ancestors, no_limit, no_limit, no_limit, no_limit, placeholder_str);\n+        BOOST_CHECK(ancestors.size() == 10);\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_large_parents, ancestors, empty_conflicts_set).has_value());",
      "path": "src/test/txvalidation_tests.cpp",
      "position": null,
      "original_position": 123,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "4b8176b96b991245ae831db8c3692b4f225df6c5",
      "in_reply_to_id": 1004942013,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-02T16:38:19Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1012036391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012036391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 206,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012039568",
      "pull_request_review_id": 1165637368,
      "id": 1012039568,
      "node_id": "PRRC_kwDOABII5848Un-Q",
      "diff_hunk": "@@ -1245,7 +1367,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, package_state)) {\n+    if (txns.size() > 1 && !PackageMempoolChecks(args, txns, workspaces, package_state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 445,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18076ccda8351b08e8c27613f3a2f92228110ede",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(just noting to remember) This lets through un-paid-for RBFs for single tx packages, as well as bypasses conflict set creation, leading to internally-inconsistent mempool",
      "created_at": "2022-11-02T16:40:57Z",
      "updated_at": "2022-11-02T17:00:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1012039568",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012039568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012083181",
      "pull_request_review_id": 1165464616,
      "id": 1012083181,
      "node_id": "PRRC_kwDOABII5848Uynt",
      "diff_hunk": "@@ -1245,7 +1367,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n     // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n     // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n     std::string err_string;\n-    if (txns.size() > 1 && !PackageMempoolChecks(txns, package_state)) {\n+    if (txns.size() > 1 && !PackageMempoolChecks(args, txns, workspaces, package_state)) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 445,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "18076ccda8351b08e8c27613f3a2f92228110ede",
      "in_reply_to_id": 1012039568,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, thank you :hugs:. Dumb size > 1 rule.",
      "created_at": "2022-11-02T17:20:29Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1012083181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012083181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1370,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012083572",
      "pull_request_review_id": 1165464616,
      "id": 1012083572,
      "node_id": "PRRC_kwDOABII5848Uyt0",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 74,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004964328,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Split into subtests and mining in between",
      "created_at": "2022-11-02T17:20:52Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1012083572",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1012083572"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013108655",
      "pull_request_review_id": 1165464616,
      "id": 1013108655,
      "node_id": "PRRC_kwDOABII5848Ys-v",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 85,
      "original_position": 48,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004960576,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2022-11-03T16:03:31Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013108655",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013108655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013109134",
      "pull_request_review_id": 1165464616,
      "id": 1013109134,
      "node_id": "PRRC_kwDOABII5848YtGO",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 64,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004963312,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that's better, added `check_mempool` everywhere.",
      "created_at": "2022-11-03T16:03:52Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013109134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013109134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013111919",
      "pull_request_review_id": 1165464616,
      "id": 1013111919,
      "node_id": "PRRC_kwDOABII5848Ytxv",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 100,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004965337,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed",
      "created_at": "2022-11-03T16:06:10Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013111919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013111919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 100,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013116608",
      "pull_request_review_id": 1165464616,
      "id": 1013116608,
      "node_id": "PRRC_kwDOABII5848Yu7A",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        assert node.getmempoolentry(tx_v3_no_bip125[\"txid\"])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_no_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_no_bip125[\"txid\"])\n+\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 132,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004968938,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed `tx_v3_almost_heavy` to be *just* in",
      "created_at": "2022-11-03T16:10:09Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013116608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013116608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013117124",
      "pull_request_review_id": 1165464616,
      "id": 1013117124,
      "node_id": "PRRC_kwDOABII5848YvDE",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")\n+        utxo_v3_no_bip125 = self.wallet.get_utxo()\n+        tx_v3_no_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+\n+        assert node.getmempoolentry(tx_v3_no_bip125[\"txid\"])\n+        assert not node.getmempoolentry(tx_v3_no_bip125[\"txid\"])[\"bip125-replaceable\"]\n+        tx_v3_no_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_no_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_no_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_no_bip125[\"txid\"])\n+\n+        self.log.info(\"Test a child of a V3 transaction cannot be more than 1000vB\")\n+        self.restart_node(0, extra_args=[\"-datacarriersize=1000\"])\n+        tx_v3_parent_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        tx_v3_child_heavy = self.wallet.create_self_transfer(\n+            utxo_to_spend=tx_v3_parent_normal[\"new_utxo\"],\n+            target_weight=4004,\n+            version=3\n+        )\n+        assert_greater_than_or_equal(tx_v3_child_heavy[\"tx\"].get_vsize(), 1000)\n+        assert_raises_rpc_error(-26, \"nonstandard\", node.sendrawtransaction, tx_v3_child_heavy[\"hex\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 139,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004968205,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, it's now \"v3-tx-nonstandard, v3 child tx is too big\"",
      "created_at": "2022-11-03T16:10:35Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013117124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013117124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013117540",
      "pull_request_review_id": 1165464616,
      "id": 1013117540,
      "node_id": "PRRC_kwDOABII5848YvJk",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])",
      "path": "test/functional/mempool_accept_v3.py",
      "position": null,
      "original_position": 64,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004963312,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agree that's better, added `check_mempool` that does this everywhere.",
      "created_at": "2022-11-03T16:10:58Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013117540",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013117540"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013119709",
      "pull_request_review_id": 1165464616,
      "id": 1013119709,
      "node_id": "PRRC_kwDOABII5848Yvrd",
      "diff_hunk": "@@ -0,0 +1,316 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+from random import choice\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coins, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a child-with-parents package using the parent_coins passed in.\n+        Each coin in parent_coins will be used to fund 1 parent transaction.\n+        Each parent will have 1 output. The parents' outputs will be used to fund 1 child\n+        transaction. Thus, the package will contain len(parent_coins) + 1 transactions.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr.\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        package_hex = []\n+        package_txns = []\n+        child_inputs = []\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        for coin in parent_coins:\n+            parent_result = self.wallet.create_self_transfer(\n+                fee_rate=0,\n+                fee=parent_fee,\n+                utxo_to_spend=coin,\n+                sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr, # prevent identical txids",
      "path": "test/functional/mempool_package_rbf.py",
      "position": null,
      "original_position": 63,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "f48315af9c3497bd725a5a8964add802bd20cb03",
      "in_reply_to_id": 1005841411,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "added \"between packages\"",
      "created_at": "2022-11-03T16:12:31Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013119709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013119709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013182523",
      "pull_request_review_id": 1165464616,
      "id": 1013182523,
      "node_id": "PRRC_kwDOABII5848Y_A7",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Transactions must pay for their own replacements unless they are V3.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": 1005755274,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rewritten",
      "created_at": "2022-11-03T17:01:29Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013182523",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013182523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1033,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013188155",
      "pull_request_review_id": 1165464616,
      "id": 1013188155,
      "node_id": "PRRC_kwDOABII5848ZAY7",
      "diff_hunk": "@@ -0,0 +1,167 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.messages import (\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class MempoolAcceptV3(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 10)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+\n+        self.log.info(\"Test acceptance of V3 transactions\")\n+        tx_v3_normal = self.wallet.send_self_transfer(from_node=node, version=3)\n+        assert node.getmempoolentry(tx_v3_normal[\"txid\"])\n+\n+        self.log.info(\"Test a child of V3 transaction must also be V3\")\n+        tx_child_v2 = self.wallet.create_self_transfer(utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=2)\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_child_v2[\"hex\"])\n+\n+        tx_child_v3 = self.wallet.send_self_transfer(from_node=node, utxo_to_spend=tx_v3_normal[\"new_utxo\"], version=3)\n+        assert node.getmempoolentry(tx_child_v3[\"txid\"])\n+\n+        self.log.info(\"Test a V3 transaction cannot have more than 1 descendant\")\n+        tx_grandchild_v3 = self.wallet.create_self_transfer(utxo_to_spend=tx_child_v3[\"new_utxo\"], version=3)\n+        assert_raises_rpc_error(-26, \"would exceed descendant count limit\", node.sendrawtransaction, tx_grandchild_v3[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V3 transactions\")\n+        utxo_v3_bip125 = self.wallet.get_utxo()\n+        tx_v3_bip125 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_bip125,\n+            sequence=MAX_BIP125_RBF_SEQUENCE,\n+            version=3\n+        )\n+\n+        tx_v3_bip125_rbf = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf[\"txid\"])\n+        assert_raises_rpc_error(-5, \"Transaction not in mempool\", node.getmempoolentry, tx_v3_bip125[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 3,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test that replacements cannot cause violation of inherited V3\")\n+        utxo_v3_parent = self.wallet.get_utxo()\n+        tx_v3_parent = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=utxo_v3_parent,\n+            version=3\n+        )\n+        tx_v3_child = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=3\n+        )\n+        assert node.getmempoolentry(tx_v3_parent[\"txid\"])\n+        assert node.getmempoolentry(tx_v3_child[\"txid\"])\n+\n+        tx_v3_child_rbf_v2 = self.wallet.create_self_transfer(\n+            fee_rate=DEFAULT_FEE * 2,\n+            utxo_to_spend=tx_v3_parent[\"new_utxo\"],\n+            version=2\n+        )\n+        assert_raises_rpc_error(-26, \"non-v3-tx-spends-v3\", node.sendrawtransaction, tx_v3_child_rbf_v2[\"hex\"])\n+\n+        self.log.info(\"Test V3 transactions may be replaced by V2 transactions\")\n+        tx_v3_bip125_rbf_v2 = self.wallet.send_self_transfer(\n+            from_node=node,\n+            fee_rate=DEFAULT_FEE * 4,\n+            utxo_to_spend=utxo_v3_bip125,\n+            version=2\n+        )\n+        assert node.getmempoolentry(tx_v3_bip125_rbf_v2[\"txid\"])\n+\n+        self.log.info(\"Test V3 transactions that don't signal BIP125 are replaceable\")",
      "path": "test/functional/mempool_accept_v3.py",
      "position": 141,
      "original_position": 109,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c11fb499f182306f635ea9457ec4574b2992e185",
      "in_reply_to_id": 1004966712,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added",
      "created_at": "2022-11-03T17:06:08Z",
      "updated_at": "2022-11-03T17:15:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013188155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013188155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 141,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013193800",
      "pull_request_review_id": 1165464616,
      "id": 1013193800,
      "node_id": "PRRC_kwDOABII5848ZBxI",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the\n+        // to-be-replaced mempool entries when counting descendants. Note that this is not\n+        // necessarily as simple as subtracting the count/size from descendant limits, because\n+        // multiple transactions may conflict with the same entries, causing us to double-count them\n+        // and their descendants.\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Transactions must pay for their own replacements unless they are V3.\n+    if (args.m_package_feerates) {\n+        for (const auto& ws : workspaces) {\n+            // If this transaction has a conflict, it must be V3.\n+            if (!ws.m_iters_conflicting.empty() && ws.m_ptx->nVersion != 3) {\n+                return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: V3 required\");\n+            }\n+        }\n+    }\n+\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const auto hash = workspaces[workspaces.size() - 1].m_ptx->GetHash();\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (Workspace& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    // Check that the union of all collective conflicts and ancestors is disjoint.",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 98,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": 1005833244,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Exactly. Edited the comment.",
      "created_at": "2022-11-03T17:11:26Z",
      "updated_at": "2022-11-03T17:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013193800",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013193800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1063,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013217154",
      "pull_request_review_id": 1167401662,
      "id": 1013217154,
      "node_id": "PRRC_kwDOABII5848ZHeC",
      "diff_hunk": "@@ -1182,7 +1197,7 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n-    Workspace ws(ptx);\n+    Workspace ws(ptx, m_limit_descendants, m_limit_descendant_size);",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 68,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "dd8d0af4a27bf4c299a1af8de4dbe0c139dba730",
      "in_reply_to_id": 1005720112,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped the commit and replaced with a big comment, since the bug is not possible when package RBF requires v3.",
      "created_at": "2022-11-03T17:33:04Z",
      "updated_at": "2022-11-03T17:33:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013217154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013217154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1200,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013218218",
      "pull_request_review_id": 1167403227,
      "id": 1013218218,
      "node_id": "PRRC_kwDOABII5848ZHuq",
      "diff_hunk": "@@ -1005,16 +1009,93 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     // Note that the MemPoolAccept::m_limit_descendants, not Workspace::m_tx_limit_descendants, are\n     // used as descendant limits. If any extra descendant carveouts were granted (see comments in\n     // PreChecks), they do not apply here.\n     if (!m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n                                    m_limit_descendant_size, err_string)) {\n+        // TODO: When replacements exist, to avoid overestimating descendant counts, deduct the",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 54,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7cbe926e13f802e372bf140594182a7a2c0d2f1e",
      "in_reply_to_id": 1005748598,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Deleted this particular comment since the TODO is no longer necessary while package RBF requires v3.",
      "created_at": "2022-11-03T17:34:09Z",
      "updated_at": "2022-11-03T17:34:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013218218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013218218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1024,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013222930",
      "pull_request_review_id": 1167410333,
      "id": 1013222930,
      "node_id": "PRRC_kwDOABII5848ZI4S",
      "diff_hunk": "@@ -969,12 +1056,98 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limits, err_string)) {\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Unless the transaction is V3, its own fees must meet the requirements for replacing its conflicts.\n+    if (args.m_package_feerates) {\n+        for (const auto& ws : workspaces) {\n+            // If this transaction has a conflict, it must be V3.\n+            if (!ws.m_iters_conflicting.empty() && ws.m_ptx->nVersion != 3) {\n+                return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: V3 required\");\n+            }\n+        }\n+    }\n+\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const auto hash = workspaces[workspaces.size() - 1].m_ptx->GetHash();\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (Workspace& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    // Make sure none of the package transactions depend on a mempool transaction that is going to be replaced.\n+    std::set<uint256> all_conflicting_txids;\n+    std::transform(m_all_conflicts.cbegin(), m_all_conflicts.cend(),\n+                   std::inserter(all_conflicting_txids, all_conflicting_txids.end()),\n+                   [](const auto& entry) { return entry->GetTx().GetHash(); });\n+    if (const auto err_string{EntriesAndTxidsDisjoint(m_collective_ancestors, all_conflicting_txids, hash)}) {\n+        // Note that we handle this differently in individual transaction validation (a transaction\n+        // that conflicts with its own dependency is inconsistent, but this could just be\n+        // conflicting transactions in a package).\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package conflicts with dependency\", *err_string);\n+    }\n+\n+    // CheckMinerScores is very conservative and should not be used for individual transactions.\n+    // For example, the mempool contains a large, low-feerate transaction A (99,000vB, 1sat/vB feerate) is\n+    // Transaction A has a small, high-feerate child B (1,000vB, 101sat/vB). The user wants to\n+    // further bump A+B by replacing B with an even higher feerate transaction, B'. If\n+    // CheckMinerScores is enforced, then B' needs an ancestor score higher than the individual\n+    // feerate of its directly conflicting transaction, B, which is 101sat/vB, This is extremely\n+    // expensive since the ancestor feerate includes A (101sat/vB * 99,000vB).\n+    // On the other hand, CheckMinerScores is fine if A+B is to be replaced by A'+B' (where A' is a\n+    // transaction that conflicts with A) because the directly conflicting transaction A, has a low\n+    // individual feerate.\n+    // As such, it's also important to ensure that we don't apply CheckMinerScores() to individual\n+    // transactions that were submitted as a package (e.g. if it's the only transaction left after\n+    // deduplication in AcceptPackage()).\n+    Assume(txns.size() > 1);",
      "path": "src/validation.cpp",
      "position": 390,
      "original_position": 401,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "78333c1cde5b3c71f663ff861d8464430fb1ca74",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "errr, the same code path hits here :)\r\n",
      "created_at": "2022-11-03T17:39:18Z",
      "updated_at": "2022-11-03T17:39:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013222930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013222930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1116,
      "original_line": 1116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013244365",
      "pull_request_review_id": 1167441773,
      "id": 1013244365,
      "node_id": "PRRC_kwDOABII5848ZOHN",
      "diff_hunk": "@@ -969,12 +1056,98 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limits, err_string)) {\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Unless the transaction is V3, its own fees must meet the requirements for replacing its conflicts.\n+    if (args.m_package_feerates) {\n+        for (const auto& ws : workspaces) {\n+            // If this transaction has a conflict, it must be V3.\n+            if (!ws.m_iters_conflicting.empty() && ws.m_ptx->nVersion != 3) {\n+                return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package RBF failed: V3 required\");\n+            }\n+        }\n+    }\n+\n+    CTxMemPool::setEntries direct_conflict_iters;\n+    for (Workspace& ws : workspaces) {\n+        // Aggregate all conflicts into one set.\n+        direct_conflict_iters.merge(ws.m_iters_conflicting);\n+    }\n+\n+    // Use the child as the transaction for attributing errors to.\n+    const auto hash = workspaces[workspaces.size() - 1].m_ptx->GetHash();\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+\n+    // Calculate all conflicting entries and enforce Rules 2 and 5.\n+    for (Workspace& ws : workspaces) {\n+        // The aggregated set of conflicts cannot exceed 100.\n+        if (const auto err_string{GetEntriesForConflicts(*ws.m_ptx, m_pool, direct_conflict_iters,\n+                                                         m_all_conflicts)}) {\n+            return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                         \"package RBF failed: too many potential replacements\", *err_string);\n+        }\n+    }\n+\n+    // Make sure none of the package transactions depend on a mempool transaction that is going to be replaced.\n+    std::set<uint256> all_conflicting_txids;\n+    std::transform(m_all_conflicts.cbegin(), m_all_conflicts.cend(),\n+                   std::inserter(all_conflicting_txids, all_conflicting_txids.end()),\n+                   [](const auto& entry) { return entry->GetTx().GetHash(); });\n+    if (const auto err_string{EntriesAndTxidsDisjoint(m_collective_ancestors, all_conflicting_txids, hash)}) {\n+        // Note that we handle this differently in individual transaction validation (a transaction\n+        // that conflicts with its own dependency is inconsistent, but this could just be\n+        // conflicting transactions in a package).\n+        return package_state.Invalid(PackageValidationResult::PCKG_POLICY,\n+                                     \"package RBF failed: package conflicts with dependency\", *err_string);\n+    }\n+\n+    // CheckMinerScores is very conservative and should not be used for individual transactions.\n+    // For example, the mempool contains a large, low-feerate transaction A (99,000vB, 1sat/vB feerate) is\n+    // Transaction A has a small, high-feerate child B (1,000vB, 101sat/vB). The user wants to\n+    // further bump A+B by replacing B with an even higher feerate transaction, B'. If\n+    // CheckMinerScores is enforced, then B' needs an ancestor score higher than the individual\n+    // feerate of its directly conflicting transaction, B, which is 101sat/vB, This is extremely\n+    // expensive since the ancestor feerate includes A (101sat/vB * 99,000vB).\n+    // On the other hand, CheckMinerScores is fine if A+B is to be replaced by A'+B' (where A' is a\n+    // transaction that conflicts with A) because the directly conflicting transaction A, has a low\n+    // individual feerate.\n+    // As such, it's also important to ensure that we don't apply CheckMinerScores() to individual\n+    // transactions that were submitted as a package (e.g. if it's the only transaction left after\n+    // deduplication in AcceptPackage()).\n+    Assume(txns.size() > 1);",
      "path": "src/validation.cpp",
      "position": 390,
      "original_position": 401,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "78333c1cde5b3c71f663ff861d8464430fb1ca74",
      "in_reply_to_id": 1013222930,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops I lost a commit on the floor, thanks.\r\nI think this assumption should hold true now? `AcceptPackage` should now be calling `AcceptSingleTransaction`, not `AcceptMultipleTransactions` when there's only 1 tx left. Which means there should always be more than 1 tx when we get here.",
      "created_at": "2022-11-03T18:01:56Z",
      "updated_at": "2022-11-03T18:01:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013244365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013244365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1116,
      "original_line": 1116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013293248",
      "pull_request_review_id": 1167512793,
      "id": 1013293248,
      "node_id": "PRRC_kwDOABII5848ZaDA",
      "diff_hunk": "@@ -1379,6 +1570,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // future.  Continue individually validating the rest of the transactions, because\n                 // some of them may still be valid.\n                 quit_early = true;\n+                package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 589,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no results are being pushed here, which seems to mean we'll hit `NONFATAL_UNREACHABLE` in the switch statement in `submitpackage` RPC with a tx that doesn't hit the above two conditions.\r\n\r\ne.g., a non-standard script",
      "created_at": "2022-11-03T18:57:02Z",
      "updated_at": "2022-11-03T18:57:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013293248",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013293248"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013300039",
      "pull_request_review_id": 1167522786,
      "id": 1013300039,
      "node_id": "PRRC_kwDOABII5848ZbtH",
      "diff_hunk": "@@ -1379,6 +1570,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // future.  Continue individually validating the rest of the transactions, because\n                 // some of them may still be valid.\n                 quit_early = true;\n+                package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 589,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                results.emplace(wtxid, single_res);\r\n                package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");\r\n```",
      "created_at": "2022-11-03T19:05:02Z",
      "updated_at": "2022-11-03T19:05:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1013300039",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1013300039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014124669",
      "pull_request_review_id": 1168688530,
      "id": 1014124669,
      "node_id": "PRRC_kwDOABII5848clB9",
      "diff_hunk": "@@ -1379,6 +1570,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // future.  Continue individually validating the rest of the transactions, because\n                 // some of them may still be valid.\n                 quit_early = true;\n+                package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 589,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": 1013300039,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes good point, I think this is correct.",
      "created_at": "2022-11-04T14:54:46Z",
      "updated_at": "2022-11-04T14:54:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1014124669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014124669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014284608",
      "pull_request_review_id": 1168927850,
      "id": 1014284608,
      "node_id": "PRRC_kwDOABII5848dMFA",
      "diff_hunk": "@@ -181,3 +181,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,",
      "path": "src/policy/rbf.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "some related discussion on estimating mining score of the replacement: https://github.com/bitcoin/bitcoin/pull/26451#issuecomment-1303889425\r\n",
      "created_at": "2022-11-04T17:19:19Z",
      "updated_at": "2022-11-04T17:19:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1014284608",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1014284608"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034177919",
      "pull_request_review_id": 1196723893,
      "id": 1034177919,
      "node_id": "PRRC_kwDOABII5849pE1_",
      "diff_hunk": "@@ -117,3 +123,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted if the replacement transaction is accepted.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 73,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In the light of the discrepancy between BIP125 and our mempool code, I think this should precise if we mean explicit signaling only or explicit signaling+inherited signaling.",
      "created_at": "2022-11-29T00:17:21Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034177919",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034177919"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034180693",
      "pull_request_review_id": 1196723893,
      "id": 1034180693,
      "node_id": "PRRC_kwDOABII5849pFhV",
      "diff_hunk": "@@ -117,3 +123,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted if the replacement transaction is accepted.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 61,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should precise if the mempool conflicts are required to be V3 themselves. From my memory of the mailing list discussions and elsewhere, I think the current state of thinking, directly conflicting transactions versions number are not considered.\r\n\r\nFor the Lightning use-case, this is a significant security advantage as the ~80k of public channels, with all pre-signed revoked commitment transactions V2 can be replaced with newer version=3 package. Revoked commitment transactions, even if the honest counterparty is in knowledge of the revocation secret, are still consensus and policy valid transactions, and as such can be leveraged as pinning means.\r\n\r\nOn the other hand, I think allowing V3 to replace V2 chain of transactions lead to the consequence than V2 users are implicitly subscribing to this new replacement regime. A receiver of a V2 transaction could apply the BIP125 rules to estimate the replacement odd of the transaction, and the application logic be broken when the actual rule 3 of minimum between package feerate and ancestor feerate is applied. I don't know if we're significantly interfering with any Bitcoin application here.",
      "created_at": "2022-11-29T00:23:16Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034180693",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034180693"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034188179",
      "pull_request_review_id": 1196723893,
      "id": 1034188179,
      "node_id": "PRRC_kwDOABII5849pHWT",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.",
      "path": "doc/policy/version3_transactions.md",
      "position": 33,
      "original_position": 33,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we would like to add more rational to the design of the rules, we could explain why a scorched earth approach would solve the Lightning case really imperfectly (discussed recently here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021176.html). Indeed, Lightning implementation could just blindly replace-by-fee the pinning transactions, paying up to the channel value. This wouldn't work at all against an attacker pinning with one single malicious transaction multiple channel from different parties where the malicious transaction fee is above the value of each channel. E.g channel A 10000 sats, channel B 25000 sats and channel C 8000 sats. If the malicious pinning transactions fee equals 26000 sats, none of the honest party will rationally fee-bump more than their own channel value. \r\n\r\nFeerate-only replacement rules scales up to the maximum package size and worst historical mempool reduce consideraly the fee-bumping reserves requirement for a LN node, which is a notable advantage I think.",
      "created_at": "2022-11-29T00:39:55Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034188179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034188179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034196433",
      "pull_request_review_id": 1196723893,
      "id": 1034196433,
      "node_id": "PRRC_kwDOABII5849pJXR",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it could be precised if those rules are still applied in case of reorg and a V2 ancestor transaction comes back in the mempool, if the V3 child package should be evicted or conserved. In the case it's evicted, you have to consider LN V3 package being evicted and as a LN node you should resuscitate the V2, fee-bump it again, wait for confirmation and then re-broadcast your V3 package. ",
      "created_at": "2022-11-29T00:57:32Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034196433",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034196433"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034208537",
      "pull_request_review_id": 1196723893,
      "id": 1034208537,
      "node_id": "PRRC_kwDOABII5849pMUZ",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this implies that any 0conf acceptance softwares should be upgraded to tread V3 transactions by default as replaecable. I would say it could be valuable to notify the operators of such services.",
      "created_at": "2022-11-29T01:23:22Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034208537",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034208537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034211904",
      "pull_request_review_id": 1196723893,
      "id": 1034211904,
      "node_id": "PRRC_kwDOABII5849pNJA",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, I think this could be a minor issue for LN implementation. If some of your counterparties have not upgraded their software to support V3 transactions you might have a subset of your channel transaction still under V2 during the transition period. If you have a common child for batched fee-bumping shared between a V2 commitment transaction and V3 commitment transaction, the whole operation is likely to fail. Of course, batch fee-bumping should be considered harmful for time-sensitive commitment transactions (i.e ones with HTLC outputs) though we might have further silent issues even when it's not time-sensitive. In my opinion, this is a potential issue LN devs should be aware of, processing between V2 and V3 channels should be well isolated. ",
      "created_at": "2022-11-29T01:30:20Z",
      "updated_at": "2022-11-29T01:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034211904",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034211904"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034563917",
      "pull_request_review_id": 1197275980,
      "id": 1034563917,
      "node_id": "PRRC_kwDOABII5849qjFN",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034208537,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Of course, will do my best to tell people that V3 should be treated similarly to BIP125 in software/services that use replaceability signaling.",
      "created_at": "2022-11-29T10:22:00Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034563917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034563917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034565284",
      "pull_request_review_id": 1197275980,
      "id": 1034565284,
      "node_id": "PRRC_kwDOABII5849qjak",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034196433,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IIUC an LN channel would either only use V2 or only use V3. If the channel is using V3 commitment transactions, there shouldn't be old state in V2 transactions. So there shouldn't really be cases where V3 needs to replace V2 or vice versa. Does that sound correct?",
      "created_at": "2022-11-29T10:23:15Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034565284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034565284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034566681",
      "pull_request_review_id": 1197275980,
      "id": 1034566681,
      "node_id": "PRRC_kwDOABII5849qjwZ",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034211904,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hopefully the LN wallet knows that it cannot bump a V2 and V3 together, since an unconfirmed V3 cannot spend an unconfirmed V2 and vice versa. I actually think this rule helps *prevent* risks associated with bumping multiple states, since batched bumping is not possible at all.",
      "created_at": "2022-11-29T10:24:34Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034566681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034566681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034570463",
      "pull_request_review_id": 1197275980,
      "id": 1034570463,
      "node_id": "PRRC_kwDOABII5849qkrf",
      "diff_hunk": "@@ -117,3 +123,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted if the replacement transaction is accepted.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 61,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034180693,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I think allowing V3 to replace V2 chain of transactions lead to the consequence than V2 users are implicitly subscribing to this new replacement regime. A receiver of a V2 transaction could apply the BIP125 rules to estimate the replacement odd of the transaction, and the application logic be broken when the actual rule 3 of minimum between package feerate and ancestor feerate is applied.\r\n\r\nI'll try to be more vocal that V2 transactions can be replaced by V3 transactions. The cost of replacing a V2 transaction being replaced is identical (or higher, given the ancestor feerate rule) - the fee must be paid, but it can be by 2 transactions instead of 1. So, while there is a \"new\" way to replace, the \"likelihood\" of a V2 transaction being replaced is the same or lower.",
      "created_at": "2022-11-29T10:27:55Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034570463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034570463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 142,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034811321",
      "pull_request_review_id": 1197642959,
      "id": 1034811321,
      "node_id": "PRRC_kwDOABII5849rfe5",
      "diff_hunk": "@@ -33,20 +33,20 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n-\n-   - Package RBF may be enabled in the future.\n-\n * When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n   descendants and ancestors is considered. (#21800)\n \n    - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 21,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n     ancestors and descendants being considered at the same time. Single-transaction\r\n     submission behavior is unchanged.\r\n```",
      "created_at": "2022-11-29T14:17:37Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034811321",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034811321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034811545",
      "pull_request_review_id": 1197642959,
      "id": 1034811545,
      "node_id": "PRRC_kwDOABII5849rfiZ",
      "diff_hunk": "@@ -33,20 +33,20 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n-\n-   - Package RBF may be enabled in the future.\n-\n * When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n   descendants and ancestors is considered. (#21800)\n \n    - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 18,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled in the package context. (#21800)\r\n```",
      "created_at": "2022-11-29T14:17:48Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034811545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034811545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034821359",
      "pull_request_review_id": 1197642959,
      "id": 1034821359,
      "node_id": "PRRC_kwDOABII5849rh7v",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 41,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\r\n```",
      "created_at": "2022-11-29T14:25:01Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034821359",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034821359"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034830187",
      "pull_request_review_id": 1197642959,
      "id": 1034830187,
      "node_id": "PRRC_kwDOABII5849rkFr",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034196433,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It would be evicted as any package-limit-breaking transaction.\r\n\r\n> In the case it's evicted, you have to consider LN V3 package being evicted and as a LN node you should resuscitate the V2, fee-bump it again, wait for confirmation and then re-broadcast your V3 package.\r\n\r\n I'm not sure application-level detail like this is helpful in the document unless it's a high-level principle.",
      "created_at": "2022-11-29T14:31:09Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034830187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034830187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034836333",
      "pull_request_review_id": 1197642959,
      "id": 1034836333,
      "node_id": "PRRC_kwDOABII5849rllt",
      "diff_hunk": "@@ -1379,6 +1570,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n                 // future.  Continue individually validating the rest of the transactions, because\n                 // some of them may still be valid.\n                 quit_early = true;\n+                package_state.Invalid(PackageValidationResult::PCKG_TX, \"transaction failed\");",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 589,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": 1013300039,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(this has been addressed)",
      "created_at": "2022-11-29T14:35:31Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034836333",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034836333"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1542,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034849684",
      "pull_request_review_id": 1197642959,
      "id": 1034849684,
      "node_id": "PRRC_kwDOABII5849ro2U",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+/** Maximum virtual size of a tx which spends from an unconfirmed V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 24,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this comment I think only applies to `V3_ANCESTOR_SIZE_LIMIT_KVB`?",
      "created_at": "2022-11-29T14:45:15Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034849684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034849684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034859410",
      "pull_request_review_id": 1197642959,
      "id": 1034859410,
      "node_id": "PRRC_kwDOABII5849rrOS",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After this check, we know it's a mixture(?) and therefore illicit, making hitting https://github.com/bitcoin/bitcoin/pull/25038/commits/000facb0460372cc320158189090e4d36862eb0e#diff-a19c07329799a164e1e3bd89e7cd07f1a8e5e97b88f2b24c9bef17df04479c74R51 impossible and the below loops a only useful for returning an example illicit tuple.\r\n\r\nPerhaps just grab one v3 example and one non-v3 example and return those to simplify the rest of the code?",
      "created_at": "2022-11-29T14:52:24Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034859410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034859410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034864719",
      "pull_request_review_id": 1197642959,
      "id": 1034864719,
      "node_id": "PRRC_kwDOABII5849rshP",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    // Any two unconfirmed transactions with a dependency relationship must either both be V3 or both non-V3.\n+    if (auto err_string{CheckV3Inheritance(ptx, ancestors)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "At this point they cannot both be non-v3, due to https://github.com/bitcoin/bitcoin/pull/25038/commits/000facb0460372cc320158189090e4d36862eb0e#diff-a19c07329799a164e1e3bd89e7cd07f1a8e5e97b88f2b24c9bef17df04479c74R74\r\n",
      "created_at": "2022-11-29T14:56:25Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034864719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034864719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034921065",
      "pull_request_review_id": 1197642959,
      "id": 1034921065,
      "node_id": "PRRC_kwDOABII5849r6Rp",
      "diff_hunk": "@@ -863,6 +894,47 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // the ancestor limits should be the same for both our new transaction and any conflicts).\n         // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n         // into force here (as we're only adding a single transaction).\n+        //\n+        // This carve out is NOT granted in package RBF (see m_allow_carveouts in ATMPArgs ctors) because, during\n+        // package acceptance, we may call PreChecks for multiple transactions that conflict with different mempool\n+        // entries that don't share ancestry. It would be a bug to keep increasing the descendant limit each time.\n+        // The carve out also does not apply to package RBF while it is restricted to V3 transactions, since an\n+        // unconfirmed V3 transaction cannot have more than one descendant.\n+        if (args.m_package_feerates && args.m_package_submission) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 220,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m_package_feerates` currently is only true when `m_allow_carveouts` is false, no? The `Assume` should be dead code.\r\n\r\nthis whole block is extremely verbose and I'm not sure what it's supposed to be doing",
      "created_at": "2022-11-29T15:39:32Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034921065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034921065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 903,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034959791",
      "pull_request_review_id": 1197642959,
      "id": 1034959791,
      "node_id": "PRRC_kwDOABII5849sDuv",
      "diff_hunk": "@@ -970,12 +1059,98 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limits, err_string)) {\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Unless the transaction is V3, its own fees must meet the requirements for replacing its conflicts.\n+    if (args.m_package_feerates) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 348,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "what is this switch doing?",
      "created_at": "2022-11-29T16:10:17Z",
      "updated_at": "2022-11-29T16:10:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1034959791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1034959791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035032193",
      "pull_request_review_id": 1197968262,
      "id": 1035032193,
      "node_id": "PRRC_kwDOABII5849sVaB",
      "diff_hunk": "@@ -181,3 +181,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,",
      "path": "src/policy/rbf.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": 1014284608,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This incentive deficiency linked above should be a non-issue for CheckMinerScores since V3 package RBF is a restricted topology which disallows an multiple ancestors entirely.\r\n\r\nThe two cases of \"adding a new unconfirmed input\" during RBF with this PR:\r\n\r\n1) Package size of two(no dedup), new CPFP child is RBF'ing another (set of) tx, goes through CheckMinerScores\r\n2) Package size of 1(deduped parent), transaction is rejected via single-tx-acceptance rules currently in master. Perhaps a constrained V3-only version of #26451 could remove the pin?\r\n\r\nThe asymmetry above is annoying and a mild pinning vector.\r\n\r\nAs of this PR, wallet authors can avoid this pinning scenario entirely by not moving fee utxos between different unconfirmed parents, but it would be nice if asymmetry was avoided to make wallet reasoning simpler.",
      "created_at": "2022-11-29T17:07:35Z",
      "updated_at": "2022-11-29T17:07:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1035032193",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035032193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035045705",
      "pull_request_review_id": 1197275980,
      "id": 1035045705,
      "node_id": "PRRC_kwDOABII5849sYtJ",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {",
      "path": "src/policy/v3_policy.cpp",
      "position": 23,
      "original_position": 23,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": 1034859410,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah, the loops/maps are only used to return a more helpful string to the user. I don't think it's too much work? This function accepts a list of transactions that doesn't necessarily need to be an ancestor packages, so just grabbing a V3 and non-V3 could be 2 transactions that aren't parent-child.",
      "created_at": "2022-11-29T17:20:08Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1035045705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035045705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 23,
      "original_line": 23,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035046585",
      "pull_request_review_id": 1197275980,
      "id": 1035046585,
      "node_id": "PRRC_kwDOABII5849sY65",
      "diff_hunk": "@@ -0,0 +1,57 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+/** Maximum virtual size of a tx which spends from an unconfirmed V3 transaction, in vB. */\n+static constexpr unsigned int V3_CHILD_MAX_SIZE{1000};\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+\n+// Define additional values in case we want V3 ancestor limits to diverge from default ancestor limits.",
      "path": "src/policy/v3_policy.h",
      "position": null,
      "original_position": 24,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": 1034849684,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "true, thanks",
      "created_at": "2022-11-29T17:21:03Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1035046585",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035046585"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035071286",
      "pull_request_review_id": 1197275980,
      "id": 1035071286,
      "node_id": "PRRC_kwDOABII5849se82",
      "diff_hunk": "@@ -863,6 +894,47 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // the ancestor limits should be the same for both our new transaction and any conflicts).\n         // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n         // into force here (as we're only adding a single transaction).\n+        //\n+        // This carve out is NOT granted in package RBF (see m_allow_carveouts in ATMPArgs ctors) because, during\n+        // package acceptance, we may call PreChecks for multiple transactions that conflict with different mempool\n+        // entries that don't share ancestry. It would be a bug to keep increasing the descendant limit each time.\n+        // The carve out also does not apply to package RBF while it is restricted to V3 transactions, since an\n+        // unconfirmed V3 transaction cannot have more than one descendant.\n+        if (args.m_package_feerates && args.m_package_submission) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 220,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034921065,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The hope is to explain + maybe prevent a potential bug if an assumption (package RBF is v3-only) is broken. Ifsomebody in the future says \"it seems fine to relax package RBF to non-v3,\" or does a \"refactor no behavior change\" that actually does change something, the currently-dead code would not be dead anymore and the Assume would hit. Don't think it's completely useless, though I'm very happy to make it less verbose and/or move it.",
      "created_at": "2022-11-29T17:45:19Z",
      "updated_at": "2022-11-30T11:35:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1035071286",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1035071286"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 903,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038314895",
      "pull_request_review_id": 1202666473,
      "id": 1038314895,
      "node_id": "PRRC_kwDOABII5849422P",
      "diff_hunk": "@@ -970,12 +1059,98 @@ bool MemPoolAccept::PackageMempoolChecks(const std::vector<CTransactionRef>& txn\n     assert(std::all_of(txns.cbegin(), txns.cend(), [this](const auto& tx)\n                        { return !m_pool.exists(GenTxid::Txid(tx->GetHash()));}));\n \n+    // Populate with the union of all transactions' ancestors.\n+    CTxMemPool::setEntries m_collective_ancestors;\n+    for (const auto& ws : workspaces) {\n+        for (const auto& it : ws.m_ancestors) m_collective_ancestors.insert(it);\n+    }\n+\n     std::string err_string;\n     if (!m_pool.CheckPackageLimits(txns, m_limits, err_string)) {\n         // This is a package-wide error, separate from an individual transaction error.\n         return package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n     }\n-   return true;\n+\n+    // Further checks are all RBF-only.\n+    m_rbf = std::any_of(workspaces.cbegin(), workspaces.cend(), [](const auto& ws){return !ws.m_conflicts.empty();});\n+    if (!m_rbf) return true;\n+\n+    // Unless the transaction is V3, its own fees must meet the requirements for replacing its conflicts.\n+    if (args.m_package_feerates) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 348,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034959791,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah removed",
      "created_at": "2022-12-02T16:26:55Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038314895",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038314895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1079,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317056",
      "pull_request_review_id": 1202666473,
      "id": 1038317056,
      "node_id": "PRRC_kwDOABII584943YA",
      "diff_hunk": "@@ -863,6 +894,47 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // the ancestor limits should be the same for both our new transaction and any conflicts).\n         // We don't bother incrementing m_limit_descendants by the full removal count as that limit never comes\n         // into force here (as we're only adding a single transaction).\n+        //\n+        // This carve out is NOT granted in package RBF (see m_allow_carveouts in ATMPArgs ctors) because, during\n+        // package acceptance, we may call PreChecks for multiple transactions that conflict with different mempool\n+        // entries that don't share ancestry. It would be a bug to keep increasing the descendant limit each time.\n+        // The carve out also does not apply to package RBF while it is restricted to V3 transactions, since an\n+        // unconfirmed V3 transaction cannot have more than one descendant.\n+        if (args.m_package_feerates && args.m_package_submission) {",
      "path": "src/validation.cpp",
      "position": null,
      "original_position": 220,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034921065,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok I've reduced the comment significantly and turned this into a non-dead `Assume()`.",
      "created_at": "2022-12-02T16:29:22Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038317056",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317056"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 903,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317350",
      "pull_request_review_id": 1202666473,
      "id": 1038317350,
      "node_id": "PRRC_kwDOABII584943cm",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 41,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034821359,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2022-12-02T16:29:39Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038317350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317425",
      "pull_request_review_id": 1202666473,
      "id": 1038317425,
      "node_id": "PRRC_kwDOABII584943dx",
      "diff_hunk": "@@ -33,20 +33,20 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n-\n-   - Package RBF may be enabled in the future.\n-\n * When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n   descendants and ancestors is considered. (#21800)\n \n    - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 18,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034811545,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2022-12-02T16:29:43Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038317425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317473",
      "pull_request_review_id": 1202666473,
      "id": 1038317473,
      "node_id": "PRRC_kwDOABII584943eh",
      "diff_hunk": "@@ -33,20 +33,20 @@ The following rules are enforced for all packages:\n * Packages cannot have conflicting transactions, i.e. no two transactions in a package can spend\n    the same inputs. Packages cannot have duplicate transactions. (#20833)\n \n-* No transaction in a package can conflict with a mempool transaction. Replace By Fee is\n-  currently disabled for packages. (#20833)\n-\n-   - Package RBF may be enabled in the future.\n-\n * When packages are evaluated against ancestor/descendant limits, the union of all transactions'\n   descendants and ancestors is considered. (#21800)\n \n    - *Rationale*: This is essentially a \"worst case\" heuristic intended for packages that are\n      heavily connected, i.e. some transaction in the package is the ancestor or descendant of all\n      the other transactions.\n \n-The following rules are only enforced for packages to be submitted to the mempool (not enforced for\n-test accepts):\n+* [CPFP Carve Out](./mempool-limits.md#CPFP-Carve-Out) is disabled. (#21800)\n+\n+   - *Rationale*: This carve out cannot be accurately applied when there are multiple transactions'\n+     ancestors and descendants being considered at the same time.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 21,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034811321,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks",
      "created_at": "2022-12-02T16:29:47Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038317473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038317473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 46,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038318473",
      "pull_request_review_id": 1202666473,
      "id": 1038318473,
      "node_id": "PRRC_kwDOABII584943uJ",
      "diff_hunk": "@@ -117,3 +123,53 @@ backward-compatible for users and applications that rely on p2p transaction rela\n package validation should not prevent the acceptance of a transaction that would otherwise be\n policy-valid on its own. By always accepting a transaction that passes individual validation before\n trying package validation, we prevent any unintentional restriction of policy.\n+\n+### Package Replace by Fee\n+\n+A transaction conflicts with an in-mempool transaction (\"directly conflicting transaction\") if they\n+spend one or more of the same inputs. A transaction may conflict with multiple in-mempool\n+transactions. A directly conflicting transaction's and its descendants (together, \"original\n+transactions\") must be evicted if the replacement transaction is accepted.\n+\n+A package may contain one or more transactions that have directly conflicting transactions but do\n+not have high enough fees to meet the [replacement policy for individual\n+transactions](./mempool-replacements.md).  Similar to other fee-related requirements, [package\n+feerate](#Package-Fees-and-Feerate) may allow these transactions to be replaced.\n+\n+A package may replace mempool transaction(s) (\"Package RBF\") under the following conditions:\n+\n+1. All package transactions with mempool conflicts must be V3. This also means the \"sponsoring\"\n+   child transaction must be V3.\n+\n+*Note*: Combined with the V3 rules, this means the package must be a child-with-parents package.\n+Since package validation is only attempted if the transactions do not pay sufficient fees to be\n+accepted on their own, this effectively means that only V3 transactions can pay to replace their\n+parents' conflicts.\n+\n+*Rationale*: The fee-related rules are economically rational for ancestor packages, but not\n+necessarily other types of packages. A child-with-parents package is a type of ancestor package. It\n+may be fine to allow any ancestor package, but it's more difficult to account for all of the\n+possibilities, e.g. descendant limits.\n+\n+2. All original transactions signal replaceability, i.e., either through BIP125 or through being V3.",
      "path": "doc/policy/packages.md",
      "position": null,
      "original_position": 73,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034177919,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added that they must signal *explicitly*",
      "created_at": "2022-12-02T16:30:53Z",
      "updated_at": "2022-12-02T16:31:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038318473",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038318473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038322524",
      "pull_request_review_id": 1202767806,
      "id": 1038322524,
      "node_id": "PRRC_kwDOABII584944tc",
      "diff_hunk": "@@ -0,0 +1,113 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <policy/v3_policy.h>\n+\n+#include <coins.h>\n+#include <consensus/amount.h>\n+#include <logging.h>\n+#include <tinyformat.h>\n+\n+#include <numeric>\n+#include <vector>\n+\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package)\n+{\n+    assert(std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx != nullptr;}));\n+    // If all transactions are V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion == 3;})) {\n+        return std::nullopt;\n+    }\n+    // If all transactions are non-V3, we can stop here.\n+    if (std::all_of(package.cbegin(), package.cend(), [](const auto& tx){return tx->nVersion != 3;})) {\n+        return std::nullopt;\n+    }\n+    // Look for a V3 transaction spending a non-V3 or vice versa.\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> v3_txid_to_wtxid;\n+    std::unordered_map<uint256, uint256, SaltedTxidHasher> non_v3_txid_to_wtxid;\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        } else {\n+            non_v3_txid_to_wtxid.emplace(tx->GetHash(), tx->GetWitnessHash());\n+        }\n+    }\n+    for (const auto& tx : package) {\n+        if (tx->nVersion == 3) {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = non_v3_txid_to_wtxid.find(input.prevout.hash); it != non_v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), true);\n+                }\n+            }\n+        } else {\n+            for (const auto& input : tx->vin) {\n+                if (auto it = v3_txid_to_wtxid.find(input.prevout.hash); it != v3_txid_to_wtxid.end()) {\n+                    return std::make_tuple(it->second, tx->GetWitnessHash(), false);\n+                }\n+            }\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors)\n+{\n+    for (const auto& entry : ancestors) {\n+        if (ptx->nVersion != 3 && entry->GetTx().nVersion == 3) {\n+            return strprintf(\"tx that spends from %s must be nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        } else if (ptx->nVersion == 3 && entry->GetTx().nVersion != 3) {\n+            return strprintf(\"v3 tx cannot spend from %s which is not nVersion=3\",\n+                             entry->GetTx().GetWitnessHash().ToString());\n+        }\n+    }\n+    return std::nullopt;\n+}\n+\n+std::optional<std::string> ApplyV3Rules(const CTransactionRef& ptx,\n+                                        const CTxMemPool::setEntries& ancestors,\n+                                        const std::set<uint256>& direct_conflicts)\n+{\n+    // These rules only apply to transactions with nVersion=3.\n+    if (ptx->nVersion != 3) return std::nullopt;\n+\n+    const auto tx_vsize{GetVirtualTransactionSize(*ptx)};\n+    if (ancestors.size() + 1 > V3_ANCESTOR_LIMIT) {\n+        return strprintf(\"tx would have too many ancestors\");\n+    }\n+    const auto ancestor_vsize {std::accumulate(ancestors.cbegin(), ancestors.cend(), 0,\n+        [](int64_t sum, CTxMemPool::txiter it) { return sum + it->GetTxSize(); })};\n+    if (ancestor_vsize + tx_vsize > V3_ANCESTOR_SIZE_LIMIT_KVB * 1000) {\n+        return strprintf(\"total vsize of tx with ancestors would be too big: %u virtual bytes\", tx_vsize + ancestor_vsize);\n+    }\n+\n+    // Any two unconfirmed transactions with a dependency relationship must either both be V3 or both non-V3.\n+    if (auto err_string{CheckV3Inheritance(ptx, ancestors)}) {",
      "path": "src/policy/v3_policy.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "000facb0460372cc320158189090e4d36862eb0e",
      "in_reply_to_id": 1034864719,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Simplified `ApplyV3Rules` since it's 1-parent-1-child and removed the V3-specific ancestor size limit which is now redundant.",
      "created_at": "2022-12-02T16:35:36Z",
      "updated_at": "2022-12-02T16:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038322524",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038322524"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038330942",
      "pull_request_review_id": 1202767806,
      "id": 1038330942,
      "node_id": "PRRC_kwDOABII584946w-",
      "diff_hunk": "@@ -181,3 +181,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,",
      "path": "src/policy/rbf.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": 1014284608,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do I understand correctly that you are pointing out that package RBF and single tx RBF have different rules? And suggesting we try to make them more symmetrical by applying something similar in the single tx rules?",
      "created_at": "2022-12-02T16:45:22Z",
      "updated_at": "2022-12-02T16:46:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038330942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038330942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038334153",
      "pull_request_review_id": 1202785118,
      "id": 1038334153,
      "node_id": "PRRC_kwDOABII584947jJ",
      "diff_hunk": "@@ -181,3 +181,43 @@ std::optional<std::string> PaysForRBF(CAmount original_fees,\n     }\n     return std::nullopt;\n }\n+\n+std::optional<std::string> CheckMinerScores(CAmount replacement_fees,",
      "path": "src/policy/rbf.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "ab5e5077126f9df5634a15d014b261bf6dbe8708",
      "in_reply_to_id": 1014284608,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ideally yes. Doesn't have to be done now, it just reduces the utility of new unconfirmed inputs to randomly working sometimes, basically.",
      "created_at": "2022-12-02T16:49:12Z",
      "updated_at": "2022-12-02T16:49:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1038334153",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1038334153"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 184,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042716735",
      "pull_request_review_id": 1209171268,
      "id": 1042716735,
      "node_id": "PRRC_kwDOABII584-Jpg_",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.",
      "path": "doc/policy/version3_transactions.md",
      "position": 68,
      "original_position": 62,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "0c089a327a70d16f824b1b4dfd029d260cc43f09",
      "in_reply_to_id": null,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question about this and sorry if it's already been addressed:\r\n\r\nDoes this require extra logic for reorg handling? I'm thinking of a chain of v3 TXs:\r\n\r\ntx1 (confirmed in block 100) ->\r\ntx2 (confirmed in block 101) ->\r\ntx3 (unconfirmed, currently in mempool)\r\n\r\nif block 101 is disconnected, that potentially puts tx2 back in the mempool meaning tx3 is now invalid and should be evicted.",
      "created_at": "2022-12-07T21:49:55Z",
      "updated_at": "2022-12-07T21:49:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1042716735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1042716735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1043169748",
      "pull_request_review_id": 1209807646,
      "id": 1043169748,
      "node_id": "PRRC_kwDOABII584-LYHU",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.",
      "path": "doc/policy/version3_transactions.md",
      "position": 68,
      "original_position": 62,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "0c089a327a70d16f824b1b4dfd029d260cc43f09",
      "in_reply_to_id": 1042716735,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, v3 enforcement during reorg is implemented in `MaybeUpdateMempoolForReorg` [here](https://github.com/bitcoin/bitcoin/pull/25038/files#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R364-R370) and tested in mempool_accept_v3.py [here](https://github.com/bitcoin/bitcoin/pull/25038/files#diff-15a1888c9151fc1d182c23e34b71d691f70df448bceb9eb78c8296f18854b6a3R163). Would it make sense for me to add a note in the docs?",
      "created_at": "2022-12-08T10:11:24Z",
      "updated_at": "2022-12-08T10:11:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1043169748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1043169748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1043467746",
      "pull_request_review_id": 1210252301,
      "id": 1043467746,
      "node_id": "PRRC_kwDOABII584-Mg3i",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.",
      "path": "doc/policy/version3_transactions.md",
      "position": 68,
      "original_position": 62,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "0c089a327a70d16f824b1b4dfd029d260cc43f09",
      "in_reply_to_id": 1042716735,
      "user": {
        "login": "pinheadmz",
        "id": 2084648,
        "node_id": "MDQ6VXNlcjIwODQ2NDg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2084648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pinheadmz",
        "html_url": "https://github.com/pinheadmz",
        "followers_url": "https://api.github.com/users/pinheadmz/followers",
        "following_url": "https://api.github.com/users/pinheadmz/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pinheadmz/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pinheadmz/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pinheadmz/subscriptions",
        "organizations_url": "https://api.github.com/users/pinheadmz/orgs",
        "repos_url": "https://api.github.com/users/pinheadmz/repos",
        "events_url": "https://api.github.com/users/pinheadmz/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pinheadmz/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sweet 👍 Couldn't hurt to mention that in a bullet point here I suppose.",
      "created_at": "2022-12-08T15:14:25Z",
      "updated_at": "2022-12-08T15:14:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1043467746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1043467746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 68,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055682225",
      "pull_request_review_id": 1228000395,
      "id": 1055682225,
      "node_id": "PRRC_kwDOABII584-7G6x",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions rules apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.\n+\n+*Rationale*: Ensure the ancestor feerate rule does not underestimate a to-be-replaced V3 mempool\n+transaction's incentive compatibility. Imagine the original transaction, A, has a child B and\n+co-parent C (i.e. B spends from A and C). C also has another child, D. B is one of the original\n+transactions and thus its ancestor feerate must be lower than the package's. However, this may be an\n+underestimation because D can bump C without B's help. This is resolved if V3 transactions can only\n+have V3 ancestors, as then C cannot have another child.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed descendant.\n+\n+*Rationale*: (upper bound) the larger the descendant limit, the more transactions may need to be\n+replaced. This is a problematic pinning attack, i.e., a malicious counterparty prevents the\n+transaction from being replaced by adding many descendant transactions that aren't fee-bumping.\n+See example #1 in [\"Rule 3\" Pining](#Rule-3-Pinning) section above.\n+\n+*Rationale*: (lower bound) at least 1 descendant is required to allow CPFP of the presigned\n+transaction. The contract protocol can create presigned transactions paying 0 fees and 1 output for\n+attaching a CPFP at broadcast time (\"anchor output\"). Without package RBF, multiple anchor outputs\n+would be required to allow each counterparty to fee-bump any presigned transaction. With package\n+RBF, since the presigned transactions can replace each other, 1 anchor output is sufficient.\n+\n+5. A V3 transaction that has an unconfirmed V3 ancestor cannot be larger than 1000 virtual bytes.\n+\n+*Rationale*: (upper bound) the larger the descendant size limit, the more vbytes may need to be\n+replaced. With default limits, if the child is e.g. 100,000vB, that might be an additional\n+100,000sats (at 1sat/vbyte) or more, depending on the feerate. Restricting all children to 1000vB\n+bounds the potential fees by 1/100.\n+\n+*Rationale*: (lower bound) the smaller this limit, the fewer UTXOs a child may use to fund this\n+fee-bump. For example, only allowing the V3 child to have 2 inputs would require L2 protocols to\n+manage a wallet with high-value UTXOs and make batched fee-bumping impossible. However, as the\n+fee-bumping child only needs to fund fees (as opposed to payments), just a few UTXOs should suffice.\n+\n+*Rationale*: With a limit of 1000 virtual bytes, depending on the output types, the child can have\n+6-15 UTXOs, which should be enough to fund a fee-bump without requiring a carefully-managed UTXO\n+pool. With 1000 virtual bytes as the descendant limit, the cost to replace a V3 transaction has much\n+lower variance.\n+\n+*Rationale*: This makes the rule very easily \"tacked on\" to existing logic for policy and wallets.\n+A transaction may be up to 100KvB on its own (`MAX_STANDARD_TX_WEIGHT`) and 101KvB with descendants\n+(`DEFAULT_DESCENDANT_SIZE_LIMIT_KVB`). If an existing V3 transaction in the mempool is 100KvB, its\n+descendant can only be 1000vB, even if the policy is 10KvB.\n+\n+4. A V3 transaction cannot have more than 1 unconfirmed ancestor.",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 97,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034196433,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be number \"6.\" not a second \"4.\"",
      "created_at": "2022-12-22T17:20:46Z",
      "updated_at": "2022-12-22T17:20:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1055682225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1055682225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063416400",
      "pull_request_review_id": 1238807826,
      "id": 1063416400,
      "node_id": "PRRC_kwDOABII584_YnJQ",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.",
      "path": "doc/policy/version3_transactions.md",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">too low to fee-bump B through CPFP\r\n\r\nI don't get this sentence. Nobody wants to fee-bump B, no? Alice would want to replace B, what does it have to do with fee-bumping?",
      "created_at": "2023-01-06T12:59:37Z",
      "updated_at": "2023-01-06T12:59:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1063416400",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063416400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063421778",
      "pull_request_review_id": 1238816148,
      "id": 1063421778,
      "node_id": "PRRC_kwDOABII584_YodS",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other",
      "path": "doc/policy/version3_transactions.md",
      "position": null,
      "original_position": 40,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "a984c34c7298a85eced0fc3eee7b33cc39493494",
      "in_reply_to_id": 1034208537,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should LN users be aware of this as well? Imagine them forwarding channel closure directly towards a service claiming to work 0-conf, but for some reason (closure being v3) the experience is not really 0-conf. (Perhaps this is already the case with rbf-by-default? Indeed more like a UX challenge.)",
      "created_at": "2023-01-06T13:08:30Z",
      "updated_at": "2023-01-06T13:08:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1063421778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063421778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063443677",
      "pull_request_review_id": 1238852886,
      "id": 1063443677,
      "node_id": "PRRC_kwDOABII584_Ytzd",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 56,
      "original_position": 53,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "in_reply_to_id": null,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you ever discuss what will happen in the 2-block-reorg case? A chain of txs could end up being not-re-added to the mempool (due to rules 2/3), and then something becomes insecure.\r\n\r\nI think I should bring a concrete example here.",
      "created_at": "2023-01-06T13:41:24Z",
      "updated_at": "2023-01-06T13:41:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1063443677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063443677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063444515",
      "pull_request_review_id": 1238854208,
      "id": 1063444515,
      "node_id": "PRRC_kwDOABII584_YuAj",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 56,
      "original_position": 53,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "in_reply_to_id": 1063443677,
      "user": {
        "login": "naumenkogs",
        "id": 7975071,
        "node_id": "MDQ6VXNlcjc5NzUwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/naumenkogs",
        "html_url": "https://github.com/naumenkogs",
        "followers_url": "https://api.github.com/users/naumenkogs/followers",
        "following_url": "https://api.github.com/users/naumenkogs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/naumenkogs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/naumenkogs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
        "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
        "repos_url": "https://api.github.com/users/naumenkogs/repos",
        "events_url": "https://api.github.com/users/naumenkogs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ahhh too bad, the next comment [asks the same question](https://github.com/bitcoin/bitcoin/pull/25038/commits/7acf63771a33b59c24cc0d0b098a2c1a50bb0d42#r1042716735). Certainly worth documenting though :)",
      "created_at": "2023-01-06T13:42:34Z",
      "updated_at": "2023-01-06T13:42:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1063444515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1063444515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067104570",
      "pull_request_review_id": 1244081680,
      "id": 1067104570,
      "node_id": "PRRC_kwDOABII584_mrk6",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.",
      "path": "doc/policy/version3_transactions.md",
      "position": 25,
      "original_position": 25,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "in_reply_to_id": 1063416400,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Mallory's goal is to *pin* the transaction in the mempool. That is, increase the fees required to replace B, but *not* make it confirm. Mallory can of course put 1BTC of fees in the descendant, thus making it extremely expensive to replace B, but then she's also CPFP'd B and it's probably going to be mined very soon.",
      "created_at": "2023-01-11T15:05:21Z",
      "updated_at": "2023-01-11T15:05:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1067104570",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067104570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 25,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067107639",
      "pull_request_review_id": 1244086434,
      "id": 1067107639,
      "node_id": "PRRC_kwDOABII584_msU3",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+# Transactions with nVersion 3\n+\n+A transaction with its `nVersion` field set to 3 (\"V3 transactions\") is allowed in mempool and\n+transaction relay.\n+\n+The goal with V3 is to create a policy that retains DoS-resistance and accepts transactions that are\n+incentive-compatible to mine, while making fee-bumping more robust by avoiding specific pinning attacks.\n+Contract or L2 protocols in which transactions are signed by untrusted counterparties well before\n+broadcast time, e.g. the Lightning Network (LN), may benefit from using this version.\n+\n+## V3 Rationale: Pinning Attacks\n+\n+Since contracting transactions are shared between multiple parties and mempool congestion is\n+difficult to predict, mempool policy restrictions may accidentally allow a malicious party to pin a\n+transaction. For example, imagine that counterparties Alice (honest) and Mallory (malicious) have\n+conflicting transactions A and B, respectively. Mallory may be able to prevent A from being accepted\n+by first submitting B and taking advantage of some limitations and heuristics used in [RBF\n+policy](./mempool-replacements.md).\n+\n+### \"Rule 3\" Pinning\n+\n+RBF rules require the replacement transaction pay a higher absolute fee than the aggregate fees paid\n+by all original transactions. This means Mallory may increase the fees required to replace B by:\n+\n+1. Adding transaction(s) that descend from B and pay a feerate too low to fee-bump B through CPFP.\n+   For example, assuming the default descendant size limit is 101KvB and B is 1000vB paying a\n+feerate of 2sat/vB, adding a 100KvB, 2sat/vB child increases the cost to replace B by 200Ksat.\n+\n+2. Adding a high-fee descendant of B that also spends from a large, low-feerate mempool transaction,\n+   C. The child may pay a very large fee but not actually be fee-bumping B if its overall ancestor\n+feerate is still lower than B's individual feerate. For example, assuming the default ancestor size\n+limit is 101KvB, B is 1000vB paying 2sat/vB, and C is 99KvB paying 1sat/vB, adding a 1000vB child of\n+B and C increases the cost to replace B by 101Ksat.\n+\n+## Version 3 Rules\n+\n+All existing standardness rules apply to V3. The following set of additional restrictions apply to\n+V3 transactions:\n+\n+1. A V3 transaction can be replaced, even if it does not signal BIP125 replaceability. Other\n+   conditions apply, see [RBF rules](./mempool-replacements.md) and [Package RBF\n+rules][./packages.md#Package-Replace-By-Fee].\n+\n+2. Any descendant of an unconfirmed V3 transaction must also be V3.\n+\n+*Rationale*: Combined with Rule 1, this gives us the property of \"inherited signaling\" when\n+descendants of unconfirmed transactions are created. Additionally, checking whether a transaction\n+signals replaceability this way does not require mempool traversal, and does not change based on\n+what transactions are mined.\n+\n+*Note*: A V3 transaction can spend outputs from *confirmed* non-V3 transactions.\n+\n+3. A V3 transaction's unconfirmed ancestors must all be V3.",
      "path": "doc/policy/version3_transactions.md",
      "position": 56,
      "original_position": 53,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "7acf63771a33b59c24cc0d0b098a2c1a50bb0d42",
      "in_reply_to_id": 1063443677,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think a concrete example would help, yeah. For example, when you say \"something becomes insecure\" it's not really clear to me what you mean - a v3 transaction gets censored? A mempool has a chain of more than 2 v3 transactions?",
      "created_at": "2023-01-11T15:07:54Z",
      "updated_at": "2023-01-11T15:07:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1067107639",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1067107639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120967545",
      "pull_request_review_id": 1318865644,
      "id": 1120967545,
      "node_id": "PRRC_kwDOABII585C0Jt5",
      "diff_hunk": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2022 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_V3_POLICY_H\n+#define BITCOIN_POLICY_V3_POLICY_H\n+\n+#include <consensus/amount.h>\n+#include <policy/packages.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <txmempool.h>\n+\n+#include <string>\n+\n+// This module enforces rules for transactions with nVersion=3 (\"V3 transactions\") which help make\n+// RBF abilities more robust.\n+\n+// V3 only allows 1 parent and 1 child.\n+/** Maximum number of transactions including an unconfirmed tx and its descendants. */\n+static constexpr unsigned int V3_DESCENDANT_LIMIT{2};\n+/** Maximum number of transactions including a V3 tx and all its mempool ancestors. */\n+static constexpr unsigned int V3_ANCESTOR_LIMIT{2};\n+\n+/** Maximum weight of a tx which spends from an unconfirmed V3 transaction. */\n+static constexpr unsigned int V3_CHILD_MAX_WEIGHT{4000};\n+// Since these limits are within the default ancestor/descendant limits, there is no need to\n+// additionally check ancestor/descendant limits for V3 transactions.\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_ANCESTOR_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+static_assert(V3_CHILD_MAX_WEIGHT + MAX_STANDARD_TX_WEIGHT <= DEFAULT_DESCENDANT_SIZE_LIMIT_KVB * WITNESS_SCALE_FACTOR * 1000);\n+\n+/** Any two unconfirmed transactions with a dependency relationship must either both be V3 or both\n+ * non-V3. Check this rule for any list of unconfirmed transactions.\n+ * @returns a tuple (parent wtxid, child wtxid, bool) where one is V3 but the other is not, if at\n+ * least one such pair exists. The bool represents whether the child is v3 or not. There may be\n+ * other such pairs that are not returned.\n+ * Otherwise std::nullopt.\n+ */\n+std::optional<std::tuple<uint256, uint256, bool>> CheckV3Inheritance(const Package& package);\n+\n+/** Every transaction that spends an unconfirmed V3 transaction must also be V3. */\n+std::optional<std::string> CheckV3Inheritance(const CTransactionRef& ptx,\n+                                              const CTxMemPool::setEntries& ancestors);\n+\n+/** The following rules apply to V3 transactions:\n+ * 1. Tx with all of its ancestors (including non-nVersion=3) must be within V3_ANCESTOR_SIZE_LIMIT_KVB.\n+ * 2. Tx with all of its ancestors must be within V3_ANCESTOR_LIMIT.\n+ *\n+ * If a V3 tx has V3 ancestors,\n+ * 1. Each V3 ancestor and its descendants must be within V3_DESCENDANT_LIMIT.\n+ * 2. The tx must be within V3_CHILD_MAX_SIZE.",
      "path": "src/policy/v3_policy.h",
      "position": 51,
      "original_position": 51,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "44fcc4d3912e21b055c377549c8882c67dddf278",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n * 2. The tx must be within V3_CHILD_MAX_WEIGHT\r\n```",
      "created_at": "2023-03-01T00:27:20Z",
      "updated_at": "2023-03-01T01:16:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120967545",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120967545"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 51,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120968022",
      "pull_request_review_id": 1318865644,
      "id": 1120968022,
      "node_id": "PRRC_kwDOABII585C0J1W",
      "diff_hunk": "@@ -49,4 +52,154 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n     BOOST_CHECK_EQUAL(result.m_state.GetRejectReason(), \"coinbase\");\n     BOOST_CHECK(result.m_state.GetResult() == TxValidationResult::TX_CONSENSUS);\n }\n+\n+// Generate a number of random, nonexistent outpoints.\n+static inline std::vector<COutPoint> random_outpoints(size_t num_outpoints) {\n+    std::vector<COutPoint> outpoints;\n+    outpoints.resize(num_outpoints);\n+    for (size_t i{0}; i < num_outpoints; ++i) {\n+        outpoints.emplace_back(COutPoint{GetRandHash(), 0});\n+    }\n+    return outpoints;\n+}\n+\n+// Creates a placeholder tx (not valid) with 25 outputs. Specify the nVersion and the inputs.\n+static inline CTransactionRef make_tx(const std::vector<COutPoint>& inputs, int32_t version)\n+{\n+    CMutableTransaction mtx = CMutableTransaction{};\n+    mtx.nVersion = version;\n+    mtx.vin.resize(inputs.size());\n+    mtx.vout.resize(25);\n+    for (size_t i{0}; i < inputs.size(); ++i) {\n+        mtx.vin[i].prevout = inputs[i];\n+    }\n+    for (auto i{0}; i < 25; ++i) {\n+        mtx.vout[i].scriptPubKey = CScript() << OP_TRUE;\n+        mtx.vout[i].nValue = 10000;\n+    }\n+    return MakeTransactionRef(mtx);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(version3_tests, RegTestingSetup)\n+{\n+    // Test V3 policy helper functions\n+    CTxMemPool& pool = *Assert(m_node.mempool);\n+    LOCK2(cs_main, pool.cs);\n+    TestMemPoolEntryHelper entry;\n+    std::set<uint256> empty_conflicts_set;\n+\n+    auto mempool_tx_v3 = make_tx(random_outpoints(1), /*version=*/3);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v3));\n+    auto mempool_tx_v2 = make_tx(random_outpoints(1), /*version=*/2);\n+    pool.addUnchecked(entry.FromTx(mempool_tx_v2));\n+    // These two transactions are unrelated, so CheckV3Inheritance should pass.\n+    BOOST_CHECK(CheckV3Inheritance({mempool_tx_v2, mempool_tx_v3}) == std::nullopt);\n+    // Default values.\n+    CTxMemPool::Limits m_limits{};\n+\n+    // Cannot spend from an unconfirmed v3 transaction unless this tx is also v3.\n+    {\n+        auto tx_v2_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v3), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance(tx_v2_from_v3, *ancestors_v2_from_v3).has_value());\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v3, tx_v2_from_v3}).has_value());\n+        auto tx_v2_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2_and_v3), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance(tx_v2_from_v2_and_v3, *ancestors_v2_from_both).has_value());\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v2, mempool_tx_v3, tx_v2_from_v2_and_v3}).value() ==\n+                    std::make_tuple(mempool_tx_v3->GetWitnessHash(), tx_v2_from_v2_and_v3->GetWitnessHash(), false));\n+    }\n+\n+    // V3 cannot spend from an unconfirmed non-v3 transaction.\n+    {\n+        auto tx_v3_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2, *ancestors_v3_from_v2).has_value());\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v2, tx_v3_from_v2}).value() ==\n+                    std::make_tuple(mempool_tx_v2->GetWitnessHash(), tx_v3_from_v2->GetWitnessHash(), true));\n+        auto tx_v3_from_v2_and_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}, COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3_from_both{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v2_and_v3), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v2_and_v3, *ancestors_v3_from_both).has_value());\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v2, mempool_tx_v3, tx_v3_from_v2_and_v3}).value() ==\n+                    std::make_tuple(mempool_tx_v2->GetWitnessHash(), tx_v3_from_v2_and_v3->GetWitnessHash(), true));\n+    }\n+    // V3 from V3 is ok, and non-V3 from non-V3 is ok.\n+    {\n+        auto tx_v3_from_v3 = make_tx({COutPoint{mempool_tx_v3->GetHash(), 0}}, /*version=*/3);\n+        auto ancestors_v3{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_from_v3), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance({tx_v3_from_v3, mempool_tx_v3}) == std::nullopt);\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v3, tx_v3_from_v3}) == std::nullopt);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v3_from_v3, *ancestors_v3) == std::nullopt);\n+\n+        auto tx_v2_from_v2 = make_tx({COutPoint{mempool_tx_v2->GetHash(), 0}}, /*version=*/2);\n+        auto ancestors_v2{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v2_from_v2), m_limits)};\n+        BOOST_CHECK(CheckV3Inheritance({tx_v2_from_v2, mempool_tx_v2}) == std::nullopt);\n+        BOOST_CHECK(CheckV3Inheritance({mempool_tx_v2, tx_v2_from_v2}) == std::nullopt);\n+        BOOST_CHECK(CheckV3Inheritance(tx_v2_from_v2, *ancestors_v2) == std::nullopt);\n+    }\n+\n+    // Tx spending v3 cannot have too many mempool ancestors\n+    // Configuration where the tx has multiple direct parents.\n+    {\n+        std::vector<COutPoint> mempool_outpoints;\n+        mempool_outpoints.emplace_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+        mempool_outpoints.resize(2);\n+        for (size_t i{0}; i < 2; ++i) {\n+            auto mempool_tx = make_tx(random_outpoints(1), /*version=*/2);\n+            pool.addUnchecked(entry.FromTx(mempool_tx));\n+            mempool_outpoints.emplace_back(COutPoint{mempool_tx->GetHash(), 0});\n+        }\n+        auto tx_v3_multi_parent = make_tx(mempool_outpoints, /*version=*/3);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_parent), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_multi_parent, *ancestors, empty_conflicts_set).has_value());\n+    }\n+\n+    // Configuration where the tx is in a multi-generation chain.\n+    auto last_outpoint{random_outpoints(1)[0]};\n+    for (size_t i{0}; i < 2; ++i) {\n+        auto mempool_tx = make_tx({last_outpoint}, /*version=*/2);\n+        pool.addUnchecked(entry.FromTx(mempool_tx));\n+        last_outpoint = COutPoint{mempool_tx->GetHash(), 0};\n+    }\n+    {\n+        auto tx_v3_multi_gen = make_tx({last_outpoint}, /*version=*/3);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_multi_gen), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_multi_gen, *ancestors, empty_conflicts_set).has_value());\n+    }\n+\n+    // Tx spending v3 cannot be too large\n+    auto many_inputs{random_outpoints(100)};\n+    many_inputs.push_back(COutPoint{mempool_tx_v3->GetHash(), 0});\n+    {\n+        auto tx_v3_child_big = make_tx(many_inputs, /*version=*/3);\n+        BOOST_CHECK(GetTransactionWeight(*tx_v3_child_big) > V3_CHILD_MAX_WEIGHT);\n+        auto ancestors{pool.CalculateMemPoolAncestors(entry.FromTx(tx_v3_child_big), m_limits)};\n+        BOOST_CHECK(ApplyV3Rules(tx_v3_child_big, *ancestors, empty_conflicts_set).has_value());\n+    }\n+\n+    // Parent + child with v3 in the mempool. Child is allowed as long as it is under V3_CHILD_MAX_SIZE.",
      "path": "src/test/txvalidation_tests.cpp",
      "position": 145,
      "original_position": 145,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "44fcc4d3912e21b055c377549c8882c67dddf278",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // Parent + child with v3 in the mempool. Child is allowed as long as it is under V3_CHILD_MAX_WEIGHT.\r\n```",
      "created_at": "2023-03-01T00:28:03Z",
      "updated_at": "2023-03-01T01:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120968022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120968022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 180,
      "original_line": 180,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120972484",
      "pull_request_review_id": 1318865644,
      "id": 1120972484,
      "node_id": "PRRC_kwDOABII585C0K7E",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_signaling()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, 0, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_signaling(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test that V3 transactions not signaling BIP125 are replaceable\")\n+        # Create single transaction that doesn't signal BIP125 but has nVersion=3\n+        coin = self.coins.pop()\n+\n+        tx_v3_no_bip125 = self.wallet.create_self_transfer(\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+        node.sendrawtransaction(tx_v3_no_bip125[\"hex\"])\n+        self.assert_mempool_contents(expected=[tx_v3_no_bip125[\"tx\"]])\n+\n+        self.log.info(\"Test that non-V3 transactions signaling BIP125 are replaceable\")\n+        coin = self.coins[0]\n+        del self.coins[0]",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 128,
      "original_position": 128,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c27864fbca2421eeb64f13a803f7b4393999e1cf",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        coin = self.coins.pop(0)\r\n```",
      "created_at": "2023-03-01T00:34:57Z",
      "updated_at": "2023-03-01T01:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120972484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120972484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": 127,
      "original_start_line": 127,
      "start_side": "RIGHT",
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120974200",
      "pull_request_review_id": 1318865644,
      "id": 1120974200,
      "node_id": "PRRC_kwDOABII585C0LV4",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 87,
      "original_position": 87,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c27864fbca2421eeb64f13a803f7b4393999e1cf",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like this is not used anywhere:\r\n```suggestion\r\n```",
      "created_at": "2023-03-01T00:37:52Z",
      "updated_at": "2023-03-01T01:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120974200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120974200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 87,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120982825",
      "pull_request_review_id": 1318865644,
      "id": 1120982825,
      "node_id": "PRRC_kwDOABII585C0Ncp",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)\n+        self.address = self.wallet.get_address()\n+\n+        self.test_package_rbf_basic()\n+        self.test_package_rbf_signaling()\n+        self.test_package_rbf_additional_fees()\n+        self.test_package_rbf_max_conflicts()\n+        self.test_package_rbf_conflicting_conflicts()\n+        self.test_package_rbf_partial()\n+\n+    def test_package_rbf_basic(self):\n+        self.log.info(\"Test that a child can pay to replace its parents' conflicts\")\n+        node = self.nodes[0]\n+        # Reuse the same coins so that the transactions conflict with one another.\n+        parent_coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(parent_coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(parent_coin, 0, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+\n+        submitres = node.submitpackage(package_hex2)\n+        submitres[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_signaling(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Test that V3 transactions not signaling BIP125 are replaceable\")\n+        # Create single transaction that doesn't signal BIP125 but has nVersion=3\n+        coin = self.coins.pop()\n+\n+        tx_v3_no_bip125 = self.wallet.create_self_transfer(\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE + 1,\n+            version=3\n+        )\n+        node.sendrawtransaction(tx_v3_no_bip125[\"hex\"])\n+        self.assert_mempool_contents(expected=[tx_v3_no_bip125[\"tx\"]])\n+\n+        self.log.info(\"Test that non-V3 transactions signaling BIP125 are replaceable\")\n+        coin = self.coins[0]\n+        del self.coins[0]\n+        # This transaction signals BIP125 but isn't V3\n+        tx_bip125_v2 = self.wallet.create_self_transfer(\n+            fee=DEFAULT_FEE,\n+            utxo_to_spend=coin,\n+            version=2\n+        )\n+        node.sendrawtransaction(tx_bip125_v2[\"hex\"])\n+\n+        self.assert_mempool_contents(expected=[tx_bip125_v2[\"tx\"]])\n+        assert node.getmempoolentry(tx_bip125_v2[\"tx\"].rehash())[\"bip125-replaceable\"]\n+        assert tx_bip125_v2[\"tx\"].nVersion == 2\n+        package_hex_v3, package_txns_v3 = self.create_simple_package(coin, parent_fee=0, child_fee=DEFAULT_FEE * 3, version=3)\n+        assert all([tx.nVersion == 3 for tx in package_txns_v3])\n+        node.submitpackage(package_hex_v3)\n+        self.assert_mempool_contents(expected=package_txns_v3, unexpected=[tx_bip125_v2[\"tx\"]])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_additional_fees(self):\n+        self.log.info(\"Check Package RBF must increase the absolute fee\")\n+        node = self.nodes[0]\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE, heavy_child=True)\n+        assert_greater_than_or_equal(1000, package_txns1[-1].get_vsize())\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # Package 2 has a higher feerate but lower absolute fee\n+        package_fees1 = DEFAULT_FEE * 2\n+        package_hex2, package_txns2 = self.create_simple_package(coin, parent_fee=0, child_fee=package_fees1 - Decimal(\"0.000000001\"))\n+        assert_raises_rpc_error(-25, \"package RBF failed: insufficient fee\", node.submitpackage, package_hex2)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        # Package 3 has a higher feerate and absolute fee\n+        package_hex3, package_txns3 = self.create_simple_package(coin, parent_fee=0, child_fee=package_fees1 * 3)\n+        node.submitpackage(package_hex3)\n+        self.assert_mempool_contents(expected=package_txns3, unexpected=package_txns1 + package_txns2)\n+        self.generate(node, 1)\n+\n+        self.log.info(\"Check Package RBF must pay for the entire package's bandwidth\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, parent_fee=DEFAULT_FEE, child_fee=DEFAULT_FEE)\n+        package_fees1 = 2 * DEFAULT_FEE\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=[])\n+        package_hex2, package_txns2 = self.create_simple_package(coin, child_fee=package_fees1 + Decimal(\"0.000000001\"))\n+        assert_raises_rpc_error(-25, \"package RBF failed: insufficient fee\", node.submitpackage, package_hex2)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2)\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_max_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check Package RBF cannot replace more than 100 transactions\")\n+        num_coins = 5\n+        parent_coins = self.coins[:num_coins]\n+        del self.coins[:num_coins]\n+        # Original transactions: 5 transactions with 24 descendants each.\n+        for coin in parent_coins:\n+            self.wallet.send_self_transfer_chain(from_node=node, chain_length=25, utxo_to_spend=coin)\n+\n+        # Replacement package: 1 parent which conflicts with 5 * (1 + 24) = 125 mempool transactions.\n+        package_parent = self.wallet.create_self_transfer_multi(utxos_to_spend=parent_coins, version=3)\n+        package_child = self.wallet.create_self_transfer(fee_rate=50*DEFAULT_FEE, utxo_to_spend=package_parent[\"new_utxos\"][0], version=3)\n+\n+        assert_raises_rpc_error(-25, \"package RBF failed: too many potential replacements\",\n+                node.submitpackage, [package_parent[\"hex\"], package_child[\"hex\"]])\n+        self.generate(node, 1)\n+\n+    def test_package_rbf_conflicting_conflicts(self):\n+        node = self.nodes[0]\n+        self.log.info(\"Check that different package transactions cannot share the same conflicts\")\n+        coin = self.coins.pop()\n+        package_hex1, package_txns1 = self.create_simple_package(coin, DEFAULT_FEE, DEFAULT_FEE)\n+        package_hex2, package_txns2 = self.create_simple_package(coin, Decimal(\"0.00009\"), DEFAULT_FEE * 2)\n+        package_hex3, package_txns3 = self.create_simple_package(coin, 0, DEFAULT_FEE * 5)\n+        node.submitpackage(package_hex1)\n+        self.assert_mempool_contents(expected=package_txns1)\n+        # The first two transactions have the same conflicts\n+        package_duplicate_conflicts_hex = [package_hex2[0]] + package_hex3\n+        # Note that this won't actually go into the RBF logic, because static package checks will\n+        # detect that two package transactions conflict with each other. Either way, this must fail.\n+        assert_raises_rpc_error(-25, \"conflict-in-package\", node.submitpackage, package_duplicate_conflicts_hex)\n+        self.assert_mempool_contents(expected=package_txns1, unexpected=package_txns2 + package_txns3)\n+        # The RBFs should otherwise work.\n+        submitres2 = node.submitpackage(package_hex2)\n+        submitres2[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\n+        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\n+        submitres3 = node.submitpackage(package_hex3)\n+        submitres3[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns2]",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 214,
      "original_position": 214,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c27864fbca2421eeb64f13a803f7b4393999e1cf",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Missing assertions for the replaced-tx checks:\r\n```suggestion\r\n        assert submitres2[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns1]\r\n        self.assert_mempool_contents(expected=package_txns2, unexpected=package_txns1)\r\n        submitres3 = node.submitpackage(package_hex3)\r\n        assert submitres3[\"replaced-transactions\"] == [tx.rehash() for tx in package_txns2]\r\n```",
      "created_at": "2023-03-01T00:51:16Z",
      "updated_at": "2023-03-01T01:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120982825",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120982825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": 211,
      "original_start_line": 211,
      "start_side": "RIGHT",
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120985992",
      "pull_request_review_id": 1318865644,
      "id": 1120985992,
      "node_id": "PRRC_kwDOABII585C0OOI",
      "diff_hunk": "@@ -1066,6 +1070,20 @@ bool MemPoolAccept::PackageMempoolChecks(const ATMPArgs& args,\n                                      \"package RBF failed: package conflicts with dependency\", *err_string);\n     }\n \n+    // CheckMinerScores is very conservative and should not be used for individual transactions.\n+    // For example, the mempool contains a large, low-feerate transaction A (99,000vB, 1sat/vB feerate) is\n+    // Transaction A has a small, high-feerate child B (1,000vB, 101sat/vB). The user wants to",
      "path": "src/validation.cpp",
      "position": 379,
      "original_position": 21,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "27881f0d824d4dae11e5587ae4a2511a04e30c0e",
      "in_reply_to_id": null,
      "user": {
        "login": "theStack",
        "id": 91535,
        "node_id": "MDQ6VXNlcjkxNTM1",
        "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theStack",
        "html_url": "https://github.com/theStack",
        "followers_url": "https://api.github.com/users/theStack/followers",
        "following_url": "https://api.github.com/users/theStack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theStack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theStack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
        "organizations_url": "https://api.github.com/users/theStack/orgs",
        "repos_url": "https://api.github.com/users/theStack/repos",
        "events_url": "https://api.github.com/users/theStack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theStack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    // For example, the mempool contains a large, low-feerate transaction A (99,000vB, 1sat/vB feerate).\r\n    // Transaction A has a small, high-feerate child B (1,000vB, 101sat/vB). The user wants to\r\n```\r\n\r\nor maybe\r\n\r\n```suggestion\r\n    // For example, the mempool contains a large, low-feerate transaction A (99,000vB, 1sat/vB feerate)\r\n    // which has a small, high-feerate child B (1,000vB, 101sat/vB). The user wants to\r\n```\r\n",
      "created_at": "2023-03-01T00:56:02Z",
      "updated_at": "2023-03-01T01:16:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1120985992",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1120985992"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": 1104,
      "original_start_line": 1074,
      "start_side": "RIGHT",
      "line": 1105,
      "original_line": 1105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1181639284",
      "pull_request_review_id": 1407698195,
      "id": 1181639284,
      "node_id": "PRRC_kwDOABII585GbmJ0",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from decimal import Decimal\n+\n+from test_framework.messages import (\n+    COIN,\n+    MAX_BIP125_RBF_SEQUENCE,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_greater_than_or_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.wallet import (\n+    DEFAULT_FEE,\n+    MiniWallet,\n+)\n+\n+class PackageRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_mempool_contents(self, expected=None, unexpected=None):\n+        \"\"\"Assert that all transactions in expected are in the mempool,\n+        and all transactions in unexpected are not in the mempool.\n+        \"\"\"\n+        if not expected:\n+            expected = []\n+        if not unexpected:\n+            unexpected = []\n+        assert set(unexpected).isdisjoint(expected)\n+        mempool = self.nodes[0].getrawmempool(verbose=False)\n+        for tx in expected:\n+            assert tx.rehash() in mempool\n+        for tx in unexpected:\n+            assert tx.rehash() not in mempool\n+\n+    def create_simple_package(self, parent_coin, parent_fee=0, child_fee=DEFAULT_FEE, heavy_child=False, version=3):\n+        \"\"\"Create a 1 parent 1 child package using the coin passed in as the parent's input. The\n+        parent has 1 output, used to fund 1 child transaction.\n+        All transactions signal BIP125 replaceability, but nSequence changes based on self.ctr. This\n+        prevents identical txids between packages when the parents spend the same coin and have the\n+        same fee (i.e. 0sat).\n+\n+        returns tuple (hex serialized txns, CTransaction objects)\n+        \"\"\"\n+        self.ctr += 1\n+        # Use fee_rate=0 because create_self_transfer will use the default fee_rate value otherwise.\n+        # Passing in fee>0 overrides fee_rate, so this still works for non-zero parent_fee.\n+        parent_result = self.wallet.create_self_transfer(\n+            fee_rate=0,\n+            fee=parent_fee,\n+            utxo_to_spend=parent_coin,\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+\n+        num_child_outputs = 10 if heavy_child else 1\n+        child_result = self.wallet.create_self_transfer_multi(\n+            utxos_to_spend=[parent_result[\"new_utxo\"]],\n+            num_outputs=num_child_outputs,\n+            fee_per_output=int(child_fee * COIN // num_child_outputs),\n+            sequence=MAX_BIP125_RBF_SEQUENCE - self.ctr,\n+            version=version\n+        )\n+        package_hex = [parent_result[\"hex\"], child_result[\"hex\"]]\n+        package_txns = [parent_result[\"tx\"], child_result[\"tx\"]]\n+        return package_hex, package_txns\n+\n+    def run_test(self):\n+        # Counter used to count the number of times we constructed packages. Since we're constructing parent transactions with the same\n+        # coins (to create conflicts), and giving them the same fee (i.e. 0, since their respective children are paying), we might\n+        # accidentally just create the exact same transaction again. To prevent this, set nSequences to MAX_BIP125_RBF_SEQUENCE - self.ctr.\n+        self.ctr = 0\n+\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.wallet = MiniWallet(node)\n+        self.generate(self.wallet, 160)\n+        self.coins = self.wallet.get_utxos(mark_as_spent=False)\n+        # Mature coinbase transactions\n+        self.generate(self.wallet, 100)",
      "path": "test/functional/mempool_package_rbf.py",
      "position": 86,
      "original_position": 86,
      "commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "original_commit_id": "c1bd1e1f8e635e2803e11e902a7d0f95c6b3ebf9",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is necessary. `get_utxos` already filters for mature coinbases, and you're making 60 of those above.",
      "created_at": "2023-05-01T15:05:06Z",
      "updated_at": "2023-05-01T15:05:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25038#discussion_r1181639284",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1181639284"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25038"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 86,
      "original_line": 86,
      "side": "RIGHT"
    }
  ]
}