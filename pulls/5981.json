{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981",
    "id": 32790785,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3OTA3ODU=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/5981",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/5981.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/5981.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/2703412a39c95c811a40c3fff6929e4ce59c3c62",
    "number": 5981,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Python P2P testing framework",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Motivated by the discussion in #4545, I've been working on building a python testing framework that will allow us to write tests that exercise the p2p code in bitcoind, so that we can perform end-to-end testing and perform comparisons of behavior across bitcoind versions. This code builds on the existing RPC testing functionality, so that tests using both RPC calls and p2p messages can be written.\n\nI've split this pull into 3 commits to try to make this easier to review.\n\n1) The first commit adds a file called mininode.py, which I grabbed from jgarzik's mini-node branch of the pynode repository, and modified. This file does a few things:\n- Defines a class, NodeConn, which manages connectivity to a bitcoin node.\n- Defines a callback prototype, NodeConnCB, which is used for message delivery. The idea is that you can write a class that inherits from NodeConnCB and pass it in to a NodeConn object, and then be notified when events of interest arrive.\n- Defines all the data structures from bitcoin core that pass over the network, eg CBlock, CTransaction, etc.\n- Defines all the serialization/deserialization code.\n\nIt's possible to write (crude) tests using mininode.py alone, if you want. Also, mininode supports testing outside of regtest (it can communicate on testnet and mainnet as well), so that theoretically allows for a broader category of testing than we currently can do. All the tests I've been working on have been focused on regtest, however.\n\nAlso, in the first commit, I provide one example test (maxblocksinflight.py) that shows how you can use mininode. This is largely a proof-of-concept example, but it does test something useful: 0.10 used to fail this test until #5507 was merged.\n\n2) The second commit adds support for a comparison-tool style testing framework, similar to the comparison-tool framework that we use from bitcoinj in the pull-tester. The code in this commit is designed to add structure to test writing, so that tests are both easier to read and write (compared to the free-form structure of maxblocksinflight.py). I include in this commit one example test written using the framework, which tests the processing of two different types of invalid blocks.\n\nEDIT: I forgot to mention that I use py-leveldb in blockstore.py, a file I introduced in this commit that provides disk-backed storage for blocks.  I think I had to manually install that package on my machine, so I wanted to flag this dependency in case others think this would be a problem.\n\n3) The third commit adds some script processing routines (script.py and its dependency, bignum.py -- the latter could probably be removed with a little work) which I have copied and modified from python-bitcoinlib. With these additional tools, I was able to write a test, script_test.py, which reads all the script tests from the unit test data directory (script_valid.json and script_invalid.json) and inserts them in blocks delivered to two nodes, and for each test case compares whether the nodes agree on whether the block containing the test transaction passes consensus checks. This test is very slow (perhaps 40 minutes to run), so this is largely a proof of concept that demonstrates the kinds of tests we ought to be able to write. (Unfortunately, this test makes use of RPC calls that only have existed since 0.10, so it is not possible to run this test in its current form to compare 0.9-or-older versions).\n\nIf this framework looks okay, then I think a future project would be to re-implement the pull-tester's comparison test in this framework.  \n\nI realize this is a lot of code, so if there's anything more I can do to aid in review please let me know.\n",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2015-04-07T18:19:36Z",
    "updated_at": "2021-09-08T11:16:51Z",
    "closed_at": "2015-04-30T12:49:33Z",
    "mergeable_state": "unknown",
    "merged_at": "2015-04-30T12:49:33Z",
    "merge_commit_sha": "65c2e86ef1fce5873a28d97c6dd537a897eb352f",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sdaftuar:python-testing-framework-4",
      "ref": "python-testing-framework-4",
      "sha": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 245655,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-01T00:45:13Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2023-02-11T10:16:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "7bf5d5efa60c89c0e0c353dddc2a76fe4f243808",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34323,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:23Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T18:57:56Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 3467,
    "deletions": 4,
    "changed_files": 14,
    "commits": 5,
    "review_comments": 2,
    "comments": 17
  },
  "events": [
    {
      "event": "commented",
      "id": 90690851,
      "node_id": "MDEyOklzc3VlQ29tbWVudDkwNjkwODUx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90690851",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-07T18:29:13Z",
      "updated_at": "2015-04-07T18:29:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Nice!\nconceptual ACK.\nHave plans to test this soon.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-90690851",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "commented",
      "id": 90818710,
      "node_id": "MDEyOklzc3VlQ29tbWVudDkwODE4NzEw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/90818710",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-08T06:24:29Z",
      "updated_at": "2015-04-08T06:24:29Z",
      "author_association": "MEMBER",
      "body": "Nice work!\n\n> I forgot to mention that I use py-leveldb in blockstore.py\n\nI'd rather not add any external dependencies for the tests. Do we need any kind of persistent block storage in the tests? If we really do, I'd rather hack something together with python.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-90818710",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "labeled",
      "id": 275951525,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NTk1MTUyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/275951525",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-08T06:46:36Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 91250482,
      "node_id": "MDEyOklzc3VlQ29tbWVudDkxMjUwNDgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91250482",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-09T14:38:13Z",
      "updated_at": "2015-04-09T14:38:13Z",
      "author_association": "MEMBER",
      "body": "@laanwj I'd prefer to leave the disk-backed storage there, even though it's probably not needed for the existing tests I've included in this pull, because it will be needed to write longer tests like the comparison test which currently runs in the pull-tester.  \n\nI pushed up a commit that replaces leveldb with dbm, which I believe is a standard python package; does that seem like an acceptable option?\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-91250482",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 277238404,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc3MjM4NDA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/277238404",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-09T14:38:13Z"
    },
    {
      "event": "subscribed",
      "id": 277238405,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NzIzODQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/277238405",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-09T14:38:13Z"
    },
    {
      "event": "commented",
      "id": 91267882,
      "node_id": "MDEyOklzc3VlQ29tbWVudDkxMjY3ODgy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/91267882",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-09T15:42:43Z",
      "updated_at": "2015-04-09T15:42:43Z",
      "author_association": "MEMBER",
      "body": "Sure, using a python standard package is fine, my gripe was with using an external dependency. Using disk-backed storage is no problem as long as subsequent tests don't interfere with each other.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-91267882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 278743386,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjc4NzQzMzg2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/278743386",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-11T09:58:21Z"
    },
    {
      "event": "commented",
      "id": 93691785,
      "node_id": "MDEyOklzc3VlQ29tbWVudDkzNjkxNzg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/93691785",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-16T09:33:56Z",
      "updated_at": "2015-04-16T09:34:17Z",
      "author_association": "MEMBER",
      "body": "Maybe add the new tests (whenever they don't take too long) to the pull tester e.g. `qa/pull-tester/rpc-tests.sh`. For example `invalidblockrequest.py` seems to finish quickly.\n\nThe `bipdersig-p2p.py` test seems to hang indefinitely here at:\n\n```\nInitializing test directory /tmp/testBxTNIB\nMiniNode: Connecting to Bitcoin Node IP # 127.0.0.1:11916\nTest 1: PASS [98]\n```\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-93691785",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 284075275,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0MDc1Mjc1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/284075275",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-17T16:58:39Z"
    },
    {
      "event": "commented",
      "id": 94035406,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk0MDM1NDA2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94035406",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-17T17:39:18Z",
      "updated_at": "2015-04-17T23:48:33Z",
      "author_association": "MEMBER",
      "body": "@laanwj  The `bipdersig-p2p.py` test was failing because this needed rebase, due to the `setgenerate ()`/`generate()` regtest rpc change (now fixed).\n\nI've also shortened `maxblocksinflight.py`, and added both it and `invalidblockrequest.py` to the pull tester's rpc tests.\n\nEDIT: I see that this errored out in travis; will investigate.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-94035406",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 284104084,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg0MTA0MDg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/284104084",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-17T17:39:18Z"
    },
    {
      "event": "subscribed",
      "id": 284104085,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4NDEwNDA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/284104085",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-17T17:39:18Z"
    },
    {
      "event": "commented",
      "id": 94693113,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk0NjkzMTEz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/94693113",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-21T08:05:48Z",
      "updated_at": "2015-04-21T08:05:48Z",
      "author_association": "MEMBER",
      "body": "Ah yes, the `generate` switcharoo. I think we should add an explicit error when setgenerate() is used on regtest, so that bugs like this are tripped up immediately instead of through vague timeouts.\n\nThe travis error seems to occur on 64-bit Linux - no detailed information unfortunately\n\n```\nRunning testscript maxblocksinflight.py...\n\nInitializing test directory /tmp/testIyXJqc\n\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\n```\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-94693113",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "commented",
      "id": 96971436,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk2OTcxNDM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/96971436",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T08:24:27Z",
      "updated_at": "2015-04-28T08:24:27Z",
      "author_association": "MEMBER",
      "body": "I'd really like to merge this. Do you have trouble solving the travis error? If so, maybe @theuni can help.\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-96971436",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 291726471,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkxNzI2NDcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/291726471",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T08:24:27Z"
    },
    {
      "event": "subscribed",
      "id": 291726472,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MTcyNjQ3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/291726472",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T08:24:27Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 292049853,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMDQ5ODUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/292049853",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T14:46:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 292141270,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMTQxMjcw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/292141270",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T16:07:08Z"
    },
    {
      "event": "commented",
      "id": 97129316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3MTI5MzE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97129316",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T16:35:43Z",
      "updated_at": "2015-04-28T16:35:43Z",
      "author_association": "MEMBER",
      "body": "This needed to be rebased anyway, so I did that and now travis succeeds.  I'm not sure what to make of that, since I didn't actually fix anything, and it seems odd to think that this was just a spurious travis failure that happened to only affect a new test I've introduced in this pull.\n\nI'll try rebasing again, since I wanted to fold the 4th and 5th commits in anyway, and when I push we'll get one more data point about how travis does with the new tests.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97129316",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzFkMWJhNmZjY2Q3NmUzNjkwYmFjODM0MTY4N2MwOTIxNzU4ZTMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c1d1ba6fccd76e3690bac8341687c0921758e30",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/6c1d1ba6fccd76e3690bac8341687c0921758e30",
      "tree": {
        "sha": "1b4edb379b9c83c52c0b888dd3f460c73420826f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b4edb379b9c83c52c0b888dd3f460c73420826f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf5d5efa60c89c0e0c353dddc2a76fe4f243808",
          "sha": "7bf5d5efa60c89c0e0c353dddc2a76fe4f243808",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf5d5efa60c89c0e0c353dddc2a76fe4f243808"
        }
      ],
      "message": "Python p2p testing framework\n\nmininode.py provides a framework for connecting to a bitcoin node over the p2p\nnetwork. NodeConn is the main object that manages connectivity to a node and\nprovides callbacks; the interface for those callbacks is defined by NodeConnCB.\nDefined also are all data structures from bitcoin core that pass on the network\n(CBlock, CTransaction, etc), along with de-/serialization functions.\n\nmaxblocksinflight.py is an example test using this framework that tests whether\na node is limiting the maximum number of in-flight block requests.\n\nThis also adds support to util.py for specifying the binary to use when\nstarting nodes (for tests that compare the behavior of different bitcoind\nversions), and adds maxblocksinflight.py to the pull tester.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T16:38:29Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T16:36:15Z"
      },
      "sha": "6c1d1ba6fccd76e3690bac8341687c0921758e30"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTM5NzRjM2YzMmE1Mzk4YTk0ZGIyNzVjZDIzYjdmZjc4ZjI2OWJm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b93974c3f32a5398a94db275cd23b7ff78f269bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b93974c3f32a5398a94db275cd23b7ff78f269bf",
      "tree": {
        "sha": "315905c0afd9b8f8d4bec71f71b9d2f9b29d4f95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/315905c0afd9b8f8d4bec71f71b9d2f9b29d4f95"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c1d1ba6fccd76e3690bac8341687c0921758e30",
          "sha": "6c1d1ba6fccd76e3690bac8341687c0921758e30",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6c1d1ba6fccd76e3690bac8341687c0921758e30"
        }
      ],
      "message": "Add comparison tool test runner, built on mininode\n\ncomptool.py creates a tool for running a test suite on top of the mininode p2p\nframework.  It supports two types of tests: those for which we expect certain\nbehavior (acceptance or rejection of a block or transaction) and those for\nwhich we are just comparing that the behavior of 2 or more nodes is the same.\n\nblockstore.py defines BlockStore and TxStore, which provide db-backed maps\nbetween block/tx hashes and the corresponding block or tx.\n\nblocktools.py defines utility functions for creating and manipulating blocks\nand transactions.\n\ninvalidblockrequest.py is an example test in the comptool framework, which\ntests the behavior of a single node when sent two different types of invalid\nblocks (a block with a duplicated transaction and a block with a bad coinbase\nvalue).",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T16:40:56Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T16:39:47Z"
      },
      "sha": "b93974c3f32a5398a94db275cd23b7ff78f269bf"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 292293424,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMjkzNDI0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/292293424",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T18:43:50Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzY0MTJiMDY4ZDk1NDU0NzMyYWEzZGVmOTVkZWNmMzUyNTE3NTlh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d76412b068d95454732aa3def95decf35251759a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d76412b068d95454732aa3def95decf35251759a",
      "tree": {
        "sha": "a9b5888f34257cbd8c2a7bd03f9bb213f5fe07c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9b5888f34257cbd8c2a7bd03f9bb213f5fe07c8"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b93974c3f32a5398a94db275cd23b7ff78f269bf",
          "sha": "b93974c3f32a5398a94db275cd23b7ff78f269bf",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b93974c3f32a5398a94db275cd23b7ff78f269bf"
        }
      ],
      "message": "Add script manipulation tools for use in mininode testing framework\n\nscript.py is modified from the code in python-bitcoinlib, and provides tools\nfor manipulating and creating CScript objects.\n\nbignum.py is a dependency for script.py\n\nscript_test.py is an example test that uses the script tools for running a test\nthat compares the behavior of two nodes, in a comptool- style test, for each of\nthe test cases in the bitcoin unit test script files, script_valid.json and\nscript_invalid.json.  (This test is very slow to run, but is a proof of concept\nfor how we can write tests to compare consensus-critical behavior between\ndifferent versions of bitcoind.)\n\nbipdersig-p2p.py is another example test in the comptool framework, which tests\ndeployment of BIP DERSIG for a single node.  It uses the script.py tools for\nmanipulating signatures to be non-DER compliant.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T19:09:29Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T16:41:54Z"
      },
      "sha": "d76412b068d95454732aa3def95decf35251759a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 292318514,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMzE4NTE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/292318514",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T19:13:16Z"
    },
    {
      "event": "commented",
      "id": 97187422,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3MTg3NDIy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97187422",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T19:56:18Z",
      "updated_at": "2015-04-28T19:56:18Z",
      "author_association": "MEMBER",
      "body": "Well, on the first attempt, travis failed again with the 10-minute no-data-received timeout, but this time it was not involving the new p2p tests (it died while the java comparison tool was running).  I amended the last commit to force a re-run, and it ran successfully, so now I am a little more willing to believe that these may just be random travis failures that I'm encountering, and not a problem in the code introduced here.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97187422",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "commented",
      "id": 97188898,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3MTg4ODk4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97188898",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-28T20:00:13Z",
      "updated_at": "2015-04-28T20:01:05Z",
      "author_association": "MEMBER",
      "body": "I came too late.. what was the original error?\nEdit: nevermind, posted same time.\n",
      "user": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97188898",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWJmZjBlNjg0YzNlYzAxMjFhMDY5NTg2MWI2NzAxYzU0NDM3MDdj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29bff0e684c3ec0121a0695861b6701c5443707c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/29bff0e684c3ec0121a0695861b6701c5443707c",
      "tree": {
        "sha": "6cf1c8d0e26916b7c2040cc5785e2bc2b2e1415c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cf1c8d0e26916b7c2040cc5785e2bc2b2e1415c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d76412b068d95454732aa3def95decf35251759a",
          "sha": "d76412b068d95454732aa3def95decf35251759a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d76412b068d95454732aa3def95decf35251759a"
        }
      ],
      "message": "Add some travis debugging for python scripts\n\nAdds printing to the console before/after calls to bitcoin-cli -rpcwait,\nif the PYTHON_DEBUG environment variable is initialized.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T20:51:46Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-28T20:51:46Z"
      },
      "sha": "29bff0e684c3ec0121a0695861b6701c5443707c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzAzNDEyYTM5Yzk1YzgxMWE0MGMzZmZmNjkyOWU0Y2U1OWMzYzYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "tree": {
        "sha": "97585c3010cafead7e89bc885c47e9eeda250dd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97585c3010cafead7e89bc885c47e9eeda250dd7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29bff0e684c3ec0121a0695861b6701c5443707c",
          "sha": "29bff0e684c3ec0121a0695861b6701c5443707c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/29bff0e684c3ec0121a0695861b6701c5443707c"
        }
      ],
      "message": "Fix default binary in p2p tests to use environment variable",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-29T13:18:33Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-29T13:18:33Z"
      },
      "sha": "2703412a39c95c811a40c3fff6929e4ce59c3c62"
    },
    {
      "event": "commented",
      "id": 97456630,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDU2NjMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97456630",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-29T14:57:32Z",
      "updated_at": "2015-04-29T14:57:32Z",
      "author_association": "MEMBER",
      "body": "After discussing with @theuni on IRC, I added a commit that adds some optional debugging (which I enabled for travis) to calls to bitcoin-cli -rpcwait (inside util.py), and then another addressing the bug he caught with the default binary names.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97456630",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 293080911,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkzMDgwOTEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/293080911",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-29T14:57:32Z"
    },
    {
      "event": "subscribed",
      "id": 293080913,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MzA4MDkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/293080913",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-29T14:57:32Z"
    },
    {
      "event": "commented",
      "id": 97481378,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3NDgxMzc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97481378",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-29T16:03:39Z",
      "updated_at": "2015-04-29T16:03:39Z",
      "author_association": "MEMBER",
      "body": "ACK\n",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97481378",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "merged",
      "id": 293966607,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjkzOTY2NjA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/293966607",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "created_at": "2015-04-30T12:49:33Z"
    },
    {
      "event": "closed",
      "id": 293966608,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjkzOTY2NjA4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/293966608",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T12:49:33Z"
    },
    {
      "event": "referenced",
      "id": 293966636,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5Mzk2NjYzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/293966636",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "da38dc696c86aeb7394768ab34eb9a6e46bb614c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da38dc696c86aeb7394768ab34eb9a6e46bb614c",
      "created_at": "2015-04-30T12:49:36Z"
    },
    {
      "event": "commented",
      "id": 97767685,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3NzY3Njg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97767685",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T13:06:24Z",
      "updated_at": "2015-04-30T13:06:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "1st: this is impressive work. Nice!\nI think the quick merge honors this job.\n\nNevertheless here are some first post-ACK reports (more detailed report will follow):\n\nRunning `maxblocksinflight.py` does fail on my local machine:\n\n```\nRunning testscript maxblocksinflight.py...\nInitializing test directory /var/folders/hp/kb9p9q8x4k3_z_ccy588hxrc0000gn/T/testVtWBqX\nMiniNode: Connecting to Bitcoin Node IP # 127.0.0.1:11650\nRound 0: success (total requests: 8)\nRound 1: success (total requests: 16)\nRound 2: success (total requests: 16)\nRound 3: success (total requests: 16)\nStopping nodes\nException in thread Thread-1:\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py\", line 810, in __bootstrap_inner\n    self.run()\n  File \"/Users/jonasschnelli/Documents/bitcoin/_bitcoin/qa/rpc-tests/mininode.py\", line 1237, in run\n    asyncore.loop(0.1, True)\n  File \"/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/asyncore.py\", line 216, in loop\n    poll_fun(timeout, map)\n  File \"/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/asyncore.py\", line 145, in poll\n    r, w, e = select.select(r, w, e, timeout)\nerror: (9, 'Bad file descriptor')\n```\n\nsame for invalidblockrequest.py\n\n```\nRunning testscript invalidblockrequest.py...\nInitializing test directory /var/folders/hp/kb9p9q8x4k3_z_ccy588hxrc0000gn/T/testqJOevS\nMiniNode: Connecting to Bitcoin Node IP # 127.0.0.1:11506\nTest 1: PASS [1]\nTest 2: PASS [101]\nAssertion failed: Test failed at test 3\n  File \"/Users/jonasschnelli/Documents/bitcoin/_bitcoin/qa/rpc-tests/test_framework.py\", line 119, in main\n    self.run_test()\n  File \"/Users/jonasschnelli/Documents/bitcoin/_bitcoin/qa/rpc-tests/invalidblockrequest.py\", line 39, in run_test\n    test.run()\n  File \"/Users/jonasschnelli/Documents/bitcoin/_bitcoin/qa/rpc-tests/comptool.py\", line 284, in run\n    raise AssertionError(\"Test failed at test %d\" % test_number)\nStopping nodes\n```\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97767685",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE0OTE2Njc6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 97793718,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3NzkzNzE4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97793718",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T13:38:44Z",
      "updated_at": "2015-04-30T13:38:44Z",
      "author_association": "MEMBER",
      "body": "@jonasschnelli  Thanks, and thanks for running the tests too.  Looks to me like the first error message is happening in how the test cleans up, that probably just needs to be made more robust; I'll take a look.  The second error message is more concerning though, as the substantive part of the test is failing.  \n\nCould you run `invalidblockrequest.py --tracerpc` (which will produce a lot of debug output, basically every p2p message sent or received, along with the rpc calls) and upload it somewhere for me to analyze?   That should help me debug what's going on here.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97793718",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 294027994,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk0MDI3OTk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/294027994",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T13:38:44Z"
    },
    {
      "event": "subscribed",
      "id": 294027995,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NDAyNzk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/294027995",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T13:38:44Z"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjE0OTE2NzA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "commented",
      "id": 97819466,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODE5NDY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97819466",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T14:32:54Z",
      "updated_at": "2015-04-30T14:32:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Post merge ACK\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97819466",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "commented",
      "id": 97836357,
      "node_id": "MDEyOklzc3VlQ29tbWVudDk3ODM2MzU3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/97836357",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T15:19:50Z",
      "updated_at": "2015-04-30T15:19:50Z",
      "author_association": "MEMBER",
      "body": "@jonasschnelli FYI - I did some more digging, and I think I've identified a race condition in the invalidblockrequest.py test (which you triggered the first time you ran, and got the assertion failure at test 3).\n\nI'll PR a cleanup of these issues shortly.\n",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#issuecomment-97836357",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/5981"
    },
    {
      "event": "mentioned",
      "id": 294143026,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjk0MTQzMDI2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/294143026",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T15:19:50Z"
    },
    {
      "event": "subscribed",
      "id": 294143027,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5NDE0MzAyNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/294143027",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2015-04-30T15:19:50Z"
    },
    {
      "event": "locked",
      "id": 5271622581,
      "node_id": "LOE_lADOABII584D_baTzwAAAAE6NpO1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271622581",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:16:51Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29428834",
      "pull_request_review_id": null,
      "id": 29428834,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDI4ODM0",
      "diff_hunk": "@@ -0,0 +1,115 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework import ComparisonTestFramework\n+from util import *\n+from comptool import TestManager, TestInstance\n+from mininode import *\n+from blocktools import *\n+import logging\n+import copy\n+import time\n+\n+\n+'''\n+In this test we connect to one node over p2p, and test block requests:\n+1) Valid blocks should be requested and become chain tip.\n+2) Invalid block with duplicated transaction should be re-requested.\n+3) Invalid block with bad coinbase value should be rejected and not\n+re-requested.\n+'''\n+\n+# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n+class InvalidBlockRequestTest(ComparisonTestFramework):\n+\n+    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n+        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n+    def __init__(self):\n+        self.num_nodes = 1",
      "path": "qa/rpc-tests/invalidblockrequest.py",
      "position": 31,
      "original_position": 31,
      "commit_id": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "original_commit_id": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it somehow possible to set this to 2 if `--refbinary` is set?\n",
      "created_at": "2015-04-30T13:31:39Z",
      "updated_at": "2015-04-30T13:31:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#discussion_r29428834",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29428834"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 31,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29433660",
      "pull_request_review_id": null,
      "id": 29433660,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI5NDMzNjYw",
      "diff_hunk": "@@ -0,0 +1,1247 @@\n+# mininode.py - Bitcoin P2P network half-a-node\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# This python code was modified from ArtForz' public domain  half-a-node, as\n+# found in the mini-node branch of http://github.com/jgarzik/pynode.\n+#\n+# NodeConn: an object which manages p2p connectivity to a bitcoin node\n+# NodeConnCB: a base class that describes the interface for receiving\n+#             callbacks with network messages from a NodeConn\n+# CBlock, CTransaction, CBlockHeader, CTxIn, CTxOut, etc....:\n+#     data structures that should map to corresponding structures in\n+#     bitcoin/primitives\n+# msg_block, msg_tx, msg_headers, etc.:\n+#     data structures that represent network messages\n+# ser_*, deser_*: functions that handle serialization/deserialization\n+\n+\n+import struct\n+import socket\n+import asyncore\n+import binascii\n+import time\n+import sys\n+import random\n+import cStringIO\n+import hashlib\n+from threading import Lock\n+from threading import Thread\n+import logging\n+import copy\n+\n+BIP0031_VERSION = 60000\n+MY_VERSION = 60001  # past bip-31 for ping/pong\n+MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n+\n+MAX_INV_SZ = 50000\n+\n+# Serialization/deserialization tools\n+def sha256(s):\n+    return hashlib.new('sha256', s).digest()\n+\n+\n+def hash256(s):\n+    return sha256(sha256(s))\n+\n+\n+def deser_string(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    return f.read(nit)\n+\n+\n+def ser_string(s):\n+    if len(s) < 253:\n+        return chr(len(s)) + s\n+    elif len(s) < 0x10000:\n+        return chr(253) + struct.pack(\"<H\", len(s)) + s\n+    elif len(s) < 0x100000000L:\n+        return chr(254) + struct.pack(\"<I\", len(s)) + s\n+    return chr(255) + struct.pack(\"<Q\", len(s)) + s\n+\n+\n+def deser_uint256(f):\n+    r = 0L\n+    for i in xrange(8):\n+        t = struct.unpack(\"<I\", f.read(4))[0]\n+        r += t << (i * 32)\n+    return r\n+\n+\n+def ser_uint256(u):\n+    rs = \"\"\n+    for i in xrange(8):\n+        rs += struct.pack(\"<I\", u & 0xFFFFFFFFL)\n+        u >>= 32\n+    return rs\n+\n+\n+def uint256_from_str(s):\n+    r = 0L\n+    t = struct.unpack(\"<IIIIIIII\", s[:32])\n+    for i in xrange(8):\n+        r += t[i] << (i * 32)\n+    return r\n+\n+\n+def uint256_from_compact(c):\n+    nbytes = (c >> 24) & 0xFF\n+    v = (c & 0xFFFFFFL) << (8 * (nbytes - 3))\n+    return v\n+\n+\n+def deser_vector(f, c):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = c()\n+        t.deserialize(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += i.serialize()\n+    return r\n+\n+\n+def deser_uint256_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = deser_uint256(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_uint256_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += ser_uint256(i)\n+    return r\n+\n+\n+def deser_string_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = deser_string(f)\n+        r.append(t)\n+    return r\n+\n+\n+def ser_string_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for sv in l:\n+        r += ser_string(sv)\n+    return r\n+\n+\n+def deser_int_vector(f):\n+    nit = struct.unpack(\"<B\", f.read(1))[0]\n+    if nit == 253:\n+        nit = struct.unpack(\"<H\", f.read(2))[0]\n+    elif nit == 254:\n+        nit = struct.unpack(\"<I\", f.read(4))[0]\n+    elif nit == 255:\n+        nit = struct.unpack(\"<Q\", f.read(8))[0]\n+    r = []\n+    for i in xrange(nit):\n+        t = struct.unpack(\"<i\", f.read(4))[0]\n+        r.append(t)\n+    return r\n+\n+\n+def ser_int_vector(l):\n+    r = \"\"\n+    if len(l) < 253:\n+        r = chr(len(l))\n+    elif len(l) < 0x10000:\n+        r = chr(253) + struct.pack(\"<H\", len(l))\n+    elif len(l) < 0x100000000L:\n+        r = chr(254) + struct.pack(\"<I\", len(l))\n+    else:\n+        r = chr(255) + struct.pack(\"<Q\", len(l))\n+    for i in l:\n+        r += struct.pack(\"<i\", i)\n+    return r\n+\n+\n+# Objects that map to bitcoind objects, which can be serialized/deserialized\n+\n+class CAddress(object):\n+    def __init__(self):\n+        self.nServices = 1\n+        self.pchReserved = \"\\x00\" * 10 + \"\\xff\" * 2\n+        self.ip = \"0.0.0.0\"\n+        self.port = 0\n+\n+    def deserialize(self, f):\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.pchReserved = f.read(12)\n+        self.ip = socket.inet_ntoa(f.read(4))\n+        self.port = struct.unpack(\">H\", f.read(2))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += self.pchReserved\n+        r += socket.inet_aton(self.ip)\n+        r += struct.pack(\">H\", self.port)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n+                                                         self.ip, self.port)\n+\n+\n+class CInv(object):\n+    typemap = {\n+        0: \"Error\",\n+        1: \"TX\",\n+        2: \"Block\"}\n+\n+    def __init__(self, t=0, h=0L):\n+        self.type = t\n+        self.hash = h\n+\n+    def deserialize(self, f):\n+        self.type = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.type)\n+        r += ser_uint256(self.hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CInv(type=%s hash=%064x)\" \\\n+            % (self.typemap[self.type], self.hash)\n+\n+\n+class CBlockLocator(object):\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.vHave = []\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vHave = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256_vector(self.vHave)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CBlockLocator(nVersion=%i vHave=%s)\" \\\n+            % (self.nVersion, repr(self.vHave))\n+\n+\n+class COutPoint(object):\n+    def __init__(self, hash=0, n=0):\n+        self.hash = hash\n+        self.n = n\n+\n+    def deserialize(self, f):\n+        self.hash = deser_uint256(f)\n+        self.n = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += ser_uint256(self.hash)\n+        r += struct.pack(\"<I\", self.n)\n+        return r\n+\n+    def __repr__(self):\n+        return \"COutPoint(hash=%064x n=%i)\" % (self.hash, self.n)\n+\n+\n+class CTxIn(object):\n+    def __init__(self, outpoint=None, scriptSig=\"\", nSequence=0):\n+        if outpoint is None:\n+            self.prevout = COutPoint()\n+        else:\n+            self.prevout = outpoint\n+        self.scriptSig = scriptSig\n+        self.nSequence = nSequence\n+\n+    def deserialize(self, f):\n+        self.prevout = COutPoint()\n+        self.prevout.deserialize(f)\n+        self.scriptSig = deser_string(f)\n+        self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.prevout.serialize()\n+        r += ser_string(self.scriptSig)\n+        r += struct.pack(\"<I\", self.nSequence)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n+            % (repr(self.prevout), binascii.hexlify(self.scriptSig),\n+               self.nSequence)\n+\n+\n+class CTxOut(object):\n+    def __init__(self, nValue=0, scriptPubKey=\"\"):\n+        self.nValue = nValue\n+        self.scriptPubKey = scriptPubKey\n+\n+    def deserialize(self, f):\n+        self.nValue = struct.unpack(\"<q\", f.read(8))[0]\n+        self.scriptPubKey = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<q\", self.nValue)\n+        r += ser_string(self.scriptPubKey)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n+            % (self.nValue // 100000000, self.nValue % 100000000,\n+               binascii.hexlify(self.scriptPubKey))\n+\n+\n+class CTransaction(object):\n+    def __init__(self, tx=None):\n+        if tx is None:\n+            self.nVersion = 1\n+            self.vin = []\n+            self.vout = []\n+            self.nLockTime = 0\n+            self.sha256 = None\n+            self.hash = None\n+        else:\n+            self.nVersion = tx.nVersion\n+            self.vin = copy.deepcopy(tx.vin)\n+            self.vout = copy.deepcopy(tx.vout)\n+            self.nLockTime = tx.nLockTime\n+            self.sha256 = None\n+            self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.vin = deser_vector(f, CTxIn)\n+        self.vout = deser_vector(f, CTxOut)\n+        self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_vector(self.vin)\n+        r += ser_vector(self.vout)\n+        r += struct.pack(\"<I\", self.nLockTime)\n+        return r\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            self.sha256 = uint256_from_str(hash256(self.serialize()))\n+        self.hash = hash256(self.serialize())[::-1].encode('hex_codec')\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        for tout in self.vout:\n+            if tout.nValue < 0 or tout.nValue > 21000000L * 100000000L:\n+                return False\n+        return True\n+\n+    def __repr__(self):\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), self.nLockTime)\n+\n+\n+class CBlockHeader(object):\n+    def __init__(self, header=None):\n+        if header is None:\n+            self.set_null()\n+        else:\n+            self.nVersion = header.nVersion\n+            self.hashPrevBlock = header.hashPrevBlock\n+            self.hashMerkleRoot = header.hashMerkleRoot\n+            self.nTime = header.nTime\n+            self.nBits = header.nBits\n+            self.nNonce = header.nNonce\n+            self.sha256 = header.sha256\n+            self.hash = header.hash\n+            self.calc_sha256()\n+\n+    def set_null(self):\n+        self.nVersion = 1\n+        self.hashPrevBlock = 0\n+        self.hashMerkleRoot = 0\n+        self.nTime = 0\n+        self.nBits = 0\n+        self.nNonce = 0\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.hashPrevBlock = deser_uint256(f)\n+        self.hashMerkleRoot = deser_uint256(f)\n+        self.nTime = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nBits = struct.unpack(\"<I\", f.read(4))[0]\n+        self.nNonce = struct.unpack(\"<I\", f.read(4))[0]\n+        self.sha256 = None\n+        self.hash = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += ser_uint256(self.hashPrevBlock)\n+        r += ser_uint256(self.hashMerkleRoot)\n+        r += struct.pack(\"<I\", self.nTime)\n+        r += struct.pack(\"<I\", self.nBits)\n+        r += struct.pack(\"<I\", self.nNonce)\n+        return r\n+\n+    def calc_sha256(self):\n+        if self.sha256 is None:\n+            r = \"\"\n+            r += struct.pack(\"<i\", self.nVersion)\n+            r += ser_uint256(self.hashPrevBlock)\n+            r += ser_uint256(self.hashMerkleRoot)\n+            r += struct.pack(\"<I\", self.nTime)\n+            r += struct.pack(\"<I\", self.nBits)\n+            r += struct.pack(\"<I\", self.nNonce)\n+            self.sha256 = uint256_from_str(hash256(r))\n+            self.hash = hash256(r)[::-1].encode('hex_codec')\n+\n+    def rehash(self):\n+        self.sha256 = None\n+        self.calc_sha256()\n+        return self.sha256\n+\n+    def __repr__(self):\n+        return \"CBlockHeader(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce)\n+\n+\n+class CBlock(CBlockHeader):\n+    def __init__(self, header=None):\n+        super(CBlock, self).__init__(header)\n+        self.vtx = []\n+\n+    def deserialize(self, f):\n+        super(CBlock, self).deserialize(f)\n+        self.vtx = deser_vector(f, CTransaction)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += super(CBlock, self).serialize()\n+        r += ser_vector(self.vtx)\n+        return r\n+\n+    def calc_merkle_root(self):\n+        hashes = []\n+        for tx in self.vtx:\n+            tx.calc_sha256()\n+            hashes.append(ser_uint256(tx.sha256))\n+        while len(hashes) > 1:\n+            newhashes = []\n+            for i in xrange(0, len(hashes), 2):\n+                i2 = min(i+1, len(hashes)-1)\n+                newhashes.append(hash256(hashes[i] + hashes[i2]))\n+            hashes = newhashes\n+        return uint256_from_str(hashes[0])\n+\n+    def is_valid(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        if self.sha256 > target:\n+            return False\n+        for tx in self.vtx:\n+            if not tx.is_valid():\n+                return False\n+        if self.calc_merkle_root() != self.hashMerkleRoot:\n+            return False\n+        return True\n+\n+    def solve(self):\n+        self.calc_sha256()\n+        target = uint256_from_compact(self.nBits)\n+        while self.sha256 > target:\n+            self.nNonce += 1\n+            self.rehash()\n+\n+    def __repr__(self):\n+        return \"CBlock(nVersion=%i hashPrevBlock=%064x hashMerkleRoot=%064x nTime=%s nBits=%08x nNonce=%08x vtx=%s)\" \\\n+            % (self.nVersion, self.hashPrevBlock, self.hashMerkleRoot,\n+               time.ctime(self.nTime), self.nBits, self.nNonce, repr(self.vtx))\n+\n+\n+class CUnsignedAlert(object):\n+    def __init__(self):\n+        self.nVersion = 1\n+        self.nRelayUntil = 0\n+        self.nExpiration = 0\n+        self.nID = 0\n+        self.nCancel = 0\n+        self.setCancel = []\n+        self.nMinVer = 0\n+        self.nMaxVer = 0\n+        self.setSubVer = []\n+        self.nPriority = 0\n+        self.strComment = \"\"\n+        self.strStatusBar = \"\"\n+        self.strReserved = \"\"\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nRelayUntil = struct.unpack(\"<q\", f.read(8))[0]\n+        self.nExpiration = struct.unpack(\"<q\", f.read(8))[0]\n+        self.nID = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nCancel = struct.unpack(\"<i\", f.read(4))[0]\n+        self.setCancel = deser_int_vector(f)\n+        self.nMinVer = struct.unpack(\"<i\", f.read(4))[0]\n+        self.nMaxVer = struct.unpack(\"<i\", f.read(4))[0]\n+        self.setSubVer = deser_string_vector(f)\n+        self.nPriority = struct.unpack(\"<i\", f.read(4))[0]\n+        self.strComment = deser_string(f)\n+        self.strStatusBar = deser_string(f)\n+        self.strReserved = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<q\", self.nRelayUntil)\n+        r += struct.pack(\"<q\", self.nExpiration)\n+        r += struct.pack(\"<i\", self.nID)\n+        r += struct.pack(\"<i\", self.nCancel)\n+        r += ser_int_vector(self.setCancel)\n+        r += struct.pack(\"<i\", self.nMinVer)\n+        r += struct.pack(\"<i\", self.nMaxVer)\n+        r += ser_string_vector(self.setSubVer)\n+        r += struct.pack(\"<i\", self.nPriority)\n+        r += ser_string(self.strComment)\n+        r += ser_string(self.strStatusBar)\n+        r += ser_string(self.strReserved)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CUnsignedAlert(nVersion %d, nRelayUntil %d, nExpiration %d, nID %d, nCancel %d, nMinVer %d, nMaxVer %d, nPriority %d, strComment %s, strStatusBar %s, strReserved %s)\" \\\n+            % (self.nVersion, self.nRelayUntil, self.nExpiration, self.nID,\n+               self.nCancel, self.nMinVer, self.nMaxVer, self.nPriority,\n+               self.strComment, self.strStatusBar, self.strReserved)\n+\n+\n+class CAlert(object):\n+    def __init__(self):\n+        self.vchMsg = \"\"\n+        self.vchSig = \"\"\n+\n+    def deserialize(self, f):\n+        self.vchMsg = deser_string(f)\n+        self.vchSig = deser_string(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += ser_string(self.vchMsg)\n+        r += ser_string(self.vchSig)\n+        return r\n+\n+    def __repr__(self):\n+        return \"CAlert(vchMsg.sz %d, vchSig.sz %d)\" \\\n+            % (len(self.vchMsg), len(self.vchSig))\n+\n+\n+# Objects that correspond to messages on the wire\n+class msg_version(object):\n+    command = \"version\"\n+\n+    def __init__(self):\n+        self.nVersion = MY_VERSION\n+        self.nServices = 1\n+        self.nTime = time.time()\n+        self.addrTo = CAddress()\n+        self.addrFrom = CAddress()\n+        self.nNonce = random.getrandbits(64)\n+        self.strSubVer = MY_SUBVERSION\n+        self.nStartingHeight = -1\n+\n+    def deserialize(self, f):\n+        self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n+        if self.nVersion == 10300:\n+            self.nVersion = 300\n+        self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n+        self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n+        self.addrTo = CAddress()\n+        self.addrTo.deserialize(f)\n+        if self.nVersion >= 106:\n+            self.addrFrom = CAddress()\n+            self.addrFrom.deserialize(f)\n+            self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n+            self.strSubVer = deser_string(f)\n+            if self.nVersion >= 209:\n+                self.nStartingHeight = struct.unpack(\"<i\", f.read(4))[0]\n+            else:\n+                self.nStartingHeight = None\n+        else:\n+            self.addrFrom = None\n+            self.nNonce = None\n+            self.strSubVer = None\n+            self.nStartingHeight = None\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<i\", self.nVersion)\n+        r += struct.pack(\"<Q\", self.nServices)\n+        r += struct.pack(\"<q\", self.nTime)\n+        r += self.addrTo.serialize()\n+        r += self.addrFrom.serialize()\n+        r += struct.pack(\"<Q\", self.nNonce)\n+        r += ser_string(self.strSubVer)\n+        r += struct.pack(\"<i\", self.nStartingHeight)\n+        return r\n+\n+    def __repr__(self):\n+        return 'msg_version(nVersion=%i nServices=%i nTime=%s addrTo=%s addrFrom=%s nNonce=0x%016X strSubVer=%s nStartingHeight=%i)' \\\n+            % (self.nVersion, self.nServices, time.ctime(self.nTime),\n+               repr(self.addrTo), repr(self.addrFrom), self.nNonce,\n+               self.strSubVer, self.nStartingHeight)\n+\n+\n+class msg_verack(object):\n+    command = \"verack\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_verack()\"\n+\n+\n+class msg_addr(object):\n+    command = \"addr\"\n+\n+    def __init__(self):\n+        self.addrs = []\n+\n+    def deserialize(self, f):\n+        self.addrs = deser_vector(f, CAddress)\n+\n+    def serialize(self):\n+        return ser_vector(self.addrs)\n+\n+    def __repr__(self):\n+        return \"msg_addr(addrs=%s)\" % (repr(self.addrs))\n+\n+\n+class msg_alert(object):\n+    command = \"alert\"\n+\n+    def __init__(self):\n+        self.alert = CAlert()\n+\n+    def deserialize(self, f):\n+        self.alert = CAlert()\n+        self.alert.deserialize(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.alert.serialize()\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_alert(alert=%s)\" % (repr(self.alert), )\n+\n+\n+class msg_inv(object):\n+    command = \"inv\"\n+\n+    def __init__(self, inv=None):\n+        if inv is None:\n+            self.inv = []\n+        else:\n+            self.inv = inv\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_inv(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getdata(object):\n+    command = \"getdata\"\n+\n+    def __init__(self):\n+        self.inv = []\n+\n+    def deserialize(self, f):\n+        self.inv = deser_vector(f, CInv)\n+\n+    def serialize(self):\n+        return ser_vector(self.inv)\n+\n+    def __repr__(self):\n+        return \"msg_getdata(inv=%s)\" % (repr(self.inv))\n+\n+\n+class msg_getblocks(object):\n+    command = \"getblocks\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0L\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getblocks(locator=%s hashstop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+class msg_tx(object):\n+    command = \"tx\"\n+\n+    def __init__(self, tx=CTransaction()):\n+        self.tx = tx\n+\n+    def deserialize(self, f):\n+        self.tx.deserialize(f)\n+\n+    def serialize(self):\n+        return self.tx.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_tx(tx=%s)\" % (repr(self.tx))\n+\n+\n+class msg_block(object):\n+    command = \"block\"\n+\n+    def __init__(self, block=None):\n+        if block is None:\n+            self.block = CBlock()\n+        else:\n+            self.block = block\n+\n+    def deserialize(self, f):\n+        self.block.deserialize(f)\n+\n+    def serialize(self):\n+        return self.block.serialize()\n+\n+    def __repr__(self):\n+        return \"msg_block(block=%s)\" % (repr(self.block))\n+\n+\n+class msg_getaddr(object):\n+    command = \"getaddr\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_getaddr()\"\n+\n+\n+class msg_ping_prebip31(object):\n+    command = \"ping\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_ping() (pre-bip31)\"\n+\n+\n+class msg_ping(object):\n+    command = \"ping\"\n+\n+    def __init__(self, nonce=0L):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_ping(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_pong(object):\n+    command = \"pong\"\n+\n+    def __init__(self, nonce=0L):\n+        self.nonce = nonce\n+\n+    def deserialize(self, f):\n+        self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.nonce)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_pong(nonce=%08x)\" % self.nonce\n+\n+\n+class msg_mempool(object):\n+    command = \"mempool\"\n+\n+    def __init__(self):\n+        pass\n+\n+    def deserialize(self, f):\n+        pass\n+\n+    def serialize(self):\n+        return \"\"\n+\n+    def __repr__(self):\n+        return \"msg_mempool()\"\n+\n+\n+# getheaders message has\n+# number of entries\n+# vector of hashes\n+# hash_stop (hash of last desired block header, 0 to get as many as possible)\n+class msg_getheaders(object):\n+    command = \"getheaders\"\n+\n+    def __init__(self):\n+        self.locator = CBlockLocator()\n+        self.hashstop = 0L\n+\n+    def deserialize(self, f):\n+        self.locator = CBlockLocator()\n+        self.locator.deserialize(f)\n+        self.hashstop = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += self.locator.serialize()\n+        r += ser_uint256(self.hashstop)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getheaders(locator=%s, stop=%064x)\" \\\n+            % (repr(self.locator), self.hashstop)\n+\n+\n+# headers message has\n+# <count> <vector of block headers>\n+class msg_headers(object):\n+    command = \"headers\"\n+\n+    def __init__(self):\n+        self.headers = []\n+\n+    def deserialize(self, f):\n+        # comment in bitcoind indicates these should be deserialized as blocks\n+        blocks = deser_vector(f, CBlock)\n+        for x in blocks:\n+            self.headers.append(CBlockHeader(x))\n+\n+    def serialize(self):\n+        blocks = [CBlock(x) for x in self.headers]\n+        return ser_vector(blocks)\n+\n+    def __repr__(self):\n+        return \"msg_headers(headers=%s)\" % repr(self.headers)\n+\n+\n+class msg_reject(object):\n+    command = \"reject\"\n+\n+    def __init__(self):\n+        self.message = \"\"\n+        self.code = \"\"\n+        self.reason = \"\"\n+        self.data = 0L\n+\n+    def deserialize(self, f):\n+        self.message = deser_string(f)\n+        self.code = struct.unpack(\"<B\", f.read(1))[0]\n+        self.reason = deser_string(f)\n+        if (self.message == \"block\" or self.message == \"tx\"):\n+            self.data = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = ser_string(self.message)\n+        r += struct.pack(\"<B\", self.code)\n+        r += ser_string(self.reason)\n+        if (self.message == \"block\" or self.message == \"tx\"):\n+            r += ser_uint256(self.data)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_reject: %s %d %s [%064x]\" \\\n+            % (self.message, self.code, self.reason, self.data)\n+\n+\n+# This is what a callback should look like for NodeConn\n+# Reimplement the on_* functions to provide handling for events\n+class NodeConnCB(object):\n+    def __init__(self):\n+        # Acquire on all callbacks -- overkill for now since asyncore is\n+        # single-threaded, but may be useful for synchronizing access to\n+        # member variables in derived classes.\n+        self.cbLock = Lock()\n+        self.verack_received = False\n+\n+    # Derived classes should call this function once to set the message map\n+    # which associates the derived classes' functions to incoming messages\n+    def create_callback_map(self):\n+        self.cbmap = {\n+            \"version\": self.on_version,\n+            \"verack\": self.on_verack,\n+            \"addr\": self.on_addr,\n+            \"alert\": self.on_alert,\n+            \"inv\": self.on_inv,\n+            \"getdata\": self.on_getdata,\n+            \"getblocks\": self.on_getblocks,\n+            \"tx\": self.on_tx,\n+            \"block\": self.on_block,\n+            \"getaddr\": self.on_getaddr,\n+            \"ping\": self.on_ping,\n+            \"pong\": self.on_pong,\n+            \"headers\": self.on_headers,\n+            \"getheaders\": self.on_getheaders,\n+            \"reject\": self.on_reject,\n+            \"mempool\": self.on_mempool\n+        }\n+\n+    def deliver(self, conn, message):\n+        with self.cbLock:\n+            try:\n+                self.cbmap[message.command](conn, message)\n+            except:\n+                print \"ERROR delivering %s (%s)\" % (repr(message),\n+                                                    sys.exc_info()[0])\n+\n+    def on_version(self, conn, message):\n+        if message.nVersion >= 209:\n+            conn.send_message(msg_verack())\n+        conn.ver_send = min(MY_VERSION, message.nVersion)\n+        if message.nVersion < 209:\n+            conn.ver_recv = conn.ver_send\n+\n+    def on_verack(self, conn, message):\n+        conn.ver_recv = conn.ver_send\n+        self.verack_received = True\n+\n+    def on_inv(self, conn, message):\n+        want = msg_getdata()\n+        for i in message.inv:\n+            if i.type != 0:\n+                want.inv.append(i)\n+        if len(want.inv):\n+            conn.send_message(want)\n+\n+    def on_addr(self, conn, message): pass\n+    def on_alert(self, conn, message): pass\n+    def on_getdata(self, conn, message): pass\n+    def on_getblocks(self, conn, message): pass\n+    def on_tx(self, conn, message): pass\n+    def on_block(self, conn, message): pass\n+    def on_getaddr(self, conn, message): pass\n+    def on_headers(self, conn, message): pass\n+    def on_getheaders(self, conn, message): pass\n+    def on_ping(self, conn, message):\n+        if conn.ver_send > BIP0031_VERSION:\n+            conn.send_message(msg_pong(message.nonce))\n+    def on_reject(self, conn, message): pass\n+    def on_close(self, conn): pass\n+    def on_mempool(self, conn): pass\n+    def on_pong(self, conn, message): pass\n+\n+\n+# The actual NodeConn class\n+# This class provides an interface for a p2p connection to a specified node\n+class NodeConn(asyncore.dispatcher):\n+    messagemap = {\n+        \"version\": msg_version,\n+        \"verack\": msg_verack,\n+        \"addr\": msg_addr,\n+        \"alert\": msg_alert,\n+        \"inv\": msg_inv,\n+        \"getdata\": msg_getdata,\n+        \"getblocks\": msg_getblocks,\n+        \"tx\": msg_tx,\n+        \"block\": msg_block,\n+        \"getaddr\": msg_getaddr,\n+        \"ping\": msg_ping,\n+        \"pong\": msg_pong,\n+        \"headers\": msg_headers,\n+        \"getheaders\": msg_getheaders,\n+        \"reject\": msg_reject,\n+        \"mempool\": msg_mempool\n+    }\n+    MAGIC_BYTES = {\n+        \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+        \"testnet3\": \"\\x0b\\x11\\x09\\x07\",  # testnet3\n+        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+    }\n+\n+    def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\"):\n+        asyncore.dispatcher.__init__(self)\n+        self.log = logging.getLogger(\"NodeConn(%s:%d)\" % (dstaddr, dstport))\n+        self.dstaddr = dstaddr\n+        self.dstport = dstport\n+        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n+        self.sendbuf = \"\"\n+        self.recvbuf = \"\"\n+        self.ver_send = 209\n+        self.ver_recv = 209\n+        self.last_sent = 0\n+        self.state = \"connecting\"\n+        self.network = net\n+        self.cb = callback\n+        self.sendbufLock = Lock()  # for protecting the sendbuffer\n+        self.disconnect = False\n+\n+        # stuff version msg into sendbuf\n+        vt = msg_version()\n+        vt.addrTo.ip = self.dstaddr\n+        vt.addrTo.port = self.dstport\n+        vt.addrFrom.ip = \"0.0.0.0\"\n+        vt.addrFrom.port = 0\n+        self.send_message(vt, True)\n+        print 'MiniNode: Connecting to Bitcoin Node IP # ' + dstaddr + ':' \\\n+            + str(dstport)\n+\n+        try:\n+            self.connect((dstaddr, dstport))\n+        except:\n+            self.handle_close()\n+        self.rpc = rpc\n+\n+    def show_debug_msg(self, msg):\n+        self.log.debug(msg)\n+\n+    def handle_connect(self):\n+        self.show_debug_msg(\"MiniNode: Connected & Listening: \\n\")\n+        self.state = \"connected\"\n+\n+    def handle_close(self):\n+        self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n+                            % (self.dstaddr, self.dstport))\n+        self.state = \"closed\"\n+        self.recvbuf = \"\"\n+        self.sendbuf = \"\"\n+        try:\n+            self.close()\n+        except:\n+            pass\n+        self.cb.on_close(self)\n+\n+    def handle_read(self):\n+        try:\n+            t = self.recv(8192)\n+            if len(t) > 0:\n+                self.recvbuf += t\n+                self.got_data()\n+        except:\n+            pass\n+\n+    def readable(self):\n+        return True\n+\n+    def writable(self):\n+        if self.disconnect:\n+            self.handle_close()\n+            return False\n+        else:\n+            self.sendbufLock.acquire()\n+            length = len(self.sendbuf)\n+            self.sendbufLock.release()\n+            return (length > 0)\n+\n+    def handle_write(self):\n+        self.sendbufLock.acquire()\n+        try:\n+            sent = self.send(self.sendbuf)\n+        except:\n+            self.handle_close()\n+            return\n+        self.sendbuf = self.sendbuf[sent:]\n+        self.sendbufLock.release()\n+\n+    def got_data(self):\n+        while True:\n+            if len(self.recvbuf) < 4:\n+                return\n+            if self.recvbuf[:4] != self.MAGIC_BYTES[self.network]:\n+                raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n+            if self.ver_recv < 209:\n+                if len(self.recvbuf) < 4 + 12 + 4:\n+                    return\n+                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                checksum = None\n+                if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n+                    return\n+                msg = self.recvbuf[4+12+4:4+12+4+msglen]\n+                self.recvbuf = self.recvbuf[4+12+4+msglen:]\n+            else:\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4:\n+                    return\n+                command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n+                checksum = self.recvbuf[4+12+4:4+12+4+4]\n+                if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n+                    return\n+                msg = self.recvbuf[4+12+4+4:4+12+4+4+msglen]\n+                th = sha256(msg)\n+                h = sha256(th)\n+                if checksum != h[:4]:\n+                    raise ValueError(\"got bad checksum \" + repr(self.recvbuf))\n+                self.recvbuf = self.recvbuf[4+12+4+4+msglen:]\n+            if command in self.messagemap:\n+                f = cStringIO.StringIO(msg)\n+                t = self.messagemap[command]()\n+                t.deserialize(f)\n+                self.got_message(t)\n+            else:\n+                self.show_debug_msg(\"Unknown command: '\" + command + \"' \" +\n+                                    repr(msg))\n+\n+    def send_message(self, message, pushbuf=False):\n+        if self.state != \"connected\" and not pushbuf:\n+            return\n+        self.sendbufLock.acquire()\n+        self.show_debug_msg(\"Send %s\" % repr(message))\n+        command = message.command\n+        data = message.serialize()\n+        tmsg = self.MAGIC_BYTES[self.network]\n+        tmsg += command\n+        tmsg += \"\\x00\" * (12 - len(command))\n+        tmsg += struct.pack(\"<I\", len(data))\n+        if self.ver_send >= 209:\n+            th = sha256(data)\n+            h = sha256(th)\n+            tmsg += h[:4]\n+        tmsg += data\n+        self.sendbuf += tmsg\n+        self.last_sent = time.time()\n+        self.sendbufLock.release()\n+\n+    def got_message(self, message):\n+        if message.command == \"version\":\n+            if message.nVersion <= BIP0031_VERSION:\n+                self.messagemap['ping'] = msg_ping_prebip31\n+        if self.last_sent + 30 * 60 < time.time():\n+            self.send_message(self.messagemap['ping']())\n+        self.show_debug_msg(\"Recv %s\" % repr(message))\n+        self.cb.deliver(self, message)\n+\n+    def disconnect_node(self):\n+        self.disconnect = True\n+        self.send_message(self.messagemap['ping']())\n+\n+\n+class NetworkThread(Thread):\n+    def run(self):\n+        asyncore.loop(0.1, True)",
      "path": "qa/rpc-tests/mininode.py",
      "position": 1237,
      "original_position": 1237,
      "commit_id": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "original_commit_id": "2703412a39c95c811a40c3fff6929e4ce59c3c62",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After discussion this on IRC it turned out, that OSes without polling support (OSX) have problems with timeouts below 1 because they always use `select.select()`.\nShould be changed to `asyncore.loop(1, True)`\n",
      "created_at": "2015-04-30T14:25:21Z",
      "updated_at": "2015-04-30T14:25:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/5981#discussion_r29433660",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/29433660"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/5981"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1237,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}