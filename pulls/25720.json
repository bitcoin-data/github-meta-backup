{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720",
    "id": 1009840101,
    "node_id": "PR_kwDOABII5848MO_l",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/25720",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/25720.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/25720.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f6a916683d75ed5489666dbfbd711f000ad0707f",
    "number": 25720,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "p2p: Reduce bandwidth during initial headers sync when a block is found",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "On startup, if our headers chain is more than a day behind current time, we'll pick one peer to sync headers with until our best headers chain is caught up (at that point, we'll try to sync headers with all peers).\r\n\r\nHowever, if an INV for a block is received before our headers chain is caught up, we'll then start to sync headers from each peer announcing the block.  This can result in doing a big headers sync with many (if not all) of our peers simultaneously, which wastes bandwidth.\r\n\r\nThis PR would reduce that overhead by picking (at most) one new peer to try syncing headers with whenever a new block is announced, prior to our headers chain being caught up.\r\n\r\nPost-merge edit: See https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936707629 for more context about this change.",
    "labels": [
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/54",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/54/labels",
      "id": 7150037,
      "node_id": "MI_kwDOABII584AbRnV",
      "number": 54,
      "state": "closed",
      "title": "24.0",
      "description": "",
      "creator": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 159,
      "created_at": "2021-09-14T08:27:02Z",
      "updated_at": "2022-11-29T15:44:44Z",
      "closed_at": "2022-11-29T15:44:44Z"
    },
    "created_at": "2022-07-27T15:52:17Z",
    "updated_at": "2022-08-16T15:09:03Z",
    "closed_at": "2022-08-15T19:44:09Z",
    "mergeable_state": "unknown",
    "merged_at": "2022-08-15T19:44:09Z",
    "merge_commit_sha": "22d96d76ab02fc73e7fe0d810bacee4c982df085",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "requested_teams": [],
    "head": {
      "label": "sdaftuar:2022-07-reduce-headers-sync-bandwidth",
      "ref": "2022-07-reduce-headers-sync-bandwidth",
      "sha": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 28761781,
        "node_id": "MDEwOlJlcG9zaXRvcnkyODc2MTc4MQ==",
        "name": "bitcoin",
        "full_name": "sdaftuar/bitcoin",
        "owner": {
          "login": "sdaftuar",
          "id": 7463573,
          "node_id": "MDQ6VXNlcjc0NjM1NzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sdaftuar",
          "html_url": "https://github.com/sdaftuar",
          "followers_url": "https://api.github.com/users/sdaftuar/followers",
          "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
          "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
          "repos_url": "https://api.github.com/users/sdaftuar/repos",
          "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sdaftuar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/sdaftuar/bitcoin",
        "archive_url": "https://api.github.com/repos/sdaftuar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sdaftuar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sdaftuar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sdaftuar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sdaftuar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sdaftuar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sdaftuar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sdaftuar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/sdaftuar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/sdaftuar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/sdaftuar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/sdaftuar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sdaftuar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sdaftuar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sdaftuar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sdaftuar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sdaftuar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/sdaftuar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/sdaftuar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sdaftuar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sdaftuar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sdaftuar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:sdaftuar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/sdaftuar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/sdaftuar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/sdaftuar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/sdaftuar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/sdaftuar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/sdaftuar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sdaftuar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/sdaftuar/bitcoin/hooks",
        "svn_url": "https://github.com/sdaftuar/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 245665,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:41:53Z",
        "created_at": "2015-01-04T02:52:13Z",
        "updated_at": "2023-02-11T10:16:01Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "bf3f05f41d27a6be3730432aaa7e22e443f7cafa",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T05:35:10Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 139,
    "deletions": 6,
    "changed_files": 3,
    "commits": 2,
    "review_comments": 63,
    "comments": 6
  },
  "events": [
    {
      "event": "labeled",
      "id": 7074243343,
      "node_id": "LE_lADOABII585Oqg5MzwAAAAGlqGMP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7074243343",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T15:54:02Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7074244055,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGlqGXX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7074244055",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T15:54:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7076632114,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGlzNYy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7076632114",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-07-27T21:23:29Z"
    },
    {
      "event": "reviewed",
      "id": 1055615149,
      "node_id": "PRR_kwDOABII584-62it",
      "url": null,
      "actor": null,
      "commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1055615149",
      "submitted_at": "2022-07-29T14:00:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "reviewed",
      "id": 1058937454,
      "node_id": "PRR_kwDOABII584_Hhpu",
      "url": null,
      "actor": null,
      "commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left a few questions",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1058937454",
      "submitted_at": "2022-08-02T15:35:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7118813847,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGoUHqX",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7118813847",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-03T13:48:28Z"
    },
    {
      "event": "reviewed",
      "id": 1064295660,
      "node_id": "PRR_kwDOABII584_b9zs",
      "url": null,
      "actor": null,
      "commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1064295660",
      "submitted_at": "2022-08-06T11:13:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "reviewed",
      "id": 1064467269,
      "node_id": "PRR_kwDOABII584_cntF",
      "url": null,
      "actor": null,
      "commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "jonas-ott",
        "id": 32590137,
        "node_id": "MDQ6VXNlcjMyNTkwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/32590137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonas-ott",
        "html_url": "https://github.com/jonas-ott",
        "followers_url": "https://api.github.com/users/jonas-ott/followers",
        "following_url": "https://api.github.com/users/jonas-ott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonas-ott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonas-ott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonas-ott/subscriptions",
        "organizations_url": "https://api.github.com/users/jonas-ott/orgs",
        "repos_url": "https://api.github.com/users/jonas-ott/repos",
        "events_url": "https://api.github.com/users/jonas-ott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonas-ott/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1064467269",
      "submitted_at": "2022-08-07T20:51:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "commented",
      "id": 1211027683,
      "node_id": "IC_kwDOABII585ILtDj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1211027683",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-10T17:28:09Z",
      "updated_at": "2022-08-10T17:28:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Related: https://github.com/bitcoin/bitcoin/pull/8306",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1211027683",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "reviewed",
      "id": 1068736456,
      "node_id": "PRR_kwDOABII584_s5_I",
      "url": null,
      "actor": null,
      "commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Code review ACK.\r\n\r\nTested ACK (unit & functional tests).",
      "user": {
        "login": "pablomartin4btc",
        "id": 110166421,
        "node_id": "U_kgDOBpEBlQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/110166421?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pablomartin4btc",
        "html_url": "https://github.com/pablomartin4btc",
        "followers_url": "https://api.github.com/users/pablomartin4btc/followers",
        "following_url": "https://api.github.com/users/pablomartin4btc/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pablomartin4btc/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pablomartin4btc/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pablomartin4btc/subscriptions",
        "organizations_url": "https://api.github.com/users/pablomartin4btc/orgs",
        "repos_url": "https://api.github.com/users/pablomartin4btc/repos",
        "events_url": "https://api.github.com/users/pablomartin4btc/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pablomartin4btc/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1068736456",
      "submitted_at": "2022-08-10T18:23:10Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "reviewed",
      "id": 1068754958,
      "node_id": "PRR_kwDOABII584_s-gO",
      "url": null,
      "actor": null,
      "commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK",
      "user": {
        "login": "hernanmarino",
        "id": 87907936,
        "node_id": "MDQ6VXNlcjg3OTA3OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/87907936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hernanmarino",
        "html_url": "https://github.com/hernanmarino",
        "followers_url": "https://api.github.com/users/hernanmarino/followers",
        "following_url": "https://api.github.com/users/hernanmarino/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/hernanmarino/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/hernanmarino/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/hernanmarino/subscriptions",
        "organizations_url": "https://api.github.com/users/hernanmarino/orgs",
        "repos_url": "https://api.github.com/users/hernanmarino/repos",
        "events_url": "https://api.github.com/users/hernanmarino/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/hernanmarino/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1068754958",
      "submitted_at": "2022-08-10T18:37:17Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "reviewed",
      "id": 1070638379,
      "node_id": "PRR_kwDOABII584_0KUr",
      "url": null,
      "actor": null,
      "commit_id": "fdbbc6ab91519d0af986c3264bc38abf9bc9160e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1070638379",
      "submitted_at": "2022-08-12T06:17:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7179751706,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGr8lEa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7179751706",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T14:46:23Z"
    },
    {
      "event": "reviewed",
      "id": 1071483455,
      "node_id": "PRR_kwDOABII584_3Yo_",
      "url": null,
      "actor": null,
      "commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I tested this patch pretty carefully, it's working as intended. It's not a huge improvement (I know it's not expected to be), I started IBD on mainnet and there definitely are fewer redundant `getheaders`. Here's a summary of what I observed by enabling the \"p2p\" debug category:\r\n\r\nThe node begins by getting headers from a single peer (that's the same as without this PR). When the first block announcement arrives (via `inv`), which usually comes (redundantly) from all of our peers, the node begins requesting headers from only _one_ of those peers (instead of all peers that sent the same `inv`), which is the intended effect of this PR. A moment later, the `headers` reply from this peer triggers another `getheaders` request. This is also occurring with the original peer, so now there are two redundant \"threads\" (not OS threads, but threads in the sense that each `headers` reply launches another `getheaders` request to that peer).\r\n\r\nThis means that each header is received twice from here onward. If and when a second block announcement appears, a third `getheaders` \"thread\" begins, so now we're getting each header 3 times. But, again, this is much better than getting each header N times (if N is the number of our peers), which is what happens without this PR.\r\n\r\nAs others have said, this initial headers sync process can be further improved, but it's a tricky area so caution is advised! This is a step in the right direction and it seems safe to me. \r\n\r\nNote that this isn't a huge problem in practice because, depending on network speed, the node can often download headers all the way out to the current tip before even one new block arrives, since the full header sync typically takes only a few minutes. And if a new block does arrive during this time, it's not a big problem to be receiving these redundant headers; each is only just over 80 bytes in serialized form.\r\n\r\nI'm going to hold off on ack for now because there are a couple of changes I'd like to see in the test.",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1071483455",
      "submitted_at": "2022-08-12T20:22:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "reviewed",
      "id": 1071766406,
      "node_id": "PRR_kwDOABII584_4duG",
      "url": null,
      "actor": null,
      "commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#pullrequestreview-1071766406",
      "submitted_at": "2022-08-12T20:48:34Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDA1ZjdmMzE1OThiOGJiMDZhY2IxMmUxZTJhM2NjZjMyNGIwMzVlYTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05f7f31598b8bb06acb12e1e2a3ccf324b035ea8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/05f7f31598b8bb06acb12e1e2a3ccf324b035ea8",
      "tree": {
        "sha": "e3b39b5533b646ca4f29dfe8ff6be35b5a331df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3b39b5533b646ca4f29dfe8ff6be35b5a331df0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/567121747712612434223679d77557a7edf0fe56",
          "sha": "567121747712612434223679d77557a7edf0fe56",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/567121747712612434223679d77557a7edf0fe56"
        }
      ],
      "message": "Reduce bandwidth during initial headers sync when a block is found\n\nIf our headers chain is behind on startup, then if a block is found we'll try\nto catch up from all peers announcing the block, in addition to our initial\nheaders-sync peer. This commit changes behavior so that in this situation,\nwe'll choose at most one peer announcing a block to additionally sync headers\nfrom.",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-08-12T21:05:04Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-07-25T17:53:35Z"
      },
      "sha": "05f7f31598b8bb06acb12e1e2a3ccf324b035ea8"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7181946038,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGsE8y2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7181946038",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T21:05:16Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGY2YTkxNjY4M2Q3NWVkNTQ4OTY2NmRiZmJkNzExZjAwMGFkMDcwN2Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6a916683d75ed5489666dbfbd711f000ad0707f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f6a916683d75ed5489666dbfbd711f000ad0707f",
      "tree": {
        "sha": "f48c2bcb369b19e113fd78d93f0a3cc27546a18b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f48c2bcb369b19e113fd78d93f0a3cc27546a18b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05f7f31598b8bb06acb12e1e2a3ccf324b035ea8",
          "sha": "05f7f31598b8bb06acb12e1e2a3ccf324b035ea8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/05f7f31598b8bb06acb12e1e2a3ccf324b035ea8"
        }
      ],
      "message": "Add functional test for block announcements during initial headers sync",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-08-12T21:13:00Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2022-07-27T15:47:13Z"
      },
      "sha": "f6a916683d75ed5489666dbfbd711f000ad0707f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 7181975764,
      "node_id": "HRFPE_lADOABII585Oqg5MzwAAAAGsFEDU",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7181975764",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-12T21:13:16Z"
    },
    {
      "event": "commented",
      "id": 1213619530,
      "node_id": "IC_kwDOABII585IVl1K",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1213619530",
      "actor": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-13T00:59:45Z",
      "updated_at": "2022-08-13T00:59:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK f6a916683d75ed5489666dbfbd711f000ad0707f",
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1213619530",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "commented",
      "id": 1214555218,
      "node_id": "IC_kwDOABII585IZKRS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214555218",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T02:46:06Z",
      "updated_at": "2022-08-15T02:46:06Z",
      "author_association": "MEMBER",
      "body": "ACK f6a916683d75ed5489666dbfbd711f000ad0707f",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1214555218",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "commented",
      "id": 1214656320,
      "node_id": "IC_kwDOABII585IZi9A",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214656320",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T06:15:29Z",
      "updated_at": "2022-08-15T06:20:45Z",
      "author_association": "MEMBER",
      "body": "ACK f6a916683d75ed5489666dbfbd711f000ad0707f\r\nI reviewed the code and tested this on testnet during a period where blocks were mined multiple times in a minute - each time that happened, one more peer was added to the headers sync.\r\n\r\nI think that this would be good to get in, especially with #25717 doubling the amount of headers download data.\r\nWhile testing  #25717 on a slow connection on testnet, I would sometimes run into timeouts - with 2,300,000 headers (~180MB) being downloaded twice (two phases) from 10 outbound peers, it might be necessary to be able to download up to ~3.6GB within 20 minutes - this can be a problem on slower connections.\r\n\r\nWhile I think that this PR is a good improvement of the existing logic, I would probably prefer longer-term a deterministic mechanism instead of one connected to a random process - sometimes multiple blocks are found immediately after the start of headers sync, sometimes none for > 30 minutes, and I don't really see why this randomness should be tied to the number of peers for our headers download, instead of doing something like simply adding another additional peer every 10 minutes.\r\n",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1214656320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "review_requested",
      "id": 7187301598,
      "node_id": "RRE_lADOABII585Oqg5MzwAAAAGsZYTe",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7187301598",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T09:22:14Z",
      "requested_reviewer": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "review_requester": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      }
    },
    {
      "event": "commented",
      "id": 1215300127,
      "node_id": "IC_kwDOABII585IcAIf",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215300127",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T16:26:46Z",
      "updated_at": "2022-08-15T16:26:46Z",
      "author_association": "MEMBER",
      "body": "Code review ACK f6a916683d75ed5489666dbfbd711f000ad0707f\r\n\r\nI think I agree with Martin, that in the long-term a deterministic mechanism would be preferable but for now this is a good improvement (especially w.r.t. #25717).",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1215300127",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "milestoned",
      "id": 7189932186,
      "node_id": "MIE_lADOABII585Oqg5MzwAAAAGsjaia",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7189932186",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T16:30:13Z",
      "milestone": {
        "title": "24.0"
      }
    },
    {
      "event": "commented",
      "id": 1215650279,
      "node_id": "IC_kwDOABII585IdVnn",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215650279",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T19:25:33Z",
      "updated_at": "2022-08-15T19:25:33Z",
      "author_association": "MEMBER",
      "body": "ACK f6a916683d75ed5489666dbfbd711f000ad0707f",
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#issuecomment-1215650279",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/25720"
    },
    {
      "event": "merged",
      "id": 7191089605,
      "node_id": "ME_lADOABII585Oqg5MzwAAAAGsn1HF",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7191089605",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "22d96d76ab02fc73e7fe0d810bacee4c982df085",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d96d76ab02fc73e7fe0d810bacee4c982df085",
      "created_at": "2022-08-15T19:44:09Z"
    },
    {
      "event": "closed",
      "id": 7191089634,
      "node_id": "CE_lADOABII585Oqg5MzwAAAAGsn1Hi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7191089634",
      "actor": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-15T19:44:09Z"
    },
    {
      "event": "referenced",
      "id": 7200750474,
      "node_id": "REFE_lADOABII585Oqg5MzwAAAAGtMruK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7200750474",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ad7bc814ae89c8beb01307530ebbf12eaddeae70",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/ad7bc814ae89c8beb01307530ebbf12eaddeae70",
      "created_at": "2022-08-16T21:39:06Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/933304616",
      "pull_request_review_id": 1055615149,
      "id": 933304616,
      "node_id": "PRRC_kwDOABII5843oRko",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_message(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        time.sleep(5)\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        time.sleep(5)\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p\n+                    p.last_message.pop(\"getheaders\", None)\n+                    p.send_message(msg_headers()) # Send empty response\n+\n+        assert count == 1",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 81,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": null,
      "user": {
        "login": "brunoerg",
        "id": 19480819,
        "node_id": "MDQ6VXNlcjE5NDgwODE5",
        "avatar_url": "https://avatars.githubusercontent.com/u/19480819?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunoerg",
        "html_url": "https://github.com/brunoerg",
        "followers_url": "https://api.github.com/users/brunoerg/followers",
        "following_url": "https://api.github.com/users/brunoerg/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/brunoerg/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/brunoerg/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/brunoerg/subscriptions",
        "organizations_url": "https://api.github.com/users/brunoerg/orgs",
        "repos_url": "https://api.github.com/users/brunoerg/repos",
        "events_url": "https://api.github.com/users/brunoerg/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/brunoerg/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        assert_equal(count, 1)\r\n```\r\n\r\nBecause of #23119",
      "created_at": "2022-07-29T14:00:25Z",
      "updated_at": "2022-07-29T14:00:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r933304616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/933304616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935709971",
      "pull_request_review_id": 1058937454,
      "id": 935709971,
      "node_id": "PRRC_kwDOABII5843xc0T",
      "diff_hunk": "@@ -681,6 +684,9 @@ class PeerManagerImpl final : public PeerManager\n     /** Number of nodes with fSyncStarted. */\n     int nSyncStarted GUARDED_BY(cs_main) = 0;\n \n+    /** Hash of the last block we received via INV */\n+    uint256 m_last_block_inv_triggering_headers_sync GUARDED_BY(cs_main) {};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Looks like, either:\r\n\r\n* GUARDED_BY is not needed, as this is only accessed by a single thread (and if another thread is added in the future, it is unclear whether this should use cs_main or a different mutex)\r\n* If it is needed, it might be best to use a mutex different from the validation mutex cs_main to avoid further bundling net_processing with chainstatemanager logic and fields.",
      "created_at": "2022-08-02T15:03:22Z",
      "updated_at": "2022-08-02T15:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935709971",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935709971"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935722925",
      "pull_request_review_id": 1058937454,
      "id": 935722925,
      "node_id": "PRRC_kwDOABII5843xf-t",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 34,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems a corner case that blocks are announced to us via inv, no? So I am wondering why such a new block is a good signal to add the peer as a initial headers sync peer, as opposed to, let's say, a random timer.",
      "created_at": "2022-08-02T15:14:56Z",
      "updated_at": "2022-08-02T15:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935722925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935722925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3281,
      "original_line": 3281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935725314",
      "pull_request_review_id": 1058937454,
      "id": 935725314,
      "node_id": "PRRC_kwDOABII5843xgkC",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).",
      "path": "src/net_processing.cpp",
      "position": 49,
      "original_position": 37,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we assume that the initial headers sync logic is robust, why add the additional complexity here? Wouldn't it be better to just skip the getheaders message? Or if the logic isn't assumed to be robust, lower the timeout or add a new peer on a random timeout?",
      "created_at": "2022-08-02T15:17:01Z",
      "updated_at": "2022-08-02T15:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935725314",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935725314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3284,
      "original_line": 3284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935725923",
      "pull_request_review_id": 1058937454,
      "id": 935725923,
      "node_id": "PRRC_kwDOABII5843xgtj",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).\n+            CNodeState *state = State(pfrom.GetId());\n+            assert(state != nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            CNodeState& state{*Assert(State(pfrom.GetId()));\r\n```\r\n\r\nnit: Can be written in one line",
      "created_at": "2022-08-02T15:17:34Z",
      "updated_at": "2022-08-02T15:35:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935725923",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935725923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": 3284,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935756421",
      "pull_request_review_id": 1059005316,
      "id": 935756421,
      "node_id": "PRRC_kwDOABII5843xoKF",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 34,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935722925,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While syncing headers, I found this to actually be the typical case. I think it's because we only use announcement via headers if we know that the peer has the previous header (which is not the case if it's a new peer currently syncing headers) and otherwise revert to INV-mode. [(code)](https://github.com/bitcoin/bitcoin/blob/0043ec4e1310e860150e5789064789377e5a6273/src/net_processing.cpp#L4974-L4978)",
      "created_at": "2022-08-02T15:46:14Z",
      "updated_at": "2022-08-02T15:49:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935756421",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935756421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3281,
      "original_line": 3281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935793639",
      "pull_request_review_id": 1059058573,
      "id": 935793639,
      "node_id": "PRRC_kwDOABII5843xxPn",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 34,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935722925,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In that case, could make sense to correct the doc, which says \"If a node fell back to sending blocks by inv,\r\n                    // it's probably for a re-org.\"",
      "created_at": "2022-08-02T16:23:49Z",
      "updated_at": "2022-08-02T16:23:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r935793639",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/935793639"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3281,
      "original_line": 3281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936665467",
      "pull_request_review_id": 1060301657,
      "id": 936665467,
      "node_id": "PRRC_kwDOABII58431GF7",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 34,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935722925,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess words like \"probably\" are confusing in comments, as there is context that is missing.  I'll update both comments.",
      "created_at": "2022-08-03T13:29:57Z",
      "updated_at": "2022-08-03T13:48:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936665467",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936665467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3281,
      "original_line": 3281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936687632",
      "pull_request_review_id": 1060301657,
      "id": 936687632,
      "node_id": "PRRC_kwDOABII58431LgQ",
      "diff_hunk": "@@ -0,0 +1,100 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_message(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        time.sleep(5)\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        time.sleep(5)\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p\n+                    p.last_message.pop(\"getheaders\", None)\n+                    p.send_message(msg_headers()) # Send empty response\n+\n+        assert count == 1",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 81,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 933304616,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-03T13:48:33Z",
      "updated_at": "2022-08-03T13:48:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936687632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936687632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936687806",
      "pull_request_review_id": 1060340218,
      "id": 936687806,
      "node_id": "PRRC_kwDOABII58431Li-",
      "diff_hunk": "@@ -681,6 +684,9 @@ class PeerManagerImpl final : public PeerManager\n     /** Number of nodes with fSyncStarted. */\n     int nSyncStarted GUARDED_BY(cs_main) = 0;\n \n+    /** Hash of the last block we received via INV */\n+    uint256 m_last_block_inv_triggering_headers_sync GUARDED_BY(cs_main) {};",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935709971,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed.",
      "created_at": "2022-08-03T13:48:41Z",
      "updated_at": "2022-08-03T13:48:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936687806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936687806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 688,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936688283",
      "pull_request_review_id": 1060340906,
      "id": 936688283,
      "node_id": "PRRC_kwDOABII58431Lqb",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per",
      "path": "src/net_processing.cpp",
      "position": 46,
      "original_position": 34,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935722925,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Improved the comments and removed the \"probably for a re-org\" language.",
      "created_at": "2022-08-03T13:49:05Z",
      "updated_at": "2022-08-03T13:49:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936688283",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936688283"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3281,
      "original_line": 3281,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936707629",
      "pull_request_review_id": 1060369090,
      "id": 936707629,
      "node_id": "PRRC_kwDOABII58431QYt",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).",
      "path": "src/net_processing.cpp",
      "position": 49,
      "original_position": 37,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935725314,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure I completely understand what you're asking, but the topic is more complicated than just an assumption around whether the initial headers sync logic is robust:\r\n\r\n- Ideally, we would only download the full headers chain from a single peer when we are starting up, because it saves bandwidth to do so.\r\n- It's possible that the peer we pick for initial headers sync could be (a) slow, (b) on a chain that is not the main chain, (c) adversarial, or some other terrible combination of those factors.  So we cannot just have our logic rely on the initial peer to serve us the honest chain in a reasonable amount of time.\r\n- We currently have two behaviors that help protect us from choosing a bad initial peer.  The main protection we have is that when a block INV is received, we send a getheaders to all peers that announce the block, resulting in us getting the main chain with high probability.  However, this is bandwidth wasting if we have many peers that serve us an INV at the same time, which is probably the common case when we're in a scenario that our initial peer is slow.\r\n- The second protection we have is that after about 20 minutes, we'll evict our initial headers-sync peer if our tip's timestamp isn't within a day of the current time.  This could kick in if we have a bad initial peer and no blocks are found for a while.\r\n\r\nI think we could do a variety of things to improve the current situation on master; I think that adding (say) one additional headers sync peer on some kind of timer (maybe every 5 or 10 minutes) could make sense. I think that choosing a random peer among the set of peers announcing a block is probably better peer selection than choosing a random peer (or random outbound peer) on a timer, just because if a peer sends an INV there's more reason to believe that they are responsive and going to be helpful in getting us the chain, but probably some combination of both would be even better. \r\n\r\nHowever, the complexity I ran into when thinking about other strategies for initial sync has to do with the eviction logic. Right now, I think it's mostly good that we evict our (single) initial headers-sync peer if we can't get a chain tip that is recent within 20 minutes. However, triggering that logic on all our peers at the same time seems over the top to me, because there are edge-case scenarios (such as: no blocks have been found on the network for a day, or the honest chain is some kind of billion-block timewarp chain that takes more than 20 minutes to download) where I think such logic could be badly behaved for the network, because we could end up with no peers or we could fall out of consensus.\r\n\r\nI think what I'm proposing in this patch is a narrow change that exactly addresses the bandwidth problem, and maximizes the chance we find a good peer quickly, without making our behavior in those edge-case scenarios any worse.  Nevertheless, a bigger overhaul of this logic that carefully considers these things could certainly be an improvement and make this whole thing easier to think about.  ",
      "created_at": "2022-08-03T14:04:07Z",
      "updated_at": "2022-08-03T14:05:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936707629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936707629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3284,
      "original_line": 3284,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936707819",
      "pull_request_review_id": 1060369343,
      "id": 936707819,
      "node_id": "PRRC_kwDOABII58431Qbr",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).\n+            CNodeState *state = State(pfrom.GetId());\n+            assert(state != nullptr);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 39,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935725923,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-03T14:04:16Z",
      "updated_at": "2022-08-03T14:04:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r936707819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/936707819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": 3284,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 3285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939514647",
      "pull_request_review_id": 1064295660,
      "id": 939514647,
      "node_id": "PRRC_kwDOABII5843_9sX",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 43,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        peer1.wait_for_getheaders()\r\n```\r\nShould work for all the other locations below as well.",
      "created_at": "2022-08-06T10:46:31Z",
      "updated_at": "2022-08-06T11:13:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r939514647",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939514647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939516204",
      "pull_request_review_id": 1064295660,
      "id": 939516204,
      "node_id": "PRRC_kwDOABII5843_-Es",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        time.sleep(5)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 55,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you can just remove this timeout?\r\n\r\n`PeerManagerImpl::SendMessages` is called twice (once after `verack` is received in the initial handshake and once after calling `sync_with_ping` on the next line), so we can be sure that `getheaders` hasn't been sent here because it would have been sent after the `verack` but before the `pong`.\r\n",
      "created_at": "2022-08-06T11:04:23Z",
      "updated_at": "2022-08-06T11:13:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r939516204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939516204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939516794",
      "pull_request_review_id": 1064295660,
      "id": 939516794,
      "node_id": "PRRC_kwDOABII5843_-N6",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 40,
      "original_position": 40,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": null,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't need to happen in this PR but in the future this test could also cover our preference for outbound peers for the initial headers sync.",
      "created_at": "2022-08-06T11:11:10Z",
      "updated_at": "2022-08-06T11:13:07Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r939516794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939516794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939720760",
      "pull_request_review_id": 1064467269,
      "id": 939720760,
      "node_id": "PRRC_kwDOABII5844AwA4",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 35,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": null,
      "user": {
        "login": "jonas-ott",
        "id": 32590137,
        "node_id": "MDQ6VXNlcjMyNTkwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/32590137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonas-ott",
        "html_url": "https://github.com/jonas-ott",
        "followers_url": "https://api.github.com/users/jonas-ott/followers",
        "following_url": "https://api.github.com/users/jonas-ott/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonas-ott/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonas-ott/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonas-ott/subscriptions",
        "organizations_url": "https://api.github.com/users/jonas-ott/orgs",
        "repos_url": "https://api.github.com/users/jonas-ott/repos",
        "events_url": "https://api.github.com/users/jonas-ott/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonas-ott/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doesn't really matter but: `1<<256 - 1 == 1 << (256 - 1)`\r\n```suggestion\r\n        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1 << 256) - 1))])\r\n```",
      "created_at": "2022-08-07T20:51:09Z",
      "updated_at": "2022-08-07T20:51:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r939720760",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/939720760"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944145250",
      "pull_request_review_id": 1070638379,
      "id": 944145250,
      "node_id": "PRRC_kwDOABII5844RoNi",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).\n+            CNodeState& state{*Assert(State(pfrom.GetId()))};\n+            if (state.fSyncStarted || (!peer->m_inv_triggered_getheaders_before_sync && *best_block != m_last_block_inv_triggering_headers_sync)) {",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "fdbbc6ab91519d0af986c3264bc38abf9bc9160e",
      "in_reply_to_id": null,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If there are two blocks found at the same time/height, this could still trigger a getheaders to most peers, no? (Someone sends block A, then someone else sends block B, then someone else sends A, etc) Might it be better to set `m_last_extra_headers_sync = SteadyClock::now();` and check that it's been at least a minute before adding an extra one?",
      "created_at": "2022-08-12T06:17:08Z",
      "updated_at": "2022-08-12T06:17:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944145250",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944145250"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3286,
      "original_line": 3286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944537497",
      "pull_request_review_id": 1071201493,
      "id": 944537497,
      "node_id": "PRRC_kwDOABII5844TH-Z",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).\n+            CNodeState& state{*Assert(State(pfrom.GetId()))};\n+            if (state.fSyncStarted || (!peer->m_inv_triggered_getheaders_before_sync && *best_block != m_last_block_inv_triggering_headers_sync)) {",
      "path": "src/net_processing.cpp",
      "position": 51,
      "original_position": 51,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "fdbbc6ab91519d0af986c3264bc38abf9bc9160e",
      "in_reply_to_id": 944145250,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That's true, but I think your suggestion is less robust overall than what I have proposed here: sending an INV to a node is free (there is no proof-of-work attached to a block hash), so an adversary could take advantage of your proposed strategy by continually connecting, sending an INV, and disconnecting, to prevent a node from trying to sync with any of its honest peers that are announcing main-chain blocks.\r\n\r\nOn the other hand, I just checked one of my long-running, well-connected nodes, and it's seen about 10 stale blocks in the last 50000.  So that seems like pretty good odds that a node starting up is unlikely to run into this?",
      "created_at": "2022-08-12T14:42:55Z",
      "updated_at": "2022-08-12T14:42:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944537497",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944537497"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3286,
      "original_line": 3286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944540982",
      "pull_request_review_id": 1071206362,
      "id": 944540982,
      "node_id": "PRRC_kwDOABII5844TI02",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 43,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": 939514647,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Fixed.",
      "created_at": "2022-08-12T14:46:26Z",
      "updated_at": "2022-08-12T14:46:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944540982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944540982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944541468",
      "pull_request_review_id": 1071207110,
      "id": 944541468,
      "node_id": "PRRC_kwDOABII5844TI8c",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_until(lambda: \"getheaders\" in peer1.last_message, timeout=30)\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        time.sleep(5)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 55,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": 939516204,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good, done.",
      "created_at": "2022-08-12T14:47:00Z",
      "updated_at": "2022-08-12T14:47:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944541468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944541468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944541830",
      "pull_request_review_id": 1071207541,
      "id": 944541830,
      "node_id": "PRRC_kwDOABII5844TJCG",
      "diff_hunk": "@@ -0,0 +1,102 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, 1<<256 - 1))])",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 35,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "17f2822c0da197ce7b96767da94da1cb8af3002b",
      "in_reply_to_id": 939720760,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks! Fixed.",
      "created_at": "2022-08-12T14:47:20Z",
      "updated_at": "2022-08-12T14:47:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944541830",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944541830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944697101",
      "pull_request_review_id": 1071483455,
      "id": 944697101,
      "node_id": "PRRC_kwDOABII5844Tu8N",
      "diff_hunk": "@@ -369,6 +369,9 @@ struct Peer {\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n+    /** Whether we've sent a peer a getheaders in response to an inv prior to initial-headers-sync completing */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    /** Whether we've sent this peer a getheaders in response to an inv prior to initial-headers-sync completing */\r\n```",
      "created_at": "2022-08-12T18:08:45Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944697101",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944697101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944702783",
      "pull_request_review_id": 1071483455,
      "id": 944702783,
      "node_id": "PRRC_kwDOABII5844TwU_",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // reliability vs bandwidth tradeoff, where we are only trying to do\r\n```",
      "created_at": "2022-08-12T18:17:23Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944702783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944702783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3277,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944703369",
      "pull_request_review_id": 1071483455,
      "id": 944703369,
      "node_id": "PRRC_kwDOABII5844TweJ",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n            // disconnect the peer and then choose another). In the meantime,\r\n```",
      "created_at": "2022-08-12T18:18:17Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944703369",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944703369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944727838",
      "pull_request_review_id": 1071483455,
      "id": 944727838,
      "node_id": "PRRC_kwDOABII5844T2ce",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 8,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nis close to caught up), and that each block announcement results in only one\r\n```",
      "created_at": "2022-08-12T18:35:55Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944727838",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944727838"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944762330",
      "pull_request_review_id": 1071483455,
      "id": 944762330,
      "node_id": "PRRC_kwDOABII5844T-3a",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 36,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, this would be clearer since there's no reason to build up a list from the return values (there aren't actually any return values)\r\n```suggestion\r\n        for p in peers: p.send_and_ping(new_block_announcement)\r\n```",
      "created_at": "2022-08-12T19:02:35Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944762330",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944762330"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944765440",
      "pull_request_review_id": 1071483455,
      "id": 944765440,
      "node_id": "PRRC_kwDOABII5844T_oA",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 35,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit\r\n```suggestion\r\n        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randrange(1<<256))])\r\n```",
      "created_at": "2022-08-12T19:08:00Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944765440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944765440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944767452",
      "pull_request_review_id": 1071483455,
      "id": 944767452,
      "node_id": "PRRC_kwDOABII5844UAHc",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 45,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        # An empty reply causes the reply handler to not initiate another getheaders\r\n        peer1.send_message(msg_headers())\r\n```",
      "created_at": "2022-08-12T19:11:12Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944767452",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944767452"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944767932",
      "pull_request_review_id": 1071483455,
      "id": 944767932,
      "node_id": "PRRC_kwDOABII5844UAO8",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 68,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        peer1.send_message(msg_headers()) # Send empty response, no follow-on getheaders\r\n```",
      "created_at": "2022-08-12T19:12:04Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944767932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944767932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944770457",
      "pull_request_review_id": 1071483455,
      "id": 944770457,
      "node_id": "PRRC_kwDOABII5844UA2Z",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 38,
      "original_position": 38,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, may make the test slightly more readable (and doesn't give the casual reader the impression that there may be more than one node running).\r\n```suggestion\r\n    def run_test(self):\r\n    node = self.nodes[0]\r\n```",
      "created_at": "2022-08-12T19:16:24Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944770457",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944770457"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944772525",
      "pull_request_review_id": 1071483455,
      "id": 944772525,
      "node_id": "PRRC_kwDOABII5844UBWt",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 55,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        for p in all_peers: p.sync_with_ping()\r\n```",
      "created_at": "2022-08-12T19:20:06Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944772525",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944772525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944778237",
      "pull_request_review_id": 1071483455,
      "id": 944778237,
      "node_id": "PRRC_kwDOABII5844UCv9",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 78,
      "original_position": 74,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        for p in [peer2, peer3]:\r\n            p.sync_with_ping()\r\n```",
      "created_at": "2022-08-12T19:30:16Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944778237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944778237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944782014",
      "pull_request_review_id": 1071483455,
      "id": 944782014,
      "node_id": "PRRC_kwDOABII5844UDq-",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 78,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n                    peer_receiving_getheaders = p\r\n```",
      "created_at": "2022-08-12T19:36:15Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944782014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944782014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944783783",
      "pull_request_review_id": 1071483455,
      "id": 944783783,
      "node_id": "PRRC_kwDOABII5844UEGn",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p\n+                    p.last_message.pop(\"getheaders\", None)\n+                    p.send_message(msg_headers()) # Send empty response\n+\n+        assert_equal(count, 1)\n+\n+        self.log.info(\"Announce another new block, from all peers\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+\n+        self.log.info(\"Check that the remaining peer received a getheaders as well\")\n+        expected_peer = peer2\n+        if peer2 == peer_receiving_headers:\n+            expected_peer = peer3\n+\n+        expected_peer.wait_for_getheaders()",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 99,
      "original_position": 95,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        expected_peer.wait_for_getheaders()\r\n        peer_receiving_headers.sync_with_ping()\r\n        with p2p_lock:\r\n            assert \"getheaders\" not in peer_receiving_headers.last_message\r\n```",
      "created_at": "2022-08-12T19:38:38Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944783783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944783783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944789336",
      "pull_request_review_id": 1071483455,
      "id": 944789336,
      "node_id": "PRRC_kwDOABII5844UFdY",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 69,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "lock needed?\r\n```suggestion\r\n        with p2p_lock:\r\n            peer1.last_message.pop(\"getheaders\", None)\r\n```",
      "created_at": "2022-08-12T19:45:49Z",
      "updated_at": "2022-08-12T20:22:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944789336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944789336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944844643",
      "pull_request_review_id": 1071766406,
      "id": 944844643,
      "node_id": "PRRC_kwDOABII5844US9j",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 26,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "remove this line to make the linter happy",
      "created_at": "2022-08-12T20:48:34Z",
      "updated_at": "2022-08-12T20:48:34Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944844643",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944844643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944846209",
      "pull_request_review_id": 1071768019,
      "id": 944846209,
      "node_id": "PRRC_kwDOABII5844UTWB",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 78,
      "original_position": 74,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944778237,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if I'm missing something; I believe this `sync_with_ping()` is unnecessary because we use `send_and_ping()` in `announce_random_block()`, does that sound right?",
      "created_at": "2022-08-12T20:50:48Z",
      "updated_at": "2022-08-12T20:50:49Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944846209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944846209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944850656",
      "pull_request_review_id": 1071772229,
      "id": 944850656,
      "node_id": "PRRC_kwDOABII5844UUbg",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p\n+                    p.last_message.pop(\"getheaders\", None)\n+                    p.send_message(msg_headers()) # Send empty response\n+\n+        assert_equal(count, 1)\n+\n+        self.log.info(\"Announce another new block, from all peers\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+\n+        self.log.info(\"Check that the remaining peer received a getheaders as well\")\n+        expected_peer = peer2\n+        if peer2 == peer_receiving_headers:\n+            expected_peer = peer3\n+\n+        expected_peer.wait_for_getheaders()",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 99,
      "original_position": 95,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944783783,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So I intentionally did not include this test (that a peer that we've started sync with doesn't receive a subsequent getheaders in response to an INV) because I felt like that was overspecifying what I think of as reasonable behavior.  I think the most important property is that we add a new peer with each new block, but whether we continue trying to sync with existing peers is (in my view) up for debate.\r\n\r\nFor instance, if the test were rewritten a bit so that the peer receiving the initial getheaders in response to an INV had a big long headers chain to serve the node, then you'd expect there to be a getheaders in flight as headers sync proceeds.  Granted that is not the situation in this test right now, but I feel like it's helpful for future test maintenance to not overspecify behavior if it doesn't really matter for what we're trying to achieve.",
      "created_at": "2022-08-12T20:56:57Z",
      "updated_at": "2022-08-12T20:56:57Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944850656",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944850656"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857336",
      "pull_request_review_id": 1071778805,
      "id": 944857336,
      "node_id": "PRRC_kwDOABII5844UWD4",
      "diff_hunk": "@@ -369,6 +369,9 @@ struct Peer {\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n+    /** Whether we've sent a peer a getheaders in response to an inv prior to initial-headers-sync completing */",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944697101,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-12T21:06:47Z",
      "updated_at": "2022-08-12T21:06:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944857336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 372,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857486",
      "pull_request_review_id": 1071778954,
      "id": 944857486,
      "node_id": "PRRC_kwDOABII5844UWGO",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 42,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944702783,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed",
      "created_at": "2022-08-12T21:07:00Z",
      "updated_at": "2022-08-12T21:07:00Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944857486",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3277,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857736",
      "pull_request_review_id": 1071779196,
      "id": 944857736,
      "node_id": "PRRC_kwDOABII5844UWKI",
      "diff_hunk": "@@ -3265,10 +3272,30 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 45,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944703369,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, fixed.",
      "created_at": "2022-08-12T21:07:22Z",
      "updated_at": "2022-08-12T21:07:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944857736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944857736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858177",
      "pull_request_review_id": 1071779607,
      "id": 944858177,
      "node_id": "PRRC_kwDOABII5844UWRB",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 8,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944727838,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done, thanks.",
      "created_at": "2022-08-12T21:08:01Z",
      "updated_at": "2022-08-12T21:08:01Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944858177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858389",
      "pull_request_review_id": 1071779799,
      "id": 944858389,
      "node_id": "PRRC_kwDOABII5844UWUV",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 35,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944765440,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-12T21:08:17Z",
      "updated_at": "2022-08-12T21:08:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944858389",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858389"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858482",
      "pull_request_review_id": 1071779887,
      "id": 944858482,
      "node_id": "PRRC_kwDOABII5844UWVy",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 36,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944762330,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-12T21:08:26Z",
      "updated_at": "2022-08-12T21:08:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944858482",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858482"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858934",
      "pull_request_review_id": 1071780276,
      "id": 944858934,
      "node_id": "PRRC_kwDOABII5844UWc2",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 38,
      "original_position": 38,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944770457,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Leaving this as-is; I think the `self.num_nodes = 1` in `set_test_params` makes it clear that only one node is involved.",
      "created_at": "2022-08-12T21:09:07Z",
      "updated_at": "2022-08-12T21:09:08Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944858934",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944858934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859042",
      "pull_request_review_id": 1071780364,
      "id": 944859042,
      "node_id": "PRRC_kwDOABII5844UWei",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 45,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944767452,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I improved this comment in the latest commit.",
      "created_at": "2022-08-12T21:09:17Z",
      "updated_at": "2022-08-12T21:09:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944859042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859093",
      "pull_request_review_id": 1071780424,
      "id": 944859093,
      "node_id": "PRRC_kwDOABII5844UWfV",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 55,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944772525,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.",
      "created_at": "2022-08-12T21:09:22Z",
      "updated_at": "2022-08-12T21:09:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944859093",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859093"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859268",
      "pull_request_review_id": 1071780597,
      "id": 944859268,
      "node_id": "PRRC_kwDOABII5844UWiE",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 69,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944789336,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, thanks!  Fixed.",
      "created_at": "2022-08-12T21:09:38Z",
      "updated_at": "2022-08-12T21:09:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944859268",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859268"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 69,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859352",
      "pull_request_review_id": 1071780685,
      "id": 944859352,
      "node_id": "PRRC_kwDOABII5844UWjY",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:\n+            with p2p_lock:\n+                if \"getheaders\" in p.last_message:\n+                    count += 1\n+                    peer_receiving_headers = p",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 78,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944782014,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2022-08-12T21:09:46Z",
      "updated_at": "2022-08-12T21:09:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944859352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859614",
      "pull_request_review_id": 1071780945,
      "id": 944859614,
      "node_id": "PRRC_kwDOABII5844UWne",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 26,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944844643,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed.",
      "created_at": "2022-08-12T21:10:10Z",
      "updated_at": "2022-08-12T21:10:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944859614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944859614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944860218",
      "pull_request_review_id": 1071781487,
      "id": 944860218,
      "node_id": "PRRC_kwDOABII5844UWw6",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 68,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944767932,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I updated this comment as well (to reference the longer explanation above).",
      "created_at": "2022-08-12T21:11:03Z",
      "updated_at": "2022-08-12T21:11:03Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944860218",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944860218"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 68,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944862204",
      "pull_request_review_id": 1071783266,
      "id": 944862204,
      "node_id": "PRRC_kwDOABII5844UXP8",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": null,
      "original_position": 55,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944772525,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, turns out the linter doesn't like this, so this is now split into two lines.",
      "created_at": "2022-08-12T21:13:53Z",
      "updated_at": "2022-08-12T21:13:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944862204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944862204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944981265",
      "pull_request_review_id": 1071867836,
      "id": 944981265,
      "node_id": "PRRC_kwDOABII5844U0UR",
      "diff_hunk": "@@ -0,0 +1,101 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test initial headers download\n+\n+Test that we only try to initially sync headers from one peer (until our chain\n+is close to caught up), and that block announcements result in only one\n+additional peer receiving a getheaders message.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    CInv,\n+    MSG_BLOCK,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.p2p import (\n+    p2p_lock,\n+    P2PInterface,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+import time\n+import random\n+\n+class HeadersSyncTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def announce_random_block(self, peers):\n+        new_block_announcement = msg_inv(inv=[CInv(MSG_BLOCK, random.randint(0, (1<<256) - 1))])\n+        [ p.send_and_ping(new_block_announcement) for p in peers ]\n+\n+    def run_test(self):\n+        self.log.info(\"Adding a peer to node0\")\n+        peer1 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        # Wait for peer1 to receive a getheaders\n+        peer1.wait_for_getheaders()\n+        # Give an empty reply\n+        peer1.send_message(msg_headers())\n+\n+        self.log.info(\"Connecting two more peers to node0\")\n+        # Connect 2 more peers; they should not receive a getheaders yet\n+        peer2 = self.nodes[0].add_p2p_connection(P2PInterface())\n+        peer3 = self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        all_peers = [peer1, peer2, peer3]\n+\n+        self.log.info(\"Verify that peer2 and peer3 don't receive a getheaders after connecting\")\n+        [ p.sync_with_ping() for p in all_peers ]\n+        with p2p_lock:\n+            assert \"getheaders\" not in peer2.last_message\n+            assert \"getheaders\" not in peer3.last_message\n+\n+        with p2p_lock:\n+            peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Have all peers announce a new block\")\n+        self.announce_random_block(all_peers)\n+\n+        self.log.info(\"Check that peer1 receives a getheaders in response\")\n+        peer1.wait_for_getheaders()\n+        peer1.send_message(msg_headers()) # Send empty response\n+        peer1.last_message.pop(\"getheaders\", None)\n+\n+        self.log.info(\"Check that exactly 1 of {peer2, peer3} received a getheaders in response\")\n+        count = 0\n+        peer_receiving_headers = None\n+        for p in [peer2, peer3]:",
      "path": "test/functional/p2p_initial_headers_sync.py",
      "position": 78,
      "original_position": 74,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "61931d7535e526b8ae654eedf84062ff194fb5e6",
      "in_reply_to_id": 944778237,
      "user": {
        "login": "LarryRuane",
        "id": 8321330,
        "node_id": "MDQ6VXNlcjgzMjEzMzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/LarryRuane",
        "html_url": "https://github.com/LarryRuane",
        "followers_url": "https://api.github.com/users/LarryRuane/followers",
        "following_url": "https://api.github.com/users/LarryRuane/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/LarryRuane/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/LarryRuane/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
        "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
        "repos_url": "https://api.github.com/users/LarryRuane/repos",
        "events_url": "https://api.github.com/users/LarryRuane/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You're right, ignore my suggestion.",
      "created_at": "2022-08-13T00:49:27Z",
      "updated_at": "2022-08-13T00:49:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r944981265",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/944981265"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945926962",
      "pull_request_review_id": 1072912754,
      "id": 945926962,
      "node_id": "PRRC_kwDOABII5844YbMy",
      "diff_hunk": "@@ -3265,10 +3271,32 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            if (MaybeSendGetHeaders(pfrom, m_chainman.ActiveChain().GetLocator(m_chainman.m_best_header), *peer)) {\n-                LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\",\n-                        m_chainman.m_best_header->nHeight, best_block->ToString(),\n-                        pfrom.GetId());\n+            // If we haven't started initial headers-sync with this peer, then\n+            // consider sending a getheaders now. On initial startup, there's a\n+            // reliability vs bandwidth tradeoff, where we only trying doing\n+            // initial headers sync with one peer at a time, with a long\n+            // timeout (at which point, if the sync hasn't completed, we will\n+            // disconnect the peer and then choose another).  In the meantime,\n+            // as new blocks are found, we are willing to add one new peer per\n+            // block to sync with as well, to sync quicker in the case where\n+            // our initial peer is unresponsive (but less bandwidth than we'd\n+            // use if we turned on sync with all peers).",
      "path": "src/net_processing.cpp",
      "position": 49,
      "original_position": 37,
      "commit_id": "f6a916683d75ed5489666dbfbd711f000ad0707f",
      "original_commit_id": "4a3376376c774cb95dc633624ad92a2002378178",
      "in_reply_to_id": 935725314,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sdaftuar can you move this comment into the top of the PR; I think this context helps quite a bit (and was going to ask this a comment on the PR directly).",
      "created_at": "2022-08-15T16:30:21Z",
      "updated_at": "2022-08-15T16:30:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/25720#discussion_r945926962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/945926962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/25720"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3284,
      "original_line": 3284,
      "side": "RIGHT"
    }
  ]
}