{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994",
    "id": 419065746,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDE5MDY1NzQ2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18994",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/18994.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/18994.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18994",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18994/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/f898ef65c947776750e49d050633f830546bbdc6",
    "number": 18994,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "tests: Add fuzzing harnesses for functions in script/",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Add fuzzing harnesses for functions in `script/`:\r\n* Add fuzzing helper functions `ConsumeDataStream` and `ConsumeUInt160`\r\n* Fill fuzzing coverage gaps for functions in `script/script.h`, `script/script_error.h` and `script/standard.h`\r\n* Add fuzzing harness for functions in `script/bitcoinconsensus.h`\r\n* Add fuzzing harness for functions in `script/descriptor.h`\r\n* Add fuzzing harness for functions in `script/interpreter.h`\r\n* Add fuzzing harness for functions in `script/sigcache.h`\r\n* Add fuzzing harness for functions in `script/sign.h`\r\n\r\nSee [`doc/fuzzing.md`](https://github.com/bitcoin/bitcoin/blob/master/doc/fuzzing.md) for information on how to fuzz Bitcoin Core. Don't forget to contribute any coverage increasing inputs you find to the [Bitcoin Core fuzzing corpus repo](https://github.com/bitcoin-core/qa-assets).\r\n\r\nHappy fuzzing :)",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2020-05-17T05:54:17Z",
    "updated_at": "2022-08-16T17:19:28Z",
    "closed_at": "2020-05-31T23:00:01Z",
    "mergeable_state": "unknown",
    "merged_at": "2020-05-31T23:00:01Z",
    "merge_commit_sha": "a65b55fa45d41761c3e67ac5107d284d6edc2525",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "practicalswift:fuzzers-script-slash",
      "ref": "fuzzers-script-slash",
      "sha": "f898ef65c947776750e49d050633f830546bbdc6",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 78569642,
        "node_id": "MDEwOlJlcG9zaXRvcnk3ODU2OTY0Mg==",
        "name": "bitcoin",
        "full_name": "practicalswift/bitcoin",
        "owner": {
          "login": "practicalswift",
          "id": 7826565,
          "node_id": "MDQ6VXNlcjc4MjY1NjU=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/practicalswift",
          "html_url": "https://github.com/practicalswift",
          "followers_url": "https://api.github.com/users/practicalswift/followers",
          "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
          "organizations_url": "https://api.github.com/users/practicalswift/orgs",
          "repos_url": "https://api.github.com/users/practicalswift/repos",
          "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/practicalswift/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/practicalswift/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/practicalswift/bitcoin",
        "archive_url": "https://api.github.com/repos/practicalswift/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/practicalswift/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/practicalswift/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/practicalswift/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/practicalswift/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/practicalswift/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/practicalswift/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/practicalswift/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/practicalswift/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/practicalswift/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/practicalswift/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/practicalswift/bitcoin/events",
        "forks_url": "https://api.github.com/repos/practicalswift/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/practicalswift/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/practicalswift/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/practicalswift/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/practicalswift/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/practicalswift/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/practicalswift/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/practicalswift/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/practicalswift/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/practicalswift/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/practicalswift/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/practicalswift/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/practicalswift/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/practicalswift/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/practicalswift/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:practicalswift/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/practicalswift/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/practicalswift/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/practicalswift/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/practicalswift/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/practicalswift/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/practicalswift/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/practicalswift/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/practicalswift/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/practicalswift/bitcoin/hooks",
        "svn_url": "https://github.com/practicalswift/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 164685,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-10-01T13:54:08Z",
        "created_at": "2017-01-10T20:09:24Z",
        "updated_at": "2022-08-28T15:39:12Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "98ebe7896dabbdfc787dfdb83277ba3de22e318f",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T03:51:27Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 442,
    "deletions": 2,
    "changed_files": 9,
    "commits": 7,
    "review_comments": 14,
    "comments": 3
  },
  "events": [
    {
      "event": "labeled",
      "id": 3344215435,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNDQyMTU0MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344215435",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T05:54:48Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 629779615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYyOTc3OTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/629779615",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T11:05:26Z",
      "updated_at": "2020-05-17T21:15:27Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#issuecomment-629779615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18994"
    },
    {
      "event": "reviewed",
      "id": 413153538,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTUzNTM4",
      "url": null,
      "actor": null,
      "commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#pullrequestreview-413153538",
      "submitted_at": "2020-05-17T11:58:12Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
    },
    {
      "event": "labeled",
      "id": 3344603754,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDMzNDQ2MDM3NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344603754",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T14:29:17Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3344713736,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NDcxMzczNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344713736",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T16:25:31Z"
    },
    {
      "event": "unlabeled",
      "id": 3344720863,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzM0NDcyMDg2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3344720863",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-17T16:33:42Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3346103716,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM0NjEwMzcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3346103716",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-18T08:13:41Z"
    },
    {
      "event": "commented",
      "id": 635679615,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNTY3OTYxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/635679615",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-29T00:01:45Z",
      "updated_at": "2020-05-29T00:01:45Z",
      "author_association": "MEMBER",
      "body": "Needs rebase",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#issuecomment-635679615",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18994"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTcxZWNiMDcxNDViNGNlOGMxN2NhODA0ODlmOGYxNDk3Mzg4YzRk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
      "tree": {
        "sha": "6e6ab809b15ebdefcf2d245a3efd39bd74cda6a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e6ab809b15ebdefcf2d245a3efd39bd74cda6a1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c19fd96694d15966f1cc83c43bae2746b92d3149",
          "sha": "c19fd96694d15966f1cc83c43bae2746b92d3149",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c19fd96694d15966f1cc83c43bae2746b92d3149"
        }
      ],
      "message": "tests: Add fuzzing helper functions ConsumeDataStream, ConsumeTxDestination and ConsumeUInt160",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-29T16:44:22Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:13:36Z"
      },
      "sha": "c571ecb07145b4ce8c17ca80489f8f1497388c4d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGU3MjcxMWM2ODVlNjM4ZmE1NGQ0ODU2OTRmYjFiMWFmMDI0YWRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8de72711c685e638fa54d485694fb1b1af024adc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8de72711c685e638fa54d485694fb1b1af024adc",
      "tree": {
        "sha": "0f6d3e4884b93e8a60f3d70cd512bc0fadd51a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f6d3e4884b93e8a60f3d70cd512bc0fadd51a76"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
          "sha": "c571ecb07145b4ce8c17ca80489f8f1497388c4d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c571ecb07145b4ce8c17ca80489f8f1497388c4d"
        }
      ],
      "message": "tests: Fill fuzzing coverage gaps for functions in script/script.h, script/script_error.h and script/standard.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:15:13Z"
      },
      "sha": "8de72711c685e638fa54d485694fb1b1af024adc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2ZiOGYwY2EzMzFhN2Y3OWYwZDI4NzgxN2RhN2Y0Yjg5NGJkYmZh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
      "tree": {
        "sha": "af2e71abd3ac74bf630b52c1cd1a20d325f97428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af2e71abd3ac74bf630b52c1cd1a20d325f97428"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8de72711c685e638fa54d485694fb1b1af024adc",
          "sha": "8de72711c685e638fa54d485694fb1b1af024adc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8de72711c685e638fa54d485694fb1b1af024adc"
        }
      ],
      "message": "tests: Add fuzzing harness for functions in script/bitcoinconsensus.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:17:25Z"
      },
      "sha": "43fb8f0ca331a7f79f0d287817da7f4b894bdbfa"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwMTE3Y2ZkZWNhN2U1ZDNhMmEwOWIzODVjMGU5MzhiZjcwMWU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
      "tree": {
        "sha": "a0213a1585d1663dd8b4d53828208fc95687f65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0213a1585d1663dd8b4d53828208fc95687f65b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
          "sha": "43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa"
        }
      ],
      "message": "tests: Add fuzzing harness for functions in script/descriptor.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:18:07Z"
      },
      "sha": "fa80117cfdeca7e5d3a2a09b385c0e938bf701e9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Q4YWRiNzlmYmUzNGIxNWNmMjkzMzQ2MDdmOWI3NmQzMDNhYTFh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
      "tree": {
        "sha": "49cc0ff174c15e71e6c19e1335220aa855b39bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49cc0ff174c15e71e6c19e1335220aa855b39bea"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
          "sha": "fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9"
        }
      ],
      "message": "tests: Add fuzzing harness for functions in script/interpreter.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:18:49Z"
      },
      "sha": "d3d8adb79fbe34b15cf29334607f9b76d303aa1a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTFkMmYwNjE1MGNkYTI1OGExN2U3OGQ5YjcwNjViNTk0ZDM0YTg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91d2f06150cda258a17e78d9b7065b594d34a85",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c91d2f06150cda258a17e78d9b7065b594d34a85",
      "tree": {
        "sha": "89402c610afa80791b71a89d644d406715a0ab69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89402c610afa80791b71a89d644d406715a0ab69"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
          "sha": "d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d8adb79fbe34b15cf29334607f9b76d303aa1a"
        }
      ],
      "message": "tests: Add fuzzing harness for functions in script/sigcache.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:20:15Z"
      },
      "sha": "c91d2f06150cda258a17e78d9b7065b594d34a85"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODk4ZWY2NWM5NDc3NzY3NTBlNDlkMDUwNjMzZjgzMDU0NmJiZGM2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f898ef65c947776750e49d050633f830546bbdc6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f898ef65c947776750e49d050633f830546bbdc6",
      "tree": {
        "sha": "3066fa550a2247b6ec8b2fe628ab23e96ee11da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3066fa550a2247b6ec8b2fe628ab23e96ee11da2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91d2f06150cda258a17e78d9b7065b594d34a85",
          "sha": "c91d2f06150cda258a17e78d9b7065b594d34a85",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c91d2f06150cda258a17e78d9b7065b594d34a85"
        }
      ],
      "message": "tests: Add fuzzing harness for functions in script/sign.h",
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:20:39Z"
      },
      "sha": "f898ef65c947776750e49d050633f830546bbdc6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3389617517,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzM4OTYxNzUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3389617517",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-30T10:41:31Z"
    },
    {
      "event": "commented",
      "id": 636543317,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYzNjU0MzMxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/636543317",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-31T22:58:29Z",
      "updated_at": "2020-05-31T22:58:29Z",
      "author_association": "MEMBER",
      "body": "ACK f898ef65c947776750e49d050633f830546bbdc6 🔉\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK f898ef65c947776750e49d050633f830546bbdc6 🔉\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgtcwwAk2++KR5/UnaZ6/Gls4rZq7sjVolrOPUw/ADuxRyFu/qM7nmAOuzhX645\r\n/tuQPOszycpK7MuS8INKbw2gV4TTP35W7N9z8GhtbyaSlRXzBGF5vLGk0P1diJrp\r\nGwSiwUle6VU4sRLX44DctSgP9NvNMBkl+zqFEJpjspXkGZuYvtDJrP4Ipm+oSNOw\r\nd5K0zg6VKwz/+23qt9OJErovRltC7QUxIecI+Y0KmJzfkpScf+jGoMTFgo9q0zC4\r\nJDLJ0ZAU8BeiN2J/IK0yyxG1LhZPOK1LikFWqebeD4JEOSA+FnWopXHCUAj+sL7H\r\nhRZmjH1CJ8my2d2nOdqCmOn1R3K+kEuVB0L2cMpPsISRcPjgI8GlF4RcY23PpTBJ\r\nFtjGQdg30fzpNeLW0aPvti4RV7e8eDsi87BOWOVpNKY6AqeKWWcgJwNejrQREfNY\r\n/xHzGR2zvhFYcO7x5V2lafPHaB9CT6lxaRBsNFYfQf7ajaNGeHKXhjHsnQnlW46a\r\nELWIGbLJ\r\n=55wg\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `6d0233da06adba4dcb766f9a62ac736cf11c827239891f0b3af49ea1152fcac1  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401086d0233da06adba4dcb766f9a62ac736cf11c827239891f0b3af49ea1152fcac1f010f0fda69d7ba0a0b4e2eb58e9a1a21f0408fff01044eb7829b1342a68a5a8ef361c825fc608f1045ed43688f00839dd2b6f65c2ce4d0083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0104bca8fb0c87f5e1963452b262a763fd708f1045ed43688f008f5bb659d2c15fd610083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0105bdb4a960d998352589f7292f969e03408f1045ed43688f008094f91e8a5d473e50083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df0109589d836dc8a404491ab0260dc03b6ee08f1045ed43687f0084d695a07cc8c234f0083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#issuecomment-636543317",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18994"
    },
    {
      "event": "merged",
      "id": 3391055074,
      "node_id": "MDExOk1lcmdlZEV2ZW50MzM5MTA1NTA3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3391055074",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a65b55fa45d41761c3e67ac5107d284d6edc2525",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a65b55fa45d41761c3e67ac5107d284d6edc2525",
      "created_at": "2020-05-31T23:00:01Z"
    },
    {
      "event": "closed",
      "id": 3391055076,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzM5MTA1NTA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3391055076",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-31T23:00:01Z"
    },
    {
      "event": "referenced",
      "id": 3393366559,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzOTMzNjY1NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3393366559",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a24e2ef93210ee9fb5f97d00e8046d9380ab63b3",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/a24e2ef93210ee9fb5f97d00e8046d9380ab63b3",
      "created_at": "2020-06-01T14:25:23Z"
    },
    {
      "event": "referenced",
      "id": 4267641682,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyNjc2NDE2ODI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4267641682",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e9af331a77842ffc1f6ab94980d0ed9f143eb38e",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/e9af331a77842ffc1f6ab94980d0ed9f143eb38e",
      "created_at": "2021-01-29T19:15:49Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 4577821032,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0NTc3ODIxMDMy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4577821032",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-10T19:41:44Z"
    },
    {
      "event": "locked",
      "id": 7199115016,
      "node_id": "LOE_lADOABII584k7p2JzwAAAAGtGccI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199115016",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:19:28Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426250850",
      "pull_request_review_id": 413153538,
      "id": 426250850,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDg1MA==",
      "diff_hunk": "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);",
      "path": "src/test/fuzz/script.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unrelated nit: At compile time this can never be null. I'd prefer if the return value for strings was always `std::string`. Every caller of `ScriptErrorString` converts to `std::string` anyway.",
      "created_at": "2020-05-17T11:37:05Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426250850",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426250850"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426251317",
      "pull_request_review_id": 413153538,
      "id": 426251317,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MTMxNw==",
      "diff_hunk": "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+\n+        const CNoDestination no_destination_1;\n+        const CNoDestination no_destination_2;\n+        (void)(no_destination_1 == no_destination_2);\n+        (void)(no_destination_1 < no_destination_2);",
      "path": "src/test/fuzz/script.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this looks like a unit test that does not depend on any fuzz input",
      "created_at": "2020-05-17T11:42:17Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426251317",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426251317"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252814",
      "pull_request_review_id": 413153538,
      "id": 426252814,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjgxNA==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "unrelated, but I was wondering if `ConsumeDeserializable<T>` could always return type `T` (if the stream was empty, it would return `T{}`). Not returning optional would bring this helper in line with all other helpers. For example `ConsumeRandomLengthString` always return `std::string`.",
      "created_at": "2020-05-17T11:58:00Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252814",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252814"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252948",
      "pull_request_review_id": 413155155,
      "id": 426252948,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Mjk0OA==",
      "diff_hunk": "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+\n+        const CNoDestination no_destination_1;\n+        const CNoDestination no_destination_2;\n+        (void)(no_destination_1 == no_destination_2);\n+        (void)(no_destination_1 < no_destination_2);",
      "path": "src/test/fuzz/script.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426251317,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My suggestion would be to construct a random `CTxDestination`.",
      "created_at": "2020-05-17T11:59:38Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426252948",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426252948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426279217",
      "pull_request_review_id": 413177727,
      "id": 426279217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3OTIxNw==",
      "diff_hunk": "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);",
      "path": "src/test/fuzz/script.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426250850,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree, we should always return `std::string`. Will do that in a follow-up PR since that will touch validation code and thus need more scrutiny than adding tests.",
      "created_at": "2020-05-17T16:24:47Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426279217",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426279217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426625962",
      "pull_request_review_id": 413593920,
      "id": 426625962,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYyNTk2Mg==",
      "diff_hunk": "@@ -119,4 +125,41 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    const char* op_name = GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    assert(op_name != nullptr);\n+\n+    const char* error_string = ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+    assert(error_string != nullptr);\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+\n+        const CNoDestination no_destination_1;\n+        const CNoDestination no_destination_2;\n+        (void)(no_destination_1 == no_destination_2);\n+        (void)(no_destination_1 < no_destination_2);",
      "path": "src/test/fuzz/script.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426251317,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done! :)",
      "created_at": "2020-05-18T13:28:59Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426625962",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426625962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426638879",
      "pull_request_review_id": 413610947,
      "id": 426638879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjYzODg3OQ==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You mean something along the lines of:\r\n\r\n```c++\r\ntemplate <typename T>\r\nNODISCARD inline T ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\r\n{\r\n    const std::vector<uint8_t> buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\r\n    CDataStream ds{buffer, SER_NETWORK, INIT_PROTO_VERSION};\r\n    T obj;\r\n    try {\r\n        ds >> obj;\r\n    } catch (const std::ios_base::failure&) {\r\n    }\r\n    return obj;\r\n}\r\n```\r\n\r\nI've thought about that and while it would be better from a developer ergonomics perspective I think it might come with some negative impact on overall fuzzing. One risk I see is that the fuzzer might try to work also on \"meaningless\" inputs (inputs which cause `std::ios_base::failure`) which would now become \"somewhat meaningful\" due to default construction.\r\n\r\nTake the extreme example of a huge input containing a few million bytes worth of 0x41 scream (`AAAAAAAAAAA…`) being deserialized to an object of type `CFoo`. The current fuzzer would quickly reach `std::ios_base::failure`, return a `nullopt` and then give up without further processing (fail early thanks to `if (!opt_foo) { return; }` or similar). If we were to return a `CFoo{}` instead then the fuzzer would proceed with processing (fail late) which may slow down the fuzzing.\r\n\r\nDoes it make sense? :)\r\n\r\ntl;dr -- would be worth doing if no negative fuzzing speed impact can be measured :)\r\n\r\n_Edit: [Proof of concept here](https://github.com/bitcoin/bitcoin/compare/master...practicalswift:consume) if someone wants to experiment :)_",
      "created_at": "2020-05-18T13:48:03Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426638879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426638879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426672035",
      "pull_request_review_id": 413654484,
      "id": 426672035,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY3MjAzNQ==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think when it comes to trading off giving the fuzz test more freedom to explore more code branches vs micro-optimizing for performance, we should always pick the option that gives the fuzz engine more freedom. Fuzzing is great to complement traditional tests (e.g. our unit and functional tests). Those traditional tests offer a reasonable line coverage, but fuzz testing can offer great branch coverage. Giving the fuzz engine to explore as much branches as possible is vital. With modern coverage guided fuzz engines, the strength of fuzzing is that even with a large search space, the fuzz engine will always find useful inputs that increase coverage. Additional search space may (or may not!) come with a performance penalty, but I think we shouldn't use performance as a way to measure usefulness of a fuzz tests. The fastest fuzz test is the one that tests nothing. However, it is also the most useless one. Anything that can be solved by letting the fuzz engine run for another hour or by simply adding one more core should not be a reason to cripple the test into one that yields less coverage.\r\n\r\nIn fact, this has shown to be effective in the past. Take for example the process_message harness vs the process_message*s* harness. The latter is allowed to send an arbitrary number of messages and start an arbitrary number of peers. The latter (more flexible and broader) test that gives the engine more freedom is also the *only* test that has found bugs in pull requests that none of the other fuzz test or unit test or even functional tests have found. Specifically:\r\n\r\n* It found a nullptr dereference: https://github.com/bitcoin/bitcoin/pull/18808#discussion_r417307258\r\n* It found an unidentified problem: https://github.com/bitcoin/bitcoin/pull/15197#pullrequestreview-408731734\r\n* Some more that I am missing...?",
      "created_at": "2020-05-18T14:34:34Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426672035",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426672035"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426695025",
      "pull_request_review_id": 413684094,
      "id": 426695025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5NTAyNQ==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree regarding the coverage vs performance trade-off: I'd choose \"explore more code branches\" over performance any day in the week :)\r\n\r\nDo you see a scenario where returning a default constructed object in case of serialisation failure is likely to give more freedom to explore more code branches (in a way that will have a positive impact of coverage) compared to not doing so?\r\n\r\nIf so we'd have _two_ reasons to do this: developer ergonomics (no more `std::optional`) _and_ increased coverage :)\r\n\r\nMy thinking is more along the lines of \"how do we guide the coverage-guided fuzzer in a meaningful way\" rather than \"micro-optimizing for performance\". I guess the question boils down to if and to what extent the guidance provided by failing early is meaningful for the fuzzer :)\r\n\r\nCode if anyone wants to experiment: https://github.com/bitcoin/bitcoin/compare/master...practicalswift:consume",
      "created_at": "2020-05-18T15:06:21Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426695025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426695025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426698810",
      "pull_request_review_id": 413689053,
      "id": 426698810,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5ODgxMA==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Do you see a scenario where returning a default constructed object in case of serialisation failure is likely to give more freedom to explore more code branches compared to not doing so?\r\n\r\nUnclear. This question boils down to whether default initialization leaves members uninitialized or initializes them with values that can not be the result of deserialization.",
      "created_at": "2020-05-18T15:11:30Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426698810",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426698810"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426854421",
      "pull_request_review_id": 413888902,
      "id": 426854421,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NDQyMQ==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed. Sounds like we agree on the need for experimentation and measuring before proceeding with this :)",
      "created_at": "2020-05-18T19:43:47Z",
      "updated_at": "2020-05-30T10:41:31Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r426854421",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/426854421"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432993158",
      "pull_request_review_id": 421535458,
      "id": 432993158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk5MzE1OA==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@practicalswift Are you going to create a pull with the branch or should I do it?",
      "created_at": "2020-05-31T22:59:33Z",
      "updated_at": "2020-05-31T22:59:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r432993158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/432993158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433129784",
      "pull_request_review_id": 421705801,
      "id": 433129784,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyOTc4NA==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@MarcoFalke I plan to do a FuzzBench style test between the two variations (`T ConsumeDeserializable(…)` and `std::optional<T> ConsumeDeserializable(…)`) to see which one that helps us reach the highest coverage after 24 hours of fuzzing using `libFuzzer` (with each harness given `1/N` slice of the runtime) with an empty input corpus. Does that sound like a fair experimental setup that could guide us regarding the trade-offs we're facing here? If so, I'll do it :)",
      "created_at": "2020-06-01T09:21:40Z",
      "updated_at": "2020-06-01T09:21:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r433129784",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433129784"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433156970",
      "pull_request_review_id": 421741746,
      "id": 433156970,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1Njk3MA==",
      "diff_hunk": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const Optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const Optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const Optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const Optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const Optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const Optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const Optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;",
      "path": "src/test/fuzz/script_sign.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "f898ef65c947776750e49d050633f830546bbdc6",
      "original_commit_id": "55778f1472a8f3b8164241794575c0f67fcefbf3",
      "in_reply_to_id": 426252814,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, can't hurt to do a benchmark",
      "created_at": "2020-06-01T10:27:18Z",
      "updated_at": "2020-06-01T10:27:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/18994#discussion_r433156970",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/433156970"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18994"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    }
  ]
}