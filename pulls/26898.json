{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898",
    "id": 1199181867,
    "node_id": "PR_kwDOABII585HehAr",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/26898",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/26898.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/26898.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26898",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26898/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
    "number": 26898,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "fuzz: Add PartiallyDownloadedBlock target",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This PR adds a fuzz target for `PartiallyDownloadedBlock`, which we currently do not have any coverage for.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2023-01-16T15:39:49Z",
    "updated_at": "2023-01-25T09:33:55Z",
    "closed_at": "2023-01-24T11:40:10Z",
    "mergeable_state": "unknown",
    "merged_at": "2023-01-24T11:40:10Z",
    "merge_commit_sha": "837e9ed611fb9be4017e674b58fc4618d51df080",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "dergoegge:2023-11-pdb-fuzz",
      "ref": "2023-11-pdb-fuzz",
      "sha": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 315023492,
        "node_id": "MDEwOlJlcG9zaXRvcnkzMTUwMjM0OTI=",
        "name": "bitcoin",
        "full_name": "dergoegge/bitcoin",
        "owner": {
          "login": "dergoegge",
          "id": 8077169,
          "node_id": "MDQ6VXNlcjgwNzcxNjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dergoegge",
          "html_url": "https://github.com/dergoegge",
          "followers_url": "https://api.github.com/users/dergoegge/followers",
          "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
          "organizations_url": "https://api.github.com/users/dergoegge/orgs",
          "repos_url": "https://api.github.com/users/dergoegge/repos",
          "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dergoegge/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dergoegge/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dergoegge/bitcoin",
        "archive_url": "https://api.github.com/repos/dergoegge/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dergoegge/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dergoegge/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dergoegge/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dergoegge/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dergoegge/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dergoegge/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dergoegge/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dergoegge/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dergoegge/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dergoegge/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dergoegge/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dergoegge/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dergoegge/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dergoegge/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dergoegge/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dergoegge/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dergoegge/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dergoegge/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dergoegge/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dergoegge/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dergoegge/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dergoegge/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dergoegge/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dergoegge/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dergoegge/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dergoegge/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dergoegge/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dergoegge/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dergoegge/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dergoegge/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dergoegge/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dergoegge/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dergoegge/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dergoegge/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dergoegge/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dergoegge/bitcoin/hooks",
        "svn_url": "https://github.com/dergoegge/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 222378,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T10:23:38Z",
        "created_at": "2020-11-22T11:41:30Z",
        "updated_at": "2023-05-05T12:10:28Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5271c77f8356dc6de95fd6d08a415df3568eb7a1",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34325,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 626,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-07T07:29:24Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T06:49:43Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 165,
    "deletions": 6,
    "changed_files": 4,
    "commits": 4,
    "review_comments": 19,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 1384227723,
      "node_id": "IC_kwDOABII585SgaOL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1384227723",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-16T15:39:52Z",
      "updated_at": "2023-01-24T11:34:13Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\n| Type | Reviewers |\n| ---- | --------- |\n| ACK | [mzumsande](https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1266335500), [MarcoFalke](https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1267330529) |\n| Concept ACK | [sipa](https://github.com/bitcoin/bitcoin/pull/26898#issuecomment-1398630808) |\n\nIf your review is incorrectly listed, please react with 👎 to this comment and the bot will ignore it on the next update.\n",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#issuecomment-1384227723",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26898"
    },
    {
      "event": "labeled",
      "id": 8237802860,
      "node_id": "LE_lADOABII585bgDkUzwAAAAHrAuVs",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8237802860",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-16T15:39:54Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 1254130211,
      "node_id": "PRR_kwDOABII585KwIIj",
      "url": null,
      "actor": null,
      "commit_id": "1105efe46170c7edb3c4d5918ba573ff3aa49967",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, only minor comments",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1254130211",
      "submitted_at": "2023-01-18T23:32:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8320814884,
      "node_id": "HRFPE_lADOABII585bgDkUzwAAAAHv9Y8k",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8320814884",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-20T12:00:14Z"
    },
    {
      "event": "commented",
      "id": 1398630808,
      "node_id": "IC_kwDOABII585TXWmY",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1398630808",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-20T16:27:48Z",
      "updated_at": "2023-01-20T16:27:48Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#issuecomment-1398630808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26898"
    },
    {
      "event": "reviewed",
      "id": 1265301293,
      "node_id": "PRR_kwDOABII585Lavct",
      "url": null,
      "actor": null,
      "commit_id": "b350ffd07c04d3b499f5960973d664d699341ec1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for working on improved fuzz targets!\r\n\r\nI've left some nano-nits that can be ignored. Please let us know if you want this merged or want to address the nits.\r\n\r\nreview ACK b350ffd07c04d3b499f5960973d664d699341ec1 🎧\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nreview ACK b350ffd07c04d3b499f5960973d664d699341ec1 🎧\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUgq+Av/em84tR5X4rXmHJSeQPxVnzZUNBTZYXwnjL+A3EbtpxWP+ne/jGTdkj43\r\nURmm15WNSbKeLKTR3w+FbdcgNbGuyfRlx6tJsvKNFbAMZtEvR4Ezs7WxZmQKdLAa\r\nDHsp3Tpfe+axMgu1TGpx1JZ2+wC+6pDYDqMvAh2yLkN1NHUrHEToVwIN2r4z2+Nl\r\n0adRB0cxh7WF9VGN4twevz5AAoIEXMhlmDXEGJO8ljFyBbkxmTDtYcYzgRxdQVig\r\nOk9JoNuFxxVQeBTC1TeloGCqXAapwS+ZVQul0NpEsWejD29jGGi+/kw3qOXq3HjI\r\nKmb/K/6zNMNUgptln5bFSWnwMHAkhbKlor7a2bDPHcpO6Fiti5EubKodw3+1i0nZ\r\nLx5y3Jgr1ae41s/hAuxGF8MtfyBHmBhl5EkoVLnHKLE/mYmIg2C2v/TwN6xmwpuh\r\nzXhIyon2Ht2p8pi0nI197Mp6av+Ify3/EC0UgfC+yyVHhTAugq9DIF833Y8zXrqR\r\nVeWb6Kg0\r\n=ay5H\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1265301293",
      "submitted_at": "2023-01-23T15:02:19Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDE0MjlmODM3NzAxN2MwMDI5Y2I4N2M0ZDM1NWMzN2I3OTY0MzI2MTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1429f8377017c0029cb87c4d355c37b796432611",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1429f8377017c0029cb87c4d355c37b796432611",
      "tree": {
        "sha": "5ee91a8932ba3d8faa9e1c849aaf23781f78aade",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ee91a8932ba3d8faa9e1c849aaf23781f78aade"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbca00ef76e5a004555dbd4cdc9209492f02e358",
          "sha": "dbca00ef76e5a004555dbd4cdc9209492f02e358",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/dbca00ef76e5a004555dbd4cdc9209492f02e358"
        }
      ],
      "message": "[block encodings] Make CheckBlock mockable for PartiallyDownloadedBlock",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-23T16:18:35Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-16T15:13:52Z"
      },
      "sha": "1429f8377017c0029cb87c4d355c37b796432611"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKDQyYmQ0Yzc0NjgyNGUzYjJhZGYyYzY5NmNmNGE3MDVmYTQzZDFmYTg",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42bd4c746824e3b2adf2c696cf4a705fa43d1fa8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/42bd4c746824e3b2adf2c696cf4a705fa43d1fa8",
      "tree": {
        "sha": "22080391aee654951827646c6b544e8854d8ad82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22080391aee654951827646c6b544e8854d8ad82"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1429f8377017c0029cb87c4d355c37b796432611",
          "sha": "1429f8377017c0029cb87c4d355c37b796432611",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1429f8377017c0029cb87c4d355c37b796432611"
        }
      ],
      "message": "[block encodings] Avoid fuzz blocking asserts in PartiallyDownloadedBlock",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-23T16:18:35Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-16T15:14:16Z"
      },
      "sha": "42bd4c746824e3b2adf2c696cf4a705fa43d1fa8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGE4YWM2MWFiNWUxODA1ZGY2MWY0ZGM5NGRlZDQ0YTg3NDcyNTQ4NGM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8ac61ab5e1805df61f4dc94ded44a874725484c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ac61ab5e1805df61f4dc94ded44a874725484c",
      "tree": {
        "sha": "ee0ad71aabfd2c394f03cec6b26d64fdebb0cecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee0ad71aabfd2c394f03cec6b26d64fdebb0cecf"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42bd4c746824e3b2adf2c696cf4a705fa43d1fa8",
          "sha": "42bd4c746824e3b2adf2c696cf4a705fa43d1fa8",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/42bd4c746824e3b2adf2c696cf4a705fa43d1fa8"
        }
      ],
      "message": "[fuzz] Add PartiallyDownloadedBlock target",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-23T16:29:41Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-16T15:16:07Z"
      },
      "sha": "a8ac61ab5e1805df61f4dc94ded44a874725484c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOABII59oAKGExYzM2Mjc1YjVhMjdhZTY4NWY0OWZmMDJkYWJmZjBhZGJmNTFhYTE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "tree": {
        "sha": "7232a22bcf61c98420590f7195afa414426eda39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7232a22bcf61c98420590f7195afa414426eda39"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8ac61ab5e1805df61f4dc94ded44a874725484c",
          "sha": "a8ac61ab5e1805df61f4dc94ded44a874725484c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/a8ac61ab5e1805df61f4dc94ded44a874725484c"
        }
      ],
      "message": "[fuzz] Assert that omitting missing transactions always fails block reconstruction",
      "committer": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-23T16:29:41Z"
      },
      "author": {
        "name": "dergoegge",
        "email": "n.goeggi@gmail.com",
        "date": "2023-01-19T17:06:24Z"
      },
      "sha": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 8336108483,
      "node_id": "HRFPE_lADOABII585bgDkUzwAAAAHw3uvD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8336108483",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T16:32:38Z"
    },
    {
      "event": "commented",
      "id": 1400703339,
      "node_id": "IC_kwDOABII585TfQlr",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400703339",
      "actor": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T17:18:33Z",
      "updated_at": "2023-01-23T17:18:33Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke addressed all your comments. CI failures seem unrelated (restarted the failing jobs).",
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#issuecomment-1400703339",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/26898"
    },
    {
      "event": "mentioned",
      "id": 8336540155,
      "node_id": "MEE_lADOABII585bgDkUzwAAAAHw5YH7",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8336540155",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T17:18:33Z"
    },
    {
      "event": "subscribed",
      "id": 8336540171,
      "node_id": "SE_lADOABII585bgDkUzwAAAAHw5YIL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8336540171",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-23T17:18:33Z"
    },
    {
      "event": "reviewed",
      "id": 1266335500,
      "node_id": "PRR_kwDOABII585Ler8M",
      "url": null,
      "actor": null,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code Review ACK a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1266335500",
      "submitted_at": "2023-01-23T21:03:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
    },
    {
      "event": "reviewed",
      "id": 1267330529,
      "node_id": "PRR_kwDOABII585Lie3h",
      "url": null,
      "actor": null,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "lgtm. Follow-ups can be done in new pulls, if there are any.\r\n\r\n\r\nre-ACK a1c36275b5a27ae685f49ff02dabff0adbf51aa1  🎼\r\n\r\n<details><summary>Show signature</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nre-ACK a1c36275b5a27ae685f49ff02dabff0adbf51aa1  🎼\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUhUGAv8CVgILyXBbe4tlLJ6RxNL9KDFKjr7dYR+6pLtarndtMPlJs+xS/dJwHSi\r\n6Exkiq1N54HCLzzgMZeN03rUW4FbXW1qngFiTS4SJCOliuaqtZInk4uH8O5AIlWt\r\nigJ8Kfeues7VcwsVSIIAkfg8ZCnoj4BoOKJGWNdRVeCUfa0JqoftIHzX3yqwjmS/\r\n7Y9CWzn7nTqqSzcel4Ry6BcqMetJsZohTtsqy8GCZfB/Ylam5TxrUgkYaBid8BO+\r\n4sTAcy9Cj9+2JhHXeyXXVaLbPDeB3WHErHelxv8z0PgKcH1xDvvVO7SmAuKWVP6q\r\nLsq6n+OannMTc8V24ue5x+QQTDtTLl33C+MNSZnCG7lZ0WPW2vmHZEvyGBTsLZId\r\nTM3uVmByZlCjOHir4Vm9hR6DupzLkjNRaoKlLSeZrrvBJuEWQ2vMZGv+5OIyHVTE\r\nGJHsVC7djHNX1yVtqT6j8jCgqigotS5piD3hcYB3z30nBfCa1lzaZpt1p9/TkSyD\r\n4jM6fVom\r\n=ozo3\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n\r\n</details>\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1267330529",
      "submitted_at": "2023-01-24T11:34:10Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
    },
    {
      "event": "merged",
      "id": 8343358212,
      "node_id": "ME_lADOABII585bgDkUzwAAAAHxTYsE",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8343358212",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "837e9ed611fb9be4017e674b58fc4618d51df080",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/837e9ed611fb9be4017e674b58fc4618d51df080",
      "created_at": "2023-01-24T11:40:10Z"
    },
    {
      "event": "closed",
      "id": 8343358234,
      "node_id": "CE_lADOABII585bgDkUzwAAAAHxTYsa",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8343358234",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-24T11:40:10Z"
    },
    {
      "event": "referenced",
      "id": 8347298508,
      "node_id": "REFE_lADOABII585bgDkUzwAAAAHxiarM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8347298508",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a8897f6e62a4d77005f1a32639537347553a9fe5",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/a8897f6e62a4d77005f1a32639537347553a9fe5",
      "created_at": "2023-01-24T18:53:56Z"
    },
    {
      "event": "reviewed",
      "id": 1268956916,
      "node_id": "PRR_kwDOABII585Lor70",
      "url": null,
      "actor": null,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "left more nits :sweat_smile: ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#pullrequestreview-1268956916",
      "submitted_at": "2023-01-25T09:33:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073956267",
      "pull_request_review_id": 1254130211,
      "id": 1073956267,
      "node_id": "PRRC_kwDOABII585AA0Wr",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_etxra_txn{fuzzed_data_provider.ConsumeBool()};",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1105efe46170c7edb3c4d5918ba573ff3aa49967",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: etxra -> extra",
      "created_at": "2023-01-18T19:00:48Z",
      "updated_at": "2023-01-18T23:32:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1073956267",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073956267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073984596",
      "pull_request_review_id": 1254130211,
      "id": 1073984596,
      "node_id": "PRRC_kwDOABII585AA7RU",
      "diff_hunk": "@@ -197,7 +197,8 @@ ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<\n         return READ_STATUS_INVALID;\n \n     BlockValidationState state;\n-    if (!CheckBlock(block, state, Params().GetConsensus())) {\n+    CheckBlockFn check_block = check_block_mock ? check_block_mock : CheckBlock;\n+    if (!check_block(block, state, Params().GetConsensus(), true, true)) {",
      "path": "src/blockencodings.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "f463998ccb7f8f0289d9e74f97db7184b7d54ded",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe add named arguments for the bools",
      "created_at": "2023-01-18T19:31:12Z",
      "updated_at": "2023-01-18T23:32:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1073984596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1073984596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080665669",
      "pull_request_review_id": 1254130211,
      "id": 1080665669,
      "node_id": "PRRC_kwDOABII585AaaZF",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_etxra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_etxra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        assert(init_status != READ_STATUS_OK ||\n+               (available.count(i) == 1) == pdb.IsTxAvailable(i));\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {\n+            missing.push_back(block->vtx[i]);",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 101,
      "original_position": 90,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1105efe46170c7edb3c4d5918ba573ff3aa49967",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe we could memorize if we decided to skip an unavailable tx (i.e. one we were supposed to include in `missing`), and later assert that the FillBlock result must not be `READ_STATUS_OK` in this case?",
      "created_at": "2023-01-18T23:28:56Z",
      "updated_at": "2023-01-18T23:33:06Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1080665669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1080665669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082418099",
      "pull_request_review_id": 1263469523,
      "id": 1082418099,
      "node_id": "PRRC_kwDOABII585AhGOz",
      "diff_hunk": "@@ -0,0 +1,119 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_etxra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_etxra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        assert(init_status != READ_STATUS_OK ||\n+               (available.count(i) == 1) == pdb.IsTxAvailable(i));\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {\n+            missing.push_back(block->vtx[i]);",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 101,
      "original_position": 90,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1105efe46170c7edb3c4d5918ba573ff3aa49967",
      "in_reply_to_id": 1080665669,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, added an extra commit for this",
      "created_at": "2023-01-20T12:00:45Z",
      "updated_at": "2023-01-20T12:00:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1082418099",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1082418099"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 101,
      "original_line": 101,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083856840",
      "pull_request_review_id": 1265301293,
      "id": 1083856840,
      "node_id": "PRRC_kwDOABII585AmlfI",
      "diff_hunk": "@@ -129,6 +134,11 @@ class PartiallyDownloadedBlock {\n     const CTxMemPool* pool;\n public:\n     CBlockHeader header;\n+\n+    // Can be overriden for testing\n+    using CheckBlockFn = std::function<bool(const CBlock&, BlockValidationState&, const Consensus::Params&, bool, bool)>;\n+    CheckBlockFn check_block_mock{nullptr};",
      "path": "src/blockencodings.h",
      "position": null,
      "original_position": 21,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "c41f50d389a48c98d6d643ac83820da301737d39",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: `m_` prefix?",
      "created_at": "2023-01-23T10:07:22Z",
      "updated_at": "2023-01-23T15:02:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1083856840",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1083856840"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084094778",
      "pull_request_review_id": 1265301293,
      "id": 1084094778,
      "node_id": "PRRC_kwDOABII585Anfk6",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit 1136999e0ce7b13e209ac3c3153ed698938b6f6e: Any reason to mention the unused names, other than `state`? Seems fragile, given that the names may go out-of-sync in the future or may have compilers warn/error on the dummy symbols.",
      "created_at": "2023-01-23T14:01:59Z",
      "updated_at": "2023-01-23T15:02:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084094778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084094778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084151062",
      "pull_request_review_id": 1265301293,
      "id": 1084151062,
      "node_id": "PRRC_kwDOABII585AntUW",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        assert(init_status != READ_STATUS_OK ||",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 92,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1136999e0ce7b13e209ac3c3153ed698938b6f6e nit: Why not `if (init_status == READ_STATUS_OK) assert(...`? Seems less confusing to have less checks in one assert.",
      "created_at": "2023-01-23T14:49:58Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084151062",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084151062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084151594",
      "pull_request_review_id": 1265301293,
      "id": 1084151594,
      "node_id": "PRRC_kwDOABII585Antcq",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not that it matters, but a bitvector might use less space and time",
      "created_at": "2023-01-23T14:50:23Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084151594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084151594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084152813",
      "pull_request_review_id": 1265301293,
      "id": 1084152813,
      "node_id": "PRRC_kwDOABII585Antvt",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        assert(init_status != READ_STATUS_OK ||\n+               !pdb.IsTxAvailable(i) || available.count(i) > 0);\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why would `i` ever be larger or equal to `vtx.size()`? Also, why would `BlockTxCount` ever be not equal to `vtx.size`?",
      "created_at": "2023-01-23T14:51:23Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084152813",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084152813"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084157755",
      "pull_request_review_id": 1265301293,
      "id": 1084157755,
      "node_id": "PRRC_kwDOABII585Anu87",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        assert(init_status != READ_STATUS_OK ||\n+               !pdb.IsTxAvailable(i) || available.count(i) > 0);\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {\n+            missing.push_back(block->vtx[i]);\n+        }\n+    }\n+\n+    // Mock CheckBlock\n+    bool fail_check_block{fuzzed_data_provider.ConsumeBool()};\n+    auto validation_result{static_cast<BlockValidationResult>(\n+        fuzzed_data_provider.ConsumeIntegralInRange<int>(\n+            (int)BlockValidationResult::BLOCK_RESULT_UNSET,\n+            (int)BlockValidationResult::BLOCK_HEADER_LOW_WORK))};",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using `PickValue`, like the other enums, would be using less casts",
      "created_at": "2023-01-23T14:55:19Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084157755",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084157755"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084159761",
      "pull_request_review_id": 1265301293,
      "id": 1084159761,
      "node_id": "PRRC_kwDOABII585AnvcR",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        assert(init_status != READ_STATUS_OK ||\n+               !pdb.IsTxAvailable(i) || available.count(i) > 0);\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {\n+            missing.push_back(block->vtx[i]);\n+        }\n+    }\n+\n+    // Mock CheckBlock\n+    bool fail_check_block{fuzzed_data_provider.ConsumeBool()};\n+    auto validation_result{static_cast<BlockValidationResult>(\n+        fuzzed_data_provider.ConsumeIntegralInRange<int>(\n+            (int)BlockValidationResult::BLOCK_RESULT_UNSET,\n+            (int)BlockValidationResult::BLOCK_HEADER_LOW_WORK))};",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": 1084157755,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If you want to use casts, I'd recommend std::underlying_type",
      "created_at": "2023-01-23T14:56:50Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084159761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084159761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084163667",
      "pull_request_review_id": 1265301293,
      "id": 1084163667,
      "node_id": "PRRC_kwDOABII585AnwZT",
      "diff_hunk": "@@ -96,6 +99,8 @@ FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n         if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {\n             missing.push_back(block->vtx[i]);\n         }\n+\n+        skipped_missing = skipped_missing || (!pdb.IsTxAvailable(i) && skip);",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 15,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "b350ffd07c04d3b499f5960973d664d699341ec1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Use `|=`?",
      "created_at": "2023-01-23T15:00:06Z",
      "updated_at": "2023-01-23T15:02:20Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084163667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084163667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084282052",
      "pull_request_review_id": 1265939382,
      "id": 1084282052,
      "node_id": "PRRC_kwDOABII585AoNTE",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        assert(init_status != READ_STATUS_OK ||\n+               !pdb.IsTxAvailable(i) || available.count(i) > 0);\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip && i < block->vtx.size()) {",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 96,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": 1084152813,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yea this is not needed, i suspect I this is a remnant of an earlier version of the target.",
      "created_at": "2023-01-23T16:33:28Z",
      "updated_at": "2023-01-23T16:33:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084282052",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084282052"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084283041",
      "pull_request_review_id": 1265941038,
      "id": 1084283041,
      "node_id": "PRRC_kwDOABII585AoNih",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 59,
      "original_position": 59,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": 1084151594,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this is worth it for now, but I might open a follow up if this turns out to significantly improve performance.",
      "created_at": "2023-01-23T16:34:14Z",
      "updated_at": "2023-01-23T16:34:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084283041",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084283041"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084283397",
      "pull_request_review_id": 1265941453,
      "id": 1084283397,
      "node_id": "PRRC_kwDOABII585AoNoF",
      "diff_hunk": "@@ -0,0 +1,126 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock& block, BlockValidationState& state, const Consensus::Params& params, bool check_pow, bool check_merkle_root) {",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "1136999e0ce7b13e209ac3c3153ed698938b6f6e",
      "in_reply_to_id": 1084094778,
      "user": {
        "login": "dergoegge",
        "id": 8077169,
        "node_id": "MDQ6VXNlcjgwNzcxNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dergoegge",
        "html_url": "https://github.com/dergoegge",
        "followers_url": "https://api.github.com/users/dergoegge/followers",
        "following_url": "https://api.github.com/users/dergoegge/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dergoegge/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dergoegge/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
        "organizations_url": "https://api.github.com/users/dergoegge/orgs",
        "repos_url": "https://api.github.com/users/dergoegge/repos",
        "events_url": "https://api.github.com/users/dergoegge/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dergoegge/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Dropped the unused names",
      "created_at": "2023-01-23T16:34:28Z",
      "updated_at": "2023-01-23T16:34:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1084283397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084283397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085160437",
      "pull_request_review_id": 1267330529,
      "id": 1085160437,
      "node_id": "PRRC_kwDOABII585Arjv1",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock&, BlockValidationState& state, const Consensus::Params&, bool, bool) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    // Whether we skipped a transaction that should be included in `missing`.\n+    // FillBlock should never return READ_STATUS_OK if that is the case.\n+    bool skipped_missing{false};\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        if (init_status == READ_STATUS_OK) {\n+            assert(!pdb.IsTxAvailable(i) || available.count(i) > 0);\n+        }\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip) {\n+            missing.push_back(block->vtx[i]);\n+        }\n+\n+        skipped_missing |= (!pdb.IsTxAvailable(i) && skip);\n+    }\n+\n+    // Mock CheckBlock\n+    bool fail_check_block{fuzzed_data_provider.ConsumeBool()};\n+    auto validation_result =\n+        fuzzed_data_provider.PickValueInArray(\n+            {BlockValidationResult::BLOCK_RESULT_UNSET,\n+             BlockValidationResult::BLOCK_CONSENSUS,\n+             BlockValidationResult::BLOCK_RECENT_CONSENSUS_CHANGE,\n+             BlockValidationResult::BLOCK_CACHED_INVALID,\n+             BlockValidationResult::BLOCK_INVALID_HEADER,\n+             BlockValidationResult::BLOCK_MUTATED,\n+             BlockValidationResult::BLOCK_MISSING_PREV,\n+             BlockValidationResult::BLOCK_INVALID_PREV,\n+             BlockValidationResult::BLOCK_TIME_FUTURE,\n+             BlockValidationResult::BLOCK_CHECKPOINT,\n+             BlockValidationResult::BLOCK_HEADER_LOW_WORK});",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 121,
      "original_position": 121,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Could move to a common header file?",
      "created_at": "2023-01-24T11:33:25Z",
      "updated_at": "2023-01-24T11:34:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1085160437",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1085160437"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086378266",
      "pull_request_review_id": 1268956916,
      "id": 1086378266,
      "node_id": "PRRC_kwDOABII585AwNEa",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock&, BlockValidationState& state, const Consensus::Params&, bool, bool) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 80,
      "original_position": 80,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Could make sense to include some extraneous txs that are not in the block in the extra txn or mempool?",
      "created_at": "2023-01-25T09:14:35Z",
      "updated_at": "2023-01-25T09:33:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1086378266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086378266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 80,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086382332",
      "pull_request_review_id": 1268956916,
      "id": 1086382332,
      "node_id": "PRRC_kwDOABII585AwOD8",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock&, BlockValidationState& state, const Consensus::Params&, bool, bool) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    // Whether we skipped a transaction that should be included in `missing`.\n+    // FillBlock should never return READ_STATUS_OK if that is the case.\n+    bool skipped_missing{false};\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        if (init_status == READ_STATUS_OK) {\n+            assert(!pdb.IsTxAvailable(i) || available.count(i) > 0);",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 96,
      "original_position": 96,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n\r\n```cpp\r\n        if (init_status == READ_STATUS_OK && pdb.IsTxAvailable(i)) {\r\n            assert(available.count(i) > 0);\r\n```\r\n\r\nAlso, in the comment replace \"then\" with \"and\"?",
      "created_at": "2023-01-25T09:18:26Z",
      "updated_at": "2023-01-25T09:33:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1086382332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086382332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": 95,
      "original_start_line": 95,
      "start_side": "RIGHT",
      "line": 96,
      "original_line": 96,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086386318",
      "pull_request_review_id": 1268956916,
      "id": 1086386318,
      "node_id": "PRRC_kwDOABII585AwPCO",
      "diff_hunk": "@@ -0,0 +1,142 @@\n+#include <blockencodings.h>\n+#include <consensus/merkle.h>\n+#include <consensus/validation.h>\n+#include <primitives/block.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/fuzz/util/mempool.h>\n+#include <test/util/setup_common.h>\n+#include <test/util/txmempool.h>\n+#include <txmempool.h>\n+\n+#include <cstddef>\n+#include <cstdint>\n+#include <limits>\n+#include <memory>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n+void initialize_pdb()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+}\n+\n+PartiallyDownloadedBlock::CheckBlockFn FuzzedCheckBlock(std::optional<BlockValidationResult> result)\n+{\n+    return [result](const CBlock&, BlockValidationState& state, const Consensus::Params&, bool, bool) {\n+        if (result) {\n+            return state.Invalid(*result);\n+        }\n+\n+        return true;\n+    };\n+}\n+\n+FUZZ_TARGET_INIT(partially_downloaded_block, initialize_pdb)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+\n+    auto block{ConsumeDeserializable<CBlock>(fuzzed_data_provider)};\n+    if (!block || block->vtx.size() == 0 ||\n+        block->vtx.size() >= std::numeric_limits<uint16_t>::max()) {\n+        return;\n+    }\n+\n+    CBlockHeaderAndShortTxIDs cmpctblock{*block};\n+\n+    CTxMemPool pool{MemPoolOptionsForTest(g_setup->m_node)};\n+    PartiallyDownloadedBlock pdb{&pool};\n+\n+    // Set of available transactions (mempool or extra_txn)\n+    std::set<uint16_t> available;\n+    // The coinbase is always available\n+    available.insert(0);\n+\n+    std::vector<std::pair<uint256, CTransactionRef>> extra_txn;\n+    for (size_t i = 1; i < block->vtx.size(); ++i) {\n+        auto tx{block->vtx[i]};\n+\n+        bool add_to_extra_txn{fuzzed_data_provider.ConsumeBool()};\n+        bool add_to_mempool{fuzzed_data_provider.ConsumeBool()};\n+\n+        if (add_to_extra_txn) {\n+            extra_txn.emplace_back(tx->GetWitnessHash(), tx);\n+            available.insert(i);\n+        }\n+\n+        if (add_to_mempool) {\n+            LOCK2(cs_main, pool.cs);\n+            pool.addUnchecked(ConsumeTxMemPoolEntry(fuzzed_data_provider, *tx));\n+            available.insert(i);\n+        }\n+    }\n+\n+    auto init_status{pdb.InitData(cmpctblock, extra_txn)};\n+\n+    std::vector<CTransactionRef> missing;\n+    // Whether we skipped a transaction that should be included in `missing`.\n+    // FillBlock should never return READ_STATUS_OK if that is the case.\n+    bool skipped_missing{false};\n+    for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n+        // If init_status == READ_STATUS_OK then a available transaction in the\n+        // compact block (i.e. IsTxAvailable(i) == true) implies that we marked\n+        // that transaction as available above (i.e. available.count(i) > 0).\n+        // The reverse is not true, due to possible compact block short id\n+        // collisions (i.e. available.count(i) > 0 does not imply\n+        // IsTxAvailable(i) == true).\n+        if (init_status == READ_STATUS_OK) {\n+            assert(!pdb.IsTxAvailable(i) || available.count(i) > 0);\n+        }\n+\n+        bool skip{fuzzed_data_provider.ConsumeBool()};\n+        if (!pdb.IsTxAvailable(i) && !skip) {\n+            missing.push_back(block->vtx[i]);\n+        }\n+\n+        skipped_missing |= (!pdb.IsTxAvailable(i) && skip);",
      "path": "src/test/fuzz/partially_downloaded_block.cpp",
      "position": 104,
      "original_position": 104,
      "commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "original_commit_id": "a1c36275b5a27ae685f49ff02dabff0adbf51aa1",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:\r\n\r\n\r\n```cpp\r\n        if (!pdb.IsTxAvailable(i)) {\r\n            if (skip) { skipped_missing = true; }\r\n            else { missing.push_back(block->vtx[i]); }\r\n        }",
      "created_at": "2023-01-25T09:22:17Z",
      "updated_at": "2023-01-25T09:33:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/26898#discussion_r1086386318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1086386318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/26898"
        }
      },
      "start_line": 100,
      "original_start_line": 100,
      "start_side": "RIGHT",
      "line": 104,
      "original_line": 104,
      "side": "RIGHT"
    }
  ]
}