{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "id": 689007546,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Njg5MDA3NTQ2",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/22437.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/22437.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "number": 22437,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test, refactor: add GetTransaction() coverage, improve rpc_rawtransaction",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Following up on https://github.com/bitcoin/bitcoin/pull/22383#pullrequestreview-698583510, this pull adds missing `src/node/transaction::GetTransaction()` test coverage for combinations of `-txindex` and `blockhash` and does some refactoring of the test file.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "created_at": "2021-07-13T13:23:38Z",
    "updated_at": "2023-01-20T10:08:49Z",
    "closed_at": "2021-09-01T16:17:44Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-09-01T16:17:44Z",
    "merge_commit_sha": "7e75400bb568fe8a653246c4e76f6baab2455a61",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "jonatack:improve-gettransaction-test-coverage",
      "ref": "improve-gettransaction-test-coverage",
      "sha": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 173103842,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNzMxMDM4NDI=",
        "name": "bitcoin",
        "full_name": "jonatack/bitcoin",
        "owner": {
          "login": "jonatack",
          "id": 2415484,
          "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/jonatack",
          "html_url": "https://github.com/jonatack",
          "followers_url": "https://api.github.com/users/jonatack/followers",
          "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
          "organizations_url": "https://api.github.com/users/jonatack/orgs",
          "repos_url": "https://api.github.com/users/jonatack/repos",
          "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/jonatack/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/jonatack/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/jonatack/bitcoin",
        "archive_url": "https://api.github.com/repos/jonatack/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/jonatack/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/jonatack/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/jonatack/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/jonatack/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/jonatack/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/jonatack/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/jonatack/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/jonatack/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/jonatack/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/jonatack/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/jonatack/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/jonatack/bitcoin/events",
        "forks_url": "https://api.github.com/repos/jonatack/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/jonatack/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/jonatack/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/jonatack/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/jonatack/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/jonatack/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/jonatack/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/jonatack/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/jonatack/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/jonatack/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/jonatack/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/jonatack/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/jonatack/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/jonatack/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/jonatack/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/jonatack/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:jonatack/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/jonatack/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/jonatack/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/jonatack/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/jonatack/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/jonatack/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/jonatack/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/jonatack/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/jonatack/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/jonatack/bitcoin/hooks",
        "svn_url": "https://github.com/jonatack/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 217428,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-31T14:39:25Z",
        "created_at": "2019-02-28T11:57:18Z",
        "updated_at": "2023-01-03T22:00:49Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "81f4a3e84d6f30e7b12a9605dabc3359f614da93",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 313,
    "deletions": 301,
    "changed_files": 1,
    "commits": 9,
    "review_comments": 56,
    "comments": 17
  },
  "events": [
    {
      "event": "labeled",
      "id": 5013834920,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDUwMTM4MzQ5MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5013834920",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T13:24:39Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "commented",
      "id": 879102807,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTEwMjgwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879102807",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T13:46:33Z",
      "updated_at": "2021-08-31T20:11:18Z",
      "author_association": "MEMBER",
      "body": "Test output after these changes.  The slow legacy multisig tests are placed at the end.\r\n\r\n```\r\n$ test/functional/rpc_rawtransaction.py \r\n2021-08-31T20:07:10.312000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_uf3csrh5\r\n2021-08-31T20:07:11.886000Z TestFramework (INFO): Prepare some coins for multiple *rawtransaction commands\r\n2021-08-31T20:07:20.276000Z TestFramework (INFO): Test getrawtransaction with -txindex\r\n2021-08-31T20:07:20.306000Z TestFramework (INFO): Test getrawtransaction without -txindex\r\n2021-08-31T20:07:21.601000Z TestFramework (INFO): Test getrawtransaction with -txindex, with blockhash\r\n2021-08-31T20:07:21.605000Z TestFramework (INFO): Test getrawtransaction with -txindex, without blockhash: 'in_active_chain' should be absent\r\n2021-08-31T20:07:21.655000Z TestFramework (INFO): Test getrawtransaction without -txindex, with blockhash\r\n2021-08-31T20:07:21.659000Z TestFramework (INFO): Test getrawtransaction without -txindex, without blockhash: expect the call to raise\r\n2021-08-31T20:07:21.704000Z TestFramework (INFO): Test getrawtransaction on genesis block coinbase returns an error\r\n2021-08-31T20:07:21.712000Z TestFramework (INFO): Test createrawtransaction\r\n2021-08-31T20:07:21.944000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (bech32)\r\n2021-08-31T20:07:22.021000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (p2sh-segwit)\r\n2021-08-31T20:07:22.106000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (legacy)\r\n2021-08-31T20:07:22.175000Z TestFramework (INFO): Test sendrawtransaction with missing input\r\n2021-08-31T20:07:22.205000Z TestFramework (INFO): Test sendrawtransaction/testmempoolaccept with maxfeerate\r\n2021-08-31T20:07:23.777000Z TestFramework (INFO): Test sendrawtransaction/testmempoolaccept with tx already in the chain\r\n2021-08-31T20:07:23.858000Z TestFramework (INFO): Test decoderawtransaction\r\n2021-08-31T20:07:23.886000Z TestFramework (INFO): Test transaction version numbers\r\n2021-08-31T20:07:23.894000Z TestFramework (INFO): Test raw multisig transactions (legacy)\r\n2021-08-31T20:07:30.595000Z TestFramework (INFO): Stopping nodes\r\n2021-08-31T20:07:30.858000Z TestFramework (INFO): Cleaning up /tmp/bitcoin_func_test_uf3csrh5 on exit\r\n2021-08-31T20:07:30.858000Z TestFramework (INFO): Tests successful\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879102807",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5014356113,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAxNDM1NjExMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5014356113",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T14:39:43Z"
    },
    {
      "event": "commented",
      "id": 879332860,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTMzMjg2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879332860",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-13T19:10:45Z",
      "updated_at": "2021-08-27T16:09:35Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22788](https://github.com/bitcoin/bitcoin/pull/22788) (scripted-diff: Use generate* from TestFramework by MarcoFalke)\n* [#19831](https://github.com/bitcoin/bitcoin/pull/19831) (test: Check that decoderawtransaction heuristic may fail by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879332860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5019857686,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAxOTg1NzY4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5019857686",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-14T13:47:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5020048606,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAyMDA0ODYwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5020048606",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-14T14:18:50Z"
    },
    {
      "event": "commented",
      "id": 880161748,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDE2MTc0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880161748",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-14T19:46:06Z",
      "updated_at": "2021-07-14T19:46:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK 993189b1fe39cfc29e960ea3a20092309001fa8f very nicely done!",
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880161748",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5023893745,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTAyMzg5Mzc0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5023893745",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T08:17:18Z"
    },
    {
      "event": "commented",
      "id": 880497872,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDQ5Nzg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880497872",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T08:20:30Z",
      "updated_at": "2021-07-15T08:20:30Z",
      "author_association": "MEMBER",
      "body": "Thanks @mjdietzx!  Rebased to master following the merge of #22447, dropping the first two commits; no other change.\r\n\r\n`git range-diff 97153a7 993189b d27edf1`",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880497872",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5023910538,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTAyMzkxMDUzOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5023910538",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T08:20:31Z"
    },
    {
      "event": "subscribed",
      "id": 5023910548,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUwMjM5MTA1NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5023910548",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-15T08:20:31Z"
    },
    {
      "event": "reviewed",
      "id": 711046958,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzExMDQ2OTU4",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-711046958",
      "submitted_at": "2021-07-20T21:02:05Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 711070104,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzExMDcwMTA0",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-711070104",
      "submitted_at": "2021-07-20T21:11:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 711072535,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzExMDcyNTM1",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-711072535",
      "submitted_at": "2021-07-20T21:14:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 713302273,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzMzAyMjcz",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK https://github.com/bitcoin/bitcoin/pull/22437/commits/d27edf1d85f44c58029e0197251cca56873b860f on Ubuntu 20.04",
      "user": {
        "login": "lsilva01",
        "id": 84432093,
        "node_id": "MDQ6VXNlcjg0NDMyMDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lsilva01",
        "html_url": "https://github.com/lsilva01",
        "followers_url": "https://api.github.com/users/lsilva01/followers",
        "following_url": "https://api.github.com/users/lsilva01/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lsilva01/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lsilva01/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
        "organizations_url": "https://api.github.com/users/lsilva01/orgs",
        "repos_url": "https://api.github.com/users/lsilva01/repos",
        "events_url": "https://api.github.com/users/lsilva01/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lsilva01/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-713302273",
      "submitted_at": "2021-07-22T23:10:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 713795683,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzNzk1Njgz",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/22437/commits/d27edf1d85f44c58029e0197251cca56873b860f.\r\n\r\nverified that the test passes with #22383 changes.\r\n\r\nBelow are few comments regarding test coverage and arrangements.  ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-713795683",
      "submitted_at": "2021-07-23T15:09:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "commented",
      "id": 886105206,
      "node_id": "IC_kwDOABII58400OR2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886105206",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-24T20:04:50Z",
      "updated_at": "2021-07-24T20:04:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-886105206",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5126763350,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyNjc2MzM1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126763350",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:19:56Z"
    },
    {
      "event": "commented",
      "id": 894813926,
      "node_id": "IC_kwDOABII5841Vcbm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894813926",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:29Z",
      "updated_at": "2021-08-08T16:49:44Z",
      "author_association": "MEMBER",
      "body": "Rebased due to #22510 and updated with the excellent review feedback from @kiminuo and @rajarshimaitra (thanks!) \r\n\r\nCommit-by-commit changes (re-pushed a second time for https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854):\r\n\r\n`git range-diff db94d74 d27edf1 7f7e64e`\r\n\r\nThank you @mjdietzx, @lsilva01, and @rajarshimaitra for the ACKs. Would you mind re-ACKing?\r\n  ",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894813926",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5126771450,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjc3MTQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771450",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:29Z"
    },
    {
      "event": "subscribed",
      "id": 5126771452,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY3NzE0NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771452",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:29Z"
    },
    {
      "event": "mentioned",
      "id": 5126771454,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjc3MTQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771454",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "subscribed",
      "id": 5126771455,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY3NzE0NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771455",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "mentioned",
      "id": 5126771457,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjc3MTQ1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771457",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "subscribed",
      "id": 5126771459,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY3NzE0NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771459",
      "actor": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "mentioned",
      "id": 5126771460,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjc3MTQ2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771460",
      "actor": {
        "login": "lsilva01",
        "id": 84432093,
        "node_id": "MDQ6VXNlcjg0NDMyMDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lsilva01",
        "html_url": "https://github.com/lsilva01",
        "followers_url": "https://api.github.com/users/lsilva01/followers",
        "following_url": "https://api.github.com/users/lsilva01/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lsilva01/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lsilva01/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
        "organizations_url": "https://api.github.com/users/lsilva01/orgs",
        "repos_url": "https://api.github.com/users/lsilva01/repos",
        "events_url": "https://api.github.com/users/lsilva01/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lsilva01/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "subscribed",
      "id": 5126771462,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY3NzE0NjI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126771462",
      "actor": {
        "login": "lsilva01",
        "id": 84432093,
        "node_id": "MDQ6VXNlcjg0NDMyMDkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lsilva01",
        "html_url": "https://github.com/lsilva01",
        "followers_url": "https://api.github.com/users/lsilva01/followers",
        "following_url": "https://api.github.com/users/lsilva01/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lsilva01/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lsilva01/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
        "organizations_url": "https://api.github.com/users/lsilva01/orgs",
        "repos_url": "https://api.github.com/users/lsilva01/repos",
        "events_url": "https://api.github.com/users/lsilva01/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lsilva01/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T15:29:30Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5126822212,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyNjgyMjIxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126822212",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T16:30:43Z"
    },
    {
      "event": "reviewed",
      "id": 724909753,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI0OTA5NzUz",
      "url": null,
      "actor": null,
      "commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thanks @jonatack for considering the comments. \r\n\r\nRe tested ACK https://github.com/bitcoin/bitcoin/pull/22437/commits/afb4eab7a3d309c34357aa6ac54b03bebd15adfb\r\n\r\nIt might not be a good place to discuss test approaches here, but I have the following observations\r\n- I am finding that `getrawtransaction_tests` setup can be simplified a bit. Instead of 3 transactions (all in the chain) we can do the test with just one.  All we need is a tx in a block and its id. So if we simply start the test like this \r\n ```python\r\n        test_tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n        test_tx_hex = self.nodes[2].getrawtransaction(test_tx)\r\n        block1, block2 = self.nodes[2].generate(2)\r\n        self.sync_peers()\r\n ```\r\n   this will give us everything we want to do the assertions. This I feel will simplify the testing logic and would make the test easy \r\n   to reason about.   \r\n\r\n- The #22383 changes behaviour that if `txindex` is on, the `blockhash` searching won't take place even if it's provided. It seems to me that this particular behaviour is not being tested. I am also not sure what can be a possible approach to test this. But I feel this needs to be covered, as it's a performance boost, and we don't want future PR to accidentally change this.\r\n\r\nWould like to have your thoughts on the above. It's not necessary to have those changes in this PR itself.  \r\n\r\nBelow is a minor redundancy I found.",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-724909753",
      "submitted_at": "2021-08-08T16:40:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "commented",
      "id": 894827564,
      "node_id": "IC_kwDOABII5841Vfws",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894827564",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T17:13:25Z",
      "updated_at": "2021-08-09T08:20:25Z",
      "author_association": "MEMBER",
      "body": "@rajarshimaitra I agree, bringing together the various related tests shows that we can simplify them. I'll look at integrating the following diff based on your suggestion, which works for me, into the changes. \r\n\r\n<details><summary>code diff</summary><p>\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_rawtransaction.py b/test/functional/rpc_rawtransaction.py\r\nindex 84210d3a03..cc6324d9fc 100755\r\n--- a/test/functional/rpc_rawtransaction.py\r\n+++ b/test/functional/rpc_rawtransaction.py\r\n@@ -101,19 +101,9 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             self.raw_multisig_transaction_legacy_tests()\r\n \r\n     def getrawtransaction_tests(self):\r\n-        addr = self.nodes[1].getnewaddress()\r\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\r\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\r\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\r\n-        txid2 = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-\r\n         # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\r\n-        txid3 = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        hex = self.nodes[2].getrawtransaction(tx)\r\n         block1, block2 = self.nodes[2].generate(2)\r\n-        self.sync_peers()\r\n \r\n         err_msg = (\r\n             \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\r\n@@ -134,47 +124,44 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             if n == 0 or n == 5:\r\n                 # with -txindex\r\n                 for verbose in [None, 0, False]:\r\n-                    assert_equal(self.nodes[n].getrawtransaction(txid2, verbose), rawTxSigned['hex'])\r\n+                    assert_equal(self.nodes[n].getrawtransaction(tx, verbose), hex)\r\n                 for verbose in [1, True]:\r\n-                    gottx1 = self.nodes[n].getrawtransaction(txid2, verbose)\r\n-                    assert_equal(gottx1['hex'], rawTxSigned['hex'])\r\n-                    assert 'in_active_chain' not in gottx1.keys()\r\n-                    gottx2 = self.nodes[n].getrawtransaction(txid=txid3, verbose=verbose)\r\n-                    assert_equal(gottx2['txid'], txid3)\r\n-                    assert 'in_active_chain' not in gottx2.keys()\r\n+                    gottx = self.nodes[n].getrawtransaction(tx, verbose)\r\n+                    assert_equal(gottx['hex'], hex)\r\n+                    assert 'in_active_chain' not in gottx.keys()\r\n             else:\r\n                 # without -txindex\r\n                 for verbose in [None, 0, False, 1, True]:\r\n-                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid2, verbose)\r\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, tx, verbose)\r\n \r\n             # 2. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n             for value in [\"True\", \"False\"]:\r\n-                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txid2, verbose=value)\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=tx, verbose=value)\r\n \r\n             # 3. invalid parameters - supply txid and empty array\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, [])\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, [])\r\n \r\n             # 4. invalid parameters - supply txid and empty dict\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, {})\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, {})\r\n \r\n             # 5. with block hash\r\n             # We should be able to get the raw transaction by providing the correct block\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n-            assert_equal(gottx['txid'], txid3)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n+            assert_equal(gottx['txid'], tx)\r\n             assert_equal(gottx['in_active_chain'], True)\r\n             # We should not get the tx if we provide an unrelated block\r\n-            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=block2)\r\n+            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=block2)\r\n             # An invalid block hash should raise the correct errors\r\n-            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=True)\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"foobar\")\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"abcd1234\")\r\n+            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=tx, blockhash=True)\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"foobar\")\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"abcd1234\")\r\n             foo = \"ZZZ0000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=foo)\r\n+            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=foo)\r\n             bar = \"0000000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=bar)\r\n+            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=bar)\r\n             # Undo the blocks and verify that \"in_active_chain\" is false.\r\n             self.nodes[n].invalidateblock(block1)\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n             assert_equal(gottx['in_active_chain'], False)\r\n             self.nodes[n].reconsiderblock(block1)\r\n             assert_equal(self.nodes[n].getbestblockhash(), block2)\r\n```\r\n</p></details>\r\n\r\n> It if txindex is on, the blockhash searching won't take place even if it's provided. It seems to me that this particular behaviour is not being tested. I am also not sure what can be a possible approach to test this.\r\n\r\nAt first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894827564",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5126859061,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjg1OTA2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126859061",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T17:13:25Z"
    },
    {
      "event": "subscribed",
      "id": 5126859063,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY4NTkwNjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126859063",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T17:13:25Z"
    },
    {
      "event": "commented",
      "id": 894834554,
      "node_id": "IC_kwDOABII5841Vhd6",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894834554",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T18:11:48Z",
      "updated_at": "2021-08-08T18:11:48Z",
      "author_association": "MEMBER",
      "body": "@rajarshimaitra I've appended a commit with you as the author.  Let me know if the name and email `codeShark149 <rajarshi149@gmail.com>` are correct.\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894834554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5126904656,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyNjkwNDY1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126904656",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T18:11:48Z"
    },
    {
      "event": "subscribed",
      "id": 5126904657,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjY5MDQ2NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126904657",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T18:11:48Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5126906705,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyNjkwNjcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5126906705",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-08T18:14:05Z"
    },
    {
      "event": "commented",
      "id": 895003637,
      "node_id": "IC_kwDOABII5841WKv1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895003637",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T07:14:17Z",
      "updated_at": "2021-08-09T07:14:17Z",
      "author_association": "MEMBER",
      "body": "It could be a good to reorder some of these commits so we're not making one change, then changing the same lines again straight after. For example, in https://github.com/bitcoin/bitcoin/pull/22437/commits/10a3db049ce2858b4885472314567d05d6cc75cb you rename variables i.e `tx`, `txId` to `txid2`, `txid3` etc. However in the following commit (https://github.com/bitcoin/bitcoin/pull/22437/commits/c2d79955a833aec09ad2f7a064509bcdcdbd1cb0), a bunch of those end up being renamed again, i.e `txid3` and `txid2` back to `tx`.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895003637",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5128746283,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyODc0NjI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128746283",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T09:59:50Z"
    },
    {
      "event": "commented",
      "id": 895096970,
      "node_id": "IC_kwDOABII5841WhiK",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895096970",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T10:00:12Z",
      "updated_at": "2021-08-09T10:00:12Z",
      "author_association": "MEMBER",
      "body": "@fanquake yes, that's better. Reordered the last three commits and reduced the diff slightly in others.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895096970",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5128747945,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEyODc0Nzk0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128747945",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T10:00:13Z"
    },
    {
      "event": "subscribed",
      "id": 5128747948,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMjg3NDc5NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5128747948",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T10:00:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5129572810,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTEyOTU3MjgxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5129572810",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T13:03:03Z"
    },
    {
      "event": "commented",
      "id": 895407401,
      "node_id": "IC_kwDOABII5841XtUp",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895407401",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T17:32:45Z",
      "updated_at": "2021-08-09T17:32:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "tACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\r\n\r\n> @rajarshimaitra I've appended a commit with you as the author. Let me know if the name and email codeShark149 <rajarshi149@gmail.com> are correct.\r\n\r\nThat seems correct. That's very generous of you. You did the work, i just pointed fingers. \r\n\r\n>At first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.\r\n\r\nYes that occurred to me too. There is no observational difference between the two paths. So we won't know which one is taken. Probably something for a future improvement. Maybe all it needs is one debug log in the core logic, and with that we can check in the test.   ",
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895407401",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "mentioned",
      "id": 5131094340,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NTEzMTA5NDM0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5131094340",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T17:32:45Z"
    },
    {
      "event": "subscribed",
      "id": 5131094345,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDUxMzEwOTQzNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5131094345",
      "actor": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-09T17:32:45Z"
    },
    {
      "event": "commented",
      "id": 902574278,
      "node_id": "IC_kwDOABII5841zDDG",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902574278",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-20T09:47:46Z",
      "updated_at": "2021-08-20T09:47:46Z",
      "author_association": "MEMBER",
      "body": "ACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\r\n\r\ncode review (tons of great suggestions from others, so nothing for me to add), compiled and ran the tests locally, switched the `-txindex` nodes to non-txindex and vice-versa to verify tests failed as expected.\r\n\r\noverall, major kudos on the refactor. grouping the tests into functions made this much more readable. also +1 for more test coverage",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-902574278",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "reviewed",
      "id": 734889426,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM0ODg5NDI2",
      "url": null,
      "actor": null,
      "commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-734889426",
      "submitted_at": "2021-08-20T10:22:49Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 735487275,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NDg3Mjc1",
      "url": null,
      "actor": null,
      "commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Zero-1729",
        "id": 23586626,
        "node_id": "MDQ6VXNlcjIzNTg2NjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Zero-1729",
        "html_url": "https://github.com/Zero-1729",
        "followers_url": "https://api.github.com/users/Zero-1729/followers",
        "following_url": "https://api.github.com/users/Zero-1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Zero-1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Zero-1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
        "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
        "repos_url": "https://api.github.com/users/Zero-1729/repos",
        "events_url": "https://api.github.com/users/Zero-1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-735487275",
      "submitted_at": "2021-08-21T10:52:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 735487291,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM1NDg3Mjkx",
      "url": null,
      "actor": null,
      "commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "crACK f0aacf0\r\n\r\nNice changes! Local tests also passed 🧉",
      "user": {
        "login": "Zero-1729",
        "id": 23586626,
        "node_id": "MDQ6VXNlcjIzNTg2NjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Zero-1729",
        "html_url": "https://github.com/Zero-1729",
        "followers_url": "https://api.github.com/users/Zero-1729/followers",
        "following_url": "https://api.github.com/users/Zero-1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Zero-1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Zero-1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
        "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
        "repos_url": "https://api.github.com/users/Zero-1729/repos",
        "events_url": "https://api.github.com/users/Zero-1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-735487291",
      "submitted_at": "2021-08-21T10:52:58Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "commented",
      "id": 904445717,
      "node_id": "IC_kwDOABII58416L8V",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904445717",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-24T08:42:23Z",
      "updated_at": "2021-08-24T08:42:23Z",
      "author_association": "MEMBER",
      "body": "Thanks everyone for the reviews! It would be nice for this to be merged before any other change touching this file invalidates all the review. One can hope :)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-904445717",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "reviewed",
      "id": 739543669,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5NTQzNjY5",
      "url": null,
      "actor": null,
      "commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-739543669",
      "submitted_at": "2021-08-26T14:21:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 739544627,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5NTQ0NjI3",
      "url": null,
      "actor": null,
      "commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-739544627",
      "submitted_at": "2021-08-26T14:22:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "reviewed",
      "id": 739624964,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM5NjI0OTY0",
      "url": null,
      "actor": null,
      "commit_id": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-739624964",
      "submitted_at": "2021-08-26T15:34:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5232881400,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTIzMjg4MTQwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5232881400",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T14:12:56Z"
    },
    {
      "event": "commented",
      "id": 909293640,
      "node_id": "IC_kwDOABII5842MrhI",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909293640",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T14:32:12Z",
      "updated_at": "2021-08-31T14:32:12Z",
      "author_association": "MEMBER",
      "body": "Dropped the commits after d426cab86c1b, no other change to not invalidate review.  Can continue with the other improvements (test de-duplication, in-mempool txn tests, setup simplification, variable naming cleanup, and others) in a follow-up.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909293640",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjA3MzU5NGM5ZjViNTE4ZGMxZmI2NmRmYjAxODllODgwM2UzNTQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f073594c9f5b518dc1fb66dfb0189e8803e3545",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f073594c9f5b518dc1fb66dfb0189e8803e3545",
      "tree": {
        "sha": "ef102320d229f1fe85ad92262f29931c970e9e67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef102320d229f1fe85ad92262f29931c970e9e67"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ef102320d229f1fe85ad92262f29931c970e9e67\nparent db94d74f241410d6577b695d73184740797448e6\nauthor Jon Atack <jon@atack.com> 1625998723 +0200\ncommitter Jon Atack <jon@atack.com> 1630435877 +0200\n\nTest src/node/transaction::GetTransaction() without -txindex\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEueiUACgkQT1chs9Dj\nkh1kjhAAu5TZNK3ryxukfDtEzD5t8m2eSsC14/z+jQmRWdskm+jJ/drvYZVrNYVZ\nwnbcgFqglyvZeKhsPV13D9LXzdDIpbdp2bWlx9qH+12TI5Mhds2S1vHzknONE6V/\nA5V1P7xq2i5LKmR1KEpbc4NRvuUPizZr8ex6y2D1VZmGaFmIOsJ2FhXjPRzJvV8l\nHSofSGUnXHWuB+DvhX/3CqaV6+loxLu6668EmQXUsJWZm4gK2SgemWW2A4koyBAf\nz9n0T+2+Tgh5tsnfH4QuVSUV1fdzbsFAeGmdiuiDQI1wrA72Xphlw2drnBOafW54\nzdxE992MAsXoZHemf8JwPDTYVMZlm8uzC2tPQxZAi3lKwHtXbmklIEC1xDF/tyWC\ng+3bZuE15bW2b8NkW9O7Ppsspa9Vo6K8z9kAdHxEcxMo9kV0ivcke1HiXs6S/OV+\ncFze1Y+gUXHNebHhA+4q69XOLvi4Tg5YpEOPtD6oWafrc0TMk5pAjIz2xRHiIIEn\n4yyn6/YUQUvMubUvFJcqzanSC/wKi9E+ysQDYlt3QGlOkTTHSpD4SjYNVQRsfQZG\n72cKaxWGrAhtuyqJFERhxae2lYx5xekjigooPc9wf74o/aU46NSEIcfSlIqs7C0W\nhHkqMCzi5idXaeTHflJUo6kSz1VSW2VMlO3sYqa/K4Gf7EX6cDs=\n=VTp2\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMAFqPNjXHztwIT9UdMeieOqIiqP1q13BqTwlXK8ZdlrCP/wEFkLjkn+EB7N\nczj93SpJQtsI8QRhLnon8Ai8GHwAWKHn5wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wELzlPxdOtDI7RdRpcWAW\nn/0I8QRhLnom8Ais+SunkjxnIQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQxk5S4DQNB0EREIHlwSQeigjx\nBGEueifwCOEW9rhnRuuPAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BDTCncpr+dbTgMfSmOKc2jqCPEEYS56J/AIIdgC\nngiBxYQAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db94d74f241410d6577b695d73184740797448e6",
          "sha": "db94d74f241410d6577b695d73184740797448e6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/db94d74f241410d6577b695d73184740797448e6"
        }
      ],
      "message": "Test src/node/transaction::GetTransaction() without -txindex",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T18:51:17Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-11T10:18:43Z"
      },
      "sha": "7f073594c9f5b518dc1fb66dfb0189e8803e3545"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzE5ZDEzMjlmMWYyODAwMGNhMzJkODI2Y2VjZjA0NjgwYzZiZTY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c19d1329f1f28000ca32d826cecf04680c6be69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/8c19d1329f1f28000ca32d826cecf04680c6be69",
      "tree": {
        "sha": "098151cbe21c50edfb24269564d168b9b35f5424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/098151cbe21c50edfb24269564d168b9b35f5424"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 098151cbe21c50edfb24269564d168b9b35f5424\nparent 7f073594c9f5b518dc1fb66dfb0189e8803e3545\nauthor Jon Atack <jon@atack.com> 1626094134 +0200\ncommitter Jon Atack <jon@atack.com> 1630435880 +0200\n\nrefactor: dedup/reorg createrawtransaction sequence number tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEueigACgkQT1chs9Dj\nkh0N5A/8Ct8YTuubyeskI2JxJ4hpD3bU1Yh+V3NodBLkI+GkR1cy/nK+OP7zormG\n/cY4e6umAt6O2gusgtPW61cOTP46g12RYfAzNBZ6iHm8uxFcTPYhBWDu0DjFWrHA\n/Utj+zzvpPehHeTXEedS1qDIpKjW1o3bgjxrrHTIpZ0gugrTwPVPwYviZ0sTi53S\nhDCa4bI/sm1synTtFHJb97qJOxRlpMwq2bvcJBxHoh32opaRn6O3f81ff+p+JQvY\nHqQrfUaJzXTgLHmjhFFuSuT5ePvbH24UcC9MA8i+QYhqKRiJbHUN125W4Hcnegd7\nD6yF9tIOoWwX/f9rJKVtuRszPRSLCAouxi67b39ozq02yqxihJpIY/aSq9/nnDKq\nnlQHKPSRS+vSzkNdh+1y65JbS4XNPcTDv/UwGd82Rbf5PAipXzJ3SSPa/hGkMJMA\n33nG+3w+99nQxPVIPi9SKR95dp4MRDaAEU1qE+cMVkgp7TAMN1gS5iT8tutYKSR4\nq8neJXRDZ8vjW+NtRISmhLV0Xp6oT7Ur/lnuc4RqtdcJW3rvLHkZXeZ8sjrCnKrl\nvuqvvfsPIo+vMcZ7pYHI4mIdzEZzuTuvGGBIintzn1gQ5NfbY6f4ke0h2fp5sJo7\npUplk4H+BIwmPJBy0dgACX3Vf+HcsUaC4YED+QqHEL8b5ge+7aM=\n=HhZl\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFJnShjWTfPkm0Y3iBcIa7QQ+U700f5biYqo8OlyJyHgCP/wEA3sNEPayCZT\n4aWRi/PRDO8I8QRhLnoq8Ag3DFzaBPi7dgCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEEeEiNFsYU6LAcxPppCZ\nbF8I8QRhLnoq8AjyEqUCesf1NgCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEFARktQ11T3eOUQ4neaerGQI8QRhLnoq\n8AhOgQWrn36KdgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxs\nYXh5LmNvbfAQjdsP2/HwloO3wGitmEij7QjxBGEueirwCHYxEgPovnNdAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f073594c9f5b518dc1fb66dfb0189e8803e3545",
          "sha": "7f073594c9f5b518dc1fb66dfb0189e8803e3545",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f073594c9f5b518dc1fb66dfb0189e8803e3545"
        }
      ],
      "message": "refactor: dedup/reorg createrawtransaction sequence number tests",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T18:51:20Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T12:48:54Z"
      },
      "sha": "8c19d1329f1f28000ca32d826cecf04680c6be69"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDk3NzQwNzczMjk2OTU5MzgwMGQxNWRlMzlhYmJiN2UwMjUwYWJj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00977407732969593800d15de39abbb7e0250abc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/00977407732969593800d15de39abbb7e0250abc",
      "tree": {
        "sha": "f5d0ae6d187eafe4c30c30bb6701e63b9097f3d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5d0ae6d187eafe4c30c30bb6701e63b9097f3d1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f5d0ae6d187eafe4c30c30bb6701e63b9097f3d1\nparent 8c19d1329f1f28000ca32d826cecf04680c6be69\nauthor Jon Atack <jon@atack.com> 1626099141 +0200\ncommitter Jon Atack <jon@atack.com> 1630435883 +0200\n\nrefactor: txid to constant in rpc_rawtransaction to isolate tests\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEueisACgkQT1chs9Dj\nkh0USA//XDdjyuliC5x6d18Mg+JMO+cpU4JCAkd1yDF1MHmTiv1A4acD0ruJh4tZ\n85WKsZISBhATAM7mPrN6RJu3+Bva5tM9HQ/SApdMP6puQlYdsBmXmsHEs0LEqQHY\nSMCL7ToaoVm6HNIclfVt8qptsKmxe7Ova483nXppnjRkcthHKL+4IHoFyxCAR+/9\nbjiZ+3/hZ9JQ9EZBvcF37krCxrSc1Uia/m1iRaj6+qDyUYLNmPjKmtizsIeQxRaf\nGzvhq4iD4SlnEcOODuDSNgcw8J8xVkS2jIXo32OM0GoopuZOJbrsngKddhVPkhpc\nEdJPM0TlaqL8UsnKVAnyKPShdRe8ry1dvd8L67+7NNFxiv6iJB4fCOAoFyy9dY1G\nxF9s8bIJZ7AD+7gMfk0tbCPHzOHdh8xyExbbIMBx6wxUBEOztahiHyCXGqR2UgaK\nePmob1BLsbYSUVSuW60dyFIi04deiFoFFNplbNz8bC1KulS0vjpU8OuO+IRBS2wv\nx/aA+L9aM9TtL8HtC7/6B9zphqGGOY9SaNCZNMV9BeW8FrOPzp4CwX2CB3YVin9r\nHxC7PwHXw025sGoXtKFjX5nh8iB/z+KQ96ZTwWrzBgb4DqF0OfAmhuJmNfG8p85f\ncNapFpLp5ReHh/3QUm0jNQxwSW454OyvSTzOTTYtsmY0V2Uf0Uw=\n=OthW\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIM2+47Y92OaOnzkdcq5Qag+v3dQoEqPeqxMTe0sIyBzdCP/wEAtsAcKKtmTS\naY7HU2tkSfUI8CD9EVwdtQcdP5VrlxGtzUVh0ttNIfGobng5s+mGGCm2uQjwIM9Q\nwEUyxoQOmtwq3s+Qx6Tx6VD7VuAfWsXj+BcpF+/vCPEEYS56LfAIDdltIMwTueEA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BAixKcLzNgjk5i7G6OD90u8CPEEYS56LfAIdNx7ajxh7YMAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BBt\naxPLnY3qOZ9Pj9Bm7iEtCPAgdeex9AAVtDuYR+3xGEdQ+d9lB/07LZMUylWQph9B\n3UEI8QRhLnot8AiUHf4cDDOQ8QCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQjKN63DEm/bu9GISV+Rf+RQjxBGEueizwCOcJepVn\nZdicAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c19d1329f1f28000ca32d826cecf04680c6be69",
          "sha": "8c19d1329f1f28000ca32d826cecf04680c6be69",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/8c19d1329f1f28000ca32d826cecf04680c6be69"
        }
      ],
      "message": "refactor: txid to constant in rpc_rawtransaction to isolate tests",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T18:51:23Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T14:12:21Z"
      },
      "sha": "00977407732969593800d15de39abbb7e0250abc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWQ4ODY5Y2Y4OWZlZGYyNDM3NDhlM2UxNWIzZWQzOWRlMWIwMzg1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85d8869cf89fedf243748e3e15b3ed39de1b0385",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/85d8869cf89fedf243748e3e15b3ed39de1b0385",
      "tree": {
        "sha": "9d85b4dbb534d3dc05601014b0ad75aaafe8015d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d85b4dbb534d3dc05601014b0ad75aaafe8015d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9d85b4dbb534d3dc05601014b0ad75aaafe8015d\nparent 00977407732969593800d15de39abbb7e0250abc\nauthor Jon Atack <jon@atack.com> 1626010962 +0200\ncommitter Jon Atack <jon@atack.com> 1630435886 +0200\n\ntest: run 2nd getrawtransaction section with/without -txindex\n\n(and make the 'string \"Flase\"' test clearer as requested by reviewers)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuei4ACgkQT1chs9Dj\nkh1Ldg/8CO493aw3F1ifZvUAlwHB400m3F4bRzobC6Im/Ms0KMZgWILw0eAS5wF4\n94P5UN4dTwCzoSKHVWfK43HF3GK9D0yoj290Lu8g1EgrD+EFcycdgAxBcJV8QZR8\nVyZYTUGF+/40Cht3eHPxpsaCCoxElJ4na6qYTv4ApsRzCtWAPFy3RTG/Nj61ujVg\nlgNfRhgFPzscIXJEWLzDYlFRP7YqUsqddP6FdN+T0J9sRv5syJsFO7ErwPuv5U9/\nSxLGoQZUflehFkTnffVPND8P71PHhFmh6AZqx3SRkjyZJ9/svAN1vmHJjRH6Qs2h\nccK1JOt4Qrf0mO5ZSki1dufxKJkjdksciqxbU9sYrbMV4JF0+fHdtNrYwb+VxdZr\n/E7nFbAY4vInwi4JssjCE7bxQL5wKYnnLbzpGZDWAaJhVZJbC0h/ms/+LT0v26bS\nW81TPb6YRXZ4Ff5xm72anCA6Iwu09x1v4q6wlXdTYn971KTcycWAOFgLCXOle6Oj\nWZk3bglYgzNGgXJ/d64hy/nIlsyIUK9DgQT/fgUqKxgyaK1y6I7eFq//T/P7CqCp\nXtu6mHu0MgUKbJMiilYLg3EKeJteABdAYrtwUdsFJjf3iXXbo24tFeQ21v8x8UAx\n6Lxc/dN/syDpY4ZoIzt9cMbuYd03YnfTPbBtMre9uaOL05W16FE=\n=yd5x\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOxIox5OFKVPTxRVnHrKs7yrWNd0yu9hDvE+/7Oxp1kcCP/wEDoTpaypjVAK\n6zu2T7kxZ48I8CBikV/MRfuLFzoDXQaGgi2Wzj0G3j4IbAopUftwGjRDdAjxBGEu\nejHwCILHd61oJG3tAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQwFTMyTr1avh14zDAikvMOwjwIOCEj4dOt4KwK5iR\n2tpP2MaMw1g1QYWOQkFqIn30jptwCPEEYS56MPAIUFLv+qNBoKoAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmf/8BDG\nd6orjo2Z82dHOGZMcbKVCPAgmKh1pa+zJw06wNT/KgM2YnHmgRA0BC/bagLlcWlU\nwPcI8QRhLnow8AgbPAg6/HPucACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQ89o+QeHRn4rtnxYgOlaU7gjxIJOxacu2fD0Ke8ic\n7J6LUdbS4Ku1FupHgJdPpPIbHpTwCPEEYS56L/AIgg6qZnSag3oAg9/jDS75DI4u\nLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00977407732969593800d15de39abbb7e0250abc",
          "sha": "00977407732969593800d15de39abbb7e0250abc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/00977407732969593800d15de39abbb7e0250abc"
        }
      ],
      "message": "test: run 2nd getrawtransaction section with/without -txindex\n\n(and make the 'string \"Flase\"' test clearer as requested by reviewers)",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T18:51:26Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-11T13:42:42Z"
      },
      "sha": "85d8869cf89fedf243748e3e15b3ed39de1b0385"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5234776242,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTIzNDc3NjI0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5234776242",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T19:42:30Z"
    },
    {
      "event": "commented",
      "id": 909560320,
      "node_id": "IC_kwDOABII5842NsoA",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909560320",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T19:47:43Z",
      "updated_at": "2021-08-31T20:08:02Z",
      "author_association": "MEMBER",
      "body": "Squashed the first two commits per review feedback and made some minor improvements per `git diff d426cab 387355b`.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909560320",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDM5OGIzMGQ2MjQyZGIxNDY3MGIzMjg2Zjk4OGIyYmFkZGE4M2Zi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14398b30d6242db14670b3286f988b2badda83fb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/14398b30d6242db14670b3286f988b2badda83fb",
      "tree": {
        "sha": "3ee00a69523c49d3cfc66a72ce6253dbedd815b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee00a69523c49d3cfc66a72ce6253dbedd815b5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3ee00a69523c49d3cfc66a72ce6253dbedd815b5\nparent 85d8869cf89fedf243748e3e15b3ed39de1b0385\nauthor Jon Atack <jon@atack.com> 1626095609 +0200\ncommitter Jon Atack <jon@atack.com> 1630439700 +0200\n\ntest: add and harmonize getrawtransaction logging\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuiR8ACgkQT1chs9Dj\nkh2azBAAwWWMS8XCc8G5w29BkG8FR2lX6dIzXkzhhRhgGV5GTs+H3nF/onZd+BTG\nD+VpNRwDb0DyelrYvMcC9AIj25TwTUdKEjSJyUbQPZJB2cjzEPfchVlnfAW6ni1o\nt1GyJYY4f15xSEhKTR8HkJdlj/8TV1YBCyHK49YnRL47C6QAC5RnGNl7UqEL7red\nLzepdiEKQb9m3c97T4MI78YdmGxqMEHLunDlxmMT5g5g4rsw/omuuqiZOuYnu6ET\nF1emfZWmCOYWNCbjUd0zEAASiW1K/Zlo3X806IqXfu5DyvVeEUSBWZUuLT+djwax\nqToV9EKKE2dOfgfHnucSrDhnT66/P+pGrDRWRm71Pp1ya8rh3QIumq2gXFZHa0fH\nBwhEBOasDT1xzlsOkmz0C9ZBWmwC/PrcKVpSRz9xfEf+QTAiPtorVqh1qrIu8UEj\npD81GJZ+2evPske3/ZOo26/b9uzfPrxuGr9IfaTyWc1eOoUIYFjcDkNVQRtwFj/l\nxSRIq0tENKocyvartsTPoe4S5dapQhSY1EkUHFc8pjYQnT5mK8VMLp0d6x7ej6LE\ny2TVYWtdR6UtvJ2tpn+cetF+nzuL37SCCp0pifXvDVdJPcJlQWEboGh/h0x38uQ1\n1khGdumZEQ/KWGbO/1r4cCZ/eJTeT9X/cdSxGY8XFjkuNeSI7ck=\n=9iZ0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDjhxQeOnocyMoWFf+apBjL21s5mDNoI+jzykwYAiYRkCP/wEGdg2xYVawPd\nrwnyziE0ElEI8QRhLoki8AjaHJn4wZSs2QCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEHiHU4GmDt3A03Y3A7XNEqoI\n8QRhLokh8Ag3A/F6bQTFWACD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEOMi5/qUyzpjmRrC3rnR/bMI8QRhLokh\n8AhZ6mBMUsf9ZQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDuJhGXJrbXmDr25XhTpDW6CPEEYS6JIvAI8Itv\n2v8r1cIAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85d8869cf89fedf243748e3e15b3ed39de1b0385",
          "sha": "85d8869cf89fedf243748e3e15b3ed39de1b0385",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/85d8869cf89fedf243748e3e15b3ed39de1b0385"
        }
      ],
      "message": "test: add and harmonize getrawtransaction logging",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T19:55:00Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T13:13:29Z"
      },
      "sha": "14398b30d6242db14670b3286f988b2badda83fb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODYxMDQwZGQyNGEzMjFlMWNlZWMxZjA3YzdiYjgwZDU5Nzc5MDgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d861040dd24a321e1ceec1f07c7bb80d59779081",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d861040dd24a321e1ceec1f07c7bb80d59779081",
      "tree": {
        "sha": "a8a25656f9f4157df13ffb96e13627c7bd38d005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a25656f9f4157df13ffb96e13627c7bd38d005"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a8a25656f9f4157df13ffb96e13627c7bd38d005\nparent 14398b30d6242db14670b3286f988b2badda83fb\nauthor Jon Atack <jon@atack.com> 1626095803 +0200\ncommitter Jon Atack <jon@atack.com> 1630439715 +0200\n\ntest: remove no longer needed (ASCII art) comments\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuiSMACgkQT1chs9Dj\nkh3A+w/+NQC4VCr+nKMhez3E0AXr2zloPNtohHgHj6Vnj28mUVqVKK9sA9XzBIJe\nU2h/KmmC9z81KCljnJh7Wj/7na0cBXV6kZkOcnlgVC9izzmzl/fMSHU7Y3soPspe\nr69eUJzm9ZO4i4BOyrNDc7/G2/8nxDlOlKGvsD/S14ZO2TlkGDdPUgAS1OrY8N/d\nTep+fgrmveBwv409bPsM4XOJcaDB3ubkE9UYwcq27I8PI4tyd0mAacRRNSUydrQi\nk5S/tw95NhmLeQcFKhhN9u9lqm8Y2Xy1jTT+8+V/zMMEio8IQe/2lYU2VUnZ+BGH\nxBx2Y/bAc9vNwoGBTOl2Kr3MNjPZfzEY0KWdZ+2PbCJq86opRDSxDJKt/qB2yuFK\nvGiqeGiPrMu62TAtfjrGR1Q4cgnryIg/Xyt/Jsvz4F7iAPPIv+dXM7ne0zh2jbOH\nOlzfJjqEmN2drAcqSn1BuX4Yd/TIaUIKd1c3HSg0uSnD3taDpSpqM/SStRz5hftL\nkXbxDtccztofSHEiRLSUzVIJfA2qYCNlJrbJ0pVAv4fnXiKm9SXL3ZoxQ1gzgCQ4\neeF6oevcip778pIWn5hZqxjY8AVc/UfF4QRcAbwSqM5mvrYxsvbDwas/CFnyIDij\nEduC3V1ZCO1nqModLkwuy1pmcmywNuexDSaXtL0EdJ2jTi7pVGs=\n=3uKG\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBR/3Vzn4dv2A2IMGb0lA2xNThaDTSBwoMv70otvBqSrCP/wEDC87myLTjtb\nyel6UlSynYkI8CAcX9vkrF229z+3vEc/ooCun66sRWw3u+WuaA9iyChtqwjwIDmY\nRJOpYP3FSGRdZrWS8a75gyWWzQLlEtHnKn2GopnaCPEEYS6JJfAI5GJVCqENMIUA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BBGUBnf1F5Ln86YRAn5989qCPEEYS6JJfAIm5FoMYDlZmsAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23/8BCt\nX+WZIAXZrrvci9hzKhmGCPEEYS6JJvAI3e0/ijKc0P0Ag9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ8+kQgw3/\n1D4ugowCTuhE0QjxBGEuiSTwCDTOcPYyXo67AIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14398b30d6242db14670b3286f988b2badda83fb",
          "sha": "14398b30d6242db14670b3286f988b2badda83fb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/14398b30d6242db14670b3286f988b2badda83fb"
        }
      ],
      "message": "test: remove no longer needed (ASCII art) comments",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T19:55:15Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T13:16:43Z"
      },
      "sha": "d861040dd24a321e1ceec1f07c7bb80d59779081"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDk3NzlkZjk1Zjg4NmIwOGRiZjZkNDQyMTllMmZiZWIzNDA1YTQz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409779df95f886b08dbf6d44219e2fbeb3405a43",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/409779df95f886b08dbf6d44219e2fbeb3405a43",
      "tree": {
        "sha": "92ea97a5c10e57d0f8ead5fb28ac813ffceaa7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92ea97a5c10e57d0f8ead5fb28ac813ffceaa7cf"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 92ea97a5c10e57d0f8ead5fb28ac813ffceaa7cf\nparent d861040dd24a321e1ceec1f07c7bb80d59779081\nauthor Jon Atack <jon@atack.com> 1626097341 +0200\ncommitter Jon Atack <jon@atack.com> 1630439847 +0200\n\nmove-only: regroup similar rpc_rawtransaction tests together\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuibIACgkQT1chs9Dj\nkh2c6g/+L+1hNLTd3F8YVdrxqmFFwp5VLmA16uMPbaZ68OIe62lKGF1n/aKiG2Lv\nQ9zU4HQXMuRwxbHdMSIYbU8rBOaznPrZgqjPGL/GlNND/mIMNrskF9FJ7mUtXSlE\ngQ7hVXlrBrMEjL2SzVCIUhH4dsJrAj3GM63W+stuqvLyISQGGiZ15WI4Ga1uyL+I\nMgksfZHKpWHj2qaEImX6utHa8LqVJqptVr9xy7OrHoeAAgeMNuy7s6eMTokmBi1c\nAi2QAS8fEmJX+xPQxQPEVkUHjrzXPLQYSE1e1UKywolgkOUl/bthK7fCcZxRbQA2\nRG6SG5DyasKCrZcFxZFOMrd1dIYdIgOcASdowdx0DlC4qmf4dbaBAdDb5f2n3EeK\n85ZNOtxDwimPYk8/t1PxpSyCyfDUHBw2Ojg6WLB5wYDZXcEhkD91rDd2pHBsxxyu\noAAsyzXzRImKvFn+BnmCuYd9QETFsEMTerAl+2jRl30qUAVnwMJK/NfJFKctb/Z4\nLuLIuhlIZzb8DIHYcS8Mxc6fuIOBZe7ZPY9hBLlfedzEsV1lJGEHZUxaKFsDzO80\n6nDVDTrpy9wssYaLlgfzXLS8YGRQ/7pQqeqbrbpVqZ31Zj9hs0nA38pI9BsO6qat\nS7+i1I2/hOnGLJVsn8O54JiOUYB6YsFRw8F5z9CmQgm0YnVpXJA=\n=zpqu\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFN702KIx0xMs4MdGLLtryqVzO1aeP+pJXeof0JrNV+MCP/wECD18wRiCe92\ndSQ21a2iYM8I8QRhLomz8AjCHd1o8L/VnQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIicQWCl7i720S5rd/CFiBoI8QRhLomz\n8AhJKUOdSE62YQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQtt89WGPV7gLxWl2h5GF1BAjxIJwMgfK3jcnN\nC0ueZTSlldBrLhB8AOalHrx5DQcFeRADCPEEYS6JtPAI0zqTUECZlkIAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEMAv\nSPbtMRZ0rIgijKfIC9kI8QRhLom08AiOmkjnW/GV7gCD3+MNLvkMjiwraHR0cHM6\nLy9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d861040dd24a321e1ceec1f07c7bb80d59779081",
          "sha": "d861040dd24a321e1ceec1f07c7bb80d59779081",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d861040dd24a321e1ceec1f07c7bb80d59779081"
        }
      ],
      "message": "move-only: regroup similar rpc_rawtransaction tests together",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T19:57:27Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T13:42:21Z"
      },
      "sha": "409779df95f886b08dbf6d44219e2fbeb3405a43"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDVjZWMyZTQ5OGRjMDU5ZmYxZDc0YTJiNjA3NjRkYjQ1OTIzMjY0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d5cec2e498dc059ff1d74a2b60764db45923264",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5cec2e498dc059ff1d74a2b60764db45923264",
      "tree": {
        "sha": "9baae38f9ce7e5372910cdffa41ef69b59922338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9baae38f9ce7e5372910cdffa41ef69b59922338"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9baae38f9ce7e5372910cdffa41ef69b59922338\nparent 409779df95f886b08dbf6d44219e2fbeb3405a43\nauthor Jon Atack <jon@atack.com> 1626098688 +0200\ncommitter Jon Atack <jon@atack.com> 1630439978 +0200\n\nrefactor: separate the rpc_rawtransaction tests into functions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuijQACgkQT1chs9Dj\nkh38bw//UwWvS+aF8loy4AiJaUcAWuILrUuEKQ/0iHl9rnBkL5/TWO7CfCeBuUp+\ncAOHw75zcjkCnuBVBGGFECJcTzj7axncZ8AX4FmbC3VppGdl+C2AVSkGrnlVOVNw\nBoGnSSKpI+SwQyFA514w4DdDp43ZNXaWSps5CvnKP4Bg+sq+Xt2hZIQOdP4wCGjr\nurY37yGidx/JmDF1yDcyT7qmyk3Eg5zbI/pC768/M6n5nq85Xn2vZ56ZhJLX+F59\nMjeR9EZysKFhsvGI2qtHbqGcUc0gMEmmeY0BsIEmu3WA7lXQ8GaIhma0BTVT8Jf+\nzomvcIMzTgvpAXW+QC5nAbGwZgTJrsEnY2+o5nXjjtVSduhbZponJVl+JODe8FD+\neJyup9rSV1Jni8XiqyZ00rQq4TMQelnaNr/0exWavqjSrAAxipzMHOa0qyyG5a0N\nhS5s7SIYJU6DgXB9GNGlT7zikF0s8AdbpCipzPGuR0Rzo5wQxfCAFjMkfWOe8ygx\nTG43K5C7PRvd9sEpD16/B20vfkf5qxrl7jfpDDFMmVG5Qe0ro4pszAJVpS/EXAhH\n9earXk2SatH+C/E8rrLuv9zbrNFjJG37fERKCqbLwIx5bOnneI5zejvSTkFuD+wR\nRsGZ7uX6/JJ8/zczbVXCr++YIHHIUeVhklmUVrDaS7Wu03bNnOM=\n=A6gc\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOa88DKNg4I5W0oMayZe83MSZVnO+y6Kcy/JsWevhb0DCP/wEDYH0GDCywb4\noDszyyP+X3cI8QRhLoo28AjFZ4JGTIs5mwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEE1ZexIqHlqaqdzAoKvZ\n8IgI8SCI/PmP+i1s2LbYPi3OGWB/ZOBrr6WNn3gYXxlzxPlozQjxBGEuijbwCFCQ\nO+ZKNQOBAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t//AQbvd4lpjkJJSEOEg83K4VqgjxICY4xmSqKfYCKWJcCEHkwmVM\nxpQtCXvBuVLhr9N40Z3ZCPEEYS6KNvAIptYI/gYTc30Ag9/jDS75DI4uLWh0dHBz\nOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ0M8ZskgW\necrDtjCzUE0uLAjxBGEuijXwCKK9Q22VPZ+YAIPf4w0u+QyOIyJodHRwczovL2J0\nYy5jYWxlbmRhci5jYXRhbGxheHkuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409779df95f886b08dbf6d44219e2fbeb3405a43",
          "sha": "409779df95f886b08dbf6d44219e2fbeb3405a43",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/409779df95f886b08dbf6d44219e2fbeb3405a43"
        }
      ],
      "message": "refactor: separate the rpc_rawtransaction tests into functions",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T19:59:38Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T14:04:48Z"
      },
      "sha": "7d5cec2e498dc059ff1d74a2b60764db45923264"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODczNTViYjk0ODJhMDljMWZjOWIxMzdiZWE1Njc0NWE5M2I3ZGZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "tree": {
        "sha": "ac8214d1b3ba3f5cbf3195296358a1f9dd3a9c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac8214d1b3ba3f5cbf3195296358a1f9dd3a9c26"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ac8214d1b3ba3f5cbf3195296358a1f9dd3a9c26\nparent 7d5cec2e498dc059ff1d74a2b60764db45923264\nauthor Jon Atack <jon@atack.com> 1626100716 +0200\ncommitter Jon Atack <jon@atack.com> 1630439991 +0200\n\ntest, refactor: rpc_rawtransaction PEP8\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmEuijcACgkQT1chs9Dj\nkh3Rqg//R9J+vy37ypt31RkBjNUk2QIYn+2cHWcG3FsXhcWTMob7q9iW8gvoccXi\nvwFJjU8Eet/58vhbKeqy4nLBJmshftEyjJlgcIZ5be2uUoV+gb4ryUDKwRdm2jp7\nwbihG1dvJ7Zp4o0IOcQeih0rcS93CL/jM3X9tQp2qoaksmjWHMhNIHmggkj2Tmp5\nW/UUN1HFPpIhwHOiVNPXCoTmK0h0Ki0RBGj7aXzeJnO++zJXcfDL901Np4jUNeSO\nKzsnuB35q7r/0IYmNmBUQAavgatnyRorg6yVOcauO+Jgref6ACjJav1VTT0istKN\nj7iLV08wcnfEkK+5qHp4ueiSGfn/yVcyuHn9q/o6p38Pqks+qTMFLjmwJ2PsuhG3\nTh3j4v/VeqEy+H9kIPCqJfGcIA5dB8zKU1MqhSUbmNGq7m25AD3OpqbqaLpPkAp7\nIYChSd0AVTKb3yLtxp9zrzbpcJosLfVfx3RMl1IfRun44RbRk/MYZ79jz8K5NmsU\nZ7m+TRrZVVymrhED/3EhMPCy1W1dhKJapnrRa2svRJTQIFXtne8Z0m7I3IfpxlOE\nPglROBxv/Lazj+wgP+U9ydCllzaN61UiMRhbI/7vOW0roHGTCQdJulS2lLQKL7/k\nC7YrVJcdq1/59bpwUsSCF9C38OhU9vZOejscaw+Tb1jaTKsKMQs=\n=KOc7\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGimXQgdFMHZTg7rJPzLv6FUV2iIJSITcs0Fimvssi3SCP/wEDAUoUjIsQKr\nEV8AazAS2ZEI8QRhLoo48AijZ3Svzk4iJQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEJWRSQTzOYme215ghhQF\nKIoI8QRhLoo58Aibxo3T64W4PwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEOWdBWEFcZmFF860kApG1ScI8CDoIEEqCyLpbY9/\nNCLwuErnFJAYPAWrIQ/vVnmC6DnfEwjxBGEuijnwCA5Ogerb/1WdAIPf4w0u+QyO\nKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t8BDzRtKW\nL4KnbnT0hQkmNqBhCPEEYS6KOfAIH0cExnlrerkAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d5cec2e498dc059ff1d74a2b60764db45923264",
          "sha": "7d5cec2e498dc059ff1d74a2b60764db45923264",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7d5cec2e498dc059ff1d74a2b60764db45923264"
        }
      ],
      "message": "test, refactor: rpc_rawtransaction PEP8",
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-08-31T19:59:51Z"
      },
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-07-12T14:38:36Z"
      },
      "sha": "387355bb9482a09c1fc9b137bea56745a93b7dfd"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 5234923557,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NTIzNDkyMzU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5234923557",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T20:07:52Z"
    },
    {
      "event": "commented",
      "id": 909627060,
      "node_id": "IC_kwDOABII5842N860",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909627060",
      "actor": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-08-31T20:52:08Z",
      "updated_at": "2021-08-31T20:52:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "reACK 387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "user": {
        "login": "mjdietzx",
        "id": 7217256,
        "node_id": "MDQ6VXNlcjcyMTcyNTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mjdietzx",
        "html_url": "https://github.com/mjdietzx",
        "followers_url": "https://api.github.com/users/mjdietzx/followers",
        "following_url": "https://api.github.com/users/mjdietzx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mjdietzx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mjdietzx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
        "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
        "repos_url": "https://api.github.com/users/mjdietzx/repos",
        "events_url": "https://api.github.com/users/mjdietzx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909627060",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "comment_deleted",
      "id": 5236145379,
      "node_id": "CDE_lADOABII5844Ora6zwAAAAE4GTzj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5236145379",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-01T01:38:39Z"
    },
    {
      "event": "commented",
      "id": 909949154,
      "node_id": "IC_kwDOABII5842PLji",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909949154",
      "actor": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-01T06:31:24Z",
      "updated_at": "2021-09-01T06:31:24Z",
      "author_association": "MEMBER",
      "body": "reACK https://github.com/bitcoin/bitcoin/pull/22437/commits/387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "user": {
        "login": "josibake",
        "id": 7444140,
        "node_id": "MDQ6VXNlcjc0NDQxNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7444140?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/josibake",
        "html_url": "https://github.com/josibake",
        "followers_url": "https://api.github.com/users/josibake/followers",
        "following_url": "https://api.github.com/users/josibake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/josibake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/josibake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
        "organizations_url": "https://api.github.com/users/josibake/orgs",
        "repos_url": "https://api.github.com/users/josibake/repos",
        "events_url": "https://api.github.com/users/josibake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/josibake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909949154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437"
    },
    {
      "event": "reviewed",
      "id": 744137174,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzQ0MTM3MTc0",
      "url": null,
      "actor": null,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "nice. Thanks.\r\n\r\n\r\n\r\nApproach ACK 387355bb9482a09c1fc9b137bea56745a93b7dfd 🔆\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nApproach ACK 387355bb9482a09c1fc9b137bea56745a93b7dfd 🔆\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjpnQv/d+jQxCI/GaFHTfHIOmYvfjLAIVoaPnCfJYPoRavcXA92Ov2DiktzzN2j\r\nj8s0Y7Jy86T33aBsbFnGBxM5hWG/WpaceaR7Ga3ixRMQce8TRB9Hng+ab9SuhL7I\r\neQUdaCAYCDr8pRdY3lmcOOJGzSPNKdiuf2cfFwyDL287VCXrn4JNCTOHZBfjknBu\r\n8aTzGoJXkbbCtxQ26+aNFn4otQrQES9x8VkfrCUbGrUG9wrq64lbhqeoKq3rg6cd\r\nZbcxL6B8RLVBGiGGVyK4pn0P/sQmoCuND+1fEpUOT7TR7EFmI54Ah3xg3ycsvwx6\r\nWZv+iDh+Zgv/TqTmMvklCHzdxanzxSbnjZ8hu8xiOs3ZVC6r98yYW0Z0QBSx+PN6\r\nWizL0l1tCna5qnRl3ySta74GTOrtFUSihQq9jl+3AWV3Mo3c3Twuz8BCrCXoY+/J\r\nxZEtkIwscpRNKC9nlGzKwItI59+s+B7E3AgmF9gDmOddQ6ZDSwrwrVOrMwuhO9aw\r\nlSJFPNLT\r\n=NEYX\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `2d816e7fc4d23afbf4d13cf22ed4e17e67a0d483e53eeb2099251d3af22c67e7  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401082d816e7fc4d23afbf4d13cf22ed4e17e67a0d483e53eeb2099251d3af22c67e7f0109f33f4a34087a2a78b205d4a7ce573b708fff010312d05cacb401bec8524ab0b2d7391bb08f020864290da483ce023eac8bebd283e3b436b66bff8bab2ae3ff249774ba35a38b008f104612fa72af008753cae07e6040c640083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff01040da13048db326c24d4cfa4005db415408f02037dfc5785b5e418605b384d7f2fc3f501df1010de915ce6b4e28cb2ba70588a608f104612fa72af008d06a61ba06f181a50083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010e6ec3b3c2e41ad22cf739c97fb69256308f120794635c6b2b5ba075c28f3f25f692c018ea23a092db1ef3817a9b2bd995c067608f104612fa72af0089d907541340778a90083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-744137174",
      "submitted_at": "2021-09-01T16:16:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "merged",
      "id": 5240741208,
      "node_id": "ME_lADOABII5844Ora6zwAAAAE4X11Y",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5240741208",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e75400bb568fe8a653246c4e76f6baab2455a61",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e75400bb568fe8a653246c4e76f6baab2455a61",
      "created_at": "2021-09-01T16:17:44Z"
    },
    {
      "event": "closed",
      "id": 5240741233,
      "node_id": "CE_lADOABII5844Ora6zwAAAAE4X11x",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5240741233",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-01T16:17:44Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 5241185234,
      "node_id": "HRDE_lADOABII5844Ora6zwAAAAE4ZiPS",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5241185234",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-01T17:39:47Z"
    },
    {
      "event": "reviewed",
      "id": 845692462,
      "node_id": "PRR_kwDOABII584yaD4u",
      "url": null,
      "actor": null,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#pullrequestreview-845692462",
      "submitted_at": "2022-01-06T14:40:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
    },
    {
      "event": "locked",
      "id": 8320027660,
      "node_id": "LOE_lADOABII5844Ora6zwAAAAHv6YwM",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/8320027660",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-01-20T10:08:49Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039",
      "pull_request_review_id": 711046958,
      "id": 673478039,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ3ODAzOQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 118,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe:\r\n\r\n```suggestion\r\n            # 2. invalid parameters - supply txid and string \"Flase\" (intentionally misspelled \"False\").\r\n```\r\n\r\n?",
      "created_at": "2021-07-20T20:42:39Z",
      "updated_at": "2021-07-20T21:02:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308",
      "pull_request_review_id": 711046958,
      "id": 673481308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ4MTMwOA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 112,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is suspicious to me. Isn't this always true given that `gottx` is in hex?",
      "created_at": "2021-07-20T20:47:42Z",
      "updated_at": "2021-07-20T21:02:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146",
      "pull_request_review_id": 711046958,
      "id": 673490146,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5MDE0Ng==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 35,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: Is this intentionally only on 4 nodes instead of 6? If it is, maybe `sync_peers` should be called slightly differently not to give the wrong impression.",
      "created_at": "2021-07-20T21:01:05Z",
      "updated_at": "2021-07-20T21:02:05Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593",
      "pull_request_review_id": 711070104,
      "id": 673496593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5NjU5Mw==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 81,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not originally your code, but variables named `txid` and `txId` are very easy to confuse, I think.",
      "created_at": "2021-07-20T21:11:19Z",
      "updated_at": "2021-07-20T21:11:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569",
      "pull_request_review_id": 711072535,
      "id": 673498569,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5ODU2OQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 116,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would expect `txId` instead of `txid` here. Or can you explain this please?",
      "created_at": "2021-07-20T21:14:44Z",
      "updated_at": "2021-07-20T21:14:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674",
      "pull_request_review_id": 713795683,
      "id": 675615674,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYxNTY3NA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 58,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it necessary here to have `node[2]` create 1 block first? ",
      "created_at": "2021-07-23T14:38:02Z",
      "updated_at": "2021-07-23T15:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356",
      "pull_request_review_id": 713795683,
      "id": 675626356,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyNjM1Ng==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 81,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673496593,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "+1. Maybe something like `txid1`, `txid2`? ",
      "created_at": "2021-07-23T14:52:33Z",
      "updated_at": "2021-07-23T15:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014",
      "pull_request_review_id": 713795683,
      "id": 675629014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyOTAxNA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 127,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This doesn't seem like `getrawtransaction()` tests. Maybe test `5` and `6` should be moved into `createrawtransaction()` test group? ",
      "created_at": "2021-07-23T14:56:01Z",
      "updated_at": "2021-07-23T15:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466",
      "pull_request_review_id": 713795683,
      "id": 675632466,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYzMjQ2Ng==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 82,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am not sure whether having two `txid` and `txId` transactions helps here, given both of them are confirmed. Because of that we are also not getting a test for only `mempool` transactions.\r\n\r\nSo maybe we can have a `txid` confirmed in a block, and then have `txId` in the mempool to check for both the scenario?\r\n\r\nWill make the purpose of two transactions clear.\r\n\r\nAlso, the names are confusing, something more distinct would be helpful.   \r\n\r\n  ",
      "created_at": "2021-07-23T15:00:56Z",
      "updated_at": "2021-07-23T15:09:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398",
      "pull_request_review_id": 724828134,
      "id": 684646398,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0NjM5OA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 35,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673490146,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Question: Is this intentionally only on 4 nodes instead of 6?\r\n\r\nYes, as only nodes 0 to 3 have a mempool. The last two nodes are -blocksonly and `sync_mempools()` won't work on them.  Added a comment in efe13c3b77 to clarify this.\r\n\r\n```diff\r\n-        self.sync_mempools()\r\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool\r\n```\r\n",
      "created_at": "2021-08-07T15:37:26Z",
      "updated_at": "2021-08-08T16:42:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106",
      "pull_request_review_id": 724829142,
      "id": 684648106,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0ODEwNg==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 118,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673478039,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that it's unclear. Changed to the following in b0bf8c996034a4:\r\n```diff\r\n-            # 6. invalid parameters - supply txid and string \"Flase\"\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\r\n+            # 6. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n+            for value in [\"True\", \"False\"]:\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txId, verbose=value)\r\n```\r\n",
      "created_at": "2021-08-07T15:52:41Z",
      "updated_at": "2021-08-08T16:43:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116",
      "pull_request_review_id": 724831986,
      "id": 684653116,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY1MzExNg==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 116,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673498569,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch! This illustrates why using `txid` and `txId` variable names in the same test isn't ideal. Fixed in commit \"Test src/validation::GetTransaction() with -blocksonly\".",
      "created_at": "2021-08-07T16:40:38Z",
      "updated_at": "2021-08-07T16:40:39Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 146,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654",
      "pull_request_review_id": 724841082,
      "id": 684668654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2ODY1NA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 127,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 675629014,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea! Done in a3d8f790633b89a.",
      "created_at": "2021-08-07T19:24:10Z",
      "updated_at": "2021-08-08T16:46:16Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101",
      "pull_request_review_id": 724841291,
      "id": 684669101,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2OTEwMQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 81,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673496593,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I initially planned to respond that this was out of scope, then saw this very issue had tripped me up (https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116). Agree! Done in 10a3db049ce2858 when the name is reused or reassigned in the same test function. Doing this also revealed an unused `txId` assignment; fixed.",
      "created_at": "2021-08-07T19:29:25Z",
      "updated_at": "2021-08-08T16:41:27Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025",
      "pull_request_review_id": 724842779,
      "id": 684672025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3MjAyNQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 58,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 675615674,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Well spotted! Thanks to the transactions in the next lines, it's not needed and might be an example of the accumulated layers of change in this test file. Removed in commit 8f5c6ba69000b  with an explanation in the commit message.",
      "created_at": "2021-08-07T20:02:06Z",
      "updated_at": "2021-08-08T16:45:38Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006",
      "pull_request_review_id": 724846983,
      "id": 684680006,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY4MDAwNg==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 82,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 675632466,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting.  We use and need all three transactions, AFAICT.  Updated the names in the last commit to txid, txid2, and txid3.  The test still passes if we sync_blocks() for the second and third transactions instead of sync_all(), but I'd rather not mess with this here.",
      "created_at": "2021-08-07T21:32:39Z",
      "updated_at": "2021-08-07T21:32:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491",
      "pull_request_review_id": 724886622,
      "id": 684752491,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1MjQ5MQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 82,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 675632466,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Took a fresh look this morning, good call!  The first conditional in `CTransactionRef GetTransaction()` was not necessarily being exercised by the tests:\r\n```c++\r\n    if (mempool && !block_index) {\r\n        CTransactionRef ptx = mempool->get(hash);\r\n        if (ptx) return ptx;\r\n    }\r\n```\r\nAdded this assert in 7f7e64e30376a2 that covers it:\r\n```python\r\n             # 1. valid parameters - supply txid along with various valid values for verbose\r\n+            if n == 0 or n == 3:\r\n+                # test with a tx in mempool, with and without -txindex\r\n+                tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.1)\r\n+                self.nodes[n].getrawtransaction(tx_in_mempool)\r\n```\r\nVerified by removing that code in GetTransaction() to ensure the new assert fails without it and passes with it.",
      "created_at": "2021-08-08T10:31:17Z",
      "updated_at": "2021-08-09T08:21:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680",
      "pull_request_review_id": 724888821,
      "id": 684755680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1NTY4MA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 112,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673481308,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This assert tests that the `in_active_chain` field is absent as expected when the blockhash argument is not passed...see `src/rpc/rawtransaction.cpp::getrawtransaction()` or `bitcoin-cli help getrawtransaction`",
      "created_at": "2021-08-08T10:57:45Z",
      "updated_at": "2021-08-08T11:05:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854",
      "pull_request_review_id": 724898086,
      "id": 684768854,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc2ODg1NA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 112,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673481308,
      "user": {
        "login": "kiminuo",
        "id": 58662979,
        "node_id": "MDQ6VXNlcjU4NjYyOTc5",
        "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kiminuo",
        "html_url": "https://github.com/kiminuo",
        "followers_url": "https://api.github.com/users/kiminuo/followers",
        "following_url": "https://api.github.com/users/kiminuo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kiminuo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kiminuo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
        "organizations_url": "https://api.github.com/users/kiminuo/orgs",
        "repos_url": "https://api.github.com/users/kiminuo/repos",
        "events_url": "https://api.github.com/users/kiminuo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kiminuo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just to make myself more clear: L140 ends with `['hex']` so presumably `gottx` is a string, so testing on L142 whether `gottx` does not contain `in_active_chain` seems to be always true.\r\n\r\nBut maybe I just didn't get your reply. Anyway, if I got it wrong, feel free to just ignore my comment.",
      "created_at": "2021-08-08T12:38:15Z",
      "updated_at": "2021-08-08T12:38:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050",
      "pull_request_review_id": 724909753,
      "id": 684785050,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc4NTA1MA==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 87,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": null,
      "user": {
        "login": "rajarshimaitra",
        "id": 36541669,
        "node_id": "MDQ6VXNlcjM2NTQxNjY5",
        "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rajarshimaitra",
        "html_url": "https://github.com/rajarshimaitra",
        "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
        "following_url": "https://api.github.com/users/rajarshimaitra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/rajarshimaitra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/rajarshimaitra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
        "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
        "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
        "events_url": "https://api.github.com/users/rajarshimaitra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems to me that `sync_peers()` is not doing anything and all the nodes get the blocks with `generate()`. This is probably because `generate()` already broadcasts the blocks in p2p. ",
      "created_at": "2021-08-08T14:38:54Z",
      "updated_at": "2021-08-08T16:40:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766",
      "pull_request_review_id": 724915007,
      "id": 684792766,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5Mjc2Ng==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 112,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673481308,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank you for re-explaining. You are right! Fixing. Thank you!",
      "created_at": "2021-08-08T15:39:53Z",
      "updated_at": "2021-08-08T15:39:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515",
      "pull_request_review_id": 724919401,
      "id": 684799515,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5OTUxNQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 112,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 673481308,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Updated commit 4e83843f03dad710a0fad7a706e2618a7a69a6b3 to fix. Thanks @kiminuo!",
      "created_at": "2021-08-08T16:33:41Z",
      "updated_at": "2021-08-08T16:33:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613",
      "pull_request_review_id": 724925423,
      "id": 684809613,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDgwOTYxMw==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 87,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 684785050,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-08-08T18:07:28Z",
      "updated_at": "2021-08-08T18:07:29Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629",
      "pull_request_review_id": 725211679,
      "id": 685064629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA2NDYyOQ==",
      "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 87,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
      "in_reply_to_id": 684785050,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Moving the in-mempool transaction tests commit after the simplification commit revealed that removing the `self.sync_peers()` would be flakey without the presence of the in-mempool transaction. This could be fragile, so no longer removing it in the simplification commit.",
      "created_at": "2021-08-09T10:04:25Z",
      "updated_at": "2021-08-09T10:15:04Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": 116,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693339474",
      "pull_request_review_id": 735487275,
      "id": 693339474,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzMzOTQ3NA==",
      "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 554,
      "original_position": 553,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "in_reply_to_id": null,
      "user": {
        "login": "Zero-1729",
        "id": 23586626,
        "node_id": "MDQ6VXNlcjIzNTg2NjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Zero-1729",
        "html_url": "https://github.com/Zero-1729",
        "followers_url": "https://api.github.com/users/Zero-1729/followers",
        "following_url": "https://api.github.com/users/Zero-1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Zero-1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Zero-1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
        "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
        "repos_url": "https://api.github.com/users/Zero-1729/repos",
        "events_url": "https://api.github.com/users/Zero-1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What's the reason for having this as a variable instead of passing the literal to `assert_raises_rpc_error` as an arg?",
      "created_at": "2021-08-21T10:52:44Z",
      "updated_at": "2021-08-21T10:52:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693339474",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693339474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 320,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693369747",
      "pull_request_review_id": 735504355,
      "id": 693369747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM2OTc0Nw==",
      "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 554,
      "original_position": 553,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "in_reply_to_id": 693339474,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This variable is invoked twice below in this test, so it clarifies that we check for the same message and also allows reducing the line length to under 120; previously for instance, both lines did not fit in the GitHub display without scrolling (and scrolling is an annoyance with a file or diff of this length, as you have to navigate to the bottom, scroll, then navigate back to the lines).",
      "created_at": "2021-08-21T15:47:19Z",
      "updated_at": "2021-08-21T15:47:19Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693369747",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693369747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 320,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693375931",
      "pull_request_review_id": 735507764,
      "id": 693375931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM3NTkzMQ==",
      "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 554,
      "original_position": 553,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
      "in_reply_to_id": 693339474,
      "user": {
        "login": "Zero-1729",
        "id": 23586626,
        "node_id": "MDQ6VXNlcjIzNTg2NjI2",
        "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Zero-1729",
        "html_url": "https://github.com/Zero-1729",
        "followers_url": "https://api.github.com/users/Zero-1729/followers",
        "following_url": "https://api.github.com/users/Zero-1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Zero-1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Zero-1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
        "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
        "repos_url": "https://api.github.com/users/Zero-1729/repos",
        "events_url": "https://api.github.com/users/Zero-1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for clarifying!",
      "created_at": "2021-08-21T16:44:36Z",
      "updated_at": "2021-08-21T16:44:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693375931",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693375931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 320,
      "original_line": 320,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696680563",
      "pull_request_review_id": 739543669,
      "id": 696680563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjY4MDU2Mw==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in c7327a6e90: Why is this test removed and re-added in the next commit? I think it would be easier to review if it was kept.",
      "created_at": "2021-08-26T14:21:57Z",
      "updated_at": "2021-08-26T14:21:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696680563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696680563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696681271",
      "pull_request_review_id": 739544627,
      "id": 696681271,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjY4MTI3MQ==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 41,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "c7327a6e90: Don't all nodes have txindex, except n=3? At least the extra_args would suggest that.",
      "created_at": "2021-08-26T14:22:40Z",
      "updated_at": "2021-08-26T14:22:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696681271",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696681271"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696719260",
      "pull_request_review_id": 739596438,
      "id": 696719260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjcxOTI2MA==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 41,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696681271,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, kept node 0 as it was already in use for the -txindex case, and added node 3 to test without -txindex. Didn't seem worth adding iterating through nodes 1 and 2.",
      "created_at": "2021-08-26T15:02:47Z",
      "updated_at": "2021-08-26T15:02:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696719260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696719260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696724187",
      "pull_request_review_id": 739603135,
      "id": 696724187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjcyNDE4Nw==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696680563,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably a rebase oversight during the various changes.",
      "created_at": "2021-08-26T15:08:13Z",
      "updated_at": "2021-08-26T15:08:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696724187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696724187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696733591",
      "pull_request_review_id": 739615896,
      "id": 696733591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjczMzU5MQ==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 41,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696681271,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(this does indeed work:)\r\n```diff\r\n-        for n in [0, 3, 4, 5]:\r\n+        for n in range(self.num_nodes):\r\n             self.log.info(\r\n-                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\r\n+                f\"Test getrawtransaction {'with' if n <= 2 or n == 5 else 'without'} -txindex,\"\r\n                 f\" {'with' if n >= 4 else 'without'} -blocksonly\"\r\n             )\r\n             # 1. valid parameters - supply txid along with various valid values for verbose\r\n-            if n == 0 or n == 3:\r\n+            if n <= 3:\r\n                 # with a transaction in the mempool, with and without -txindex\r\n                 tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.5)\r\n                 self.nodes[n].getrawtransaction(tx_in_mempool)\r\n-            if n == 0 or n == 5:\r\n+            if n <= 2 or n == 5:\r\n                 # with -txindex\r\n```\r\n",
      "created_at": "2021-08-26T15:18:50Z",
      "updated_at": "2021-08-26T15:18:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696733591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696733591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696734776",
      "pull_request_review_id": 739617515,
      "id": 696734776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjczNDc3Ng==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 41,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696681271,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need to change. I missed that this was only picking two nodes.",
      "created_at": "2021-08-26T15:20:10Z",
      "updated_at": "2021-08-26T15:20:10Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696734776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696734776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 231,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696740754",
      "pull_request_review_id": 739624964,
      "id": 696740754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0MDc1NA==",
      "diff_hunk": "@@ -72,17 +73,22 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools()\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, *, node, blocks, pre_sync=True):\n+        if pre_sync == True:\n+            self.sync_peers()\n+        self.nodes[node].generate(blocks)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a: If you rebase, you can use `self.generate(nodes[node], blocks)`",
      "created_at": "2021-08-26T15:26:43Z",
      "updated_at": "2021-08-26T15:34:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696740754",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696740754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696742847",
      "pull_request_review_id": 739624964,
      "id": 696742847,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0Mjg0Nw==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71: The forth node has a mempool, too?",
      "created_at": "2021-08-26T15:28:57Z",
      "updated_at": "2021-08-26T15:34:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696742847",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696742847"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696748144",
      "pull_request_review_id": 739624964,
      "id": 696748144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0ODE0NA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How does -blocksonly even affect the test, given that all txs are mined into blocks anyway?",
      "created_at": "2021-08-26T15:34:50Z",
      "updated_at": "2021-08-26T15:34:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696748144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696748144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696760147",
      "pull_request_review_id": 739651394,
      "id": 696760147,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc2MDE0Nw==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If this line remains `self.sync_mempools()`, the test fails with `AssertionError: Mempool sync timed out`.\r\n\r\nThe last commit adds an in-mempool tx.",
      "created_at": "2021-08-26T15:48:10Z",
      "updated_at": "2021-08-26T15:48:11Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696760147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696760147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696765819",
      "pull_request_review_id": 739658821,
      "id": 696765819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc2NTgxOQ==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The last commit adds an in-mempool tx.\r\n\r\nThe first tx will be mined into a block immediately after. The second test isn't run on the -blocksonly nodes, unless I am missing something.\r\n\r\n\r\nIn general `-blocksonly` only skips incoming transactions, so anything you can test with the option is also possible by simply querying a txid that doesn't exist at all.",
      "created_at": "2021-08-26T15:54:36Z",
      "updated_at": "2021-08-26T15:54:36Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696765819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696765819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696812484",
      "pull_request_review_id": 739720541,
      "id": 696812484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjgxMjQ4NA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you think it would be better coverage to run the in-mempool test on the -blocksonly nodes as well...\r\n```diff\r\n@@ -88,7 +88,8 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n         for amount in [1.5, 1.0, 5.0]:\r\n             self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\r\n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), 1)\r\n+        for n in [3, 4, 5]:\r\n+            self.nodes[0].sendtoaddress(self.nodes[n].getnewaddress(), 1)\r\n         self.generate_and_sync(node=0, blocks=5)\r\n@@ -109,16 +110,22 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\r\n             \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\r\n         )\r\n+        err_msg_2 = \"No such mempool or blockchain transaction. Use gettransaction for wallet transactions.\"\r\n         for n in [0, 3, 4, 5]:\r\n             self.log.info(\r\n                 f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\r\n                 f\" {'with' if n >= 4 else 'without'} -blocksonly\"\r\n             )\r\n-            # 1. valid parameters - supply txid along with various valid values for verbose\r\n+            # With a transaction in the mempool\r\n+            tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n].getnewaddress(), 0.5)\r\n             if n == 0 or n == 3:\r\n-                # with a transaction in the mempool, with and without -txindex\r\n-                tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.5)\r\n+                # with and without -txindex\r\n                 self.nodes[n].getrawtransaction(tx_in_mempool)\r\n+            else:\r\n+                # -blocksonly, with and without -txindex\r\n+                assert_raises_rpc_error(-5, err_msg if n == 4 else err_msg_2, self.nodes[n].getrawtransaction, tx_in_mempool)\r\n```\r\nor do you prefer dropping the -blocksonly nodes and testing the other nodes with a non-existing tx.",
      "created_at": "2021-08-26T16:53:13Z",
      "updated_at": "2021-08-26T16:53:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696812484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696853243",
      "pull_request_review_id": 739773763,
      "id": 696853243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg1MzI0Mw==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unless I am missing something, the goal of this test is to cover `GetTransaction`, which itself is unaffected by the `blocksonly` option. Thus, there is no need to test this option. (Otherwise, there would also be reason to test with `mocktime`, `minrelaytxfee`, ...)",
      "created_at": "2021-08-26T17:50:47Z",
      "updated_at": "2021-08-26T17:50:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696853243",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696853243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699179750",
      "pull_request_review_id": 742534661,
      "id": 699179750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTE3OTc1MA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The -blocksonly nodes allow us to add missing test coverage for rpc getrawtransaction error cases like in my https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484 above. We could maybe pass non-existing txids instead, but it seems better to test actual -blocksonly behavior.\r\n\r\nI have a branch to add that coverage and some other improvements, and rather than increase the size of this pull and invalidate the existing review, I can propose it as a follow-up.",
      "created_at": "2021-08-31T10:10:15Z",
      "updated_at": "2021-08-31T10:10:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699179750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699179750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699183676",
      "pull_request_review_id": 742539980,
      "id": 699183676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTE4MzY3Ng==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> it seems better to test actual -blocksonly behavior.\r\n\r\nblocksonly is a network option, so it seems confusing to test it's behaviour inside a raw transaction test.",
      "created_at": "2021-08-31T10:15:43Z",
      "updated_at": "2021-08-31T10:15:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699183676",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699183676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699202590",
      "pull_request_review_id": 742564773,
      "id": 699202590,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIwMjU5MA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "My thought was that -blocksonly effectively disables mempool functionality, which for end-to-end testing relates to how getrawtransaction behaves when a node operator running -blocksonly calls getrawtransaction, which is valid with either txindex and/or passing blockhash if the tx is in a block, so it seems good to have explicit coverage that serves as a regression test and sanity check. Passing a wrong txid could be added as well, where relevant, to verify the same outcome.",
      "created_at": "2021-08-31T10:43:29Z",
      "updated_at": "2021-08-31T10:58:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699202590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699202590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699232209",
      "pull_request_review_id": 742604765,
      "id": 699232209,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIzMjIwOQ==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> -blocksonly effectively disables mempool functionality\r\n\r\nThe behaviour of the mempool module isn't affected by blocksonly at all. (All txs that are submitted to the mempool are added/rejected in the same way regardless of blocksonly.) blocksonly is purely a net-processing option to disable *incoming* tx relay from network peers. It doesn't affect (in)validity of txs submitted to the mempool. For example, when the wallet or rpc submits a tx, it will still be added to the mempool.\r\n\r\nAs part of this test, if the goal is to get a fully functioning, but empty mempool, it might be easier to run the tests that you want to run at the beginning with an empty mempool. (Or by restarting a node with `-nopersistmempool` to empty the mempool). Or as mentioned previously by picking a txid that is not currently in the mempool.\r\n\r\n\r\nIf there was an option to completely disable the mempool (i.e. never initialize the class), then it indeed would make a lot of sense to check for that code path.\r\n\r\nIn testing it is important to be able to draw units/modules and assume that the modules don't interact with each other, other than over their defined interface. This allows to test units/modules separate from each other. If they had to be tested in combination it would lead to path explosion in any real software project, thus making it harder to test meaningful.\r\n\r\nMoreover, if the behaviour of one module is required for testing another module, it will make it harder to change the behaviour of that module and only touching the tests of that module.\r\n\r\nOr put another way: If `-blockonly` was relevant to test here, why is `-minrelaytxfee` (or any other setting) not relevant to test here?",
      "created_at": "2021-08-31T11:29:47Z",
      "updated_at": "2021-08-31T11:29:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699232209",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699232209"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699242734",
      "pull_request_review_id": 742619160,
      "id": 699242734,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTI0MjczNA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree from a unit test point of view, but for end-to-end testing these interactions can be good to test. For example, I think I've found a parameter interaction that doesn't work as documented (not sure yet, need to look further). That seems like good coverage to have if someone proposes it, it is reviewed, and ready to use.  The asmap/addrman interaction is another example.  What to do here?  Lots of time invested so far.  Sure, I could spend even more time to rework this without the coverage and hope for everyone to review it again.  Or just drop the work starting with \"Test...with -blocksonly\" and maybe pick up the rest later in a follow-up.",
      "created_at": "2021-08-31T11:45:17Z",
      "updated_at": "2021-08-31T11:45:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699242734",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699242734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699250588",
      "pull_request_review_id": 742629020,
      "id": 699250588,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTI1MDU4OA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The asmap/addrman interaction is another example\r\n\r\nI think asmap is part of the addrman module, so testing those together in a test makes sense.",
      "created_at": "2021-08-31T11:56:44Z",
      "updated_at": "2021-08-31T11:56:44Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699250588",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699250588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699366246",
      "pull_request_review_id": 742786197,
      "id": 699366246,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTM2NjI0Ng==",
      "diff_hunk": "@@ -72,17 +73,22 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools()\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, *, node, blocks, pre_sync=True):\n+        if pre_sync == True:\n+            self.sync_peers()\n+        self.nodes[node].generate(blocks)",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a",
      "in_reply_to_id": 696740754,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> [75d1e4c](https://github.com/bitcoin/bitcoin/commit/75d1e4cb14a4bc293a17e516598a1b6b81dcac4a): If you rebase, you can use `self.generate(nodes[node], blocks)`\r\n\r\nThanks. Dropped the commit.",
      "created_at": "2021-08-31T14:13:23Z",
      "updated_at": "2021-08-31T14:13:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699366246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699366246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 83,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699541053",
      "pull_request_review_id": 743019445,
      "id": 699541053,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU0MTA1Mw==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696680563,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not addressed in the latest force push? The first two commits aren't squashed?",
      "created_at": "2021-08-31T17:38:12Z",
      "updated_at": "2021-08-31T17:38:12Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699541053",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699541053"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699561025",
      "pull_request_review_id": 743046314,
      "id": 699561025,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2MTAyNQ==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696680563,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks for having a look. Didn't change any commits, only dropped the last ones to ~preserve the previous review ACKs.",
      "created_at": "2021-08-31T18:06:50Z",
      "updated_at": "2021-08-31T18:06:51Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699561025",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699561025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699563008",
      "pull_request_review_id": 743049048,
      "id": 699563008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2MzAwOA==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696680563,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "reviewing that two commits are squashed should be as easy as checking that other commits are dropped, no?",
      "created_at": "2021-08-31T18:09:47Z",
      "updated_at": "2021-08-31T18:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699563008",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699563008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699567400",
      "pull_request_review_id": 743054895,
      "id": 699567400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2NzQwMA==",
      "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": null,
      "original_position": 20,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
      "in_reply_to_id": 696742847,
      "user": {
        "login": "jaysonmald35",
        "id": 87387449,
        "node_id": "MDQ6VXNlcjg3Mzg3NDQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/87387449?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jaysonmald35",
        "html_url": "https://github.com/jaysonmald35",
        "followers_url": "https://api.github.com/users/jaysonmald35/followers",
        "following_url": "https://api.github.com/users/jaysonmald35/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jaysonmald35/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jaysonmald35/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jaysonmald35/subscriptions",
        "organizations_url": "https://api.github.com/users/jaysonmald35/orgs",
        "repos_url": "https://api.github.com/users/jaysonmald35/repos",
        "events_url": "https://api.github.com/users/jaysonmald35/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jaysonmald35/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thank u",
      "created_at": "2021-08-31T18:16:35Z",
      "updated_at": "2021-08-31T18:16:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699567400",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699567400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699622319",
      "pull_request_review_id": 743127410,
      "id": 699622319,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTYyMjMxOQ==",
      "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 316,
      "original_position": 22,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
      "in_reply_to_id": 696680563,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "squashed",
      "created_at": "2021-08-31T19:42:57Z",
      "updated_at": "2021-08-31T19:42:58Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699622319",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699622319"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 233,
      "original_line": 233,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779593489",
      "pull_request_review_id": 845692462,
      "id": 779593489,
      "node_id": "PRRC_kwDOABII584ud6cR",
      "diff_hunk": "@@ -70,23 +73,112 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n         self.nodes[2].generate(1)\n         self.sync_all()\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n+        for amount in [1.5, 1.0, 5.0]:\n+            self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.signrawtransactionwithwallet_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```\r\n                                   Traceback (most recent call last):\r\n                                     File \"/home/marco/workspace/btc_bitcoin_core/test/functional/test_framework/test_framework.py\", line 132, in main\r\n                                       self.run_test()\r\n                                     File \"/home/marco/workspace/btc_bitcoin_core/test/functional/rpc_rawtransaction.py\", line 84, in run_test\r\n                                       self.getrawtransaction_tests()\r\n                                     File \"/home/marco/workspace/btc_bitcoin_core/test/functional/rpc_rawtransaction.py\", line 107, in getrawtransaction_tests\r\n                                       assert_equal(self.nodes[n].getrawtransaction(txId), rawTxSigned['hex'])\r\n                                     File \"/home/marco/workspace/btc_bitcoin_core/test/functional/test_framework/coverage.py\", line 49, in __call__\r\n                                       return_val = self.auth_service_proxy_instance.__call__(*args, **kwargs)\r\n                                     File \"/home/marco/workspace/btc_bitcoin_core/test/functional/test_framework/authproxy.py\", line 144, in __call__\r\n                                       raise JSONRPCException(response['error'], status)\r\n                                   test_framework.authproxy.JSONRPCException: No such mempool transaction. Use -txindex or provide a block hash to enable blockchain transaction queries. Use gettransaction for wallet transactions. (-5)\r\n```\r\n\r\nnot sure how this could happen, though...",
      "created_at": "2022-01-06T14:40:03Z",
      "updated_at": "2022-01-06T14:45:15Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r779593489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779593489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779602727",
      "pull_request_review_id": 845705733,
      "id": 779602727,
      "node_id": "PRRC_kwDOABII584ud8sn",
      "diff_hunk": "@@ -70,23 +73,112 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n         self.nodes[2].generate(1)\n         self.sync_all()\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n+        for amount in [1.5, 1.0, 5.0]:\n+            self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.signrawtransactionwithwallet_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "in_reply_to_id": 779593489,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Looks like the test isn't testing anything, as the tx is never included in a block.\r\n\r\nIf the tx is included, the test will fail:\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_rawtransaction.py b/test/functional/rpc_rawtransaction.py\r\nindex 96691b2686..b648012413 100755\r\n--- a/test/functional/rpc_rawtransaction.py\r\n+++ b/test/functional/rpc_rawtransaction.py\r\n@@ -99,7 +99,7 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n         rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\r\n         rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\r\n         txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\r\n-        self.generate(self.nodes[0], 1)\r\n+        self.generateblock(self.nodes[0], output=self.nodes[0].getnewaddress(), transactions=[rawTxSigned['hex']])\r\n \r\n         for n in [0, 3]:\r\n             self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex\")\r\n",
      "created_at": "2022-01-06T14:52:28Z",
      "updated_at": "2022-01-06T14:52:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r779602727",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779602727"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779607119",
      "pull_request_review_id": 845711963,
      "id": 779607119,
      "node_id": "PRRC_kwDOABII584ud9xP",
      "diff_hunk": "@@ -70,23 +73,112 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n         self.nodes[2].generate(1)\n         self.sync_all()\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n+        for amount in [1.5, 1.0, 5.0]:\n+            self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.signrawtransactionwithwallet_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "in_reply_to_id": 779593489,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, was working on the part 2 follow-up to this, will have a look.",
      "created_at": "2022-01-06T14:58:13Z",
      "updated_at": "2022-01-06T14:58:13Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r779607119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/779607119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/788863281",
      "pull_request_review_id": 858390381,
      "id": 788863281,
      "node_id": "PRRC_kwDOABII584vBRkx",
      "diff_hunk": "@@ -70,23 +73,112 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n         self.nodes[2].generate(1)\n         self.sync_all()\n         self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n+        for amount in [1.5, 1.0, 5.0]:\n+            self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n         self.sync_all()\n         self.nodes[0].generate(5)\n         self.sync_all()\n \n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.signrawtransactionwithwallet_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "path": "test/functional/rpc_rawtransaction.py",
      "position": 79,
      "original_position": 79,
      "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "original_commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
      "in_reply_to_id": 779593489,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "#24113 ",
      "created_at": "2022-01-20T15:14:45Z",
      "updated_at": "2022-01-20T15:14:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r788863281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/788863281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 105,
      "original_line": 105,
      "side": "RIGHT"
    }
  ]
}