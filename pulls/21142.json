{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142",
    "id": 571290893,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTcxMjkwODkz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21142",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/21142.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/21142.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/faa9ef49d18da9223220afcc263ac91a74c291a6",
    "number": 21142,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "fuzz: Add tx_pool fuzz target",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 1648013533,
        "node_id": "MDU6TGFiZWwxNjQ4MDEzNTMz",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Review%20club",
        "name": "Review club",
        "description": "",
        "color": "0052cc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2021-02-10T17:55:25Z",
    "updated_at": "2022-08-16T17:06:55Z",
    "closed_at": "2021-03-23T09:01:28Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-03-23T09:01:28Z",
    "merge_commit_sha": "fd2b22bf24d81027d9908d1e8aff498d6cf1a463",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "MarcoFalke:2102-fuzzPool",
      "ref": "2102-fuzzPool",
      "sha": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 40046254,
        "node_id": "MDEwOlJlcG9zaXRvcnk0MDA0NjI1NA==",
        "name": "b-c",
        "full_name": "MarcoFalke/b-c",
        "owner": {
          "login": "MarcoFalke",
          "id": 6399679,
          "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/MarcoFalke",
          "html_url": "https://github.com/MarcoFalke",
          "followers_url": "https://api.github.com/users/MarcoFalke/followers",
          "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
          "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
          "repos_url": "https://api.github.com/users/MarcoFalke/repos",
          "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/MarcoFalke/b-c",
        "fork": true,
        "url": "https://api.github.com/repos/MarcoFalke/b-c",
        "archive_url": "https://api.github.com/repos/MarcoFalke/b-c/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/MarcoFalke/b-c/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/MarcoFalke/b-c/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/MarcoFalke/b-c/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/MarcoFalke/b-c/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/MarcoFalke/b-c/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/MarcoFalke/b-c/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/MarcoFalke/b-c/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/MarcoFalke/b-c/contributors",
        "deployments_url": "https://api.github.com/repos/MarcoFalke/b-c/deployments",
        "downloads_url": "https://api.github.com/repos/MarcoFalke/b-c/downloads",
        "events_url": "https://api.github.com/repos/MarcoFalke/b-c/events",
        "forks_url": "https://api.github.com/repos/MarcoFalke/b-c/forks",
        "git_commits_url": "https://api.github.com/repos/MarcoFalke/b-c/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/MarcoFalke/b-c/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/MarcoFalke/b-c/git/tags%7B/sha%7D",
        "git_url": "git://github.com/MarcoFalke/b-c.git",
        "issue_comment_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/MarcoFalke/b-c/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/MarcoFalke/b-c/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/MarcoFalke/b-c/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/MarcoFalke/b-c/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/MarcoFalke/b-c/languages",
        "merges_url": "https://api.github.com/repos/MarcoFalke/b-c/merges",
        "milestones_url": "https://api.github.com/repos/MarcoFalke/b-c/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/MarcoFalke/b-c/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/MarcoFalke/b-c/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/MarcoFalke/b-c/releases%7B/id%7D",
        "ssh_url": "git@github.com:MarcoFalke/b-c.git",
        "stargazers_url": "https://api.github.com/repos/MarcoFalke/b-c/stargazers",
        "statuses_url": "https://api.github.com/repos/MarcoFalke/b-c/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/MarcoFalke/b-c/subscribers",
        "subscription_url": "https://api.github.com/repos/MarcoFalke/b-c/subscription",
        "tags_url": "https://api.github.com/repos/MarcoFalke/b-c/tags",
        "teams_url": "https://api.github.com/repos/MarcoFalke/b-c/teams",
        "trees_url": "https://api.github.com/repos/MarcoFalke/b-c/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/MarcoFalke/b-c.git",
        "hooks_url": "https://api.github.com/repos/MarcoFalke/b-c/hooks",
        "svn_url": "https://github.com/MarcoFalke/b-c",
        "homepage": "",
        "language": "C++",
        "forks_count": 12,
        "stargazers_count": 25,
        "watchers_count": 25,
        "size": 205775,
        "default_branch": "master",
        "open_issues_count": 25,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T19:05:17Z",
        "created_at": "2015-08-01T12:42:47Z",
        "updated_at": "2023-05-28T20:12:34Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "a65e772fec62a083cb3037a5880829a1965e12fc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69819,
        "watchers_count": 69819,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T04:47:18Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 381,
    "deletions": 6,
    "changed_files": 5,
    "commits": 1,
    "review_comments": 43,
    "comments": 14
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 4316264649,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxNjI2NDY0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316264649",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T18:15:21Z"
    },
    {
      "event": "labeled",
      "id": 4316299852,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTYyOTk4NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316299852",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T18:23:44Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4316299853,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTYyOTk4NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316299853",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T18:23:44Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 4316299855,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTYyOTk4NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316299855",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T18:23:44Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 4316299856,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMTYyOTk4NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4316299856",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T18:23:44Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "commented",
      "id": 776943189,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3Njk0MzE4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/776943189",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T19:09:44Z",
      "updated_at": "2021-03-16T01:56:48Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-776943189",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 777035750,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzAzNTc1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777035750",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-10T21:06:15Z",
      "updated_at": "2021-02-10T21:06:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK: very nice to see the mempool logic more thoroughly fuzzed!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777035750",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4318635193,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxODYzNTE5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4318635193",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T08:36:13Z"
    },
    {
      "event": "unlabeled",
      "id": 4319920081,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMxOTkyMDA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319920081",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:46:21Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 4319920083,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMxOTkyMDA4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319920083",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:46:21Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "unlabeled",
      "id": 4319920084,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMxOTkyMDA4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319920084",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:46:21Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4319920088,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMxOTkyMDA4OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319920088",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:46:21Z",
      "label": {
        "name": "Validation",
        "color": "6060aa"
      }
    },
    {
      "event": "ready_for_review",
      "id": 4319920381,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0MzE5OTIwMzgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319920381",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:46:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4319946028,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMxOTk0NjAyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4319946028",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:51:28Z"
    },
    {
      "event": "commented",
      "id": 777472660,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NzQ3MjY2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777472660",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T13:51:40Z",
      "updated_at": "2021-02-11T13:51:40Z",
      "author_association": "MEMBER",
      "body": "Rebased",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-777472660",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "labeled",
      "id": 4320411258,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMjA0MTEyNTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4320411258",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-11T15:19:02Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 4323452618,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDMyMzQ1MjYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323452618",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T07:15:47Z",
      "label": {
        "name": "Build system",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 4323452620,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQzMjM0NTI2MjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4323452620",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T07:15:47Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4351868712,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDM1MTg2ODcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4351868712",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T12:18:03Z"
    },
    {
      "event": "commented",
      "id": 787514951,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzUxNDk1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787514951",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-28T20:13:39Z",
      "updated_at": "2021-02-28T20:13:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK e4e253d73007e0b680d2a473327c6fd66de4d86c\r\n\r\n* Very nice to see the mempool logic more thoroughly fuzzed!\r\n* Achieves good coverage quickly.\r\n* Touches only `src/test/fuzz/`.",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-787514951",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "labeled",
      "id": 4438368498,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0MzgzNjg0OTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4438368498",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-10T18:18:28Z",
      "label": {
        "name": "1 ACK",
        "color": "88ED8D"
      }
    },
    {
      "event": "labeled",
      "id": 4438368502,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0MzgzNjg1MDI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4438368502",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-10T18:18:28Z",
      "label": {
        "name": "Review club",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 4443015432,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ0MzAxNTQzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4443015432",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-11T08:59:41Z",
      "label": {
        "name": "1 ACK",
        "color": "88ED8D"
      }
    },
    {
      "event": "commented",
      "id": 797320050,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzMyMDA1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797320050",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-12T08:21:38Z",
      "updated_at": "2021-03-12T08:21:38Z",
      "author_association": "MEMBER",
      "body": "https://bitcoincore.reviews/21142",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-797320050",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "labeled",
      "id": 4460532760,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQ0NjA1MzI3NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4460532760",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-15T18:54:57Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4460665997,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2MDY2NTk5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4460665997",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-15T19:24:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4460719997,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ2MDcxOTk5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4460719997",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-15T19:36:58Z"
    },
    {
      "event": "unlabeled",
      "id": 4461055595,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50NDQ2MTA1NTU5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4461055595",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-15T20:59:58Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 613825058,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEzODI1MDU4",
      "url": null,
      "actor": null,
      "commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK, very excited to see fuzzing in ATMP :) I have a lot of questions.\r\n\r\nGot it running and have reviewed tx_pool.cpp so far. My biggest suggestion is to try to hit the RBF code by keeping track of outpoints in the mempool and potentially pulling input(s) from there as well.\r\n\r\nI'm a fuzzing noob, ran into a sanitizer error on my mac so I ran it in docker instead\r\n\r\n<details><summary>(Commands if anyone's interested)</summary><p>\r\n\r\n```\r\ndocker run -it ubuntu:bionic /bin/bash\r\napt update\r\napt install -y git\r\napt install -y sudo\r\ngit clone https://github.com/bitcoin/bitcoin\r\ncd bitcoin\r\ngit remote add marco https://github.com/MarcoFalke/bitcoin-core.git\r\ngit fetch marco 2102-fuzzPool\r\ngit checkout 2102-fuzzPool\r\nsudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3\r\nsudo apt-get install libevent-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\r\nsudo apt-get install clang\r\n./autogen.sh\r\nCC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined --without-gui --disable-wallet\r\nmake\r\nFUZZ=tx_pool src/test/fuzz/fuzz\r\n```\r\n</p>\r\n</details>",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#pullrequestreview-613825058",
      "submitted_at": "2021-03-17T01:13:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4470628698,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3MDYyODY5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4470628698",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T14:34:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4470663465,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3MDY2MzQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4470663465",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T14:40:28Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4470719322,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3MDcxOTMyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4470719322",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T14:49:33Z"
    },
    {
      "event": "reviewed",
      "id": 614472163,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE0NDcyMTYz",
      "url": null,
      "actor": null,
      "commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Light ACK bcf96cdf4b3df868050b698713dafbd93bcd7add\r\n\r\nGood to see added and improved coverage and efficiency. AFAICT after the first minute, the `tx_pool` fuzzer is doing roughly 2-3 times the exec/s of the `process_message_tx` and the `tx_pool_standard` fuzzers.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#pullrequestreview-614472163",
      "submitted_at": "2021-03-17T16:17:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4472188517,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3MjE4ODUxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4472188517",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T19:30:07Z"
    },
    {
      "event": "commented",
      "id": 801399294,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTM5OTI5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801399294",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T20:07:09Z",
      "updated_at": "2021-03-17T20:07:39Z",
      "author_association": "MEMBER",
      "body": "Only for tx_pool_standard: https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa5382241f7943a7/fuzz.coverage/index.html",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801399294",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 801424891,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTQyNDg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801424891",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-17T20:34:19Z",
      "updated_at": "2021-03-17T20:34:19Z",
      "author_association": "MEMBER",
      "body": "I pushed an update for RBF. Will push some more stuff tomorrow :sleeping: ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801424891",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 801654114,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTY1NDExNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801654114",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T06:01:49Z",
      "updated_at": "2021-03-18T06:01:49Z",
      "author_association": "NONE",
      "body": "ACK fa5382241f7943a7395f60a8916e0d71c10d2932\r\n\r\nReviewed the code and ran the fuzz coverage tests before & after running for a few hours. Definitely getting better coverage with this, especially with the mempool/validation files. \r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\n```\r\n\r\n              Hit     Total  Coverage      \r\nLines:       28292    43939   64.4 %\r\nFunctions:    7835    11651   67.2 %\r\nBranches:   101626   333283   30.5 %\r\n\r\n\r\n                             \r\nFilename                     Line Coverage             Functions               Branches\r\n....\r\ntxmempool.cpp             35.7 %    262 / 734      50.8 %     31 / 61     15.8 %   782 / 4940\r\ntxmempool.h               61.9 %     99 / 160      60.0 %     42 / 70     30.2 %   189 / 626\r\ntxorphanage.cpp           61.7 %     74 / 120      66.7 %      6 / 9      25.0 %   205 / 820\r\ntxorphanage.h            100.0 %      4 / 4       100.0 %      5 / 5      50.0 %     4 / 8\r\ntxrequest.cpp             99.3 %    292 / 294     100.0 %     78 / 78     53.2 %  1330 / 2500\r\nuint256.cpp              100.0 %     32 / 32       60.0 %      6 / 10     32.3 %    62 / 192\r\nuint256.h                100.0 %     54 / 54       92.0 %     46 / 50     41.0 %    77 / 188\r\nundo.h                   100.0 %     22 / 22       59.6 %     28 / 47     30.7 %    54 / 176\r\nvalidation.cpp            45.4 %   1338 / 2945     59.9 %    115 / 192    20.1 %  3992 / 19900\r\nvalidation.h              52.0 %     26 / 50       53.8 %     14 / 26     21.4 %    39 / 182\r\nvalidationinterface.cpp   46.8 %     58 / 124      39.8 %     35 / 88      8.8 %   178 / 2016\r\nvalidationinterface.h     20.0 %      2 / 10       20.0 %      2 / 10          -     0 / 0\r\n...\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n\r\n```\r\n              Hit     Total  Coverage\r\nLines:       28933    43936   65.9 %\r\nFunctions:    7934    11652   68.1 %\r\nBranches:   104236   333473   31.3 %\r\n\r\n\r\n\r\n\r\nFilename                     Line Coverage             Functions               Branches\r\n....\r\ntxmempool.cpp             54.9 %    403 / 734      67.2 %     41 / 61     25.6 %  1267 / 4940\r\ntxmempool.h               66.2 %    106 / 160      65.7 %     46 / 70     31.6 %   198 / 626\r\ntxorphanage.cpp           61.7 %     74 / 120      66.7 %      6 / 9      25.0 %   205 / 820\r\ntxorphanage.h            100.0 %      4 / 4       100.0 %      5 / 5      50.0 %     4 / 8\r\ntxrequest.cpp             99.3 %    292 / 294     100.0 %     78 / 78     53.2 %  1330 / 2500\r\nuint256.cpp              100.0 %     32 / 32       60.0 %      6 / 10     32.3 %    62 / 192\r\nuint256.h                100.0 %     54 / 54       92.0 %     46 / 50     41.0 %    77 / 188\r\nundo.h                   100.0 %     22 / 22       59.6 %     28 / 47     30.7 %    54 / 176\r\nvalidation.cpp            53.9 %   1586 / 2945     65.1 %    125 / 192    25.3 %  5044 / 19900\r\nvalidation.h              66.0 %     33 / 50       69.2 %     18 / 26     27.5 %    50 / 182\r\nvalidationinterface.cpp   81.5 %    101 / 124      71.6 %     63 / 88     19.9 %   402 / 2016\r\nvalidationinterface.h     30.0 %      3 / 10       30.0 %      3 / 10          -     0 / 0\r\n...\r\n```\r\n\r\n</details>",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801654114",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4475149312,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3NTE0OTMxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4475149312",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T10:38:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4475154099,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3NTE1NDA5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4475154099",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T10:39:15Z"
    },
    {
      "event": "commented",
      "id": 801842171,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTg0MjE3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801842171",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T11:23:54Z",
      "updated_at": "2021-03-18T13:11:15Z",
      "author_association": "MEMBER",
      "body": "https://drahtbot.space/host_reports/DrahtBot/reports/coverage_fuzz/monotree/fa6cb809bc934009/fuzz.coverage/index.html",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-801842171",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4475528307,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3NTUyODMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4475528307",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T11:54:49Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4476407224,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3NjQwNzIyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4476407224",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T14:16:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4476475801,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3NjQ3NTgwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4476475801",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T14:26:55Z"
    },
    {
      "event": "commented",
      "id": 802000364,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjAwMDM2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802000364",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T15:02:13Z",
      "updated_at": "2021-03-18T15:03:57Z",
      "author_association": "MEMBER",
      "body": "@MarcoFalke as you requested in the review club yesterday, I ran the `tx_pool` fuzzer since then for 20+ hours and didn't see an accepted transaction.\r\n\r\n```diff\r\n         if (accepted) {\r\n             txids.push_back(tx->GetHash());\r\n+            std::cout << \"\\n\\n\\n*********************** SUCCESS ***************************\\n\\n\\n\";\r\n         }\r\n```\r\n\r\n```\r\n#7104574\tNEW    cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 393483/902446 MS: 3 EraseBytes-ChangeByte-CMP- DE: \"\\x01\\x00\\x00\\x00\\x10\\x8b\\x12\\xb3\"-\r\n#7104591\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 70/902446 MS: 1 EraseBytes-\r\n#7104827\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 451/902446 MS: 1 EraseBytes-\r\n#7104855\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 118/902446 MS: 3 CMP-CMP-EraseBytes- DE: \"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xff\"-\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"-\r\n#7105353\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 15731/902446 MS: 2 InsertRepeatedBytes-EraseBytes-\r\n#7107174\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 111/902446 MS: 1 EraseBytes-\r\n#7108811\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 160/902446 MS: 1 EraseBytes-\r\n#7109018\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 5278/902446 MS: 2 InsertByte-EraseBytes-\r\n#7109675\tREDUCE cov: 10002 ft: 58007 corp: 2495/59Mb lim: 907880 exec/s: 93 rss: 1733Mb L: 42/902446 MS: 2 ChangeBinInt-EraseBytes-\r\n```\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802000364",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "mentioned",
      "id": 4476712740,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ3NjcxMjc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4476712740",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T15:02:13Z"
    },
    {
      "event": "subscribed",
      "id": 4476712743,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0NzY3MTI3NDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4476712743",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T15:02:13Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE5ZWY0OWQxOGRhOTIyMzIyMGFmY2MyNjNhYzkxYTc0YzI5MWE2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa9ef49d18da9223220afcc263ac91a74c291a6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/faa9ef49d18da9223220afcc263ac91a74c291a6",
      "tree": {
        "sha": "f0c9556bf0f153dda55dcb3d0b653506fcd83ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0c9556bf0f153dda55dcb3d0b653506fcd83ec3"
      },
      "verification": {
        "verified": false,
        "reason": "no_user",
        "payload": "tree f0c9556bf0f153dda55dcb3d0b653506fcd83ec3\nparent 6834e02c896b97ecbd2ad8251c5b09612b27bf10\nauthor MarcoFalke <falke.marco@gmail.com> 1610655979 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1616089432 +0100\n\nfuzz: Add tx_pool fuzz targets\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjpXQwAmT+u9IybzrKspXMzZCakd+OzEumf7IgCdRi5TVnw6HMzeQrqGEzyfr+3\ndmA0GfLVhsiskjioUA2et5DxEBX6YMDuSt1MRoFOMTO77kFVjX73nh5PYPxRrqhc\nRulnHZYfcG7kwi5njczyFXhFq2XAIpPdwIfYHZWttkOQP1qORvgTJ3ljaeeJa9k0\nvWjplFmS4YwZGMpLLC1vM28FdH67u7b/jX1022LHSJAEXwUUoEptwNcywxeupcdf\naa1/T3E9rUkosGjSfDW2Anzej4thbE7Wvbc91bO+EYho0/oeUr/MKFEC0u5uZ8Uu\nA5oY6hZ/0dDwDiOrIdMEkNafFxHJJ9/eMG++nagEGoDcoFF5cSDACN4RVdY9bHbu\naToWVxt17dS8Vod0GeaSeSBQK52W3BlCbnaLZ2+7fh+eCYonU6lC73uZTrbingDY\nkGqRxRQG3l7ELOEioieyi8y+x4YQXPtZwicUB77H1ZJOPRkJJZWGy0So3nTEG5Nh\nU1tDp5Ig\n=+xYw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6834e02c896b97ecbd2ad8251c5b09612b27bf10",
          "sha": "6834e02c896b97ecbd2ad8251c5b09612b27bf10",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/6834e02c896b97ecbd2ad8251c5b09612b27bf10"
        }
      ],
      "message": "fuzz: Add tx_pool fuzz targets",
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-03-18T17:43:52Z"
      },
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-01-14T20:26:19Z"
      },
      "sha": "faa9ef49d18da9223220afcc263ac91a74c291a6"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4477768650,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDQ3Nzc2ODY1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4477768650",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T17:56:37Z"
    },
    {
      "event": "commented",
      "id": 802165733,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjE2NTczMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802165733",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T17:57:28Z",
      "updated_at": "2021-03-18T17:57:28Z",
      "author_association": "MEMBER",
      "body": "I quickly ran 15kk iterations (double the 7kk iterations of yours) and it did hit a valid tx.\r\n\r\n```\r\n#15766688\tREDUCE cov: 3250 ft: 28506 corp: 8582/1579Kb lim: 4096 exec/s: 2341 rss: 98Mb L: 49/4096 MS: 1 EraseBytes-\r\n```\r\n\r\nHowever, I pushed a patch, where you should see a valid tx within ~100k iterations.\r\n\r\nAll feedback has been addressed, this is now ready for re-ACKs.\r\n",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802165733",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 802209684,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjIwOTY4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802209684",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-18T18:59:37Z",
      "updated_at": "2021-03-18T19:01:10Z",
      "author_association": "MEMBER",
      "body": "Valid tx within a few seconds with latest push.\r\n\r\n```\r\n#35708\tNEW    cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 2975 rss: 587Mb L: 163/163 MS: 3 ShuffleBytes-InsertRepeatedBytes-CrossOver-\r\n#36093\tREDUCE cov: 5635 ft: 14652 corp: 159/22Kb lim: 163 exec/s: 3007 rss: 587Mb L: 136/163 MS: 5 ChangeBinInt-CrossOver-PersAutoDict-ChangeByte-InsertRepeatedBytes- DE: \"\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"-\r\n\r\n*********************** SUCCESS ***************************\r\n\r\n\tNEW_FUNC[1/335]: 0x559b1920a260 in std::vector<int, std::allocator<int> >::~vector() /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/stl_vector.h:679\r\n\tNEW_FUNC[2/335]: 0x559b1920a870 in std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl() /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/stl_vector.h:134\r\n```\r\n\r\nEdit: and many valid txs.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802209684",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 802495917,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMjQ5NTkxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/802495917",
      "actor": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-19T02:40:05Z",
      "updated_at": "2021-03-19T02:40:05Z",
      "author_association": "NONE",
      "body": "reACK faa9ef49d18da9223220afcc263ac91a74c291a6\r\n\r\nGetting a better overall coverage profile (though I have been running for a lot longer and probably have better seeds by now)\r\n\r\n```\r\nSummary coverage rate:                                              \r\n  lines......: 66.4% (29127 of 43873 lines)                         \r\n  functions..: 68.3% (7960 of 11646 functions)                      \r\n  branches...: 31.5% (104949 of 333689 branches) \r\n```\r\n\r\nPlus got 378 accepted transactions for the `tx_pool` target between try `#65536` & `#131072`. ",
      "user": {
        "login": "ghost",
        "id": 10137,
        "node_id": "MDQ6VXNlcjEwMTM3",
        "avatar_url": "https://avatars.githubusercontent.com/u/10137?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ghost",
        "html_url": "https://github.com/ghost",
        "followers_url": "https://api.github.com/users/ghost/followers",
        "following_url": "https://api.github.com/users/ghost/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ghost/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ghost/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ghost/subscriptions",
        "organizations_url": "https://api.github.com/users/ghost/orgs",
        "repos_url": "https://api.github.com/users/ghost/repos",
        "events_url": "https://api.github.com/users/ghost/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ghost/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-802495917",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "commented",
      "id": 803476239,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgwMzQ3NjIzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803476239",
      "actor": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-20T23:07:13Z",
      "updated_at": "2021-03-20T23:07:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "Tested ACK faa9ef49d18da9223220afcc263ac91a74c291a6\r\n\r\nVery nice fuzzing harness! Thanks @MarcoFalke!",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#issuecomment-803476239",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21142"
    },
    {
      "event": "mentioned",
      "id": 4486099585,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDQ4NjA5OTU4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4486099585",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-20T23:07:13Z"
    },
    {
      "event": "subscribed",
      "id": 4486099586,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ0ODYwOTk1ODY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4486099586",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-20T23:07:13Z"
    },
    {
      "event": "reviewed",
      "id": 618037462,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE4MDM3NDYy",
      "url": null,
      "actor": null,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "code review ACK faa9ef49d18da9223220afcc263ac91a74c291a6, a bunch of comments but non blocking\r\n\r\n@MarcoFalke why do you call it tx_pool, is it the cool way of saying mempool? I would've called this mempool_validation.cpp and s/tx_pool/mempool",
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#pullrequestreview-618037462",
      "submitted_at": "2021-03-23T00:39:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
    },
    {
      "event": "merged",
      "id": 4494826901,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDQ5NDgyNjkwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4494826901",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fd2b22bf24d81027d9908d1e8aff498d6cf1a463",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd2b22bf24d81027d9908d1e8aff498d6cf1a463",
      "created_at": "2021-03-23T09:01:28Z"
    },
    {
      "event": "closed",
      "id": 4494826917,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDQ5NDgyNjkxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4494826917",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T09:01:28Z"
    },
    {
      "event": "reviewed",
      "id": 618372168,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE4MzcyMTY4",
      "url": null,
      "actor": null,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "replied to comments",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#pullrequestreview-618372168",
      "submitted_at": "2021-03-23T09:59:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
    },
    {
      "event": "head_ref_deleted",
      "id": 4495117165,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0NDk1MTE3MTY1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4495117165",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-03-23T09:59:56Z"
    },
    {
      "event": "referenced",
      "id": 4496581572,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ0OTY1ODE1NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4496581572",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f9e1e6b58681b0b58a03e1d23c0c448a71eb8d10",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/f9e1e6b58681b0b58a03e1d23c0c448a71eb8d10",
      "created_at": "2021-03-23T14:38:10Z"
    },
    {
      "event": "locked",
      "id": 7199033384,
      "node_id": "LOE_lADOABII584wBpttzwAAAAGtGIgo",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199033384",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:06:55Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635",
      "pull_request_review_id": 613825058,
      "id": 595626635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYyNjYzNQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was wondering if RBF'ed transactions would be in `removed`, but then realized it wouldn't hit RBF stuff since you only use inputs from `outpoints`. Maybe add `Assert(res.m_replaced_transactions.size() == 0)`?",
      "created_at": "2021-03-17T00:20:26Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595626635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595626635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 174,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907",
      "pull_request_review_id": 613825058,
      "id": 595631907,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzMTkwNw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 195,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Naming suggestions for clarity\r\n\r\n```suggestion\r\n        const auto insert_tx = [](auto& created_in_tx, auto& spent_by_tx, const auto& tx) {\r\n            for (size_t i{0}; i < tx->vout.size(); ++i) {\r\n                Assert(created_in_tx.emplace(tx->GetHash(), i).second);\r\n            }\r\n            for (const auto& in : tx->vin) {\r\n                Assert(spent_by_tx.insert(in.prevout).second);\r\n            }\r\n        };\r\n        // Add created outpoints, remove spent outpoints\r\n        {\r\n            std::set<COutPoint> spent_outpoints;\r\n            for (const auto& removed_tx : removed) {\r\n                insert_tx(/* created_in_tx */ spent, /* spent_by_tx */ outpoints, /* tx */ removed_tx);\r\n            }\r\n            for (const auto& added_tx : added) {\r\n                insert_tx(/* created_in_tx */ outpoints, /* spent_by_tx */ spent, /* tx */ added_tx);\r\n            }\r\n            for (const auto& p : spent) {\r\n```",
      "created_at": "2021-03-17T00:35:59Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595631907",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595631907"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690",
      "pull_request_review_id": 613825058,
      "id": 595637690,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzY5MA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why does `num_out` need to be in the range [1, outpoints.size()]?",
      "created_at": "2021-03-17T00:52:52Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917",
      "pull_request_review_id": 613825058,
      "id": 595637917,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTYzNzkxNw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not have an `amount_left` and pull amounts from `ConsumeIntegralInRange<CAmount>(0, amount_left)`?",
      "created_at": "2021-03-17T00:53:36Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595637917",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595637917"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616",
      "pull_request_review_id": 613825058,
      "id": 595643616,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTY0MzYxNg==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: I know it's a test, but does it make sense for any of these values to be 0? 😮 I'm also wondering why 200 is the max instead of something closer to the default values?",
      "created_at": "2021-03-17T01:10:33Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r595643616",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/595643616"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657",
      "pull_request_review_id": 614402773,
      "id": 596090657,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MDY1Nw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& tx_outs, auto& tx_ins, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(tx_outs.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(tx_ins.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> pop;\n+            for (const auto& r : removed) {\n+                insert_tx(/* tx_outs */ pop, /* tx_ins */ outpoints, /* tx */ r);\n+            }\n+            for (const auto& a : added) {\n+                insert_tx(/* tx_outs */ outpoints, /* tx_ins */ pop, /* tx */ a);\n+            }\n+            for (const auto& p : pop) {",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 195,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": 595631907,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, renamed `pop` to `spent`. `tx_outs` to `created_by_tx`. `tx_ins` to `spent_by_tx`.",
      "created_at": "2021-03-17T14:50:26Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596090657",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596090657"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 178,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187",
      "pull_request_review_id": 614403360,
      "id": 596091187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTE4Nw==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 115,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": 595637690,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks. Limited to 2*outputs.size",
      "created_at": "2021-03-17T14:50:53Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091187",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 114,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996",
      "pull_request_review_id": 614404528,
      "id": 596091996,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5MTk5Ng==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 140,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": 595637917,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Made it to pick the fee instead of the output amounts. They are now all constant for each tx",
      "created_at": "2021-03-17T14:51:49Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596091996",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596091996"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 140,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609",
      "pull_request_review_id": 614408154,
      "id": 596094609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjA5NDYwOQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": 595643616,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "* I want to set it small enough so that the fuzz engine can quickly hit the limit without having to produce megabytes of transactions first.\r\n* Changed all maxima to be multiples of the default values, except for maxmempool, which is in [0,200]",
      "created_at": "2021-03-17T14:54:35Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596094609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596094609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596136078",
      "pull_request_review_id": 614472163,
      "id": 596136078,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjEzNjA3OA==",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\r\n```",
      "created_at": "2021-03-17T15:35:39Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596136078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596136078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596146995",
      "pull_request_review_id": 614472163,
      "id": 596146995,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjE0Njk5NQ==",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n        // Remember all removed and added transactions\r\n```",
      "created_at": "2021-03-17T15:44:44Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596146995",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596146995"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596156456",
      "pull_request_review_id": 614472163,
      "id": 596156456,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjE1NjQ1Ng==",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& created_by_tx, auto& consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(created_by_tx.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(consumed_by_tx.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> spent;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ spent, /* consumed_by_tx */ outpoints, /* tx */ removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ outpoints, /* consumed_by_tx */ spent, /* tx */ added_tx);\n+            }\n+            for (const auto& p : spent) {\n+                Assert(outpoints.erase(p) == 1);\n+            }\n+        }\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+    }\n+    CTxMemPool tx_pool;\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n+\n+        const auto tx = MakeTransactionRef(mut_tx);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 223,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "maybe simplify to\r\n```diff\r\n@@ -159,8 +159,7 @@ FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\r\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\r\n-        const bool require_standard = fuzzed_data_provider.ConsumeBool();\r\n-        ::fRequireStandard = require_standard;\r\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\r\n         const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\r\n\r\n@@ -219,8 +218,7 @@ FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\r\n         const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\r\n-        const bool require_standard = fuzzed_data_provider.ConsumeBool();\r\n-        ::fRequireStandard = require_standard;\r\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\r\n         const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\r\n```\r\n",
      "created_at": "2021-03-17T15:55:19Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596156456",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596156456"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596361725",
      "pull_request_review_id": 614759190,
      "id": 596361725,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM2MTcyNQ==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    {\n+        const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+        SetMockTime(time_fuzzed);\n+    }\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto time_fuzzed = ConsumeTime(fuzzed_data_provider);\n+            SetMockTime(time_fuzzed);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            node.args->ForceSetArg(\"-limitancestorcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitancestorsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantcount\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-limitdescendantsize\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-maxmempool\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+            node.args->ForceSetArg(\"-mempoolexpiry\",\n+                                   ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const CAmount max_amount_out{amount_in / num_out};\n+            for (int i = 0; i < num_out; ++i) {\n+                const auto amount_out = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, max_amount_out);\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faed1f78f14eb65e75fb692a4fa38b92cacd5a82",
      "in_reply_to_id": 595626635,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Excellent suggestion to add rbf. Done",
      "created_at": "2021-03-17T20:33:47Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596361725",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596361725"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": 174,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852709",
      "pull_request_review_id": 615364745,
      "id": 596852709,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njg1MjcwOQ==",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 156,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "in_reply_to_id": 596146995,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thx, done",
      "created_at": "2021-03-18T13:10:43Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852709",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852807",
      "pull_request_review_id": 615364865,
      "id": 596852807,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njg1MjgwNw==",
      "diff_hunk": "@@ -0,0 +1,233 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All spendable outpoints\n+    std::set<COutPoint> outpoints;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints.insert(outpoint).second);\n+        if (outpoints.size() >= COINBASE_MATURITY) break;\n+    }\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &node.chainman->ActiveChainstate().CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all spendable outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (outpoints.empty()) return;\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = fuzzed_data_provider.ConsumeBool() ?\n+                                          fuzzed_data_provider.PickValueInArray({CTxIn::SEQUENCE_FINAL, CTxIn::SEQUENCE_FINAL - 1}) :\n+                                          fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        // Remember all removed and added transaction\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(node.chainman->ActiveChainstate(), tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        }\n+\n+        // Do not consider rejected transaction removed\n+        removed.erase(tx);\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        const auto insert_tx = [](auto& created_by_tx, auto& consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx->vout.size(); ++i) {\n+                Assert(created_by_tx.emplace(tx->GetHash(), i).second);\n+            }\n+            for (const auto& in : tx->vin) {\n+                Assert(consumed_by_tx.insert(in.prevout).second);\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            std::set<COutPoint> spent;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ spent, /* consumed_by_tx */ outpoints, /* tx */ removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ outpoints, /* consumed_by_tx */ spent, /* tx */ added_tx);\n+            }\n+            for (const auto& p : spent) {\n+                Assert(outpoints.erase(p) == 1);\n+            }\n+        }\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+    }\n+    CTxMemPool tx_pool;\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const auto mut_tx = ConsumeTransaction(fuzzed_data_provider, txids);\n+\n+        const auto tx = MakeTransactionRef(mut_tx);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        const bool require_standard = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = require_standard;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": null,
      "original_position": 223,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "bcf96cdf4b3df868050b698713dafbd93bcd7add",
      "in_reply_to_id": 596156456,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "done",
      "created_at": "2021-03-18T13:10:50Z",
      "updated_at": "2021-03-18T17:56:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r596852807",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/596852807"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127042",
      "pull_request_review_id": 618037462,
      "id": 599127042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTEyNzA0Mg==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: Why can't you use a `static_cast` here instead?",
      "created_at": "2021-03-22T22:50:47Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127881",
      "pull_request_review_id": 618037462,
      "id": 599127881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTEyNzg4MQ==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 106,
      "original_position": 106,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This can just be:\r\n```suggestion\r\n        Assert(amount_view.GetCoin(outpoint, c));\r\n```",
      "created_at": "2021-03-22T22:52:57Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599127881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599127881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 105,
      "original_start_line": 105,
      "start_side": "RIGHT",
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143533",
      "pull_request_review_id": 618037462,
      "id": 599143533,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0MzUzMw==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 257,
      "original_position": 257,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Question: is the same `g_outpoints_coinbase_init` used for both the tx_pool and tx_pool_standard targets?",
      "created_at": "2021-03-22T23:31:57Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143533",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143782",
      "pull_request_review_id": 618037462,
      "id": 599143782,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0Mzc4Mg==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+        if (txids.size() >= COINBASE_MATURITY) break;\n+    }\n+    for (int i{0}; i <= 3; ++i) {\n+        // Add some immature and non-existent outpoints\n+        txids.push_back(g_outpoints_coinbase_init.at(i).hash);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Aren't the ones at the beginning the mature ones? \r\nIt could also be more clear to have two sets `g_outpoints_coinbases_mature` and `g_outpoints_coinbases_immature`.\r\n\r\n```suggestion\r\n        txids.push_back(g_outpoints_coinbase_init.at(COINBASE_MATURITY + i).hash);\r\n```",
      "created_at": "2021-03-22T23:32:43Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599143782",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599143782"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 263,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599148154",
      "pull_request_review_id": 618037462,
      "id": 599148154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0ODE1NA==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not use `PickValue` for this? It could take a bool to PickAndMaybeDelete?",
      "created_at": "2021-03-22T23:45:18Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599148154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599148154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 132,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599149591",
      "pull_request_review_id": 618037462,
      "id": 599149591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE0OTU5MQ==",
      "diff_hunk": "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "path": "src/test/fuzz/util.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not make this a member function of `FuzzedDataProvider` like `PickValueInArray` is?",
      "created_at": "2021-03-22T23:48:54Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599149591",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599149591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599155394",
      "pull_request_review_id": 618037462,
      "id": 599155394,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1NTM5NA==",
      "diff_hunk": "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "path": "src/txmempool.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It seems a bit invasive to change all of these mempool members... can you just call something that automatically does `RollingFeeUpdate` like `tx_pool.GetMinFee()`? Or just set the members you need to `protected`?",
      "created_at": "2021-03-23T00:06:14Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599155394",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599155394"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 479,
      "original_start_line": 479,
      "start_side": "LEFT",
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599157262",
      "pull_request_review_id": 618037462,
      "id": 599157262,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE1NzI2Mg==",
      "diff_hunk": "@@ -125,11 +135,13 @@ template <typename WeakEnumType, size_t size>\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    return {b.begin(), b.end()};\n-}\n+[[nodiscard]] CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in = 10, const int max_num_out = 10) noexcept;\n+\n+[[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n+\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096, const bool maybe_p2wsh = false) noexcept;\n+\n+[[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;",
      "path": "src/test/fuzz/util.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add comments for the util functions?  e.g. I think it'd be helpful to document that `ConsumeTransaction` will give a tx that's well-formed but not necessarily valid, and it takes `prevout_txids` as input but won't necessarily use a txid from there.",
      "created_at": "2021-03-23T00:11:02Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599157262",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599157262"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599160321",
      "pull_request_review_id": 618037462,
      "id": 599160321,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE2MDMyMQ==",
      "diff_hunk": "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "path": "src/test/fuzz/util.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In some places you do braced, and in some places you do `=` 🤷 \r\n```suggestion\r\n    for (int i{0}; i < num_in; ++i) {\r\n```",
      "created_at": "2021-03-23T00:20:08Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599160321",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599160321"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599165512",
      "pull_request_review_id": 618037462,
      "id": 599165512,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTE2NTUxMg==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": null,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "These comments are confusing 😢\r\n`outpoints_rbf` includes all spendable outpoints including ones that would be RBFs, but \"RBF-spendable\" sounds like they're only the ones in the mempool.\r\n`outpoints_supply` doesn't actually include all the outpoints that count towards total supply. It doesn't include the mempool inputs which is why we need to add mempool `GetTotalFee` to it...",
      "created_at": "2021-03-23T00:36:36Z",
      "updated_at": "2021-03-23T00:39:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599165512",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599165512"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 85,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": 88,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403634",
      "pull_request_review_id": 618372168,
      "id": 599403634,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzYzNA==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599148154,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wouldn't that make `PickValue` unsuitable for collections that can't erase elements. E.g. `std::array`",
      "created_at": "2021-03-23T09:31:24Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403634",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403634"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 132,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403815",
      "pull_request_review_id": 618372168,
      "id": 599403815,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzgxNQ==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 99,
      "original_position": 99,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599127042,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done in follow-up",
      "created_at": "2021-03-23T09:31:38Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403815",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403815"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 99,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403866",
      "pull_request_review_id": 618372168,
      "id": 599403866,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwMzg2Ng==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 106,
      "original_position": 106,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599127881,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, done in follow-up",
      "created_at": "2021-03-23T09:31:42Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599403866",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599403866"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 105,
      "original_start_line": 105,
      "start_side": "RIGHT",
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599407215",
      "pull_request_review_id": 618372168,
      "id": 599407215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwNzIxNQ==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599165512,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> outpoints_rbf\r\n\r\nHappy to rename if you have suggestions.\r\n\r\n> It doesn't include the mempool inputs which is why we need to add mempool GetTotalFee to it...\r\n\r\nI don't understand what you mean with \"mempool inputs\". `outpoints_supply` does include all outpoints from the mempool. The reason that `GetTotalFee` needs to be added is that the fee in the mempool isn't assigned to an outpoint (yet). The fee is collected in the coinbase transaction in a block, which doesn't exist because this fuzz target doesn't mine any blocks with mempool txs.",
      "created_at": "2021-03-23T09:36:17Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599407215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599407215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 85,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": 88,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408013",
      "pull_request_review_id": 618372168,
      "id": 599408013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwODAxMw==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 257,
      "original_position": 257,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599143533,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes",
      "created_at": "2021-03-23T09:37:19Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 257,
      "original_line": 257,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408488",
      "pull_request_review_id": 618372168,
      "id": 599408488,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwODQ4OA==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;\n+                outpoints_rbf.erase(pop);\n+                amount_in += GetAmount(outpoint);\n+\n+                // Create input\n+                const auto sequence = ConsumeSequence(fuzzed_data_provider);\n+                const auto script_sig = CScript{};\n+                const auto script_wit_stack = std::vector<std::vector<uint8_t>>{WITNESS_STACK_ELEM_OP_TRUE};\n+                CTxIn in;\n+                in.prevout = outpoint;\n+                in.nSequence = sequence;\n+                in.scriptSig = script_sig;\n+                in.scriptWitness.stack = script_wit_stack;\n+\n+                tx_mut.vin.push_back(in);\n+            }\n+            const auto amount_fee = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-1000, amount_in);\n+            const auto amount_out = (amount_in - amount_fee) / num_out;\n+            for (int i = 0; i < num_out; ++i) {\n+                tx_mut.vout.emplace_back(amount_out, P2WSH_OP_TRUE);\n+            }\n+            const auto tx = MakeTransactionRef(tx_mut);\n+            // Restore previously removed outpoints\n+            for (const auto& in : tx->vin) {\n+                Assert(outpoints_rbf.insert(in.prevout).second);\n+            }\n+            return tx;\n+        }();\n+\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMockTime(ConsumeTime(fuzzed_data_provider));\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            tx_pool.RollingFeeUpdate();\n+        }\n+        if (fuzzed_data_provider.ConsumeBool()) {\n+            const auto& txid = fuzzed_data_provider.ConsumeBool() ?\n+                                   tx->GetHash() :\n+                                   PickValue(fuzzed_data_provider, outpoints_rbf).hash;\n+            const auto delta = fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(-50 * COIN, +50 * COIN);\n+            tx_pool.PrioritiseTransaction(txid, delta);\n+        }\n+\n+        // Remember all removed and added transactions\n+        std::set<CTransactionRef> removed;\n+        std::set<CTransactionRef> added;\n+        auto txr = std::make_shared<TransactionsDelta>(removed, added);\n+        RegisterSharedValidationInterface(txr);\n+        const bool bypass_limits = fuzzed_data_provider.ConsumeBool();\n+        ::fRequireStandard = fuzzed_data_provider.ConsumeBool();\n+        const auto res = WITH_LOCK(::cs_main, return AcceptToMemoryPool(chainstate, tx_pool, tx, bypass_limits));\n+        const bool accepted = res.m_result_type == MempoolAcceptResult::ResultType::VALID;\n+        SyncWithValidationInterfaceQueue();\n+        UnregisterSharedValidationInterface(txr);\n+\n+        Assert(accepted != added.empty());\n+        Assert(accepted == res.m_state.IsValid());\n+        Assert(accepted != res.m_state.IsInvalid());\n+        if (accepted) {\n+            Assert(added.size() == 1); // For now, no package acceptance\n+            Assert(tx == *added.begin());\n+        } else {\n+            // Do not consider rejected transaction removed\n+            removed.erase(tx);\n+        }\n+\n+        // Helper to insert spent and created outpoints of a tx into collections\n+        using Sets = std::vector<std::reference_wrapper<std::set<COutPoint>>>;\n+        const auto insert_tx = [](Sets created_by_tx, Sets consumed_by_tx, const auto& tx) {\n+            for (size_t i{0}; i < tx.vout.size(); ++i) {\n+                for (auto& set : created_by_tx) {\n+                    Assert(set.get().emplace(tx.GetHash(), i).second);\n+                }\n+            }\n+            for (const auto& in : tx.vin) {\n+                for (auto& set : consumed_by_tx) {\n+                    Assert(set.get().insert(in.prevout).second);\n+                }\n+            }\n+        };\n+        // Add created outpoints, remove spent outpoints\n+        {\n+            // Outpoints that no longer exist at all\n+            std::set<COutPoint> consumed_erased;\n+            // Outpoints that no longer count toward the total supply\n+            std::set<COutPoint> consumed_supply;\n+            for (const auto& removed_tx : removed) {\n+                insert_tx(/* created_by_tx */ {consumed_erased}, /* consumed_by_tx */ {outpoints_supply}, /* tx */ *removed_tx);\n+            }\n+            for (const auto& added_tx : added) {\n+                insert_tx(/* created_by_tx */ {outpoints_supply, outpoints_rbf}, /* consumed_by_tx */ {consumed_supply}, /* tx */ *added_tx);\n+            }\n+            for (const auto& p : consumed_erased) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+                Assert(outpoints_rbf.erase(p) == 1);\n+            }\n+            for (const auto& p : consumed_supply) {\n+                Assert(outpoints_supply.erase(p) == 1);\n+            }\n+        }\n+    }\n+    WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    const auto info_all = tx_pool.infoAll();\n+    if (!info_all.empty()) {\n+        const auto& tx_to_remove = *PickValue(fuzzed_data_provider, info_all).tx;\n+        WITH_LOCK(tx_pool.cs, tx_pool.removeRecursive(tx_to_remove, /* dummy */ MemPoolRemovalReason::BLOCK));\n+        std::vector<uint256> all_txids;\n+        tx_pool.queryHashes(all_txids);\n+        assert(all_txids.size() < info_all.size());\n+        WITH_LOCK(::cs_main, tx_pool.check(chainstate));\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+\n+    std::vector<uint256> txids;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        txids.push_back(outpoint.hash);\n+        if (txids.size() >= COINBASE_MATURITY) break;\n+    }\n+    for (int i{0}; i <= 3; ++i) {\n+        // Add some immature and non-existent outpoints\n+        txids.push_back(g_outpoints_coinbase_init.at(i).hash);",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 263,
      "original_position": 263,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599143782,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ouch :facepalm: . Good catch.",
      "created_at": "2021-03-23T09:37:52Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599408488",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599408488"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 263,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599409795",
      "pull_request_review_id": 618372168,
      "id": 599409795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQwOTc5NQ==",
      "diff_hunk": "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "path": "src/test/fuzz/util.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599160321,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Right, this isn't consistent. Though, I'll leave as is for now and remember to write `for (int i{0}; i < ...` in the future.",
      "created_at": "2021-03-23T09:39:43Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599409795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599409795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599410447",
      "pull_request_review_id": 618372168,
      "id": 599410447,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxMDQ0Nw==",
      "diff_hunk": "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "path": "src/test/fuzz/util.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599149591,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`FuzzedDataProvider` is taken from upstream, so someone needs to submit this to upstream first.",
      "created_at": "2021-03-23T09:40:37Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599410447",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599410447"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599413946",
      "pull_request_review_id": 618372168,
      "id": 599413946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxMzk0Ng==",
      "diff_hunk": "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "path": "src/txmempool.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599155394,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`tx_pool.GetMinFee` exists early because of `!blockSinceLastRollingFeeBump`, so I can't use that. `protected` as a replacement for `private` seems fine generally, because it allows tests to mock any private member without having to mark each member individually or add a `friend TestClass01` for each class that mocks the mempool. Since mempool isn't derived outside of tests, `protected` shouldn't come with any risks either.",
      "created_at": "2021-03-23T09:45:32Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599413946",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599413946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 479,
      "original_start_line": 479,
      "start_side": "LEFT",
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599415562",
      "pull_request_review_id": 618372168,
      "id": 599415562,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTQxNTU2Mg==",
      "diff_hunk": "@@ -125,11 +135,13 @@ template <typename WeakEnumType, size_t size>\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n-    return {b.begin(), b.end()};\n-}\n+[[nodiscard]] CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in = 10, const int max_num_out = 10) noexcept;\n+\n+[[nodiscard]] CScriptWitness ConsumeScriptWitness(FuzzedDataProvider& fuzzed_data_provider, const size_t max_stack_elem_size = 32) noexcept;\n+\n+[[nodiscard]] CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096, const bool maybe_p2wsh = false) noexcept;\n+\n+[[nodiscard]] uint32_t ConsumeSequence(FuzzedDataProvider& fuzzed_data_provider) noexcept;",
      "path": "src/test/fuzz/util.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599157262,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If `prevout_txids` is passed, it should only pick from there. As none of the functions in this file have doxygen comments, so I'll skip them for now. Though, I am more than happy to review a pull adding docs :)",
      "created_at": "2021-03-23T09:47:39Z",
      "updated_at": "2021-03-23T09:59:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599415562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599415562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 138,
      "original_start_line": 138,
      "start_side": "RIGHT",
      "line": 144,
      "original_line": 144,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599553077",
      "pull_request_review_id": 618568409,
      "id": 599553077,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1MzA3Nw==",
      "diff_hunk": "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "path": "src/test/fuzz/util.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599160321,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not `for (auto i{0} ...`? :eyes: ",
      "created_at": "2021-03-23T13:11:33Z",
      "updated_at": "2021-03-23T13:11:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599553077",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599553077"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599555332",
      "pull_request_review_id": 618571692,
      "id": 599555332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1NTMzMg==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 106,
      "original_position": 106,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599127881,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't it better to not have side-effects from asserts?",
      "created_at": "2021-03-23T13:14:34Z",
      "updated_at": "2021-03-23T13:14:35Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599555332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599555332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 105,
      "original_start_line": 105,
      "start_side": "RIGHT",
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599558374",
      "pull_request_review_id": 618575700,
      "id": 599558374,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU1ODM3NA==",
      "diff_hunk": "@@ -23,3 +26,78 @@ void FillNode(FuzzedDataProvider& fuzzed_data_provider, CNode& node, bool init_v\n         node.m_tx_relay->fRelayTxes = filter_txs;\n     }\n }\n+\n+CMutableTransaction ConsumeTransaction(FuzzedDataProvider& fuzzed_data_provider, const std::optional<std::vector<uint256>>& prevout_txids, const int max_num_in, const int max_num_out) noexcept\n+{\n+    CMutableTransaction tx_mut;\n+    const auto p2wsh_op_true = fuzzed_data_provider.ConsumeBool();\n+    tx_mut.nVersion = fuzzed_data_provider.ConsumeBool() ?\n+                          CTransaction::CURRENT_VERSION :\n+                          fuzzed_data_provider.ConsumeIntegral<int32_t>();\n+    tx_mut.nLockTime = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_in);\n+    const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, max_num_out);\n+    for (int i = 0; i < num_in; ++i) {",
      "path": "src/test/fuzz/util.cpp",
      "position": 27,
      "original_position": 27,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599160321,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`int` is one character shorter :shorts: ",
      "created_at": "2021-03-23T13:18:22Z",
      "updated_at": "2021-03-23T13:18:23Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599558374",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599558374"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 40,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578593",
      "pull_request_review_id": 618602663,
      "id": 599578593,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3ODU5Mw==",
      "diff_hunk": "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "path": "src/test/fuzz/util.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599149591,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oh, is it not src/test/fuzz/FuzzedDataProvider.h?",
      "created_at": "2021-03-23T13:42:28Z",
      "updated_at": "2021-03-23T13:42:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578593",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578593"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578827",
      "pull_request_review_id": 618602965,
      "id": 599578827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3ODgyNw==",
      "diff_hunk": "@@ -476,7 +476,7 @@ enum class MemPoolRemovalReason {\n  */\n class CTxMemPool\n {\n-private:\n+protected:",
      "path": "src/txmempool.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599155394,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sure, makes sense 👍 ",
      "created_at": "2021-03-23T13:42:46Z",
      "updated_at": "2021-03-23T13:42:46Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599578827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599578827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 479,
      "original_start_line": 479,
      "start_side": "LEFT",
      "line": 479,
      "original_line": 479,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599579500",
      "pull_request_review_id": 618603896,
      "id": 599579500,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU3OTUwMA==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 88,
      "original_position": 88,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599165512,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> outpoints_supply does include all outpoints from the mempool.\r\n\r\nA right 🤦 I was confoozed",
      "created_at": "2021-03-23T13:43:33Z",
      "updated_at": "2021-03-23T13:43:33Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599579500",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599579500"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 85,
      "original_start_line": 85,
      "start_side": "RIGHT",
      "line": 88,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599581054",
      "pull_request_review_id": 618606067,
      "id": 599581054,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU4MTA1NA==",
      "diff_hunk": "@@ -48,6 +48,16 @@ void CallOneOf(FuzzedDataProvider& fuzzed_data_provider, Callables... callables)\n     return ((i++ == call_index ? callables() : void()), ...);\n }\n \n+template <typename Collection>\n+const auto& PickValue(FuzzedDataProvider& fuzzed_data_provider, const Collection& col)",
      "path": "src/test/fuzz/util.h",
      "position": 5,
      "original_position": 5,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599149591,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It is, but it is only synced from upstream: https://github.com/llvm/llvm-project/blob/main/compiler-rt/include/fuzzer/FuzzedDataProvider.h",
      "created_at": "2021-03-23T13:45:24Z",
      "updated_at": "2021-03-23T13:45:24Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599581054",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599581054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599590631",
      "pull_request_review_id": 618619340,
      "id": 599590631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTU5MDYzMQ==",
      "diff_hunk": "@@ -0,0 +1,284 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/script.h>\n+#include <test/util/setup_common.h>\n+#include <util/rbf.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+namespace {\n+\n+const TestingSetup* g_setup;\n+std::vector<COutPoint> g_outpoints_coinbase_init;\n+\n+struct MockedTxPool : public CTxMemPool {\n+    void RollingFeeUpdate()\n+    {\n+        lastRollingFeeUpdate = GetTime();\n+        blockSinceLastRollingFeeBump = true;\n+    }\n+};\n+\n+void initialize_tx_pool()\n+{\n+    static const auto testing_setup = MakeNoLogFileContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; ++i) {\n+        CTxIn in = MineBlock(g_setup->m_node, P2WSH_OP_TRUE);\n+        // Remember the txids to avoid expensive disk acess later on\n+        g_outpoints_coinbase_init.push_back(in.prevout);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+struct TransactionsDelta final : public CValidationInterface {\n+    std::set<CTransactionRef>& m_removed;\n+    std::set<CTransactionRef>& m_added;\n+\n+    explicit TransactionsDelta(std::set<CTransactionRef>& r, std::set<CTransactionRef>& a)\n+        : m_removed{r}, m_added{a} {}\n+\n+    void TransactionAddedToMempool(const CTransactionRef& tx, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_added.insert(tx).second);\n+    }\n+\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t /* mempool_sequence */) override\n+    {\n+        Assert(m_removed.insert(tx).second);\n+    }\n+};\n+\n+void SetMempoolConstraints(ArgsManager& args, FuzzedDataProvider& fuzzed_data_provider)\n+{\n+    args.ForceSetArg(\"-limitancestorcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitancestorsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-limitdescendantcount\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 50)));\n+    args.ForceSetArg(\"-limitdescendantsize\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 202)));\n+    args.ForceSetArg(\"-maxmempool\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 200)));\n+    args.ForceSetArg(\"-mempoolexpiry\",\n+                     ToString(fuzzed_data_provider.ConsumeIntegralInRange<unsigned>(0, 999)));\n+}\n+\n+FUZZ_TARGET_INIT(tx_pool_standard, initialize_tx_pool)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const auto& node = g_setup->m_node;\n+    auto& chainstate = node.chainman->ActiveChainstate();\n+\n+    SetMockTime(ConsumeTime(fuzzed_data_provider));\n+    SetMempoolConstraints(*node.args, fuzzed_data_provider);\n+\n+    // All RBF-spendable outpoints\n+    std::set<COutPoint> outpoints_rbf;\n+    // All outpoints counting toward the total supply (subset of outpoints_rbf)\n+    std::set<COutPoint> outpoints_supply;\n+    for (const auto& outpoint : g_outpoints_coinbase_init) {\n+        Assert(outpoints_supply.insert(outpoint).second);\n+        if (outpoints_supply.size() >= COINBASE_MATURITY) break;\n+    }\n+    outpoints_rbf = outpoints_supply;\n+\n+    // The sum of the values of all spendable outpoints\n+    constexpr CAmount SUPPLY_TOTAL{COINBASE_MATURITY * 50 * COIN};\n+\n+    CTxMemPool tx_pool_{/* estimator */ nullptr, /* check_ratio */ 1};\n+    MockedTxPool& tx_pool = *(MockedTxPool*)&tx_pool_;\n+\n+    // Helper to query an amount\n+    const CCoinsViewMemPool amount_view{WITH_LOCK(::cs_main, return &chainstate.CoinsTip()), tx_pool};\n+    const auto GetAmount = [&](const COutPoint& outpoint) {\n+        Coin c;\n+        amount_view.GetCoin(outpoint, c);\n+        Assert(!c.IsSpent());\n+        return c.out.nValue;\n+    };\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        {\n+            // Total supply is the mempool fee + all outpoints\n+            CAmount supply_now{WITH_LOCK(tx_pool.cs, return tx_pool.GetTotalFee())};\n+            for (const auto& op : outpoints_supply) {\n+                supply_now += GetAmount(op);\n+            }\n+            Assert(supply_now == SUPPLY_TOTAL);\n+        }\n+        Assert(!outpoints_supply.empty());\n+\n+        // Create transaction to add to the mempool\n+        const CTransactionRef tx = [&] {\n+            CMutableTransaction tx_mut;\n+            tx_mut.nVersion = CTransaction::CURRENT_VERSION;\n+            tx_mut.nLockTime = fuzzed_data_provider.ConsumeBool() ? 0 : fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            const auto num_in = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size());\n+            const auto num_out = fuzzed_data_provider.ConsumeIntegralInRange<int>(1, outpoints_rbf.size() * 2);\n+\n+            CAmount amount_in{0};\n+            for (int i = 0; i < num_in; ++i) {\n+                // Pop random outpoint\n+                auto pop = outpoints_rbf.begin();\n+                std::advance(pop, fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, outpoints_rbf.size() - 1));\n+                const auto outpoint = *pop;",
      "path": "src/test/fuzz/tx_pool.cpp",
      "position": 134,
      "original_position": 134,
      "commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "original_commit_id": "faa9ef49d18da9223220afcc263ac91a74c291a6",
      "in_reply_to_id": 599148154,
      "user": {
        "login": "glozow",
        "id": 25183001,
        "node_id": "MDQ6VXNlcjI1MTgzMDAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/glozow",
        "html_url": "https://github.com/glozow",
        "followers_url": "https://api.github.com/users/glozow/followers",
        "following_url": "https://api.github.com/users/glozow/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/glozow/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/glozow/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
        "organizations_url": "https://api.github.com/users/glozow/orgs",
        "repos_url": "https://api.github.com/users/glozow/repos",
        "events_url": "https://api.github.com/users/glozow/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/glozow/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ahhh true",
      "created_at": "2021-03-23T13:56:26Z",
      "updated_at": "2021-03-23T13:56:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/21142#discussion_r599590631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599590631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21142"
        }
      },
      "start_line": 132,
      "original_start_line": 132,
      "start_side": "RIGHT",
      "line": 134,
      "original_line": 134,
      "side": "RIGHT"
    }
  ]
}