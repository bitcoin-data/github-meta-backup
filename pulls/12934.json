{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934",
    "id": 180738473,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTgwNzM4NDcz",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12934",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/12934.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/12934.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
    "number": 12934,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[net] [validation] Call ProcessNewBlock() asynchronously",
    "user": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Update\r\n-\r\nI think this is now in a state for code review\r\nSummary of discussion of overall design as well as some concept acks: https://bitcoincore.org/en/meetings/2018/05/03/\r\n\r\n---\r\nDescription\r\n-\r\n\r\n~~This is still in progress and not fully completed yet, but wanted to put it out for review in terms of overall design/architecture~~\r\n\r\nThe high level goal here (in this, and if accepted, subsequent PRs) is to allow for net and validation to live on separate threads and communicate mostly via message passing - both for the efficiency benefits that further parallelism in the net layer might provide, but also perhaps moreso as a step towards the goal of reducing the amount of shared state and forcing a cleaner separation between the net and validation layers in the core node. \r\n\r\nTo keep this PR as self contained as possible - this set of commits does the following:\r\n  - defines `ProducerConsumerQueue() / ConsumerThread()`: infrastructure to facilitate async communication between the net and validation layers\r\n  - defines ValidationLayer(): an interface where requests for (just `CBlock` for now) validation can be submitted and processed asynchronously\r\n  - replaces synchronous calls of `ProcessNewBlock()` in net_processing with the new async interface `ValidationLayer::SubmitForValidation(CBlock) -> std::future<BlockValidationResult>`\r\n\r\nBecause the P2P layer assumes that for a given node every message is fully processed before any subsequent messages are processed, when an asynchronous validation request is submitted for a block coming from a node - that node is \"frozen\" until that request has been fully validated. In the meantime - the net layer may continue servicing other nodes that do not have pending asynchronous validation requests.\r\n\r\nThe ProducerConsumerQueue() was left sufficiently generic so that it may be interposed  in other places where separation of components via asynchronous message passing might make sense from a design perspective.",
    "labels": [],
    "active_lock_reason": "resolved",
    "created_at": "2018-04-10T21:54:36Z",
    "updated_at": "2022-02-15T10:34:36Z",
    "closed_at": "2018-12-03T16:19:04Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "696753c610b1f2906c2fee8d7240df7d02c3327c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "skeees:module-isolation",
      "ref": "module-isolation",
      "sha": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 118956449,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTg5NTY0NDk=",
        "name": "bitcoin",
        "full_name": "skeees/bitcoin",
        "owner": {
          "login": "skeees",
          "id": 195769,
          "node_id": "MDQ6VXNlcjE5NTc2OQ==",
          "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/skeees",
          "html_url": "https://github.com/skeees",
          "followers_url": "https://api.github.com/users/skeees/followers",
          "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
          "organizations_url": "https://api.github.com/users/skeees/orgs",
          "repos_url": "https://api.github.com/users/skeees/repos",
          "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/skeees/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/skeees/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/skeees/bitcoin",
        "archive_url": "https://api.github.com/repos/skeees/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/skeees/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/skeees/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/skeees/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/skeees/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/skeees/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/skeees/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/skeees/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/skeees/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/skeees/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/skeees/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/skeees/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/skeees/bitcoin/events",
        "forks_url": "https://api.github.com/repos/skeees/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/skeees/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/skeees/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/skeees/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/skeees/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/skeees/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/skeees/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/skeees/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/skeees/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/skeees/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/skeees/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/skeees/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/skeees/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/skeees/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/skeees/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/skeees/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:skeees/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/skeees/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/skeees/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/skeees/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/skeees/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/skeees/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/skeees/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/skeees/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/skeees/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/skeees/bitcoin/hooks",
        "svn_url": "https://github.com/skeees/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 133286,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2020-01-04T15:19:45Z",
        "created_at": "2018-01-25T19:15:49Z",
        "updated_at": "2020-01-04T15:19:52Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "29b4ee64695f79511912ae127e66e0fe82f7a0d1",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T00:30:39Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1052,
    "deletions": 128,
    "changed_files": 24,
    "commits": 9,
    "review_comments": 74,
    "comments": 9
  },
  "events": [
    {
      "event": "commented",
      "id": 380323422,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDMyMzQyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380323422",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T04:28:02Z",
      "updated_at": "2018-04-11T04:29:16Z",
      "author_association": "MEMBER",
      "body": "cc @theuni\r\n@skeees Have you looked through the current work being done to refactor the P2P code? See [here](https://github.com/bitcoin/bitcoin/projects/4) for an overview.",
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380323422",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "mentioned",
      "id": 1567650033,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU2NzY1MDAzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1567650033",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T04:28:02Z"
    },
    {
      "event": "subscribed",
      "id": 1567650034,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Njc2NTAwMzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1567650034",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T04:28:02Z"
    },
    {
      "event": "mentioned",
      "id": 1567650878,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU2NzY1MDg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1567650878",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T04:29:16Z"
    },
    {
      "event": "subscribed",
      "id": 1567650879,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1Njc2NTA4Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1567650879",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T04:29:16Z"
    },
    {
      "event": "commented",
      "id": 380451284,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MDQ1MTI4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380451284",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-11T13:27:26Z",
      "updated_at": "2018-04-11T13:27:26Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks, yes I have looked through those. This is more focused on separation between net_processing (PeerLogicValidation) and validation, whereas those primarily tackle socket handling and other ConnMan stuff. I don't think there's anything here that's redundant or incompatible with those refactors",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-380451284",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "commented",
      "id": 381001882,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4MTAwMTg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/381001882",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-13T02:26:09Z",
      "updated_at": "2018-04-13T02:26:09Z",
      "author_association": "MEMBER",
      "body": "cc @TheBlueMatt ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-381001882",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "mentioned",
      "id": 1572329946,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU3MjMyOTk0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1572329946",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-13T02:26:09Z"
    },
    {
      "event": "subscribed",
      "id": 1572329947,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1NzIzMjk5NDc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1572329947",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-13T02:26:09Z"
    },
    {
      "event": "reviewed",
      "id": 114508551,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTE0NTA4NTUx",
      "url": null,
      "actor": null,
      "commit_id": "5b880d2590686eb674c7bf350e16f58a124ddb44",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "@TheBlueMatt, could you take a quick look at the last commit (\"Call ProcessNewBlock() asynchronously in a separate thread\"), and give a concept ACK/NACK if you think the approach makes sense? (All the commits before the last one are pretty straightforward util code.)\r\n\r\nIt seems like a clean change that disentangles network & validation code and could make bitcoin more responsive to other network requests when blocks are coming in.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-114508551",
      "submitted_at": "2018-04-23T19:25:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "commented",
      "id": 383747761,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4Mzc0Nzc2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/383747761",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-23T22:52:16Z",
      "updated_at": "2018-04-23T22:52:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for the review - one thing (general design related) to add to the discussion here:\r\n\r\nSince I've submitted this request - I happened to stumble upon two race conditions in validation that stem from concurrent calls to ProcessNewBlock (#12988, #13023) \r\nThis pr should simplify the concurrency model for block validation (a single validation thread pulls a block to validate from the queue and validates it completely before moving on to the next block) and would have inadvertently fixed those two referenced race conditions.\r\n\r\nExplicitly simplifying the concurrency model hopefully reduces a bit the cognitive burden of future code changes in validation and I don't think makes anything substantially less efficient - much of validation is already single threaded (because of cs_main), and certain pieces fundamentally cannot be concurrent (i.e. connecttip). Validation is already complicated enough to understand on its own without worrying about concurrency.\r\n\r\nSeems like the clarity gains will outweigh the minor efficiency hit here - +the async api into should allow all the stuff around validation to be more easily be parallelized with less risk of inadvertently introducing a consensus bug. And it makes process separation / alternate p2p more natural if that's ever to be a thing in the future.\r\n\r\nIf this design seems useful - my intention is to finish this pr up (some stuff around compact blocks that I still have to work through + refit the couple of places in rpc that call ProcessNewBlock) and explore subsequent prs to put a similar model in place around the mempool. I'd also like to explore feasibility for header processing.",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-383747761",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "commented",
      "id": 385131498,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTEzMTQ5OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385131498",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T01:57:33Z",
      "updated_at": "2018-04-28T01:57:33Z",
      "author_association": "MEMBER",
      "body": "I do think the general approach is fine. It's not going to be really at all useful until we do a ton of locking cleanups in net_processing (it'll let us run ahead to the next message, which almost always requires cs_main, and we'll end up blocking on validation anyway). It's probably simpler than multiple net_processing threads (with the same cleanups required) which was most of my previous work, but they'll end up looking pretty similar on the net_processing end, we were gonna need this blocking-on-response logic either way. Should definitely get brought up at a meeting, though, to get wider feedback. @theuni probably has some thoughts, too.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-385131498",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "mentioned",
      "id": 1599887612,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTU5OTg4NzYxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1599887612",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T01:57:33Z"
    },
    {
      "event": "subscribed",
      "id": 1599887613,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE1OTk4ODc2MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1599887613",
      "actor": {
        "login": "theuni",
        "id": 417043,
        "node_id": "MDQ6VXNlcjQxNzA0Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/theuni",
        "html_url": "https://github.com/theuni",
        "followers_url": "https://api.github.com/users/theuni/followers",
        "following_url": "https://api.github.com/users/theuni/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/theuni/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/theuni/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
        "organizations_url": "https://api.github.com/users/theuni/orgs",
        "repos_url": "https://api.github.com/users/theuni/repos",
        "events_url": "https://api.github.com/users/theuni/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/theuni/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-04-28T01:57:33Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1661908856,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MTkwODg1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1661908856",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-04T17:50:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662052463,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjA1MjQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662052463",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-04T19:02:16Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662130774,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjEzMDc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662130774",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-04T19:44:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662191187,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjE5MTE4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662191187",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-04T20:15:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662481059,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjQ4MTA1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662481059",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-04T23:15:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662680196,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjY4MDE5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662680196",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T02:43:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1662695862,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MjY5NTg2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1662695862",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T03:01:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1663443738,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MzQ0MzczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1663443738",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T11:26:07Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1663459882,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY2MzQ1OTg4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1663459882",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T11:35:11Z"
    },
    {
      "event": "renamed",
      "id": 1663491552,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTY2MzQ5MTU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1663491552",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T11:52:27Z",
      "rename": {
        "from": "[WIP] [net] [validation] Call ProcessNewBlock() asynchronously",
        "to": "[net] [validation] Call ProcessNewBlock() asynchronously"
      }
    },
    {
      "event": "commented",
      "id": 394681515,
      "node_id": "MDEyOklzc3VlQ29tbWVudDM5NDY4MTUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/394681515",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-05T11:54:33Z",
      "updated_at": "2018-06-05T11:54:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "PR updated with latest commits, ready for review\r\nAlso, for reference, a discussion on high level design for this PR at the IRC meeting a couple weeks ago:\r\nhttps://bitcoincore.org/en/meetings/2018/05/03/\r\n",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-394681515",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "labeled",
      "id": 1684181753,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE2ODQxODE3NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1684181753",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-15T20:08:40Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 128885288,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI4ODg1Mjg4",
      "url": null,
      "actor": null,
      "commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "(edited 2018-08-16)\r\n\r\nutACK 3d6f03814cde98869ca5b8ad365bb3a0aae522d9. Code looks good, and from the linked IRC discussion, this seems like a promising direction to move in. All of my comments are just suggestions which you should feel free to ignore.\r\n\r\n- [X] c6396d9ac2d01c43fca7f7730b710de4ba86229c Implement a thread-safe FIFO (producer/consumer style) queue (1/9)\r\n- [X] 3f09adf2ab63b813727b5b8e22f8a8129c43ed49 Unit tests for ProducerConsumerQueue (2/9)\r\n- [X] 7f8a8889564b6509285fbab64825fecb983fca6d Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue (3/9)\r\n- [X] 134d47a263620afae26f9966a74465bf896ff530 ConsumerThread unit tests (4/9)\r\n- [X] b4717281d43b1e0ff9e52d979a3899220ad11eea ValidationLayer() - interface for calls into block validation (5/9)\r\n- [X] 1c9f74170f9c35d7bc5ba3e9e079b70aafae4094 Call ProcessNewBlock() asynchronously in a separate thread from p2p layer (6/9)\r\n- [X] ce1d845a975d11b3f4e439dfd3ab2823895cf419 Replace all instances of ProcessNewBlock() with ValidationLayer.Validate() (7/9)\r\n- [X] 377873614b3fa143147ecaba5b750f8be1bdd8a4 Limit available scope of ProcessNewBlock to ValidationLayer (move-only) (8/9)\r\n- [X] 3d6f03814cde98869ca5b8ad365bb3a0aae522d9 Fix whitespace in test_bitcoin.cpp (whitespace,move-only) (9/9)\r\n",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-128885288",
      "submitted_at": "2018-06-19T18:46:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1689469480,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY4OTQ2OTQ4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1689469480",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-19T19:14:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1689472104,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY4OTQ3MjEwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1689472104",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-19T19:15:45Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1689511840,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY4OTUxMTg0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1689511840",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-19T19:36:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1689555111,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTY4OTU1NTExMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1689555111",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-19T19:58:40Z"
    },
    {
      "event": "unlabeled",
      "id": 1689799163,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTY4OTc5OTE2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1689799163",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-06-19T22:05:56Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "mentioned",
      "id": 1711865274,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTcxMTg2NTI3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1711865274",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-02T15:03:42Z"
    },
    {
      "event": "subscribed",
      "id": 1711865276,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE3MTE4NjUyNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1711865276",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-02T15:03:42Z"
    },
    {
      "event": "mentioned",
      "id": 1711865278,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTcxMTg2NTI3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1711865278",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-02T15:03:42Z"
    },
    {
      "event": "subscribed",
      "id": 1711865279,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE3MTE4NjUyNzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1711865279",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-02T15:03:42Z"
    },
    {
      "event": "reviewed",
      "id": 133936770,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTMzOTM2Nzcw",
      "url": null,
      "actor": null,
      "commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-133936770",
      "submitted_at": "2018-07-04T11:19:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "commented",
      "id": 402486739,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQwMjQ4NjczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/402486739",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-04T13:56:39Z",
      "updated_at": "2018-07-04T13:56:39Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thakns @ryanofsky - agree with basically everything you've said re commit 52ac3b5 - going to wait for some more comments to accumulate and address all at once so i don't mess up any other reviews that might be in progress",
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-402486739",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "mentioned",
      "id": 1716399333,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTcxNjM5OTMzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1716399333",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-04T13:56:39Z"
    },
    {
      "event": "subscribed",
      "id": 1716399335,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE3MTYzOTkzMzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1716399335",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-04T13:56:39Z"
    },
    {
      "event": "reviewed",
      "id": 134475746,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0NDc1NzQ2",
      "url": null,
      "actor": null,
      "commit_id": "9668666b27a9e828c6593cf51b0a1e50a819e08c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-134475746",
      "submitted_at": "2018-07-04T22:32:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "labeled",
      "id": 1721406733,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE3MjE0MDY3MzM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1721406733",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-07T08:43:25Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 134339062,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM0MzM5MDYy",
      "url": null,
      "actor": null,
      "commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think this is a great change, but I wonder if we can cut down on some of the complexity. Once this is rebased and maybe some of the feedback addressed, I'll do some manual testing.",
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-134339062",
      "submitted_at": "2018-07-13T18:37:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "referenced",
      "id": 1733719366,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDE3MzM3MTkzNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1733719366",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1e90862f5d0b5f7dcc18fb018b2bbaa323dcca1d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e90862f5d0b5f7dcc18fb018b2bbaa323dcca1d",
      "created_at": "2018-07-14T03:11:59Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjM5NmQ5YWMyZDAxYzQzZmNhN2Y3NzMwYjcxMGRlNGJhODYyMjlj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6396d9ac2d01c43fca7f7730b710de4ba86229c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c6396d9ac2d01c43fca7f7730b710de4ba86229c",
      "tree": {
        "sha": "517d3e3e8686f412ac59c4e88610f3345d7ea845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/517d3e3e8686f412ac59c4e88610f3345d7ea845"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29b4ee64695f79511912ae127e66e0fe82f7a0d1",
          "sha": "29b4ee64695f79511912ae127e66e0fe82f7a0d1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/29b4ee64695f79511912ae127e66e0fe82f7a0d1"
        }
      ],
      "message": "Implement a thread-safe FIFO (producer/consumer style) queue",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T15:30:27Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-29T18:26:09Z"
      },
      "sha": "c6396d9ac2d01c43fca7f7730b710de4ba86229c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjA5YWRmMmFiNjNiODEzNzI3YjViOGUyMmY4YTgxMjljNDNlZDQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f09adf2ab63b813727b5b8e22f8a8129c43ed49",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3f09adf2ab63b813727b5b8e22f8a8129c43ed49",
      "tree": {
        "sha": "de56451287c16062503de4557834875205cd9248",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de56451287c16062503de4557834875205cd9248"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6396d9ac2d01c43fca7f7730b710de4ba86229c",
          "sha": "c6396d9ac2d01c43fca7f7730b710de4ba86229c",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c6396d9ac2d01c43fca7f7730b710de4ba86229c"
        }
      ],
      "message": "Unit tests for ProducerConsumerQueue",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T15:30:27Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-03-29T18:45:14Z"
      },
      "sha": "3f09adf2ab63b813727b5b8e22f8a8129c43ed49"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjhhODg4OTU2NGI2NTA5Mjg1ZmJhYjY0ODI1ZmVjYjk4M2ZjYTZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f8a8889564b6509285fbab64825fecb983fca6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8a8889564b6509285fbab64825fecb983fca6d",
      "tree": {
        "sha": "e132479e8e11545182ba7d165c464a2c7a42b057",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e132479e8e11545182ba7d165c464a2c7a42b057"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f09adf2ab63b813727b5b8e22f8a8129c43ed49",
          "sha": "3f09adf2ab63b813727b5b8e22f8a8129c43ed49",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3f09adf2ab63b813727b5b8e22f8a8129c43ed49"
        }
      ],
      "message": "Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T15:30:27Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-03T15:45:38Z"
      },
      "sha": "7f8a8889564b6509285fbab64825fecb983fca6d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzRkNDdhMjYzNjIwYWZhZTI2Zjk5NjZhNzQ0NjViZjg5NmZmNTMw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/134d47a263620afae26f9966a74465bf896ff530",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/134d47a263620afae26f9966a74465bf896ff530",
      "tree": {
        "sha": "a5cdc7947cfe31912e177dd43b63de3c9edb99ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5cdc7947cfe31912e177dd43b63de3c9edb99ad"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f8a8889564b6509285fbab64825fecb983fca6d",
          "sha": "7f8a8889564b6509285fbab64825fecb983fca6d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/7f8a8889564b6509285fbab64825fecb983fca6d"
        }
      ],
      "message": "ConsumerThread unit tests",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T15:30:27Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-03T15:46:00Z"
      },
      "sha": "134d47a263620afae26f9966a74465bf896ff530"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDcxNzI4MWQ0M2IxZTBmZjllNTJkOTc5YTM4OTkyMjBhZDExZWVh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "tree": {
        "sha": "60ecb0dc0ee385f0cac89912aacd1af995601ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60ecb0dc0ee385f0cac89912aacd1af995601ae3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/134d47a263620afae26f9966a74465bf896ff530",
          "sha": "134d47a263620afae26f9966a74465bf896ff530",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/134d47a263620afae26f9966a74465bf896ff530"
        }
      ],
      "message": "ValidationLayer() - interface for calls into block validation",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T15:30:27Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-10T18:28:05Z"
      },
      "sha": "b4717281d43b1e0ff9e52d979a3899220ad11eea"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1753074503,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTc1MzA3NDUwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1753074503",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-25T16:37:17Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzlmNzQxNzBmOWMzNWQ3YmM1YmEzZTllMDc5YjcwYWFmYWU0MDk0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "tree": {
        "sha": "e8fff2608fadd83343aa693b74eb5336670ce1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8fff2608fadd83343aa693b74eb5336670ce1bd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4717281d43b1e0ff9e52d979a3899220ad11eea",
          "sha": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/b4717281d43b1e0ff9e52d979a3899220ad11eea"
        }
      ],
      "message": "Call ProcessNewBlock() asynchronously in a separate thread from p2p layer",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T17:27:01Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-04-10T21:20:47Z"
      },
      "sha": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTFkODQ1YTk3NWQxMWIzZjRlNDM5ZGZkM2FiMjgyMzg5NWNmNDE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce1d845a975d11b3f4e439dfd3ab2823895cf419",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ce1d845a975d11b3f4e439dfd3ab2823895cf419",
      "tree": {
        "sha": "df5afa0574f0bc3dde116ca2a2be88c2d3ca59d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df5afa0574f0bc3dde116ca2a2be88c2d3ca59d3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
          "sha": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1c9f74170f9c35d7bc5ba3e9e079b70aafae4094"
        }
      ],
      "message": "Replace all instances of ProcessNewBlock() with ValidationLayer.Validate()",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T17:27:01Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-08T20:21:51Z"
      },
      "sha": "ce1d845a975d11b3f4e439dfd3ab2823895cf419"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzc4NzM2MTRiM2ZhMTQzMTQ3ZWNhYmE1Yjc1MGY4YmUxYmRkOGE0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/377873614b3fa143147ecaba5b750f8be1bdd8a4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/377873614b3fa143147ecaba5b750f8be1bdd8a4",
      "tree": {
        "sha": "7778397c70c12150aa8dedb191bb694a1521834a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7778397c70c12150aa8dedb191bb694a1521834a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce1d845a975d11b3f4e439dfd3ab2823895cf419",
          "sha": "ce1d845a975d11b3f4e439dfd3ab2823895cf419",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ce1d845a975d11b3f4e439dfd3ab2823895cf419"
        }
      ],
      "message": "Limit available scope of ProcessNewBlock to ValidationLayer (move-only)",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T17:27:01Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-08T19:06:36Z"
      },
      "sha": "377873614b3fa143147ecaba5b750f8be1bdd8a4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDZmMDM4MTRjZGU5ODg2OWNhNWI4YWQzNjViYjNhMGFhZTUyMmQ5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "tree": {
        "sha": "ece56c5a3363f2b316931b53d81bdeb1365efe76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ece56c5a3363f2b316931b53d81bdeb1365efe76"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/377873614b3fa143147ecaba5b750f8be1bdd8a4",
          "sha": "377873614b3fa143147ecaba5b750f8be1bdd8a4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/377873614b3fa143147ecaba5b750f8be1bdd8a4"
        }
      ],
      "message": "Fix whitespace in test_bitcoin.cpp (whitespace,move-only)",
      "committer": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-07-25T17:27:01Z"
      },
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-09T15:08:28Z"
      },
      "sha": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1753180139,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTc1MzE4MDEzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1753180139",
      "actor": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-25T17:30:22Z"
    },
    {
      "event": "unlabeled",
      "id": 1753205233,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MTc1MzIwNTIzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1753205233",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-07-25T17:42:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 411439716,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxMTQzOTcxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/411439716",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-08T15:07:28Z",
      "updated_at": "2018-08-08T15:07:28Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-411439716",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "labeled",
      "id": 1778009726,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE3NzgwMDk3MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1778009726",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-08-08T15:07:28Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "reviewed",
      "id": 145761684,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTQ1NzYxNjg0",
      "url": null,
      "actor": null,
      "commit_id": "c6396d9ac2d01c43fca7f7730b710de4ba86229c",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-145761684",
      "submitted_at": "2018-08-13T21:59:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "reviewed",
      "id": 146103931,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTQ2MTAzOTMx",
      "url": null,
      "actor": null,
      "commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-146103931",
      "submitted_at": "2018-08-14T21:03:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "reviewed",
      "id": 146517554,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTQ2NTE3NTU0",
      "url": null,
      "actor": null,
      "commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-146517554",
      "submitted_at": "2018-08-15T21:13:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "reviewed",
      "id": 146991932,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTQ2OTkxOTMy",
      "url": null,
      "actor": null,
      "commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-146991932",
      "submitted_at": "2018-08-16T19:59:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "reviewed",
      "id": 151612772,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNjEyNzcy",
      "url": null,
      "actor": null,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-151612772",
      "submitted_at": "2018-09-02T08:09:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "reviewed",
      "id": 151612776,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUxNjEyNzc2",
      "url": null,
      "actor": null,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#pullrequestreview-151612776",
      "submitted_at": "2018-09-02T08:09:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
    },
    {
      "event": "commented",
      "id": 443769361,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQ0Mzc2OTM2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/443769361",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-03T16:19:03Z",
      "updated_at": "2018-12-03T16:19:03Z",
      "author_association": "MEMBER",
      "body": "<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#issuecomment-443769361",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12934"
    },
    {
      "event": "labeled",
      "id": 2001881659,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDIwMDE4ODE2NTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2001881659",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-03T16:19:03Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "closed",
      "id": 2001881740,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjAwMTg4MTc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2001881740",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-03T16:19:05Z"
    },
    {
      "event": "unlabeled",
      "id": 2741495829,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50Mjc0MTQ5NTgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2741495829",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T16:51:00Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "referenced",
      "id": 3237440283,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMzc0NDAyODM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3237440283",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5c6fb6e75cd48ff38a6afda39ed3e57679d894fc",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/5c6fb6e75cd48ff38a6afda39ed3e57679d894fc",
      "created_at": "2020-04-15T22:05:21Z"
    },
    {
      "event": "referenced",
      "id": 3237703090,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMzc3MDMwOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3237703090",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a3f0f3cf637035f8a03316a4632648975969461a",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/a3f0f3cf637035f8a03316a4632648975969461a",
      "created_at": "2020-04-16T00:13:55Z"
    },
    {
      "event": "referenced",
      "id": 3237879366,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMzc4NzkzNjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3237879366",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "504b696b78544739f8fa4f2819e031fbfa5c21e1",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/504b696b78544739f8fa4f2819e031fbfa5c21e1",
      "created_at": "2020-04-16T01:54:52Z"
    },
    {
      "event": "referenced",
      "id": 3249203824,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyNDkyMDM4MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3249203824",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7e588c75949a0df01aa0b1331bc86e6ff0efc3ab",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/7e588c75949a0df01aa0b1331bc86e6ff0efc3ab",
      "created_at": "2020-04-19T16:01:41Z"
    },
    {
      "event": "referenced",
      "id": 3320698110,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMjA2OTgxMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3320698110",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6cce7b22dbe2366b4b4bfedcc2aca6089a2c0407",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/6cce7b22dbe2366b4b4bfedcc2aca6089a2c0407",
      "created_at": "2020-05-10T21:09:13Z"
    },
    {
      "event": "referenced",
      "id": 3328483277,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMjg0ODMyNzc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3328483277",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "abc246a698644acc57f801ddd91935d7cc3b9781",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/abc246a698644acc57f801ddd91935d7cc3b9781",
      "created_at": "2020-05-12T17:09:27Z"
    },
    {
      "event": "unlabeled",
      "id": 3329934313,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MzMyOTkzNDMxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3329934313",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-05-13T01:27:39Z",
      "label": {
        "name": "Up for grabs",
        "color": "99a810"
      }
    },
    {
      "event": "referenced",
      "id": 3422630009,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjI2MzAwMDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3422630009",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5b72c199ff9d89ac6d4432c5230409e25fb6d9a8",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/5b72c199ff9d89ac6d4432c5230409e25fb6d9a8",
      "created_at": "2020-06-09T01:27:24Z"
    },
    {
      "event": "referenced",
      "id": 3422918787,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MjI5MTg3ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3422918787",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9c6d174c4d99d4a3df2c3986a37bb044ea02c310",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/9c6d174c4d99d4a3df2c3986a37bb044ea02c310",
      "created_at": "2020-06-09T04:02:47Z"
    },
    {
      "event": "referenced",
      "id": 3431586645,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MzE1ODY2NDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3431586645",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cfac0a9f3ff35374fcf7760e5141c3a528a21fa9",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/cfac0a9f3ff35374fcf7760e5141c3a528a21fa9",
      "created_at": "2020-06-10T21:46:50Z"
    },
    {
      "event": "referenced",
      "id": 3432741290,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0MzI3NDEyOTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3432741290",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c26f14a99cd92adb1177e85b8d67faa160d9e622",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/c26f14a99cd92adb1177e85b8d67faa160d9e622",
      "created_at": "2020-06-11T06:56:11Z"
    },
    {
      "event": "locked",
      "id": 6073812774,
      "node_id": "LOE_lADOABII584SqZMdzwAAAAFqBwcm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6073812774",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-02-15T10:34:36Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183498792",
      "pull_request_review_id": 114508551,
      "id": 183498792,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzQ5ODc5Mg==",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSUMERTHREAD_H\n+#define BITCOIN_CONSUMERTHREAD_H\n+\n+#include <thread>\n+#include <core/producerconsumerqueue.h>\n+\n+template<WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template<WorkerMode MODE>\n+class WorkItem",
      "path": "src/core/consumerthread.h",
      "position": null,
      "original_position": 17,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5b880d2590686eb674c7bf350e16f58a124ddb44",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you could replace this class with `using WorkItem = std::function<void()>;`. Less code and would make queue interface more generic.",
      "created_at": "2018-04-23T18:44:01Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183498792",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183498792"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183500740",
      "pull_request_review_id": 114508551,
      "id": 183500740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwMDc0MA==",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSUMERTHREAD_H\n+#define BITCOIN_CONSUMERTHREAD_H\n+\n+#include <thread>\n+#include <core/producerconsumerqueue.h>\n+\n+template<WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template<WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template<WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE> {\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer) {};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if(std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if(!m_threads_observed.count(id) || 0) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                ShutdownPill * copy = new ShutdownPill(std::move(*this));\n+                m_consumer.m_queue->Push(std::unique_ptr<ShutdownPill>(copy), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE> &m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template<WorkerMode PRODUCER_MODE>\n+using WorkQueue = BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>,PRODUCER_MODE>;\n+\n+/**\n+ * A worker thread that interoperates with a BlockingConsumerQueue\n+ *\n+ * Blocks on the queue, pulls WorkItem() tasks and executes them\n+ * No assumptions are made about number of threads operating on this queue\n+ *\n+ * @see WorkItem\n+ * @see WorkQueue\n+ * @see BlockingConsumerQueue\n+ * @see ProducerConsumerQueue\n+ */\n+template<WorkerMode PRODUCER_POLICY>\n+class ConsumerThread {\n+    friend ShutdownPill<PRODUCER_POLICY>; //<! needs to introspect in order to cleanly terminate this thread\n+\n+public:\n+    //! Default constructor: not a valid thread\n+    ConsumerThread() :m_active(false) {};\n+\n+    //! Constructs a ConsumerThread: RAII\n+    //! @param queue the queue from which this thread will pull work\n+    ConsumerThread(std::shared_ptr<WorkQueue<PRODUCER_POLICY>> queue, const std::string id = \"\")\n+        :m_id(id), m_queue(queue), m_active(true)",
      "path": "src/core/consumerthread.h",
      "position": null,
      "original_position": 88,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5b880d2590686eb674c7bf350e16f58a124ddb44",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could maybe use TraceThread from util.h to make the thread name visible to the os.",
      "created_at": "2018-04-23T18:50:50Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183500740",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183500740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183502878",
      "pull_request_review_id": 114508551,
      "id": 183502878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwMjg3OA==",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSUMERTHREAD_H\n+#define BITCOIN_CONSUMERTHREAD_H\n+\n+#include <thread>\n+#include <core/producerconsumerqueue.h>\n+\n+template<WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template<WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template<WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE> {\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer) {};",
      "path": "src/core/consumerthread.h",
      "position": null,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5b880d2590686eb674c7bf350e16f58a124ddb44",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ShutdownPill seems a little complicated. What advantages does it provide over just adding `bool m_active` to  `ProducerConsumerQueue` with a simple method to set it to false and cancel blocked Pop() calls?",
      "created_at": "2018-04-23T18:58:05Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183502878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183502878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183505818",
      "pull_request_review_id": 114508551,
      "id": 183505818,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwNTgxOA==",
      "diff_hunk": "@@ -0,0 +1,106 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+class ValidationLayer;\n+\n+template<typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING> {\n+    friend class ValidationLayer;\n+protected:\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+struct BlockValidationResponse {\n+    const bool is_new;\n+    const bool not_immediately_invalid;\n+\n+    BlockValidationResponse(bool _not_immediately_invalid, bool _is_new)\n+      :is_new(_is_new), not_immediately_invalid(_not_immediately_invalid) {};\n+};\n+\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse> {\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+    :m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready) {};\n+\n+    void operator()();\n+\n+    const ValidationLayer& m_validation_layer;\n+    const std::shared_ptr<const CBlock> m_block;\n+    const bool m_force_processing;\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block and header validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: Submitforvalidation(object) -> future<Response>\n+ *  - synchronous: Validate(object) -> Response\n+ * object may be a block or block header\n+ */\n+class ValidationLayer {\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        :m_chainparams(chainparams), m_validation_queue(std::shared_ptr<ValidationQueue>(new ValidationQueue(100))) {}",
      "path": "src/validation_layer.h",
      "position": null,
      "original_position": 62,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "c10466c7a25a3b38c0e81337f56ab5fa59ac4bef",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could use make_shared here, MakeUnique below",
      "created_at": "2018-04-23T19:09:03Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183505818",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183505818"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183507013",
      "pull_request_review_id": 114508551,
      "id": 183507013,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzUwNzAxMw==",
      "diff_hunk": "@@ -0,0 +1,106 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+#include <validation.h>\n+\n+class ValidationLayer;\n+\n+template<typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING> {\n+    friend class ValidationLayer;\n+protected:\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+struct BlockValidationResponse {\n+    const bool is_new;\n+    const bool not_immediately_invalid;\n+\n+    BlockValidationResponse(bool _not_immediately_invalid, bool _is_new)\n+      :is_new(_is_new), not_immediately_invalid(_not_immediately_invalid) {};\n+};\n+\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse> {\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+    :m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready) {};\n+\n+    void operator()();\n+\n+    const ValidationLayer& m_validation_layer;\n+    const std::shared_ptr<const CBlock> m_block;\n+    const bool m_force_processing;\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block and header validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: Submitforvalidation(object) -> future<Response>\n+ *  - synchronous: Validate(object) -> Response\n+ * object may be a block or block header\n+ */\n+class ValidationLayer {\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        :m_chainparams(chainparams), m_validation_queue(std::shared_ptr<ValidationQueue>(new ValidationQueue(100))) {}\n+\n+    ~ValidationLayer() {};\n+\n+    void Start()\n+    {\n+        assert(!m_thread || !m_thread->IsActive());\n+        m_thread = std::unique_ptr<ValidationThread>(new ValidationThread(m_validation_queue));\n+    };\n+\n+    void Stop()\n+    {\n+        assert(m_thread);\n+        m_thread->Terminate();\n+    };\n+\n+    std::future<BlockValidationResponse> SubmitForValidation(const std::shared_ptr<const CBlock> block, bool force_processing, std::function<void()> on_ready=[](){})\n+    {\n+        BlockValidationRequest * req = new BlockValidationRequest(*this, block, force_processing, on_ready);\n+        return SubmitForValidation<BlockValidationResponse>(req);\n+    };\n+\n+    BlockValidationResponse Validate(const std::shared_ptr<const CBlock> block, bool force_processing) const\n+    {\n+        bool is_new = false;\n+        bool block_valid = ProcessNewBlock(m_chainparams, block, force_processing, &is_new);\n+        return BlockValidationResponse(block_valid, is_new);\n+    };\n+\n+ private:\n+    template<typename RESPONSE>\n+    std::future<RESPONSE> SubmitForValidation(ValidationRequest<RESPONSE> * request)",
      "path": "src/validation_layer.h",
      "position": null,
      "original_position": 93,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "c10466c7a25a3b38c0e81337f56ab5fa59ac4bef",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably should take unique_ptr instead of raw argument to clarify ownership",
      "created_at": "2018-04-23T19:13:22Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183507013",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183507013"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183562777",
      "pull_request_review_id": 114585105,
      "id": 183562777,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE4MzU2Mjc3Nw==",
      "diff_hunk": "@@ -0,0 +1,172 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CONSUMERTHREAD_H\n+#define BITCOIN_CONSUMERTHREAD_H\n+\n+#include <thread>\n+#include <core/producerconsumerqueue.h>\n+\n+template<WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template<WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template<WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE> {\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer) {};",
      "path": "src/core/consumerthread.h",
      "position": null,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5b880d2590686eb674c7bf350e16f58a124ddb44",
      "in_reply_to_id": 183502878,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah - it is pretty complicated. I didn't want to poke through the queue api just to enable shutdown - you'd have to have `T Pop()` potentially not return a `T` (i.e. throw an exception) - which seemed less desirable and maybe equally complicated.\r\n\r\nHaving said that - a lot of the complexity here is introduced to handle:\r\n- being able to shutdown a specific ConsumerThread without shutting down others (in reality you probably only ever want to shut down all of them when you terminate the process)\r\n- allowing for a queue with fewer slots than the number of threads servicing it (unlikely)\r\n\r\nOnly reason I allowed for these is so that the APIs to the queue work the way they sound like they should work and for unit test completeness. If I discard the above the code gets much simpler and it will just be broken for two use cases that seem pretty unlikely to ever happen right now (but you never know - and then maybe somebody gets frustrated one day).",
      "created_at": "2018-04-23T23:03:21Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r183562777",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/183562777"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195502312",
      "pull_request_review_id": 128885288,
      "id": 195502312,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NTUwMjMxMg==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));",
      "path": "src/core/producerconsumerqueue.h",
      "position": 81,
      "original_position": 81,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement a thread-safe FIFO (producer/consumer style) queue\" (d8106146e7511837decb4b45de35dec654454b69)\r\n\r\nShould probably emplace_back to avoid creating a temporary.",
      "created_at": "2018-06-14T17:11:53Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r195502312",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/195502312"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/196532632",
      "pull_request_review_id": 128885288,
      "id": 196532632,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjUzMjYzMg==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>",
      "path": "src/core/producerconsumerqueue.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement a thread-safe FIFO (producer/consumer style) queue\" (d8106146e7511837decb4b45de35dec654454b69)\r\n\r\nI don't think it's a good idea for blocking and nonblocking defaults to be attributes of the Queue data structure, instead of arguments to (or variants of) the push and pop methods. Advantages to dropping these template arguments:\r\n\r\n1) Readability. It would be nice to be able to see if a push or pop call is blocking just by looking at the call, without have to check another part of the code to see how the queue data structure was initially declared.\r\n2) Code size. Dropping these arguments would avoid compiler potentially having to instantiate many copies of this code for different combinations of template arguments.\r\n3) Extensibility. There could be other useful blocking methods added in the future (like methods to wait for low/high water marks or for empty/full events) and it would either be verbose to have to add new classwide blocking/nonblocking defaults for new methods, or confusing to have to somehow tie existing defaults to new methods.\r\n4) Consistency. If you look at other C++ objects that support optional blocking like std::mutex or std::future, the blocking behaviour is determined only by the particular method call, not by template arguments from where the object was declared.",
      "created_at": "2018-06-19T18:28:51Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/196532632"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/196533649",
      "pull_request_review_id": 128885288,
      "id": 196533649,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5NjUzMzY0OQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));\n+        }\n+        m_consumer_cv.notify_one();\n+        return true;\n+    };\n+\n+    /**\n+     * Try to pop the oldest element from the front of the queue, if present\n+     * Blocking consumer mode: will always eventually succeed\n+     * Nonblocking consumer mode: Pop() returns failure when the queue is empty\n+     * @param[out] the data popped, if the operation was successful\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    bool Pop(T& data, WorkerMode mode = m_consumer_mode)\n+    {\n+        // attempting a pop from a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() <= 0) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_consumer_cv.wait(l, [&]() { return m_data.size() > 0; });\n+            }\n+\n+            data = std::move(m_data.front());\n+            m_data.pop_front();\n+        }\n+        m_producer_cv.notify_one();\n+        return true;\n+    }\n+\n+    /**\n+     * Shortcut for bool Pop(T&) when consumer mode is blocking\n+     * This must always succeed and thus may only be called in producer blocking mode\n+     * @return the element popped\n+     */\n+    T Pop()\n+    {\n+        static_assert(m_consumer_mode == WorkerMode::BLOCKING, \"\");",
      "path": "src/core/producerconsumerqueue.h",
      "position": 124,
      "original_position": 124,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement a thread-safe FIFO (producer/consumer style) queue\" (d8106146e7511837decb4b45de35dec654454b69)\r\n\r\nCould return std::future\\<T> in the case of a non-blocking Pop() to support it instead of having this asymmetry.",
      "created_at": "2018-06-19T18:32:02Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196533649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/196533649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 124,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199506587",
      "pull_request_review_id": 133637301,
      "id": 199506587,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUwNjU4Nw==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));",
      "path": "src/core/producerconsumerqueue.h",
      "position": 81,
      "original_position": 81,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 195502312,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "not sure i completely understand - data is already constructed when it is passed into the function - thought the most economical thing to do was std::forward which should use the move constructor when possible? is that different from what emplace_back would do?",
      "created_at": "2018-07-02T13:59:22Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199506587",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199506587"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199508335",
      "pull_request_review_id": 133639425,
      "id": 199508335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUwODMzNQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));\n+        }\n+        m_consumer_cv.notify_one();\n+        return true;\n+    };\n+\n+    /**\n+     * Try to pop the oldest element from the front of the queue, if present\n+     * Blocking consumer mode: will always eventually succeed\n+     * Nonblocking consumer mode: Pop() returns failure when the queue is empty\n+     * @param[out] the data popped, if the operation was successful\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    bool Pop(T& data, WorkerMode mode = m_consumer_mode)\n+    {\n+        // attempting a pop from a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() <= 0) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_consumer_cv.wait(l, [&]() { return m_data.size() > 0; });\n+            }\n+\n+            data = std::move(m_data.front());\n+            m_data.pop_front();\n+        }\n+        m_producer_cv.notify_one();\n+        return true;\n+    }\n+\n+    /**\n+     * Shortcut for bool Pop(T&) when consumer mode is blocking\n+     * This must always succeed and thus may only be called in producer blocking mode\n+     * @return the element popped\n+     */\n+    T Pop()\n+    {\n+        static_assert(m_consumer_mode == WorkerMode::BLOCKING, \"\");",
      "path": "src/core/producerconsumerqueue.h",
      "position": 124,
      "original_position": 124,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 196533649,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Doing that would complicate internal implementation a bit - you'd have to hang on to the promise that satisfies the future internally - and either you'd have too many of those and need to block - or potentially allow your buffer holding promises to grow unbounded - so actually it might not be safely implementable. \r\n\r\nAlso I don't really see an immediate use case for this - you'd have to later wait on the future (blocking or non-blocking) - but you could just alternately wait on the queue. I can't think of any use cases right now where you'd want to reserve a place in line in a non-blocking fashion and then later claim that item.",
      "created_at": "2018-07-02T14:04:56Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199508335",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199508335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 124,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199508852",
      "pull_request_review_id": 133640052,
      "id": 199508852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUwODg1Mg==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>",
      "path": "src/core/producerconsumerqueue.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 196532632,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can see this either way - i wrote it with defaults essentially as constructor args because - at least for the use cases i can imagine you almost always want a default mode of operation for a given queue except for certain edge cases (shutdown is the most apparent one) - and i've seen data structures that handle this sort of initialization both ways (defaults on construction vs with every method call) but i'm also happy to change this up if the prevailing opinion is the other way.",
      "created_at": "2018-07-02T14:06:33Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199508852",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199508852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199527845",
      "pull_request_review_id": 133663218,
      "id": 199527845,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTUyNzg0NQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));",
      "path": "src/core/producerconsumerqueue.h",
      "position": 81,
      "original_position": 81,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 195502312,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Talked about this offline with @ryanofsky, @skeees; this form is equivalent (in terms of constructor calls) to what @ryanofsky initially suggested so no need to change.",
      "created_at": "2018-07-02T15:03:42Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199527845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199527845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199757735",
      "pull_request_review_id": 133936770,
      "id": 199757735,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc1NzczNQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;\n+\n+            assert(producer_id < n_producers);\n+            assert(i > latest[producer_id]);\n+            latest[producer_id] = i;\n+\n+            while (!push[producer_id]->Push(-i)) {\n+                if (push[producer_id]->GetProducerMode() == WorkerMode::BLOCKING) {\n+                    BOOST_FAIL(\"a blocking push should always succeed\");\n+                }\n+                std::this_thread::yield();\n+            }\n+            elements_received++;\n+        } else if (work.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+}\n+\n+template <typename Q>\n+void QueueTest(int capacity, int n_elements, int n_producers, int n_consumers)\n+{\n+    int bucket_size = n_elements / n_producers;\n+\n+    Q push(capacity);\n+    std::vector<Q*> pull;",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 90,
      "original_position": 90,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMight be nice to use vector\\<unique_ptr\\<Q>> to make this code exception safe and avoid need for manual deletion.",
      "created_at": "2018-07-03T10:25:19Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199757735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199757735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199768981",
      "pull_request_review_id": 133936770,
      "id": 199768981,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc2ODk4MQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 21,
      "original_position": 21,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMaybe give this function a more descriptive name like `PushThenPop`.\r\n\r\nMaybe add a summary comment like \"Push \\`elements_pushed\\` consecutive ints to the \r\n\\`push\\` queue, starting from (id * elements_to_values). Then pop \\`elements_pushed\\` values from the \\`recv\\` queue and verify all ints in the range (-elements_pushed, 0] are received, in any order.\"",
      "created_at": "2018-07-03T11:13:13Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199768981",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199768981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199770536",
      "pull_request_review_id": 133936770,
      "id": 199770536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc3MDUzNg==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 54,
      "original_position": 54,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMaybe give this function a more descriptive name like `PopAndPush`.\r\n\r\nMaybe add a summary comment like \"Pop \\`elements_pushed\\` values from the \\`work\\` queue. For each value \\`w\\` received, push value -(w % bucket_size) to the push[w / bucket_size] output queue.\"\r\n",
      "created_at": "2018-07-03T11:19:35Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199770536",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199770536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199772365",
      "pull_request_review_id": 133936770,
      "id": 199772365,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc3MjM2NQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 63,
      "original_position": 63,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nIt could be nice to avoid this encoding (and the negative int encoding) by declaring a simple struct like:\r\n\r\n```c++\r\nstruct TestValue { int producer_id; int value; };\r\n```\r\n\r\nand using `ProducerConsumerQueue<TestValue>` in the test.",
      "created_at": "2018-07-03T11:28:09Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199772365",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199772365"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199775175",
      "pull_request_review_id": 133936770,
      "id": 199775175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc3NTE3NQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;\n+\n+            assert(producer_id < n_producers);\n+            assert(i > latest[producer_id]);",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 66,
      "original_position": 66,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nSeems like this could more specifically assert (latest == -1) or (i == latest + 1). But perhaps the current way is more compact or less fragile.",
      "created_at": "2018-07-03T11:40:15Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199775175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199775175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199781485",
      "pull_request_review_id": 133936770,
      "id": 199781485,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTc4MTQ4NQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;\n+\n+            assert(producer_id < n_producers);\n+            assert(i > latest[producer_id]);\n+            latest[producer_id] = i;\n+\n+            while (!push[producer_id]->Push(-i)) {\n+                if (push[producer_id]->GetProducerMode() == WorkerMode::BLOCKING) {\n+                    BOOST_FAIL(\"a blocking push should always succeed\");\n+                }\n+                std::this_thread::yield();\n+            }\n+            elements_received++;\n+        } else if (work.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+}\n+\n+template <typename Q>\n+void QueueTest(int capacity, int n_elements, int n_producers, int n_consumers)\n+{\n+    int bucket_size = n_elements / n_producers;\n+\n+    Q push(capacity);\n+    std::vector<Q*> pull;\n+    for (int i = 0; i < n_producers; i++)\n+        pull.push_back(new Q(bucket_size));\n+\n+    boost::thread_group test_threads;\n+\n+    for (int i = 0; i < n_producers; i++) {\n+        test_threads.create_thread([&, i] { Producer(push, *(pull[i]), i, bucket_size); });\n+    }\n+\n+    for (int i = 0; i < n_consumers; i++) {\n+        test_threads.create_thread([&, i] { Consumer(push, pull, i, n_producers, bucket_size, n_elements / n_consumers); });\n+    }\n+\n+    test_threads.join_all();\n+\n+    // queue should be empty\n+    BOOST_CHECK_EQUAL(push.size(), 0);\n+    for (int i = 0; i < n_producers; i++) {\n+        BOOST_CHECK_EQUAL(pull[i]->size(), 0);\n+        delete pull[i];\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE_TEMPLATE(invalid_queue, Q, queue_types)\n+{\n+    Q q;\n+    BOOST_CHECK(q.GetCapacity() == 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(basic_operation)",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 120,
      "original_position": 120,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMaybe add a simple test description like \"Test simple queue pushes and pops which don't block.\"",
      "created_at": "2018-07-03T12:05:58Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199781485",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199781485"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199808121",
      "pull_request_review_id": 133936770,
      "id": 199808121,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTgwODEyMQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>",
      "path": "src/core/producerconsumerqueue.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 196532632,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Re: https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632\r\n\r\n> I can see this either way - i wrote it with defaults essentially as constructor args because - at least for the use cases i can imagine you almost always want a default mode of operation for a given queue except for certain edge cases (shutdown is the most apparent one) - and i've seen data structures that handle this sort of initialization both ways (defaults on construction vs with every method call) but i'm also happy to change this up if the prevailing opinion is the other way.\r\n\r\nWhat about having Push, Pop, TryPush, and TryPop methods and dropping the enum entirely? I think this would make code using the queue easier to understand, since blocking would be explicit, instead of based on an enum value determined by a combination of method argument, class template argument, method argument default, and class template argument default values. It could also make code using the queue easier to write, since there would no longer be any chance of hitting various compile and runtime checks for invalid enum values.\r\n\r\nI do understand the enum is useful in tests for listing all possible combinations of behavior, but for that purpose, you could just define the enum in test code.",
      "created_at": "2018-07-03T13:33:17Z",
      "updated_at": "2018-08-13T18:03:53Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199808121",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199808121"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199811991",
      "pull_request_review_id": 133936770,
      "id": 199811991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTgxMTk5MQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;\n+\n+            assert(producer_id < n_producers);\n+            assert(i > latest[producer_id]);\n+            latest[producer_id] = i;\n+\n+            while (!push[producer_id]->Push(-i)) {\n+                if (push[producer_id]->GetProducerMode() == WorkerMode::BLOCKING) {\n+                    BOOST_FAIL(\"a blocking push should always succeed\");\n+                }\n+                std::this_thread::yield();\n+            }\n+            elements_received++;\n+        } else if (work.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+}\n+\n+template <typename Q>\n+void QueueTest(int capacity, int n_elements, int n_producers, int n_consumers)",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 85,
      "original_position": 85,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMaybe add a simple test description like \"Generate messages in \\`n_producers\\` producer threads and push them on to a single \\`push\\` queue. Pop messages from the queue in \\`n_consumers\\` consumer threads, and forward them back to the original producer threads through \\`n_producers\\` different \\`pull\\` queues. Verify all the queues are empty after the threads exit.\"",
      "created_at": "2018-07-03T13:44:35Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199811991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199811991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 85,
      "original_line": 85,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199812982",
      "pull_request_review_id": 133936770,
      "id": 199812982,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE5OTgxMjk4Mg==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;\n+\n+            assert(producer_id < n_producers);\n+            assert(i > latest[producer_id]);\n+            latest[producer_id] = i;\n+\n+            while (!push[producer_id]->Push(-i)) {\n+                if (push[producer_id]->GetProducerMode() == WorkerMode::BLOCKING) {\n+                    BOOST_FAIL(\"a blocking push should always succeed\");\n+                }\n+                std::this_thread::yield();\n+            }\n+            elements_received++;\n+        } else if (work.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+}\n+\n+template <typename Q>\n+void QueueTest(int capacity, int n_elements, int n_producers, int n_consumers)\n+{\n+    int bucket_size = n_elements / n_producers;\n+\n+    Q push(capacity);\n+    std::vector<Q*> pull;\n+    for (int i = 0; i < n_producers; i++)\n+        pull.push_back(new Q(bucket_size));\n+\n+    boost::thread_group test_threads;\n+\n+    for (int i = 0; i < n_producers; i++) {\n+        test_threads.create_thread([&, i] { Producer(push, *(pull[i]), i, bucket_size); });\n+    }\n+\n+    for (int i = 0; i < n_consumers; i++) {\n+        test_threads.create_thread([&, i] { Consumer(push, pull, i, n_producers, bucket_size, n_elements / n_consumers); });\n+    }\n+\n+    test_threads.join_all();\n+\n+    // queue should be empty\n+    BOOST_CHECK_EQUAL(push.size(), 0);\n+    for (int i = 0; i < n_producers; i++) {\n+        BOOST_CHECK_EQUAL(pull[i]->size(), 0);\n+        delete pull[i];\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE_TEMPLATE(invalid_queue, Q, queue_types)\n+{\n+    Q q;\n+    BOOST_CHECK(q.GetCapacity() == 0);\n+}\n+\n+BOOST_AUTO_TEST_CASE(basic_operation)\n+{\n+    int n = 10;\n+    QueueBB qBB(n);\n+    QueueBN qBN(n);\n+    QueueNB qNB(n);\n+    QueueNN qNN(n);\n+\n+    BOOST_CHECK((int)qBB.GetCapacity() == n);\n+    for (int i = 0; i < n; i++) {\n+        BOOST_CHECK(qBB.Push(i));\n+        BOOST_CHECK(qBN.Push(i));\n+        BOOST_CHECK(qNB.Push(i));\n+        BOOST_CHECK(qNN.Push(i));\n+    }\n+\n+    BOOST_CHECK(!qNB.Push(0));\n+    BOOST_CHECK(!qNN.Push(0));\n+\n+    int t;\n+    for (int i = 0; i < n; i++) {\n+        BOOST_CHECK_EQUAL(qBB.Pop(), i);\n+\n+        BOOST_CHECK(qBN.Pop(t));\n+        BOOST_CHECK_EQUAL(t, i);\n+\n+        BOOST_CHECK_EQUAL(qNB.Pop(), i);\n+\n+        BOOST_CHECK(qNN.Pop(t));\n+        BOOST_CHECK_EQUAL(t, i);\n+    }\n+\n+    int ret;\n+    BOOST_CHECK(!qBN.Pop(ret));\n+    BOOST_CHECK(!qNN.Pop(ret));\n+}\n+\n+BOOST_AUTO_TEST_CASE_TEMPLATE(multithreaded_operation, Q, queue_types)",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 157,
      "original_position": 157,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Unit tests for ProducerConsumerQueue\" (52ac3b5469e514f9288683bcb944e58c02606346)\r\n\r\nMaybe add a simple test description like \"Run QueueTest with different numbers of messages and threads and different queue capacities.\"",
      "created_at": "2018-07-03T13:47:13Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r199812982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/199812982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200093380",
      "pull_request_review_id": 134339062,
      "id": 200093380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDA5MzM4MA==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could also assert that items were popped off in the order they were pushed. ",
      "created_at": "2018-07-04T11:14:13Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200093380",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200093380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200132979",
      "pull_request_review_id": 134339062,
      "id": 200132979,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDEzMjk3OQ==",
      "diff_hunk": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(producerconsumerqueue_tests, BasicTestingSetup)\n+\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::BLOCKING> QueueBB;\n+typedef ProducerConsumerQueue<int, WorkerMode::BLOCKING, WorkerMode::NONBLOCKING> QueueBN;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::BLOCKING> QueueNB;\n+typedef ProducerConsumerQueue<int, WorkerMode::NONBLOCKING, WorkerMode::NONBLOCKING> QueueNN;\n+\n+typedef boost::mpl::list<QueueBB, QueueBN, QueueNB, QueueNN> queue_types;\n+\n+template <typename Q>\n+void Producer(Q& push, Q& recv, int id, int elements_to_push)\n+{\n+    // push all of these elements to one queue\n+    int elements_pushed = 0;\n+    while (elements_pushed < elements_to_push) {\n+        if (push.Push(id * elements_to_push + elements_pushed)) {\n+            elements_pushed++;\n+        } else if (push.GetProducerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking push should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    std::set<int> received;\n+    while (received.size() < (unsigned)elements_to_push) {\n+        int e;\n+        if (recv.Pop(e)) {\n+            assert(!received.count(e));\n+            received.insert(e);\n+        } else if (recv.GetConsumerMode() == WorkerMode::BLOCKING) {\n+            BOOST_FAIL(\"a blocking pop should always succeed\");\n+        } else {\n+            std::this_thread::yield();\n+        }\n+    }\n+\n+    for (int i = 0; i < elements_to_push; i++) {\n+        assert(received.count(-i));\n+    }\n+}\n+\n+template <typename Q>\n+void Consumer(Q& work, std::vector<Q*> push, int id, int n_producers, int bucket_size, int elements_to_receive)\n+{\n+    int elements_received = 0;\n+    std::vector<int> latest(n_producers, -1);\n+\n+    while (elements_received != elements_to_receive) {\n+        int w;\n+        if (work.Pop(w)) {\n+            int producer_id = w / bucket_size;\n+            int i = w % bucket_size;",
      "path": "src/test/producerconsumerqueue_tests.cpp",
      "position": 63,
      "original_position": 63,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "52ac3b5469e514f9288683bcb944e58c02606346",
      "in_reply_to_id": 199772365,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Completely agree. This is pretty hard to follow for me as-is.",
      "created_at": "2018-07-04T13:50:23Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200132979",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200132979"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 63,
      "original_line": 63,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200135030",
      "pull_request_review_id": 134339062,
      "id": 200135030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDEzNTAzMA==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()",
      "path": "src/core/consumerthread.h",
      "position": 54,
      "original_position": 54,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "6c624232a71cfb3b7b4de0540b83d5b0dd08c7d7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason this is `protected` in superclasses but `private` here?",
      "created_at": "2018-07-04T13:56:48Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200135030",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200135030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200205851",
      "pull_request_review_id": 134475746,
      "id": 200205851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDIwNTg1MQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {",
      "path": "src/core/producerconsumerqueue.h",
      "position": 71,
      "original_position": 71,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "9668666b27a9e828c6593cf51b0a1e50a819e08c",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why this scope? I think `notify_one()` below can be called while `m_queue_lock` is held. — same in `Pop()`.",
      "created_at": "2018-07-04T22:11:19Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200205851",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200205851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200206332",
      "pull_request_review_id": 134475746,
      "id": 200206332,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDIwNjMzMg==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });",
      "path": "src/core/producerconsumerqueue.h",
      "position": 78,
      "original_position": 78,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "9668666b27a9e828c6593cf51b0a1e50a819e08c",
      "in_reply_to_id": null,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit, could drop `()`. — same in `Pop()`.",
      "created_at": "2018-07-04T22:20:41Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200206332",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200206332"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 78,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200206716",
      "pull_request_review_id": 134475746,
      "id": 200206716,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDIwNjcxNg==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>",
      "path": "src/core/producerconsumerqueue.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 196532632,
      "user": {
        "login": "promag",
        "id": 3534524,
        "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/promag",
        "html_url": "https://github.com/promag",
        "followers_url": "https://api.github.com/users/promag/followers",
        "following_url": "https://api.github.com/users/promag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/promag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/promag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
        "organizations_url": "https://api.github.com/users/promag/orgs",
        "repos_url": "https://api.github.com/users/promag/repos",
        "events_url": "https://api.github.com/users/promag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/promag/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> Readability. It would be nice to be able to see if a push or pop call is blocking just by looking at the call\r\n\r\nI think this comment is spot on.\r\n\r\n>  If you look at other C++ objects that support optional blocking like std::mutex or std::future, the blocking behaviour is determined only by the particular method call\r\n\r\n> What about having Push, Pop, TryPush, and TryPop methods and dropping the enum entirely?\r\n\r\nAgree.",
      "created_at": "2018-07-04T22:27:31Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200206716",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200206716"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200255149",
      "pull_request_review_id": 134533204,
      "id": 200255149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMDI1NTE0OQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {",
      "path": "src/core/producerconsumerqueue.h",
      "position": 71,
      "original_position": 71,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "9668666b27a9e828c6593cf51b0a1e50a819e08c",
      "in_reply_to_id": 200205851,
      "user": {
        "login": "skeees",
        "id": 195769,
        "node_id": "MDQ6VXNlcjE5NTc2OQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/skeees",
        "html_url": "https://github.com/skeees",
        "followers_url": "https://api.github.com/users/skeees/followers",
        "following_url": "https://api.github.com/users/skeees/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/skeees/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/skeees/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
        "organizations_url": "https://api.github.com/users/skeees/orgs",
        "repos_url": "https://api.github.com/users/skeees/repos",
        "events_url": "https://api.github.com/users/skeees/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/skeees/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can - but its less efficient to notify on a cv while holding a lock - the thread that you notify will wake up and immediately block again on the lock until you release it. It is safe to call notify without the lock held.\r\n\r\nfrom: https://en.cppreference.com/w/cpp/thread/condition_variable/notify_one\r\n>The notifying thread does not need to hold the lock on the same mutex as the one held by the waiting thread(s); in fact doing so is a pessimization, since the notified thread would immediately block again, waiting for the notifying thread to release the lock. However, some implementations (in particular many implementations of pthreads) recognize this situation and avoid this \"hurry up and wait\" scenario by transferring the waiting thread from the condition variable's queue directly to the queue of the mutex within the notify call, without waking it up.",
      "created_at": "2018-07-05T07:30:34Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r200255149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/200255149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 71,
      "original_line": 71,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202417596",
      "pull_request_review_id": 134339062,
      "id": 202417596,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQxNzU5Ng==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>",
      "path": "src/core/consumerthread.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "6c624232a71cfb3b7b4de0540b83d5b0dd08c7d7",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This thing is pretty complex, and right now it looks like we don't do granular per-thread per-queue shutdowns. The only instance of this being used is shutting down the single thread associated with ValidationQueue. When would a situation arise where we need to shut off some but not all of the threads consuming from a queue? I can't think of a case where that'd be necessary.\r\n\r\nCould we just have the queue itself raise a shutdown signal for the threads? Have `queue->Pop()` return (or set) a sentinel shutdown value of some kind instead? Might save a good bit of code, and would remove the need for some of the locking in ConsumerThread.",
      "created_at": "2018-07-13T17:15:26Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202417596",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202417596"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202430201",
      "pull_request_review_id": 134339062,
      "id": 202430201,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzMDIwMQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+class ValidationLayer;\n+extern std::unique_ptr<ValidationLayer> g_validation_layer;\n+\n+/**\n+ * Encapsulates a request to validate an object (currently only a block)\n+ * Submitted to ValidationLayer for asynchronous validation\n+ *\n+ * @see ValidationLayer\n+ */\n+template <typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    //! Guts of the validation\n+    virtual void operator()() = 0;\n+\n+    //! Returns a string identifier (for logging)\n+    virtual std::string GetId() const = 0;\n+\n+protected:\n+    //! Promise that will deliver the validation result to the caller who generated this request\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+/**\n+ * Holds the results of asynchronous block validation\n+ */\n+struct BlockValidationResponse {\n+    //! Is this the first time this block has been validated\n+    const bool is_new;\n+\n+    //! Did initial validation pass (a block can still pass initial validation but then later fail to connect to an active chain)\n+    const bool block_valid;\n+\n+    BlockValidationResponse(bool _block_valid, bool _is_new)\n+        : is_new(_is_new), block_valid(_block_valid){};\n+};\n+\n+/**\n+ * Encapsulates a request to validate a block\n+ */\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+        : m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready){};\n+\n+    //! Does the validation\n+    void operator()() override;\n+\n+    //! Returns a block hash\n+    std::string GetId() const override;\n+\n+    const ValidationLayer& m_validation_layer;\n+\n+    //! The block to be validated\n+    const std::shared_ptr<const CBlock> m_block;\n+\n+    //! Was this block explicitly requested (currently required by ProcessNewBlock)\n+    const bool m_force_processing;\n+\n+    //! A callback to invoke when ready\n+    //! This is a workaround because c++11 does not support multiplexed waiting on futures\n+    //! In a move to subsequent standards when this behavior is supported this can probably be removed\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: SubmitForValidation(object) -> future<Response>\n+ *  - synchronous:  Validate(object) -> Response (just calls SubmitForValidation and blocks on the response)\n+ *\n+ * Internally, a validation thread pulls validations requests from a queue, processes them and satisfies the promise\n+ * with the result of validation.\n+ */\n+class ValidationLayer\n+{\n+    friend BlockValidationRequest;\n+\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        : m_chainparams(chainparams), m_validation_queue(std::make_shared<ValidationQueue>(100)) {}\n+    ~ValidationLayer(){};\n+\n+    //! Starts the validation layer (creating the validation thread)\n+    void Start();\n+\n+    //! Stops the validation layer (stopping the validation thread)\n+    void Stop();\n+\n+    //! Submit a block for asynchronous validation\n+    std::future<BlockValidationResponse> SubmitForValidation(const std::shared_ptr<const CBlock> block, bool force_processing, std::function<void()> on_ready = []() {});\n+\n+    //! Submit a block for validation and block on the response\n+    BlockValidationResponse Validate(const std::shared_ptr<const CBlock> block, bool force_processing);\n+\n+private:\n+    //! Internal utility method - sets up and calls ProcessNewBlock\n+    BlockValidationResponse ValidateInternal(const std::shared_ptr<const CBlock> block, bool force_processing) const;",
      "path": "src/validation_layer.h",
      "position": 122,
      "original_position": 122,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5d40aa8e9607ca8dd35ced29157f28d9602d5d55",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason this doesn't just live on BlockValidationRequest? Could avoid some friendliness that way.",
      "created_at": "2018-07-13T18:03:49Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202430201",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202430201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 122,
      "original_line": 122,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202432952",
      "pull_request_review_id": 134339062,
      "id": 202432952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzMjk1Mg==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+class ValidationLayer;\n+extern std::unique_ptr<ValidationLayer> g_validation_layer;\n+\n+/**\n+ * Encapsulates a request to validate an object (currently only a block)\n+ * Submitted to ValidationLayer for asynchronous validation\n+ *\n+ * @see ValidationLayer\n+ */\n+template <typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    //! Guts of the validation\n+    virtual void operator()() = 0;\n+\n+    //! Returns a string identifier (for logging)\n+    virtual std::string GetId() const = 0;\n+\n+protected:\n+    //! Promise that will deliver the validation result to the caller who generated this request\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+/**\n+ * Holds the results of asynchronous block validation\n+ */\n+struct BlockValidationResponse {\n+    //! Is this the first time this block has been validated\n+    const bool is_new;\n+\n+    //! Did initial validation pass (a block can still pass initial validation but then later fail to connect to an active chain)\n+    const bool block_valid;",
      "path": "src/validation_layer.h",
      "position": 49,
      "original_position": 49,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "5d40aa8e9607ca8dd35ced29157f28d9602d5d55",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Based on the call site, should this be `block_accepted`? \"valid\" is a little ambiguous if you take into account all the different states in `chain.h:BlockStatus`.",
      "created_at": "2018-07-13T18:14:40Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202432952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202432952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 49,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202434170",
      "pull_request_review_id": 134339062,
      "id": 202434170,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzNDE3MA==",
      "diff_hunk": "@@ -2034,11 +2035,28 @@ void CConnman::ThreadMessageHandler()\n             if (pnode->fDisconnect)\n                 continue;\n \n-            // Receive messages\n-            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, flagInterruptMsgProc);\n-            fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n+            bool request_was_queued = pnode->IsAwaitingInternalRequest();\n+\n+            // If an internal request was queued and it's not done yet, skip this node\n+            if (request_was_queued && !pnode->ProcessInternalRequestResults(m_msgproc))",
      "path": "src/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "8f0d086d5362de18539471fcfe8f048f8b0c9600",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "braces",
      "created_at": "2018-07-13T18:19:32Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202434170",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202434170"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2052,
      "original_line": 2052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202435468",
      "pull_request_review_id": 134339062,
      "id": 202435468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzNTQ2OA==",
      "diff_hunk": "@@ -23,19 +23,23 @@\n #include <threadinterrupt.h>\n \n #include <atomic>\n+#include <chrono>\n+#include <condition_variable>\n #include <deque>\n+#include <future>\n+#include <memory>\n #include <stdint.h>\n #include <thread>\n-#include <memory>\n-#include <condition_variable>\n \n #ifndef WIN32\n #include <arpa/inet.h>\n #endif\n \n-\n+struct BlockValidationResponse;",
      "path": "src/net.h",
      "position": 19,
      "original_position": 19,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "8f0d086d5362de18539471fcfe8f048f8b0c9600",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not just include validation_layer? Circular dep somehow?",
      "created_at": "2018-07-13T18:24:52Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202435468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202435468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 38,
      "original_line": 38,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202436224",
      "pull_request_review_id": 134339062,
      "id": 202436224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzNjIyNA==",
      "diff_hunk": "@@ -2692,19 +2679,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LOCK(cs_main);\n             // Also always process if we requested the block explicitly, as we may\n             // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            forceProcessing = mapBlocksInFlight.count(hash);\n+\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n-        bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n-        if (fNewBlock) {\n-            pfrom->nLastBlockTime = GetTime();\n-        } else {\n-            LOCK(cs_main);\n-            mapBlockSource.erase(pblock->GetHash());\n-        }\n+        SubmitBlock(connman, validation_layer, pfrom, pblock, forceProcessing);",
      "path": "src/net_processing.cpp",
      "position": 146,
      "original_position": 171,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "8f0d086d5362de18539471fcfe8f048f8b0c9600",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nice cleanup!",
      "created_at": "2018-07-13T18:27:50Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202436224",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202436224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2706,
      "original_line": 2706,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202436928",
      "pull_request_review_id": 134339062,
      "id": 202436928,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwMjQzNjkyOA==",
      "diff_hunk": "@@ -3072,6 +3053,26 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ProcessBlockValidationResponse(CNode* pfrom, const std::shared_ptr<const CBlock> pblock, const CBlockIndex* pindex, const BlockValidationResponse& validation_response)\n+{\n+    LOCK(cs_main);\n+\n+    // If we've reconstructed this block via compactblocks then\n+    // Clear download state for this block, which is in\n+    // process from some other peer.  We do this after calling\n+    // ProcessNewBlock so that a malleated cmpctblock announcement\n+    // can't be used to interfere with block relay.",
      "path": "src/net_processing.cpp",
      "position": 171,
      "original_position": 196,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "8f0d086d5362de18539471fcfe8f048f8b0c9600",
      "in_reply_to_id": null,
      "user": {
        "login": "jamesob",
        "id": 73197,
        "node_id": "MDQ6VXNlcjczMTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jamesob",
        "html_url": "https://github.com/jamesob",
        "followers_url": "https://api.github.com/users/jamesob/followers",
        "following_url": "https://api.github.com/users/jamesob/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jamesob/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jamesob/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
        "organizations_url": "https://api.github.com/users/jamesob/orgs",
        "repos_url": "https://api.github.com/users/jamesob/repos",
        "events_url": "https://api.github.com/users/jamesob/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jamesob/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm out of my depth here - should be looked at by someone with lots of net_processing experience.",
      "created_at": "2018-07-13T18:30:23Z",
      "updated_at": "2018-07-25T17:30:22Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r202436928",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/202436928"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3082,
      "original_line": 3082,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209697684",
      "pull_request_review_id": 145761684,
      "id": 209697684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTY5NzY4NA==",
      "diff_hunk": "@@ -145,6 +145,7 @@ BITCOIN_CORE_H = \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n+  core/producerconsumerqueue.h \\",
      "path": "src/Makefile.am",
      "position": null,
      "original_position": 4,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "c6396d9ac2d01c43fca7f7730b710de4ba86229c",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Implement a thread-safe FIFO (producer/consumer style) queue\" (c6396d9ac2d01c43fca7f7730b710de4ba86229c)\r\n\r\nJust noticed this PR is creating a new `src/core/` subdirectory to hold the queue and thread code. This seems good, but it may also be good to add a short `core/README.md` to say what the directory is supposed to be for. For example, if it's meant to hold utility code that isn't bitcoin specific, or if it might make sense in the future to move other code there.",
      "created_at": "2018-08-13T17:43:58Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209697684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209697684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 148,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209711909",
      "pull_request_review_id": 145761684,
      "id": 209711909,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTcxMTkwOQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()",
      "path": "src/core/consumerthread.h",
      "position": 54,
      "original_position": 54,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nShould this be marked \"override?\"",
      "created_at": "2018-08-13T18:28:40Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209711909",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209711909"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209712684",
      "pull_request_review_id": 145761684,
      "id": 209712684,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTcxMjY4NA==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};",
      "path": "src/core/consumerthread.h",
      "position": 26,
      "original_position": 26,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nIt might be a good idea to make this abstract (`= 0`) to trigger a compile error in case a subclass declares this the wrong way and fails to override.",
      "created_at": "2018-08-13T18:31:04Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209712684",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209712684"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 26,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209725014",
      "pull_request_review_id": 145761684,
      "id": 209725014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTcyNTAxNA==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>",
      "path": "src/core/producerconsumerqueue.h",
      "position": 32,
      "original_position": 32,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "d8106146e7511837decb4b45de35dec654454b69",
      "in_reply_to_id": 196532632,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Re: https://github.com/bitcoin/bitcoin/pull/12934#discussion_r196532632\r\n\r\nAnother advantage to add to list above:\r\n\r\n5. If you make blocking an attribute of push/pop methods rather than an attibutes of the queue you can drop the consumer/producer terminology, which I'm finding confusing now that I'm looking at downstream code. E.g. if I push an item into the queue, that seems like producing from my perspective, but it's consuming from the queue/worker thread perspective and makes that code a bit strange, IMO.",
      "created_at": "2018-08-13T19:10:20Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209725014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209725014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209732014",
      "pull_request_review_id": 145761684,
      "id": 209732014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTczMjAxNA==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE>& m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template <WorkerMode PRODUCER_MODE>\n+class WorkQueue : public BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>",
      "path": "src/core/consumerthread.h",
      "position": 84,
      "original_position": 84,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nCalling this variable PRODUCER_MODE here, but passing it as the `consumer_mode` argument to BlockingConsumerQueue/ProducerConsumerQueue is a little unexpected. Could you maybe note this in a short comment to avoid confusion? Alternately it might be clearer just to use `ProducerConsumerQueue` directly, and not have `BlockingConsumerQueue` as a thing.\r\n\r\nTBH, also, I don't actually understand why PRODUCER_MODE exists as a parameter. Why would code constructing WorkQueue want to control the default consumer mode of the queue when it doesn't consume from the queue (ConsumerThread does)?",
      "created_at": "2018-08-13T19:35:35Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209732014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209732014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209733049",
      "pull_request_review_id": 145761684,
      "id": 209733049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTczMzA0OQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE>& m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template <WorkerMode PRODUCER_MODE>\n+class WorkQueue : public BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>\n+{\n+public:\n+    WorkQueue(int capacity) :BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>(capacity) {}\n+\n+    //! Blocks until everything pushed to the queue prior to this call has been dequeued by a worker\n+    void Sync()\n+    {\n+        std::promise<void> barrier;\n+        this->Push(MakeUnique<GenericWorkItem<PRODUCER_MODE>>([&barrier](){ barrier.set_value(); }), WorkerMode::BLOCKING);\n+        barrier.get_future().wait();\n+    }\n+};\n+\n+/**\n+ * A worker thread that interoperates with a BlockingConsumerQueue\n+ *\n+ * Blocks on the queue, pulls WorkItem() tasks and executes them\n+ * No assumptions are made about number of threads operating on this queue\n+ *\n+ * @see WorkItem\n+ * @see WorkQueue\n+ * @see BlockingConsumerQueue\n+ * @see ProducerConsumerQueue\n+ */\n+template <WorkerMode PRODUCER_POLICY>\n+class ConsumerThread\n+{\n+    friend ShutdownPill<PRODUCER_POLICY>; //<! needs to introspect in order to cleanly terminate this thread\n+\n+public:\n+    //! Default constructor: not a valid thread\n+    ConsumerThread() : m_active(false){};\n+\n+    //! Constructs a ConsumerThread: RAII\n+    //! @param queue the queue from which this thread will pull work\n+    ConsumerThread(std::shared_ptr<WorkQueue<PRODUCER_POLICY>> queue, const std::string id = \"worker\")\n+        : m_id(id), m_queue(queue), m_active(true)",
      "path": "src/core/consumerthread.h",
      "position": 121,
      "original_position": 121,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nMight be better to std::move(id) to avoid a copy if caller passes a temporary.",
      "created_at": "2018-08-13T19:39:12Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209733049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209733049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 121,
      "original_line": 121,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209733925",
      "pull_request_review_id": 145761684,
      "id": 209733925,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTczMzkyNQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE>& m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template <WorkerMode PRODUCER_MODE>\n+class WorkQueue : public BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>\n+{\n+public:\n+    WorkQueue(int capacity) :BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>(capacity) {}\n+\n+    //! Blocks until everything pushed to the queue prior to this call has been dequeued by a worker\n+    void Sync()\n+    {\n+        std::promise<void> barrier;\n+        this->Push(MakeUnique<GenericWorkItem<PRODUCER_MODE>>([&barrier](){ barrier.set_value(); }), WorkerMode::BLOCKING);\n+        barrier.get_future().wait();\n+    }\n+};\n+\n+/**\n+ * A worker thread that interoperates with a BlockingConsumerQueue\n+ *\n+ * Blocks on the queue, pulls WorkItem() tasks and executes them\n+ * No assumptions are made about number of threads operating on this queue\n+ *\n+ * @see WorkItem\n+ * @see WorkQueue\n+ * @see BlockingConsumerQueue\n+ * @see ProducerConsumerQueue\n+ */\n+template <WorkerMode PRODUCER_POLICY>\n+class ConsumerThread\n+{\n+    friend ShutdownPill<PRODUCER_POLICY>; //<! needs to introspect in order to cleanly terminate this thread\n+\n+public:\n+    //! Default constructor: not a valid thread\n+    ConsumerThread() : m_active(false){};\n+\n+    //! Constructs a ConsumerThread: RAII\n+    //! @param queue the queue from which this thread will pull work\n+    ConsumerThread(std::shared_ptr<WorkQueue<PRODUCER_POLICY>> queue, const std::string id = \"worker\")\n+        : m_id(id), m_queue(queue), m_active(true)\n+    {\n+        m_thread = std::thread(&TraceThread<std::function<void()>>, id.c_str(), std::function<void()>(std::bind(&ConsumerThread<PRODUCER_POLICY>::Loop, this)));\n+    };\n+\n+    //! Terminates a running consumer thread\n+    //! Blocks until the thread joins\n+    //! Repeated calls are no-ops\n+    void Terminate()\n+    {\n+        RequestTermination();\n+        Join();\n+    }\n+\n+    //! Requests termination of a running consumer thread\n+    //! Does not wait for the thread to terminate\n+    //! Repeated calls are no-ops\n+    void RequestTermination()\n+    {\n+        // locked only so that repeated calls do not push extra ShutdownPills\n+        std::unique_lock<CWaitableCriticalSection> l(m_cs_shutdown);\n+        if (m_active) {\n+            m_active = false;\n+\n+            // push an empty WorkItem so that we wake the thread up if it is blocking on an empty queue\n+            // there is no easy way to determine if this consumer is blocked on the queue without introducing\n+            // additional synchronization, but there is little downside to pushing this unnecessarily:\n+            // either this is the last active thread on the queue in which case this will be destroyed if/when\n+            // the queue (and any other work that may remain is destroyed)\n+            // or there are other threads on the queue - in which case this pill will be discarded after any\n+            // of the other threads observe it more than once\n+            m_queue->Push(std::unique_ptr<ShutdownPill<PRODUCER_POLICY>>(new ShutdownPill<PRODUCER_POLICY>(*this)), WorkerMode::NONBLOCKING);\n+        }\n+    }\n+\n+    //! Waits until this thread terminates\n+    //! RequestTerminate() must have been previously called or be called by a different thread\n+    void Join()\n+    {\n+        m_thread.join();\n+    }\n+\n+    bool IsActive() const { std::unique_lock<CWaitableCriticalSection> l(m_cs_shutdown); return m_active; }\n+\n+    const std::string m_id;\n+\n+private:\n+    //! the queue of work that this thread should consume from\n+    const std::shared_ptr<WorkQueue<PRODUCER_POLICY>> m_queue;\n+\n+    //! the thread that this class wraps\n+    std::thread m_thread;\n+\n+    //! whether this thread should continue running: behaves like a latch\n+    //! initialized to true in the constructor",
      "path": "src/core/consumerthread.h",
      "position": 175,
      "original_position": 175,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nCan the comment explain why this is `volatile` rather than `std::atomic` or similar? I thought `volatile` wasn't really meaningful for thread synchronization.\r\n\r\nAlso maybe just write `m_active = true` here so no need to initialize it elsewhere and then describe the initialization in a comment.",
      "created_at": "2018-08-13T19:42:07Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209733925",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209733925"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 175,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209740266",
      "pull_request_review_id": 145761684,
      "id": 209740266,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc0MDI2Ng==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 35,
      "original_position": 35,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nWould it make sense to add tests for WorkerMode::NONBLOCKING? Maybe say one way or the other in a comment here even if it is not worth writing more tests now.",
      "created_at": "2018-08-13T20:04:31Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209740266",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209740266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 35,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209747179",
      "pull_request_review_id": 145761684,
      "id": 209747179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc0NzE3OQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE>& m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template <WorkerMode PRODUCER_MODE>\n+class WorkQueue : public BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>\n+{\n+public:\n+    WorkQueue(int capacity) :BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>(capacity) {}\n+\n+    //! Blocks until everything pushed to the queue prior to this call has been dequeued by a worker\n+    void Sync()\n+    {\n+        std::promise<void> barrier;\n+        this->Push(MakeUnique<GenericWorkItem<PRODUCER_MODE>>([&barrier](){ barrier.set_value(); }), WorkerMode::BLOCKING);\n+        barrier.get_future().wait();\n+    }\n+};\n+\n+/**\n+ * A worker thread that interoperates with a BlockingConsumerQueue\n+ *\n+ * Blocks on the queue, pulls WorkItem() tasks and executes them\n+ * No assumptions are made about number of threads operating on this queue\n+ *\n+ * @see WorkItem\n+ * @see WorkQueue\n+ * @see BlockingConsumerQueue\n+ * @see ProducerConsumerQueue\n+ */\n+template <WorkerMode PRODUCER_POLICY>\n+class ConsumerThread\n+{\n+    friend ShutdownPill<PRODUCER_POLICY>; //<! needs to introspect in order to cleanly terminate this thread\n+\n+public:\n+    //! Default constructor: not a valid thread\n+    ConsumerThread() : m_active(false){};\n+\n+    //! Constructs a ConsumerThread: RAII\n+    //! @param queue the queue from which this thread will pull work\n+    ConsumerThread(std::shared_ptr<WorkQueue<PRODUCER_POLICY>> queue, const std::string id = \"worker\")\n+        : m_id(id), m_queue(queue), m_active(true)\n+    {\n+        m_thread = std::thread(&TraceThread<std::function<void()>>, id.c_str(), std::function<void()>(std::bind(&ConsumerThread<PRODUCER_POLICY>::Loop, this)));\n+    };\n+\n+    //! Terminates a running consumer thread\n+    //! Blocks until the thread joins\n+    //! Repeated calls are no-ops\n+    void Terminate()\n+    {\n+        RequestTermination();\n+        Join();\n+    }\n+\n+    //! Requests termination of a running consumer thread\n+    //! Does not wait for the thread to terminate\n+    //! Repeated calls are no-ops\n+    void RequestTermination()\n+    {\n+        // locked only so that repeated calls do not push extra ShutdownPills\n+        std::unique_lock<CWaitableCriticalSection> l(m_cs_shutdown);\n+        if (m_active) {\n+            m_active = false;\n+\n+            // push an empty WorkItem so that we wake the thread up if it is blocking on an empty queue\n+            // there is no easy way to determine if this consumer is blocked on the queue without introducing\n+            // additional synchronization, but there is little downside to pushing this unnecessarily:\n+            // either this is the last active thread on the queue in which case this will be destroyed if/when\n+            // the queue (and any other work that may remain is destroyed)\n+            // or there are other threads on the queue - in which case this pill will be discarded after any\n+            // of the other threads observe it more than once\n+            m_queue->Push(std::unique_ptr<ShutdownPill<PRODUCER_POLICY>>(new ShutdownPill<PRODUCER_POLICY>(*this)), WorkerMode::NONBLOCKING);\n+        }\n+    }\n+\n+    //! Waits until this thread terminates\n+    //! RequestTerminate() must have been previously called or be called by a different thread\n+    void Join()\n+    {\n+        m_thread.join();\n+    }\n+\n+    bool IsActive() const { std::unique_lock<CWaitableCriticalSection> l(m_cs_shutdown); return m_active; }\n+\n+    const std::string m_id;\n+\n+private:\n+    //! the queue of work that this thread should consume from\n+    const std::shared_ptr<WorkQueue<PRODUCER_POLICY>> m_queue;\n+\n+    //! the thread that this class wraps\n+    std::thread m_thread;\n+\n+    //! whether this thread should continue running: behaves like a latch\n+    //! initialized to true in the constructor\n+    //! can be set to false by calling Terminate()\n+    volatile bool m_active;\n+\n+    //! protects Terminate()",
      "path": "src/core/consumerthread.h",
      "position": 179,
      "original_position": 179,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nWould dropping the mutex and just making `m_active` a `std::atomic` have the same effect? It seems like this would be equivalent and simpler, but maybe you could explain if the mutex is covering something else besides `m_active` in the comment.",
      "created_at": "2018-08-13T20:27:11Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209747179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209747179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 179,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209748096",
      "pull_request_review_id": 145761684,
      "id": 209748096,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc0ODA5Ng==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));\n+\n+    std::vector<std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>> threads;\n+    for (int i = 0; i < n_threads; i++) {\n+        threads.emplace_back(std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>(new ConsumerThread<WorkerMode::BLOCKING>(queue, std::to_string(i))));",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 39,
      "original_position": 39,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nMaybe shorten this with MakeUnique (also in Push below).",
      "created_at": "2018-08-13T20:30:09Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209748096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209748096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209751301",
      "pull_request_review_id": 145761684,
      "id": 209751301,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc1MTMwMQ==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));\n+\n+    std::vector<std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>> threads;\n+    for (int i = 0; i < n_threads; i++) {\n+        threads.emplace_back(std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>(new ConsumerThread<WorkerMode::BLOCKING>(queue, std::to_string(i))));\n+    }\n+\n+    for (int i = 0; i < n_elements; i++) {\n+        work[i] = i;\n+        queue->Push(std::unique_ptr<TestWorkItem>(new TestWorkItem(work[i])));\n+    }\n+\n+    while (queue->size() > 0) {",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 47,
      "original_position": 47,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nCan you add a comment to say what the yield loop is for? It seems like just calling Sync without yielding beforehand, then then checking size == 0 would be simpler, and also a better check that the `Sync` method works.",
      "created_at": "2018-08-13T20:40:23Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209751301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209751301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209755260",
      "pull_request_review_id": 145761684,
      "id": 209755260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc1NTI2MA==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));\n+\n+    std::vector<std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>> threads;\n+    for (int i = 0; i < n_threads; i++) {\n+        threads.emplace_back(std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>(new ConsumerThread<WorkerMode::BLOCKING>(queue, std::to_string(i))));\n+    }\n+\n+    for (int i = 0; i < n_elements; i++) {\n+        work[i] = i;\n+        queue->Push(std::unique_ptr<TestWorkItem>(new TestWorkItem(work[i])));\n+    }\n+\n+    while (queue->size() > 0) {\n+        std::this_thread::yield();\n+    }\n+    queue->Sync();\n+\n+    for (int i = 0; i < n_threads / 2; i++) {\n+        threads[i]->Terminate();\n+    }\n+\n+    BOOST_CHECK_LT(queue->size(), n_threads + 1);\n+    for (int i = 0; i < n_elements; i++) {\n+        BOOST_CHECK_EQUAL(work[i], i + 2);\n+    }\n+\n+    for (int i = 0; i < n_elements; i++) {\n+        queue->Push(std::unique_ptr<TestWorkItem>(new TestWorkItem(work[i])));\n+    }\n+\n+    while (queue->size() > 0) {\n+        std::this_thread::yield();\n+    }\n+    queue->Sync();\n+\n+    for (int i = n_threads / 2; i < n_threads; i++) {\n+        threads[i]->Terminate();\n+    }\n+\n+    BOOST_CHECK_LT(queue->size(), n_threads + 1);\n+    for (int i = 0; i < n_elements; i++) {\n+        BOOST_CHECK_EQUAL(work[i], i + 4);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(foo)",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 80,
      "original_position": 80,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nShould replace foo.",
      "created_at": "2018-08-13T20:53:59Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209755260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209755260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 80,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209756189",
      "pull_request_review_id": 145761684,
      "id": 209756189,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc1NjE4OQ==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));\n+\n+    std::vector<std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>> threads;\n+    for (int i = 0; i < n_threads; i++) {\n+        threads.emplace_back(std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>(new ConsumerThread<WorkerMode::BLOCKING>(queue, std::to_string(i))));\n+    }\n+\n+    for (int i = 0; i < n_elements; i++) {\n+        work[i] = i;\n+        queue->Push(std::unique_ptr<TestWorkItem>(new TestWorkItem(work[i])));",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 44,
      "original_position": 44,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nI think there is a race here between `work[i]` being assigned and then incremented in the worker thread. You could avoid it by setting `work` values after creating the vector but before creating the queue.",
      "created_at": "2018-08-13T20:57:16Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209756189",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209756189"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209757443",
      "pull_request_review_id": 145761684,
      "id": 209757443,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc1NzQ0Mw==",
      "diff_hunk": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <atomic>\n+#include <boost/test/unit_test.hpp>\n+#include <iostream>\n+#include <test/test_bitcoin.h>\n+\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(consumerthread_tests, BasicTestingSetup)\n+\n+class TestWorkItem : public WorkItem<WorkerMode::BLOCKING>\n+{\n+public:\n+    TestWorkItem(int& i) : m_i(i){};\n+    void operator()()\n+    {\n+        // yield to make unit tests somewhat more unpredictable\n+        std::this_thread::yield();\n+        ++m_i;\n+        std::this_thread::yield();\n+        ++m_i;\n+    }\n+\n+private:\n+    int& m_i;\n+};\n+\n+void ConsumerThreadTest(int n_elements, int n_threads)\n+{\n+    std::vector<int> work(n_elements);\n+    auto queue = std::shared_ptr<WorkQueue<WorkerMode::BLOCKING>>(new WorkQueue<WorkerMode::BLOCKING>(n_elements + 1));\n+\n+    std::vector<std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>> threads;\n+    for (int i = 0; i < n_threads; i++) {\n+        threads.emplace_back(std::unique_ptr<ConsumerThread<WorkerMode::BLOCKING>>(new ConsumerThread<WorkerMode::BLOCKING>(queue, std::to_string(i))));\n+    }\n+\n+    for (int i = 0; i < n_elements; i++) {\n+        work[i] = i;\n+        queue->Push(std::unique_ptr<TestWorkItem>(new TestWorkItem(work[i])));\n+    }\n+\n+    while (queue->size() > 0) {\n+        std::this_thread::yield();\n+    }\n+    queue->Sync();\n+\n+    for (int i = 0; i < n_threads / 2; i++) {\n+        threads[i]->Terminate();\n+    }\n+\n+    BOOST_CHECK_LT(queue->size(), n_threads + 1);\n+    for (int i = 0; i < n_elements; i++) {\n+        BOOST_CHECK_EQUAL(work[i], i + 2);",
      "path": "src/test/consumerthread_tests.cpp",
      "position": 58,
      "original_position": 58,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "134d47a263620afae26f9966a74465bf896ff530",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ConsumerThread unit tests\" (134d47a263620afae26f9966a74465bf896ff530)\r\n\r\nMight be good to move this check above Terminate() to make the test more strict.",
      "created_at": "2018-08-13T21:01:20Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209757443",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209757443"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 58,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209765147",
      "pull_request_review_id": 145761684,
      "id": 209765147,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc2NTE0Nw==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>",
      "path": "src/core/consumerthread.h",
      "position": 48,
      "original_position": 48,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "6c624232a71cfb3b7b4de0540b83d5b0dd08c7d7",
      "in_reply_to_id": 202417596,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nI think I agree with James. Even if you want to support shutting down specific threads, an approach more like \"Everybody wake up, check if you are supposed to exit, and if not go back to sleep again\" might be simpler than \"Random thread wake up, check if you are supposed to exit, and if not wake up another random thread, but not if you already seen this particular notification before,\" or whatever the correct description is. (If you do want to stick with the current approach, it could be nice to add a high level comment explaining it like this.)",
      "created_at": "2018-08-13T21:27:18Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209765147",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209765147"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209766415",
      "pull_request_review_id": 145761684,
      "id": 209766415,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTc2NjQxNQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue",
      "path": "src/core/consumerthread.h",
      "position": 75,
      "original_position": 75,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a888)\r\n\r\nWhy couldn't the intended thread just be blocked calling Pop() and not terminated or currently processing anything? It seems like this is assuming threads are notified in a circular order.",
      "created_at": "2018-08-13T21:32:22Z",
      "updated_at": "2018-08-13T21:59:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209766415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209766415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 75,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209983701",
      "pull_request_review_id": 146103931,
      "id": 209983701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIwOTk4MzcwMQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+class ValidationLayer;\n+extern std::unique_ptr<ValidationLayer> g_validation_layer;\n+\n+/**\n+ * Encapsulates a request to validate an object (currently only a block)\n+ * Submitted to ValidationLayer for asynchronous validation\n+ *\n+ * @see ValidationLayer\n+ */\n+template <typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    //! Guts of the validation\n+    virtual void operator()() = 0;\n+\n+    //! Returns a string identifier (for logging)\n+    virtual std::string GetId() const = 0;\n+\n+protected:\n+    //! Promise that will deliver the validation result to the caller who generated this request\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+/**\n+ * Holds the results of asynchronous block validation\n+ */\n+struct BlockValidationResponse {\n+    //! Is this the first time this block has been validated\n+    const bool is_new;\n+\n+    //! Did initial validation pass (a block can still pass initial validation but then later fail to connect to an active chain)\n+    const bool block_valid;\n+\n+    BlockValidationResponse(bool _block_valid, bool _is_new)\n+        : is_new(_is_new), block_valid(_block_valid){};\n+};\n+\n+/**\n+ * Encapsulates a request to validate a block\n+ */\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+        : m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready){};\n+\n+    //! Does the validation\n+    void operator()() override;\n+\n+    //! Returns a block hash\n+    std::string GetId() const override;\n+\n+    const ValidationLayer& m_validation_layer;\n+\n+    //! The block to be validated\n+    const std::shared_ptr<const CBlock> m_block;\n+\n+    //! Was this block explicitly requested (currently required by ProcessNewBlock)\n+    const bool m_force_processing;\n+\n+    //! A callback to invoke when ready\n+    //! This is a workaround because c++11 does not support multiplexed waiting on futures\n+    //! In a move to subsequent standards when this behavior is supported this can probably be removed\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: SubmitForValidation(object) -> future<Response>\n+ *  - synchronous:  Validate(object) -> Response (just calls SubmitForValidation and blocks on the response)\n+ *\n+ * Internally, a validation thread pulls validations requests from a queue, processes them and satisfies the promise\n+ * with the result of validation.\n+ */\n+class ValidationLayer\n+{\n+    friend BlockValidationRequest;\n+\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        : m_chainparams(chainparams), m_validation_queue(std::make_shared<ValidationQueue>(100)) {}\n+    ~ValidationLayer(){};\n+\n+    //! Starts the validation layer (creating the validation thread)\n+    void Start();\n+\n+    //! Stops the validation layer (stopping the validation thread)\n+    void Stop();\n+\n+    //! Submit a block for asynchronous validation\n+    std::future<BlockValidationResponse> SubmitForValidation(const std::shared_ptr<const CBlock> block, bool force_processing, std::function<void()> on_ready = []() {});",
      "path": "src/validation_layer.h",
      "position": 115,
      "original_position": 115,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\r\n\r\nWould be slightly more efficient to make default on_ready value `nullptr` instead of a no-op lambda.\r\n\r\nIt's also kind of unclear what m_ready is supposed to be used for in this context. You might want to move down your other comment from `m_on_ready` about c++11 futures here.",
      "created_at": "2018-08-14T14:54:22Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r209983701",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/209983701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210090068",
      "pull_request_review_id": 146103931,
      "id": 210090068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA5MDA2OA==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_layer.h>\n+#include <validation.h>\n+\n+void BlockValidationRequest::operator()()\n+{\n+    LogPrint(BCLog::VALIDATION, \"%s: validating request=%s\\n\", __func__, GetId());",
      "path": "src/validation_layer.cpp",
      "position": null,
      "original_position": 10,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\r\n\r\nMaybe add the word \"block\" somewhere in here to make it clear what this is validating and obvious this is a block hash.",
      "created_at": "2018-08-14T20:20:28Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210090068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210090068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210091043",
      "pull_request_review_id": 146103931,
      "id": 210091043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA5MTA0Mw==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_layer.h>\n+#include <validation.h>\n+\n+void BlockValidationRequest::operator()()\n+{\n+    LogPrint(BCLog::VALIDATION, \"%s: validating request=%s\\n\", __func__, GetId());\n+    auto res = m_validation_layer.ValidateInternal(m_block, m_force_processing);\n+    LogPrint(BCLog::VALIDATION, \"%s: validation result request=%s block_valid=%d is_new=%d\\n\",\n+        __func__, GetId(), res.block_valid, res.is_new);\n+\n+    m_promise.set_value(res);\n+    if (m_on_ready) {\n+        m_on_ready();\n+    }\n+}\n+\n+std::string BlockValidationRequest::GetId() const\n+{\n+    return strprintf(\"BlockValidationRequest[%s]\", m_block->GetHash().ToString());\n+}\n+\n+void ValidationLayer::Start()\n+{\n+    assert(!m_thread || !m_thread->IsActive());",
      "path": "src/validation_layer.cpp",
      "position": 49,
      "original_position": 28,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea):\r\n\r\nI think it would be better to just assert `!m_thread` to simplify and be more conservative. If m_thread is allowed to be non-null, then I think you would need to add more synchronization here to make sure join is called before the thread is destroyed to prevent a crash in the destructor: https://en.cppreference.com/w/cpp/thread/thread/%7Ethread",
      "created_at": "2018-08-14T20:23:46Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210091043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210091043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 49,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210096605",
      "pull_request_review_id": 146103931,
      "id": 210096605,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA5NjYwNQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats\n+                // full and there are no other threads still consuming\n+                // since the only purpose of reinjecting this is to terminate threads that\n+                // may be blocking on an empty queue when the queue is full we do not need to do this\n+                m_consumer.m_queue->Push(MakeUnique<ShutdownPill<MODE>>(std::move(*this)), WorkerMode::NONBLOCKING);\n+            }\n+\n+            // if the same pill has been seen by the same thread previously then it can safely be discarded\n+            // the intended thread has either terminated or is currently processing a work item and will terminate\n+            // after completing that item and before blocking on the queue\n+        }\n+    };\n+\n+    ConsumerThread<MODE>& m_consumer;\n+    std::set<std::thread::id> m_threads_observed;\n+};\n+\n+template <WorkerMode PRODUCER_MODE>\n+class WorkQueue : public BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>\n+{\n+public:\n+    WorkQueue(int capacity) :BlockingConsumerQueue<std::unique_ptr<WorkItem<PRODUCER_MODE>>, PRODUCER_MODE>(capacity) {}\n+\n+    //! Blocks until everything pushed to the queue prior to this call has been dequeued by a worker\n+    void Sync()\n+    {\n+        std::promise<void> barrier;\n+        this->Push(MakeUnique<GenericWorkItem<PRODUCER_MODE>>([&barrier](){ barrier.set_value(); }), WorkerMode::BLOCKING);\n+        barrier.get_future().wait();\n+    }\n+};\n+\n+/**\n+ * A worker thread that interoperates with a BlockingConsumerQueue\n+ *\n+ * Blocks on the queue, pulls WorkItem() tasks and executes them\n+ * No assumptions are made about number of threads operating on this queue\n+ *\n+ * @see WorkItem\n+ * @see WorkQueue\n+ * @see BlockingConsumerQueue\n+ * @see ProducerConsumerQueue\n+ */\n+template <WorkerMode PRODUCER_POLICY>\n+class ConsumerThread\n+{\n+    friend ShutdownPill<PRODUCER_POLICY>; //<! needs to introspect in order to cleanly terminate this thread\n+\n+public:\n+    //! Default constructor: not a valid thread\n+    ConsumerThread() : m_active(false){};\n+\n+    //! Constructs a ConsumerThread: RAII\n+    //! @param queue the queue from which this thread will pull work\n+    ConsumerThread(std::shared_ptr<WorkQueue<PRODUCER_POLICY>> queue, const std::string id = \"worker\")\n+        : m_id(id), m_queue(queue), m_active(true)\n+    {\n+        m_thread = std::thread(&TraceThread<std::function<void()>>, id.c_str(), std::function<void()>(std::bind(&ConsumerThread<PRODUCER_POLICY>::Loop, this)));\n+    };\n+\n+    //! Terminates a running consumer thread\n+    //! Blocks until the thread joins\n+    //! Repeated calls are no-ops\n+    void Terminate()\n+    {\n+        RequestTermination();\n+        Join();\n+    }\n+\n+    //! Requests termination of a running consumer thread\n+    //! Does not wait for the thread to terminate\n+    //! Repeated calls are no-ops\n+    void RequestTermination()\n+    {\n+        // locked only so that repeated calls do not push extra ShutdownPills\n+        std::unique_lock<CWaitableCriticalSection> l(m_cs_shutdown);\n+        if (m_active) {\n+            m_active = false;\n+\n+            // push an empty WorkItem so that we wake the thread up if it is blocking on an empty queue\n+            // there is no easy way to determine if this consumer is blocked on the queue without introducing\n+            // additional synchronization, but there is little downside to pushing this unnecessarily:\n+            // either this is the last active thread on the queue in which case this will be destroyed if/when\n+            // the queue (and any other work that may remain is destroyed)\n+            // or there are other threads on the queue - in which case this pill will be discarded after any\n+            // of the other threads observe it more than once\n+            m_queue->Push(std::unique_ptr<ShutdownPill<PRODUCER_POLICY>>(new ShutdownPill<PRODUCER_POLICY>(*this)), WorkerMode::NONBLOCKING);\n+        }\n+    }\n+\n+    //! Waits until this thread terminates\n+    //! RequestTerminate() must have been previously called or be called by a different thread",
      "path": "src/core/consumerthread.h",
      "position": 157,
      "original_position": 157,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "7f8a8889564b6509285fbab64825fecb983fca6d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Add ConsumerThread: to consumer and operate on work from a ProducerConsumerQueue\" (7f8a8889564b6509285fbab64825fecb983fca6d)\r\n\r\nI think it would be clearer to just say this will block until RequestTerminate() is called. It should be perfectly fine to call RequestTerminate before or after this call and from any thread.",
      "created_at": "2018-08-14T20:42:38Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210096605",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210096605"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210097479",
      "pull_request_review_id": 146103931,
      "id": 210097479,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDA5NzQ3OQ==",
      "diff_hunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_layer.h>\n+#include <validation.h>\n+\n+void BlockValidationRequest::operator()()\n+{\n+    LogPrint(BCLog::VALIDATION, \"%s: validating request=%s\\n\", __func__, GetId());\n+    auto res = m_validation_layer.ValidateInternal(m_block, m_force_processing);\n+    LogPrint(BCLog::VALIDATION, \"%s: validation result request=%s block_valid=%d is_new=%d\\n\",\n+        __func__, GetId(), res.block_valid, res.is_new);\n+\n+    m_promise.set_value(res);\n+    if (m_on_ready) {\n+        m_on_ready();\n+    }\n+}\n+\n+std::string BlockValidationRequest::GetId() const\n+{\n+    return strprintf(\"BlockValidationRequest[%s]\", m_block->GetHash().ToString());\n+}\n+\n+void ValidationLayer::Start()\n+{\n+    assert(!m_thread || !m_thread->IsActive());\n+    m_thread = std::unique_ptr<ValidationThread>(new ValidationThread(m_validation_queue));\n+}\n+\n+void ValidationLayer::Stop()\n+{\n+    assert(m_thread && m_thread->IsActive());\n+    m_thread->Terminate();\n+}\n+\n+std::future<BlockValidationResponse> ValidationLayer::SubmitForValidation(const std::shared_ptr<const CBlock> block, bool force_processing, std::function<void()> on_ready)\n+{\n+    BlockValidationRequest* req = new BlockValidationRequest(*this, block, force_processing, on_ready);",
      "path": "src/validation_layer.cpp",
      "position": 61,
      "original_position": 40,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\r\n\r\nWould be safer / more efficient to use std::make_shared here.",
      "created_at": "2018-08-14T20:45:18Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210097479",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210097479"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 61,
      "original_line": 40,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210100110",
      "pull_request_review_id": 146103931,
      "id": 210100110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDEwMDExMA==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+class ValidationLayer;\n+extern std::unique_ptr<ValidationLayer> g_validation_layer;\n+\n+/**\n+ * Encapsulates a request to validate an object (currently only a block)\n+ * Submitted to ValidationLayer for asynchronous validation\n+ *\n+ * @see ValidationLayer\n+ */\n+template <typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    //! Guts of the validation\n+    virtual void operator()() = 0;\n+\n+    //! Returns a string identifier (for logging)\n+    virtual std::string GetId() const = 0;\n+\n+protected:\n+    //! Promise that will deliver the validation result to the caller who generated this request\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+/**\n+ * Holds the results of asynchronous block validation\n+ */\n+struct BlockValidationResponse {\n+    //! Is this the first time this block has been validated\n+    const bool is_new;\n+\n+    //! Did initial validation pass (a block can still pass initial validation but then later fail to connect to an active chain)\n+    const bool block_valid;\n+\n+    BlockValidationResponse(bool _block_valid, bool _is_new)\n+        : is_new(_is_new), block_valid(_block_valid){};\n+};\n+\n+/**\n+ * Encapsulates a request to validate a block\n+ */\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+        : m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready){};\n+\n+    //! Does the validation\n+    void operator()() override;\n+\n+    //! Returns a block hash\n+    std::string GetId() const override;\n+\n+    const ValidationLayer& m_validation_layer;\n+\n+    //! The block to be validated\n+    const std::shared_ptr<const CBlock> m_block;\n+\n+    //! Was this block explicitly requested (currently required by ProcessNewBlock)\n+    const bool m_force_processing;\n+\n+    //! A callback to invoke when ready\n+    //! This is a workaround because c++11 does not support multiplexed waiting on futures\n+    //! In a move to subsequent standards when this behavior is supported this can probably be removed\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: SubmitForValidation(object) -> future<Response>\n+ *  - synchronous:  Validate(object) -> Response (just calls SubmitForValidation and blocks on the response)\n+ *\n+ * Internally, a validation thread pulls validations requests from a queue, processes them and satisfies the promise\n+ * with the result of validation.\n+ */\n+class ValidationLayer\n+{\n+    friend BlockValidationRequest;\n+\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        : m_chainparams(chainparams), m_validation_queue(std::make_shared<ValidationQueue>(100)) {}\n+    ~ValidationLayer(){};\n+\n+    //! Starts the validation layer (creating the validation thread)\n+    void Start();\n+\n+    //! Stops the validation layer (stopping the validation thread)\n+    void Stop();\n+\n+    //! Submit a block for asynchronous validation\n+    std::future<BlockValidationResponse> SubmitForValidation(const std::shared_ptr<const CBlock> block, bool force_processing, std::function<void()> on_ready = []() {});\n+\n+    //! Submit a block for validation and block on the response\n+    BlockValidationResponse Validate(const std::shared_ptr<const CBlock> block, bool force_processing);\n+\n+private:\n+    //! Internal utility method - sets up and calls ProcessNewBlock\n+    BlockValidationResponse ValidateInternal(const std::shared_ptr<const CBlock> block, bool force_processing) const;\n+\n+    //! Internal utility method that wraps a request in a unique pointer and deposits it on the validation queue\n+    template <typename RESPONSE>\n+    std::future<RESPONSE> SubmitForValidation(ValidationRequest<RESPONSE>* request)\n+    {\n+        LogPrint(BCLog::VALIDATION, \"%s<%s>: submitting request=%s\\n\", __func__, typeid(RESPONSE).name(), request->GetId());\n+\n+        auto ret = request->m_promise.get_future();\n+        m_validation_queue->Push(std::unique_ptr<ValidationRequest<RESPONSE>>(request));\n+        return ret;\n+    };\n+\n+    const CChainParams& m_chainparams;\n+\n+    //! a queue that holds validation requests that are sequentially processed by m_thread\n+    const std::shared_ptr<ValidationQueue> m_validation_queue;\n+\n+    //! the validation thread - sequentially processes validation requests from m_validation_queue\n+    std::unique_ptr<ValidationThread> m_thread;",
      "path": "src/validation_layer.h",
      "position": 141,
      "original_position": 141,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\r\n\r\nCan this just be a `ValidationThread` instead of a pointer to one? The extra indirection doesn't seem helpful.",
      "created_at": "2018-08-14T20:54:03Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210100110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210100110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 141,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210101095",
      "pull_request_review_id": 146103931,
      "id": 210101095,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDEwMTA5NQ==",
      "diff_hunk": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_LAYER_H\n+#define BITCOIN_VALIDATION_LAYER_H\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <core/consumerthread.h>\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+class ValidationLayer;\n+extern std::unique_ptr<ValidationLayer> g_validation_layer;\n+\n+/**\n+ * Encapsulates a request to validate an object (currently only a block)\n+ * Submitted to ValidationLayer for asynchronous validation\n+ *\n+ * @see ValidationLayer\n+ */\n+template <typename RESPONSE>\n+class ValidationRequest : public WorkItem<WorkerMode::BLOCKING>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    //! Guts of the validation\n+    virtual void operator()() = 0;\n+\n+    //! Returns a string identifier (for logging)\n+    virtual std::string GetId() const = 0;\n+\n+protected:\n+    //! Promise that will deliver the validation result to the caller who generated this request\n+    std::promise<RESPONSE> m_promise;\n+};\n+\n+/**\n+ * Holds the results of asynchronous block validation\n+ */\n+struct BlockValidationResponse {\n+    //! Is this the first time this block has been validated\n+    const bool is_new;\n+\n+    //! Did initial validation pass (a block can still pass initial validation but then later fail to connect to an active chain)\n+    const bool block_valid;\n+\n+    BlockValidationResponse(bool _block_valid, bool _is_new)\n+        : is_new(_is_new), block_valid(_block_valid){};\n+};\n+\n+/**\n+ * Encapsulates a request to validate a block\n+ */\n+class BlockValidationRequest : public ValidationRequest<BlockValidationResponse>\n+{\n+    friend ValidationLayer;\n+\n+private:\n+    BlockValidationRequest(ValidationLayer& validation_layer, const std::shared_ptr<const CBlock> block, bool force_processing, const std::function<void()> on_ready)\n+        : m_validation_layer(validation_layer), m_block(block), m_force_processing(force_processing), m_on_ready(on_ready){};\n+\n+    //! Does the validation\n+    void operator()() override;\n+\n+    //! Returns a block hash\n+    std::string GetId() const override;\n+\n+    const ValidationLayer& m_validation_layer;\n+\n+    //! The block to be validated\n+    const std::shared_ptr<const CBlock> m_block;\n+\n+    //! Was this block explicitly requested (currently required by ProcessNewBlock)\n+    const bool m_force_processing;\n+\n+    //! A callback to invoke when ready\n+    //! This is a workaround because c++11 does not support multiplexed waiting on futures\n+    //! In a move to subsequent standards when this behavior is supported this can probably be removed\n+    const std::function<void()> m_on_ready;\n+};\n+\n+/**\n+ * Public interface to block validation\n+ *\n+ * Two apis:\n+ *  - asynchronous: SubmitForValidation(object) -> future<Response>\n+ *  - synchronous:  Validate(object) -> Response (just calls SubmitForValidation and blocks on the response)\n+ *\n+ * Internally, a validation thread pulls validations requests from a queue, processes them and satisfies the promise\n+ * with the result of validation.\n+ */\n+class ValidationLayer\n+{\n+    friend BlockValidationRequest;\n+\n+    typedef WorkQueue<WorkerMode::BLOCKING> ValidationQueue;\n+    typedef ConsumerThread<WorkerMode::BLOCKING> ValidationThread;\n+\n+public:\n+    ValidationLayer(const CChainParams& chainparams)\n+        : m_chainparams(chainparams), m_validation_queue(std::make_shared<ValidationQueue>(100)) {}\n+    ~ValidationLayer(){};",
      "path": "src/validation_layer.h",
      "position": 106,
      "original_position": 106,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "b4717281d43b1e0ff9e52d979a3899220ad11eea",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"ValidationLayer() - interface for calls into block validation\" (b4717281d43b1e0ff9e52d979a3899220ad11eea)\r\n\r\nMaybe assert thread is not joinable here, to help debugging in case this is not shut down correctly.",
      "created_at": "2018-08-14T20:57:25Z",
      "updated_at": "2018-08-14T21:03:59Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210101095",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210101095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210326607",
      "pull_request_review_id": 146517554,
      "id": 210326607,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDMyNjYwNw==",
      "diff_hunk": "@@ -209,6 +211,7 @@ void Shutdown()\n     // using the other before destroying them.\n     if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n     if (g_connman) g_connman->Stop();\n+    if (g_validation_layer) g_validation_layer->Stop();",
      "path": "src/init.cpp",
      "position": 20,
      "original_position": 20,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nShould this also free `g_validation_layer`? (or have a comment saying why it shouldn't be freed)",
      "created_at": "2018-08-15T16:27:47Z",
      "updated_at": "2018-08-15T21:13:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210326607",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210326607"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 214,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210339230",
      "pull_request_review_id": 146517554,
      "id": 210339230,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDMzOTIzMA==",
      "diff_hunk": "@@ -2045,11 +2046,28 @@ void CConnman::ThreadMessageHandler()\n             if (pnode->fDisconnect)\n                 continue;\n \n-            // Receive messages\n-            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, flagInterruptMsgProc);\n-            fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n+            bool request_was_queued = pnode->IsAwaitingInternalRequest();\n+\n+            // If an internal request was queued and it's not done yet, skip this node\n+            if (request_was_queued && !pnode->ProcessInternalRequestResults(m_msgproc))",
      "path": "src/net.cpp",
      "position": 24,
      "original_position": 24,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nI think this code might be clearer if the IsAwaitingInternalRequest were call were dropped and ProcessInternalRequestResults just returned requested_was_queued directly. It seems awkward how IsAwaitingInternalRequest and ProcessInternalRequestResults are checking some of the same things and then this code is combining their return values.",
      "created_at": "2018-08-15T17:11:58Z",
      "updated_at": "2018-08-15T21:13:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210339230",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210339230"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2052,
      "original_line": 2052,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210342154",
      "pull_request_review_id": 146517554,
      "id": 210342154,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM0MjE1NA==",
      "diff_hunk": "@@ -18,6 +18,8 @@\n \n #include <boost/thread.hpp>\n \n+class ValidationLayer;",
      "path": "src/test/test_bitcoin.h",
      "position": 4,
      "original_position": 4,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nProbably remove, doesn't look like this is used right now.",
      "created_at": "2018-08-15T17:21:30Z",
      "updated_at": "2018-08-15T21:13:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210342154",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210342154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 21,
      "original_line": 21,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210345767",
      "pull_request_review_id": 146517554,
      "id": 210345767,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM0NTc2Nw==",
      "diff_hunk": "@@ -1572,7 +1579,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     return true;\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)\n+    bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, ValidationLayer& validation_layer, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)",
      "path": "src/net_processing.cpp",
      "position": 52,
      "original_position": 52,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nUnintended indent?",
      "created_at": "2018-08-15T17:32:48Z",
      "updated_at": "2018-08-15T21:13:50Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210345767",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210345767"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1582,
      "original_line": 1582,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210350141",
      "pull_request_review_id": 146517554,
      "id": 210350141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM1MDE0MQ==",
      "diff_hunk": "@@ -3092,6 +3071,26 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ProcessBlockValidationResponse(CNode* pfrom, const std::shared_ptr<const CBlock> pblock, const CBlockIndex* pindex, const BlockValidationResponse& validation_response)\n+{\n+    LOCK(cs_main);\n+\n+    // If we've reconstructed this block via compactblocks then\n+    // Clear download state for this block, which is in\n+    // process from some other peer.  We do this after calling\n+    // ProcessNewBlock so that a malleated cmpctblock announcement\n+    // can't be used to interfere with block relay.\n+    if (!pindex || pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {",
      "path": "src/net_processing.cpp",
      "position": 172,
      "original_position": 172,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nMaybe drop the !pindex check here, or say in a comment whether this would ever be expected? It seems surprising to treat null pindex like the block is valid.",
      "created_at": "2018-08-15T17:46:36Z",
      "updated_at": "2018-08-15T21:14:09Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210350141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210350141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3083,
      "original_line": 3083,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210350876",
      "pull_request_review_id": 146517554,
      "id": 210350876,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM1MDg3Ng==",
      "diff_hunk": "@@ -3092,6 +3071,26 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ProcessBlockValidationResponse(CNode* pfrom, const std::shared_ptr<const CBlock> pblock, const CBlockIndex* pindex, const BlockValidationResponse& validation_response)\n+{\n+    LOCK(cs_main);\n+\n+    // If we've reconstructed this block via compactblocks then\n+    // Clear download state for this block, which is in\n+    // process from some other peer.  We do this after calling\n+    // ProcessNewBlock so that a malleated cmpctblock announcement\n+    // can't be used to interfere with block relay.\n+    if (!pindex || pindex->IsValid(BLOCK_VALID_TRANSACTIONS)) {\n+        MarkBlockAsReceived(pblock->GetHash());\n+    }\n+\n+    if (validation_response.is_new) {",
      "path": "src/net_processing.cpp",
      "position": 176,
      "original_position": 176,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nThis seems ok, but I wanted to note that previous code in the fBlockReconstructed case updated nLastBlockTime/mapBlockSource before calling MarkBlockAsReceived, instead of after.",
      "created_at": "2018-08-15T17:49:01Z",
      "updated_at": "2018-08-15T21:14:43Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210350876",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210350876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3087,
      "original_line": 3087,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210353625",
      "pull_request_review_id": 146517554,
      "id": 210353625,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM1MzYyNQ==",
      "diff_hunk": "@@ -2656,20 +2648,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n         } // Don't hold cs_main when we call into ProcessNewBlock",
      "path": "src/net_processing.cpp",
      "position": 107,
      "original_position": 107,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nShould s/ProcessNewBlock/SubmitBlock/",
      "created_at": "2018-08-15T17:55:49Z",
      "updated_at": "2018-08-15T21:13:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210353625",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210353625"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2649,
      "original_line": 2649,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210392721",
      "pull_request_review_id": 146517554,
      "id": 210392721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDM5MjcyMQ==",
      "diff_hunk": "@@ -2645,7 +2638,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // though the block was successfully read, and rely on the\n                 // handling in ProcessNewBlock to ensure the block index is\n                 // updated, reject messages go out, etc.\n-                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer",
      "path": "src/net_processing.cpp",
      "position": 101,
      "original_position": 101,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f741)\r\n\r\nI guess with this line removed, the block will be marked received later, from the worker thread, after it is processed. This seems ok, though I could see why you might want to mark the block received when its received but before it's processed, so it's clearer what \"received\" and \"processed\" actually refer to.",
      "created_at": "2018-08-15T20:10:11Z",
      "updated_at": "2018-08-15T21:13:21Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210392721",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210392721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2648,
      "original_line": 2648,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210716022",
      "pull_request_review_id": 146991932,
      "id": 210716022,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDcxNjAyMg==",
      "diff_hunk": "@@ -2813,6 +2831,37 @@ void CNode::AskFor(const CInv& inv)\n     mapAskFor.insert(std::make_pair(nRequestTime, inv));\n }\n \n+bool CNode::IsAwaitingInternalRequest()\n+{\n+    return m_block_validation_response.valid();\n+}\n+\n+bool CNode::ProcessInternalRequestResults(NetEventsInterface* peerlogic)\n+{\n+    bool all_cleared = true;\n+\n+    if (m_block_validation_response.valid()) {\n+        if (m_block_validation_response.wait_for(std::chrono::milliseconds::zero()) == std::future_status::ready) {\n+            peerlogic->ProcessBlockValidationResponse(this, m_block_validating, m_block_validating_index, m_block_validation_response.get());\n+\n+            m_block_validating = nullptr;\n+            m_block_validating_index = nullptr;\n+            m_block_validation_response = std::future<BlockValidationResponse>();\n+        } else {\n+            all_cleared = false;\n+        }\n+    }\n+\n+    return all_cleared;\n+}\n+\n+void CNode::SetPendingInternalRequest(const std::shared_ptr<const CBlock> block, std::future<BlockValidationResponse>&& pending_response, const CBlockIndex* pindex)\n+{\n+    m_block_validating = block;",
      "path": "src/net.cpp",
      "position": 76,
      "original_position": 76,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "1c9f74170f9c35d7bc5ba3e9e079b70aafae4094",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Call ProcessNewBlock() asynchronously in a separate thread from p2p layer\" (1c9f74170f9c35d7bc5ba3e9e079b70aafae4094)\r\n\r\nWould it be possible to assert m_block_validating variables are null/invalid here before overwriting them? It seems like it would help debugging if `SetPendingInternalRequest` were called for a new request before the previous request completed.",
      "created_at": "2018-08-16T19:32:49Z",
      "updated_at": "2018-08-16T19:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210716022",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210716022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2860,
      "original_line": 2860,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210718059",
      "pull_request_review_id": 146991932,
      "id": 210718059,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDcxODA1OQ==",
      "diff_hunk": "@@ -3,7 +3,28 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <validation_layer.h>\n-#include <validation.h>\n+\n+/**\n+ * Process an incoming block. This only returns after the best known valid\n+ * block is made active. Note that it does not, however, guarantee that the\n+ * specific block passed to it has been checked for validity!\n+ *\n+ * If you want to *possibly* get feedback on whether pblock is valid, you must\n+ * install a CValidationInterface (see validationinterface.h) - this will have\n+ * its BlockChecked method called whenever *any* block completes validation.\n+ *\n+ * Note that we guarantee that either the proof-of-work is valid on pblock, or\n+ * (and possibly also) BlockChecked will have been called.\n+ *\n+ * May not be called in a\n+ * validationinterface callback.\n+ *\n+ * @param[in]   pblock  The block we want to process.\n+ * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n+ * @return True if state.IsValid()\n+ */\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);",
      "path": "src/validation_layer.cpp",
      "position": 27,
      "original_position": 26,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "377873614b3fa143147ecaba5b750f8be1bdd8a4",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Limit available scope of ProcessNewBlock to ValidationLayer (move-only)\" (377873614b3fa143147ecaba5b750f8be1bdd8a4)\r\n\r\nIt's unusual that ProcessNewBlock is documented and declared in `validation_layer.cpp` but defined in `src/validation.cpp`. It seems like it will make the documentation hard to find. There are a bunch of other options that seem like they would be better to me:\r\n\r\n* Moving `ProcessNewBlock` declaration to `validate_layer.cpp` but moving the documentation to `validate.cpp` near the definition.\r\n* Leaving `ProcessNewBlock` where it is but renaming it to `ProcessNewBlock` internal.\r\n* Making `ProcessNewBlock` a private method of a class that is friends with `ValidationLayer`",
      "created_at": "2018-08-16T19:40:20Z",
      "updated_at": "2018-08-16T19:59:17Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210718059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210718059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210718249",
      "pull_request_review_id": 146991932,
      "id": 210718249,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDcxODI0OQ==",
      "diff_hunk": "@@ -3,7 +3,28 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <validation_layer.h>\n-#include <validation.h>\n+\n+/**\n+ * Process an incoming block. This only returns after the best known valid\n+ * block is made active. Note that it does not, however, guarantee that the\n+ * specific block passed to it has been checked for validity!\n+ *\n+ * If you want to *possibly* get feedback on whether pblock is valid, you must\n+ * install a CValidationInterface (see validationinterface.h) - this will have\n+ * its BlockChecked method called whenever *any* block completes validation.\n+ *\n+ * Note that we guarantee that either the proof-of-work is valid on pblock, or\n+ * (and possibly also) BlockChecked will have been called.\n+ *\n+ * May not be called in a\n+ * validationinterface callback.\n+ *\n+ * @param[in]   pblock  The block we want to process.\n+ * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n+ * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n+ * @return True if state.IsValid()\n+ */\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);",
      "path": "src/validation_layer.cpp",
      "position": 27,
      "original_position": 26,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "377873614b3fa143147ecaba5b750f8be1bdd8a4",
      "in_reply_to_id": 210718059,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Limit available scope of ProcessNewBlock to ValidationLayer (move-only)\" (377873614b3fa143147ecaba5b750f8be1bdd8a4)\r\n\r\nLOCKS_EXCLUDED(cs_main) annotation seems to have been dropped here.",
      "created_at": "2018-08-16T19:41:03Z",
      "updated_at": "2018-08-16T19:59:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210718249",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210718249"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 27,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210722417",
      "pull_request_review_id": 146991932,
      "id": 210722417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMDcyMjQxNw==",
      "diff_hunk": "@@ -79,56 +79,56 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n {\n     SetDataDir(\"tempdir\");\n     const CChainParams& chainparams = Params();\n-        // Ideally we'd move all the RPC tests to the functional testing framework\n-        // instead of unit tests, but for now we need these here.\n-\n-        RegisterAllCoreRPCCommands(tableRPC);\n-        ClearDatadirCache();\n-\n-        // We have to run a scheduler thread to prevent ActivateBestChain\n-        // from blocking due to queue overrun.\n-        threadGroup.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n-        GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-\n-        mempool.setSanityCheck(1.0);\n-        pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-        pcoinsdbview.reset(new CCoinsViewDB(1 << 23, true));\n-        pcoinsTip.reset(new CCoinsViewCache(pcoinsdbview.get()));\n-        if (!LoadGenesisBlock(chainparams)) {\n-            throw std::runtime_error(\"LoadGenesisBlock failed.\");\n-        }\n-        {\n-            CValidationState state;\n-            if (!ActivateBestChain(state, chainparams)) {\n-                throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", FormatStateMessage(state)));\n-            }\n+    // Ideally we'd move all the RPC tests to the functional testing framework",
      "path": "src/test/test_bitcoin.cpp",
      "position": 35,
      "original_position": 27,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit \"Fix whitespace in test_bitcoin.cpp (whitespace,move-only)\" (3d6f03814cde98869ca5b8ad365bb3a0aae522d9)\r\n\r\nMaybe drop \"move-only\" from commit description, since this is actually just a whitespace change.",
      "created_at": "2018-08-16T19:56:01Z",
      "updated_at": "2018-08-16T19:59:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r210722417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/210722417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 82,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532349",
      "pull_request_review_id": 151612772,
      "id": 214532349,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzMjM0OQ==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats",
      "path": "src/core/consumerthread.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo found by `codespell`: “theres” should be “there is” :-)",
      "created_at": "2018-09-02T08:09:01Z",
      "updated_at": "2018-09-02T08:09:02Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532349",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532355",
      "pull_request_review_id": 151612776,
      "id": 214532355,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzMjM1NQ==",
      "diff_hunk": "@@ -0,0 +1,156 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+#define BITCOIN_CORE_PRODUCERCONSUMERQUEUE_H\n+\n+#include <assert.h>\n+#include <deque>\n+#include <sync.h>\n+#include <type_traits>\n+\n+/**\n+ * The mode in which the queue operates\n+ * Modes may be specified for both producers and consumers\n+ */\n+enum class WorkerMode {\n+    BLOCKING,   //!< cv_wait until the action may proceed\n+    NONBLOCKING //!< do not block, immediately return failure if the action is not possible\n+};\n+\n+/**\n+ * A FIFO thread safe producer consumer queue with two operations Push() and Pop()\n+ * Producers Push() and Consumers Pop()\n+ *\n+ * @param T the type of the data contained\n+ * @param m_producer_mode queue behavior when calling Push() on a full queue (block till space becomes available, or immediately fail)\n+ * @param m_consumer_mode queue behavior when calling Pop() on an empty queue (block until there is data, or immediately fail)\n+ *\n+ * @see WorkerMode\n+ */\n+template <typename T, WorkerMode m_producer_mode = WorkerMode::BLOCKING, WorkerMode m_consumer_mode = WorkerMode::BLOCKING>\n+class ProducerConsumerQueue\n+{\n+public:\n+    /**\n+     * Constructs a ProducerConsumerQueue()\n+     * @param[in] capacity the maximum size of this queue\n+     */\n+    ProducerConsumerQueue(int capacity)\n+        : m_capacity(capacity)\n+    {\n+        assert(m_capacity > 0);\n+    };\n+\n+    /**\n+     * Constructs an empty ProducerConsumerQueue with capacity 0\n+     * In nonblocking mode all operations will immediately fail\n+     * In blocking mode all operations will fail an assertion to avoid blocking forever\n+     */\n+    ProducerConsumerQueue()\n+        : m_capacity(0){};\n+    ~ProducerConsumerQueue(){};\n+\n+    /**\n+     * Push an element to the back of the queue\n+     * Blocking producer mode: will always eventually succeed\n+     * Non-blocking producer mode: Push() returns failure when the queue is at capacity\n+     * @param[in] data the data to be pushed\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    template <typename TT>\n+    bool Push(TT&& data, WorkerMode mode = m_producer_mode)\n+    {\n+        // TT needed for perfect forwarding to vector::push_back\n+\n+        // attempting a push to a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() >= m_capacity) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_producer_cv.wait(l, [&]() { return m_data.size() < m_capacity; });\n+            }\n+\n+            m_data.push_back(std::forward<TT>(data));\n+        }\n+        m_consumer_cv.notify_one();\n+        return true;\n+    };\n+\n+    /**\n+     * Try to pop the oldest element from the front of the queue, if present\n+     * Blocking consumer mode: will always eventually succeed\n+     * Nonblocking consumer mode: Pop() returns failure when the queue is empty\n+     * @param[out] the data popped, if the operation was successful\n+     * @return the success of the operation\n+     * @see WorkerMode\n+     */\n+    bool Pop(T& data, WorkerMode mode = m_consumer_mode)\n+    {\n+        // attempting a pop from a queue of capacity 0 is likely unintended\n+        assert(m_capacity > 0);\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_queue_lock);\n+            if (m_data.size() <= 0) {\n+                if (mode == WorkerMode::NONBLOCKING) {\n+                    return false;\n+                }\n+\n+                m_consumer_cv.wait(l, [&]() { return m_data.size() > 0; });\n+            }\n+\n+            data = std::move(m_data.front());\n+            m_data.pop_front();\n+        }\n+        m_producer_cv.notify_one();\n+        return true;\n+    }\n+\n+    /**\n+     * Shortcut for bool Pop(T&) when consumer mode is blocking\n+     * This must always succeed and thus may only be called in producer blocking mode\n+     * @return the element popped\n+     */\n+    T Pop()\n+    {\n+        static_assert(m_consumer_mode == WorkerMode::BLOCKING, \"\");\n+\n+        T ret;\n+\n+        // use a temporary so theres no side effecting code inside an assert which could be disabled",
      "path": "src/core/producerconsumerqueue.h",
      "position": 128,
      "original_position": 128,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "in_reply_to_id": null,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo found by `codespell`: “theres” should be “there is” :-)",
      "created_at": "2018-09-02T08:09:18Z",
      "updated_at": "2018-09-02T08:09:18Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532355",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 128,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532362",
      "pull_request_review_id": 151612786,
      "id": 214532362,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDUzMjM2Mg==",
      "diff_hunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CORE_CONSUMERTHREAD_H\n+#define BITCOIN_CORE_CONSUMERTHREAD_H\n+\n+#include <future>\n+#include <thread>\n+\n+#include <core/producerconsumerqueue.h>\n+#include <util.h>\n+\n+template <WorkerMode MODE>\n+class ConsumerThread;\n+\n+//! A WorkItem() encapsulates a task that can be processed by a ConsumerThread()\n+//! @see ConsumerThread()\n+template <WorkerMode MODE>\n+class WorkItem\n+{\n+    friend ConsumerThread<MODE>; //<! only a consumer thread can execute a WorkItem\n+\n+protected:\n+    WorkItem(){};\n+    virtual void operator()(){};\n+};\n+\n+template <WorkerMode MODE>\n+class GenericWorkItem : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+public:\n+    GenericWorkItem(std::function<void()> f) : m_f(f) {}\n+\n+protected:\n+    void operator()() override\n+    {\n+        m_f();\n+    }\n+\n+    std::function<void()> m_f;\n+};\n+\n+//! A special WorkItem() that is used to interrupt a blocked ConsumerThread() so that it can terminate\n+template <WorkerMode MODE>\n+class ShutdownPill : public WorkItem<MODE>\n+{\n+    friend ConsumerThread<MODE>;\n+\n+private:\n+    ShutdownPill(ConsumerThread<MODE>& consumer) : m_consumer(consumer){};\n+    void operator()()\n+    {\n+        std::thread::id id = m_consumer.m_thread.get_id();\n+        if (std::this_thread::get_id() != id) {\n+            // this ShutdownPill was intended for another thread\n+\n+            // we haven't seen this pill before\n+            if (!m_threads_observed.count(id)) {\n+                m_threads_observed.insert(std::this_thread::get_id());\n+\n+                // resubmit it so that it gets a chance to get to the right thread\n+                // when resubmitting, do not block and do not care about failures\n+                // theres a potential deadlock where we try to push this to a queue thats",
      "path": "src/core/consumerthread.h",
      "position": 66,
      "original_position": 66,
      "commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "original_commit_id": "3d6f03814cde98869ca5b8ad365bb3a0aae522d9",
      "in_reply_to_id": 214532349,
      "user": {
        "login": "practicalswift",
        "id": 7826565,
        "node_id": "MDQ6VXNlcjc4MjY1NjU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/practicalswift",
        "html_url": "https://github.com/practicalswift",
        "followers_url": "https://api.github.com/users/practicalswift/followers",
        "following_url": "https://api.github.com/users/practicalswift/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/practicalswift/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/practicalswift/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
        "organizations_url": "https://api.github.com/users/practicalswift/orgs",
        "repos_url": "https://api.github.com/users/practicalswift/repos",
        "events_url": "https://api.github.com/users/practicalswift/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/practicalswift/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Typo found by `codespell`: “thats” should be “that is” :-)",
      "created_at": "2018-09-02T08:09:47Z",
      "updated_at": "2018-09-02T08:09:47Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/12934#discussion_r214532362",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214532362"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12934"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    }
  ]
}