{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334",
    "id": 294294352,
    "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk0Mjk0MzUy",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16334",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16334.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16334.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "number": 16334,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "test: rpc_users: Also test rpcauth.py with password.",
    "user": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixes #14758\r\n\r\nFirst two commits are tidy-ups which I feel are worthwhile as they are very straightforward, cut down the file by 50%, and made the final diff more minimal. Happy to squash after review.",
    "labels": [
      {
        "id": 62963516,
        "node_id": "MDU6TGFiZWw2Mjk2MzUxNg==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Tests",
        "name": "Tests",
        "color": "d4c5f9",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-07-03T19:04:41Z",
    "updated_at": "2021-12-16T14:08:45Z",
    "closed_at": "2019-07-12T19:29:50Z",
    "mergeable_state": "unknown",
    "merged_at": "2019-07-12T19:29:50Z",
    "merge_commit_sha": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "dongcarl:2019-07-rpcauth-passwd-specified-case",
      "ref": "2019-07-rpcauth-passwd-specified-case",
      "sha": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 97671618,
        "node_id": "MDEwOlJlcG9zaXRvcnk5NzY3MTYxOA==",
        "name": "bitcoin",
        "full_name": "dongcarl/bitcoin",
        "owner": {
          "login": "dongcarl",
          "id": 3445290,
          "node_id": "MDQ6VXNlcjM0NDUyOTA=",
          "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dongcarl",
          "html_url": "https://github.com/dongcarl",
          "followers_url": "https://api.github.com/users/dongcarl/followers",
          "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
          "organizations_url": "https://api.github.com/users/dongcarl/orgs",
          "repos_url": "https://api.github.com/users/dongcarl/repos",
          "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dongcarl/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dongcarl/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/dongcarl/bitcoin",
        "archive_url": "https://api.github.com/repos/dongcarl/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dongcarl/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dongcarl/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dongcarl/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dongcarl/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dongcarl/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dongcarl/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dongcarl/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dongcarl/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dongcarl/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/dongcarl/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/dongcarl/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/dongcarl/bitcoin/events",
        "forks_url": "https://api.github.com/repos/dongcarl/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/dongcarl/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dongcarl/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dongcarl/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dongcarl/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/dongcarl/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dongcarl/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dongcarl/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dongcarl/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dongcarl/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dongcarl/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/dongcarl/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/dongcarl/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dongcarl/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dongcarl/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dongcarl/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:dongcarl/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/dongcarl/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/dongcarl/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dongcarl/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/dongcarl/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/dongcarl/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/dongcarl/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/dongcarl/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dongcarl/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/dongcarl/bitcoin/hooks",
        "svn_url": "https://github.com/dongcarl/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 204504,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-05-28T17:13:06Z",
        "created_at": "2017-07-19T04:07:18Z",
        "updated_at": "2022-06-03T10:08:14Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "c799976c86e2d65f129d106724fbefbf665d63d4",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 41,
    "deletions": 141,
    "changed_files": 1,
    "commits": 4,
    "review_comments": 14,
    "comments": 5
  },
  "events": [
    {
      "event": "labeled",
      "id": 2458562813,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI0NTg1NjI4MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2458562813",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-03T19:04:41Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "reviewed",
      "id": 257813629,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU3ODEzNjI5",
      "url": null,
      "actor": null,
      "commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "qmma70",
        "id": 5808517,
        "node_id": "MDQ6VXNlcjU4MDg1MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5808517?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/qmma70",
        "html_url": "https://github.com/qmma70",
        "followers_url": "https://api.github.com/users/qmma70/followers",
        "following_url": "https://api.github.com/users/qmma70/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/qmma70/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/qmma70/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/qmma70/subscriptions",
        "organizations_url": "https://api.github.com/users/qmma70/orgs",
        "repos_url": "https://api.github.com/users/qmma70/repos",
        "events_url": "https://api.github.com/users/qmma70/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/qmma70/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#pullrequestreview-257813629",
      "submitted_at": "2019-07-04T03:26:32Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
    },
    {
      "event": "reviewed",
      "id": 257818380,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU3ODE4Mzgw",
      "url": null,
      "actor": null,
      "commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#pullrequestreview-257818380",
      "submitted_at": "2019-07-04T03:57:24Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
    },
    {
      "event": "mentioned",
      "id": 2463605551,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzYwNTU1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463605551",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:00:56Z"
    },
    {
      "event": "subscribed",
      "id": 2463605554,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2MDU1NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463605554",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:00:56Z"
    },
    {
      "event": "mentioned",
      "id": 2463605556,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjQ2MzYwNTU1Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463605556",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:00:56Z"
    },
    {
      "event": "subscribed",
      "id": 2463605557,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI0NjM2MDU1NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2463605557",
      "actor": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-05T22:00:56Z"
    },
    {
      "event": "reviewed",
      "id": 258600455,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MjU4NjAwNDU1",
      "url": null,
      "actor": null,
      "commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "ACK 1d5312a\r\nGood refactoring! Ran test locally, checked that they could fail, reviewed code.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#pullrequestreview-258600455",
      "submitted_at": "2019-07-06T19:58:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2464172420,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2NDE3MjQyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2464172420",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-07T01:54:17Z"
    },
    {
      "event": "commented",
      "id": 509228982,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTIyODk4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509228982",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T13:39:13Z",
      "updated_at": "2019-07-08T13:39:13Z",
      "author_association": "MEMBER",
      "body": "Looks like the \"tidy up run_test\" commit was duplicated!\r\n\r\n> Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n\r\nThanks for reviewing/testing.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509228982",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334"
    },
    {
      "event": "commented",
      "id": 509239145,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTIzOTE0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509239145",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T14:05:14Z",
      "updated_at": "2019-07-08T14:05:21Z",
      "author_association": "MEMBER",
      "body": "> Looks like the \"tidy up run_test\" commit was duplicated!\r\n> \r\n> > Good refactoring! Ran test locally, checked that they could fail, reviewed code.\r\n> \r\n> Thanks for reviewing/testing.\r\n\r\nOh they're not duplicates, both tidy-ups but easier to review when separate. :-) I'm gunna squash everything together after review.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509239145",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334"
    },
    {
      "event": "commented",
      "id": 509308984,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTMwODk4NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509308984",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T17:02:05Z",
      "updated_at": "2019-07-08T17:02:05Z",
      "author_association": "MEMBER",
      "body": "I think they should be kept separate commits, to make review after merge easier and preserve history for future reference.",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509308984",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDRlMmE5OTdmZjI2MjAyZGQwZmExOTMyZDYwZGMxNGNjNTNhYzZk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/604e2a997ff26202dd0fa1932d60dc14cc53ac6d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/604e2a997ff26202dd0fa1932d60dc14cc53ac6d",
      "tree": {
        "sha": "ab3e4b9a067725b26a173c16564977c429d382f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab3e4b9a067725b26a173c16564977c429d382f0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ab3e4b9a067725b26a173c16564977c429d382f0\nparent c799976c86e2d65f129d106724fbefbf665d63d4\nauthor Carl Dong <contact@carldong.me> 1562175180 -0400\ncommitter Carl Dong <contact@carldong.me> 1562616812 -0400\n\ntest: rpc_users: Add function for auth'd requests.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl0jo+wACgkQDMUhUxl5\nkaVICw//YNg2ihcswss1licMC/0ugNEn69l4rQOrH9oHm33Z23Vnz7BAZm7lZoj7\nyM2JVZT0t2JtbQBbwB/NNY8wUyD9Ifo9niab2uUy7RA+IRuhUqAuifP/SvpjDiG/\nVC3w3OQ9CJtcXIjF1md7Hb1s178cwiRrZGQGpIyC0InQfy9yB+QuaryWxsOANXoN\nTMjgvRfmDu14ryhsg6MDYS0f56E9Nw83XkkBg98UZ27RXleHOXujEhSEsx8bqF5n\n5W3/9CBYiYp0UgaA67M+wol0oOx8XGhpi3I9GD04beQIHji/8DfagqZbBcygMFMI\nKUVEGAC4mBHgSq9TQheCZqkhyTOzLNhTumIV5GZQmv7+YXp6ZCgjNjuj6iN3wAU7\nc3Hx8N/mMdykqoppj6LDxq2hXUNXqRdLwsgYVdkNeQ6QlLITu1BttbFOtIE11yf+\nkSr7ATOeiw5uTDz6wTx/9/pYSPnz5TUhFYzSN5TOF8UIheOut8uTdt+n3Dytgi/B\nlH+2Aio31jUy/fd9KkQwSLU255b2tFZ32W/epSS5NCxKJpmkKkSeW+d6335H7jR3\n529GdCM0jBPR6Y4mvNsw4cY4mKy72QPrCAOcTxe5N+HwV8ziaAnJD/+jfW+PXX4f\nHZ0+QoNju8lOiQIKKmUOkc+Ke5C4sa7R7glOvgHn96f35h3UJGg=\n=seV9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c799976c86e2d65f129d106724fbefbf665d63d4",
          "sha": "c799976c86e2d65f129d106724fbefbf665d63d4",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c799976c86e2d65f129d106724fbefbf665d63d4"
        }
      ],
      "message": "test: rpc_users: Add function for auth'd requests.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-08T20:13:32Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-03T17:33:00Z"
      },
      "sha": "604e2a997ff26202dd0fa1932d60dc14cc53ac6d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzNkODcxNzk5OTgyY2EyOWMyOWNlZjkwZTFhNzg4MTRjZjM0MDE5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c73d871799982ca29c29cef90e1a78814cf34019",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c73d871799982ca29c29cef90e1a78814cf34019",
      "tree": {
        "sha": "fe4b19666b326c0e51a1d3e83e90d98f8c160439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe4b19666b326c0e51a1d3e83e90d98f8c160439"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fe4b19666b326c0e51a1d3e83e90d98f8c160439\nparent 604e2a997ff26202dd0fa1932d60dc14cc53ac6d\nauthor Carl Dong <contact@carldong.me> 1562179189 -0400\ncommitter Carl Dong <contact@carldong.me> 1562616813 -0400\n\ntest: rpc_users: Add function for testing auth params.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl0jo+0ACgkQDMUhUxl5\nkaU/KA/+P8PbTz7WsplVycVkwANBkBRRfHy7jzrmZ5pQqJj1v5Qo4pgZ5rl3+9qS\n+sTyxuqIFa7jXzjrcLQWuXmOlFipTnmCtBRu8CC1EkhvonzUTQFrvYRQQ0vF9qWg\nI5aLAYBgWTMPZzGAva6oe+DTbia/0OjchoHRjSvKFPNpO+MWUv0zw+PjB05tjzBc\nWiwV7gUG9KsxPoA/Dhue2WLkny23RascGSZrif6l13vZvimMWoXHxvQTWrtqaEL9\nnOWcU/HBVndEt4juoXm3rVZVF2GFGePUoryNYX7UsQxyWtQVszQH3bw823JJ25En\nm+fhU65r4Qvsnd7OnWNLd2iljUQKUSPfjjxmSJ02G9nUFS+RjlBYbCg0xNgFp7iV\ntx7A2KbJFRFD+AzX0Xgk9MGlG6rqxqPZqCPO3OQV2W7Un7mo0FeleDogHT+C7WWI\nA/98o4U2ztupefyhKziC1/XJsS9Pq2h0Sdb8M4xB9QsNz+Htlc8CGgJ5dCQNWMWJ\ngyNtzDbX4bVs0hm7okuqg2MOf2ahOw7wBJEPm7XeQNgj+knyt1feCAcB8eTfQ/i0\njJq4eV6WgAYFfReSwwPbznh1PVxu7UNf6IcZ+UVGOlLsmicBwns28EVgqr0MnlH0\nEZ2XWQBV1dLQ64YaR3Ttu44MBEO8GDaPa83f3dw//hzb8aGQJSQ=\n=4mqL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/604e2a997ff26202dd0fa1932d60dc14cc53ac6d",
          "sha": "604e2a997ff26202dd0fa1932d60dc14cc53ac6d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/604e2a997ff26202dd0fa1932d60dc14cc53ac6d"
        }
      ],
      "message": "test: rpc_users: Add function for testing auth params.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-08T20:13:33Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-03T18:39:49Z"
      },
      "sha": "c73d871799982ca29c29cef90e1a78814cf34019"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzBkYzJkZDBmY2NiN2YzZWM0OWZmNzIzM2ExODhkOTJjNTQxZTdl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/830dc2dd0fccb7f3ec49ff7233a188d92c541e7e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/830dc2dd0fccb7f3ec49ff7233a188d92c541e7e",
      "tree": {
        "sha": "c53422d54408ac46f790c3c2c32f886f1c452d09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c53422d54408ac46f790c3c2c32f886f1c452d09"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c53422d54408ac46f790c3c2c32f886f1c452d09\nparent c73d871799982ca29c29cef90e1a78814cf34019\nauthor Carl Dong <contact@carldong.me> 1562180188 -0400\ncommitter Carl Dong <contact@carldong.me> 1562616814 -0400\n\ntest: rpc_users: Also test rpcauth.py with specified password.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl0jo+4ACgkQDMUhUxl5\nkaUKbhAAoDeHHAdpomvpH4jZ+EwjbLp4Dj3t6Vn3WDMT4qi7hXSEIrr6eE2CqPmh\n038oWfOLMBw78QGaTE1i8xL0DrR1j770T1Zf5PeJyFtGjTNvQApKrrA4c5w2wVwn\nrPMPbvVqr7sgNtBuOVDFhehVSJdNFnDsJUY9VLIMtO5KOwsSp5Sy0XTdw4Q75NyB\nt0HKaD2CNSVe7fuH5gk6B5ljUkGKxynBefiAoa+mSrdYgJzumDFSAeed6AD2ycQj\nL7mrubXgoDlCjt7D6AlS98f3b997JJzyMs9PvvjpLT09aBnwsdU3mmEMkF05lu6N\nWAxVPZd2NKH/3QJq4NziXXjzsnoPW9Yt2fKqNMjEuWp1mgr45zarRQIg1LF8OnV0\noSTNWXB2/Fm2nx+W7vTowOmV1qzmj6yMy0Kpp00DTQR93fr2MyNaZRzaJZWus1Su\nX8nFA0OawFZlkyHHYIuYNrH6b18B6fhQvm7hcv0GDvDnMlbil76/0Fr7YRpFL/6C\ni2KfCWTfG6g3DYfOvn/hQZz03frnaxeKslFzOsEyz6V7cNDO6dTYxetIU7ASYckb\nwRNh/2NKEv/Dpxej4mxDwqHERyl9xDq0oAx7oQOhmpKhtx8xh4KhiaA06/Pcwog5\ncCZse0sToAdfhWDekIVnui6CUlJCDbwaX2IrBreexspxTtSzfbk=\n=Mc8l\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c73d871799982ca29c29cef90e1a78814cf34019",
          "sha": "c73d871799982ca29c29cef90e1a78814cf34019",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c73d871799982ca29c29cef90e1a78814cf34019"
        }
      ],
      "message": "test: rpc_users: Also test rpcauth.py with specified password.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-08T20:13:34Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-03T18:56:28Z"
      },
      "sha": "830dc2dd0fccb7f3ec49ff7233a188d92c541e7e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjYzYTM0M2Q0YjZhMjYyMmRmNmJiNzM0Y2Q5ZDUxYTBkMjBhNjYz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "tree": {
        "sha": "42bb1d040f087c374044ddb8a997927b6f031830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42bb1d040f087c374044ddb8a997927b6f031830"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 42bb1d040f087c374044ddb8a997927b6f031830\nparent 830dc2dd0fccb7f3ec49ff7233a188d92c541e7e\nauthor Carl Dong <contact@carldong.me> 1562258494 -0400\ncommitter Carl Dong <contact@carldong.me> 1562616815 -0400\n\ntest: rpc_users: Make variable names more clear.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl0jo+8ACgkQDMUhUxl5\nkaVHVxAAgyzZ4Ijlt/SnVXCieimA5y2c+kdD+xhHVhLlFL+fRwMT2+UG79U8lZ1y\ngvtZkq0xUR2BcPG0EcMdCjblNhoHz+5NIaLQ98qHM7fKPyLoreUM+dW0VqwW7M1h\n3wNofCHyHvrjHvsWQ93Sl+jeNu5AktLb1LAVuXOvJtRjgnjhuEQ3Hj8EhSyNfC7o\nHip7qbAdkvBJdMdBrmEqsyocZNn9WJmZwLR5rJFuhNi/xoJf5Mc0JCEDlvNX6NRR\nn8VlkywGN5OjZ4kT/Sa1uO36/ILjHacQVDYxv6WIsjcNnnNgS11Nb5S3lPrO99Le\nlS6tDlL/ylu5Nhw6QQMR323ATR4kpH6Uq6e/5DSjzvOXDFOil2jF/O08t9pi2TTF\noVfD3ZvytrOsQE10vf6CfRdngr1zP0chcEBnF+RXGDnz868EMczQPH7JaI6awiQC\niE+RMx2MoVFYTr9vv4IGNEFWsnq3vrJUHIj1Vw8uvpNrt8L9+ioBAorAgkXmxmZu\nLaZFHQmotSeDF9VOQWKiz3/RAhex0kn9Y07gfmmGiu+woRfPY9E8L4KrrkWSmvbv\nQI9wh2hOMGAfwBothzPgy+1xyts2Q8bgk8WzfRwm7uoBr61cYyRUwlbfUbmFa/kj\nHlp/vqTNXaPK13WPxmiGRsFIKGNOfxIS6/RxDoEazy4i1iaKYDc=\n=iHYx\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/830dc2dd0fccb7f3ec49ff7233a188d92c541e7e",
          "sha": "830dc2dd0fccb7f3ec49ff7233a188d92c541e7e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/830dc2dd0fccb7f3ec49ff7233a188d92c541e7e"
        }
      ],
      "message": "test: rpc_users: Make variable names more clear.",
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-08T20:13:35Z"
      },
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2019-07-04T16:41:34Z"
      },
      "sha": "e263a343d4b6a2622df6bb734cd9d51a0d20a663"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2467313004,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjQ2NzMxMzAwNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2467313004",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T20:13:54Z"
    },
    {
      "event": "commented",
      "id": 509374679,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUwOTM3NDY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/509374679",
      "actor": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-08T20:14:46Z",
      "updated_at": "2019-07-08T20:14:46Z",
      "author_association": "MEMBER",
      "body": "Since we're not squashing, I reworded the commit messages to be more descriptive and rebased.",
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-509374679",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334"
    },
    {
      "event": "commented",
      "id": 511005775,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUxMTAwNTc3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511005775",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T19:28:13Z",
      "updated_at": "2019-07-12T19:28:13Z",
      "author_association": "MEMBER",
      "body": "ACK e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#issuecomment-511005775",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16334"
    },
    {
      "event": "merged",
      "id": 2479993633,
      "node_id": "MDExOk1lcmdlZEV2ZW50MjQ3OTk5MzYzMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479993633",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "created_at": "2019-07-12T19:29:50Z"
    },
    {
      "event": "closed",
      "id": 2479993647,
      "node_id": "MDExOkNsb3NlZEV2ZW50MjQ3OTk5MzY0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479993647",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-07-12T19:29:50Z"
    },
    {
      "event": "referenced",
      "id": 2479994176,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0Nzk5OTQxNzY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2479994176",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "536590f358dc3d3e5821eba7f1009452ea93b205",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/536590f358dc3d3e5821eba7f1009452ea93b205",
      "created_at": "2019-07-12T19:30:04Z"
    },
    {
      "event": "referenced",
      "id": 2480253538,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0ODAyNTM1Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2480253538",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0f7e2c5ab1479607edcb60b32d696775930b9c5d",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/0f7e2c5ab1479607edcb60b32d696775930b9c5d",
      "created_at": "2019-07-12T21:38:35Z"
    },
    {
      "event": "referenced",
      "id": 2515315811,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1MTUzMTU4MTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2515315811",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b80033163a74e4a6e03cc1ec9fb07110d4ff8df6",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/b80033163a74e4a6e03cc1ec9fb07110d4ff8df6",
      "created_at": "2019-07-29T05:33:43Z"
    },
    {
      "event": "referenced",
      "id": 3860933908,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjA5MzM5MDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860933908",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "6bcfe656673d2021efcaa1837aea2d035a2d2a9d",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/6bcfe656673d2021efcaa1837aea2d035a2d2a9d",
      "created_at": "2020-10-09T16:28:48Z"
    },
    {
      "event": "referenced",
      "id": 3860933912,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjA5MzM5MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860933912",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69e6c7d65c401ac723c670cc0075f2924bab0b88",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/69e6c7d65c401ac723c670cc0075f2924bab0b88",
      "created_at": "2020-10-09T16:28:48Z"
    },
    {
      "event": "referenced",
      "id": 3860933918,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjA5MzM5MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860933918",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fade28c89170eb2f791e7496213d3a046aefb0c0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/fade28c89170eb2f791e7496213d3a046aefb0c0",
      "created_at": "2020-10-09T16:28:49Z"
    },
    {
      "event": "referenced",
      "id": 3860933923,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM4NjA5MzM5MjM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3860933923",
      "actor": {
        "login": "jasonbcox",
        "id": 602513,
        "node_id": "MDQ6VXNlcjYwMjUxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/602513?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jasonbcox",
        "html_url": "https://github.com/jasonbcox",
        "followers_url": "https://api.github.com/users/jasonbcox/followers",
        "following_url": "https://api.github.com/users/jasonbcox/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jasonbcox/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jasonbcox/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jasonbcox/subscriptions",
        "organizations_url": "https://api.github.com/users/jasonbcox/orgs",
        "repos_url": "https://api.github.com/users/jasonbcox/repos",
        "events_url": "https://api.github.com/users/jasonbcox/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jasonbcox/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2d524721fe24b7d9d77db97f29b483b2c5480f74",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/2d524721fe24b7d9d77db97f29b483b2c5480f74",
      "created_at": "2020-10-09T16:28:49Z"
    },
    {
      "event": "locked",
      "id": 5778602319,
      "node_id": "LOE_lADOABII584bprEczwAAAAFYbnlP",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778602319",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:08:45Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890",
      "pull_request_review_id": 257813629,
      "id": 300216890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIxNjg5MA==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 158,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": null,
      "user": {
        "login": "qmma70",
        "id": 5808517,
        "node_id": "MDQ6VXNlcjU4MDg1MTc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5808517?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/qmma70",
        "html_url": "https://github.com/qmma70",
        "followers_url": "https://api.github.com/users/qmma70/followers",
        "following_url": "https://api.github.com/users/qmma70/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/qmma70/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/qmma70/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/qmma70/subscriptions",
        "organizations_url": "https://api.github.com/users/qmma70/orgs",
        "repos_url": "https://api.github.com/users/qmma70/repos",
        "events_url": "https://api.github.com/users/qmma70/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/qmma70/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Minor: maybe rename this `rtpassword` or something similar to avoid confusion with `self.password`?",
      "created_at": "2019-07-04T03:26:27Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300216890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300216890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844",
      "pull_request_review_id": 257818380,
      "id": 300220844,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDIyMDg0NA==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": null,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why do we have emojis in the code?",
      "created_at": "2019-07-04T03:57:20Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300220844",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300220844"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323",
      "pull_request_review_id": 257970677,
      "id": 300342323,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM0MjMyMw==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "it's arbitrary, but the thinking is: if it can handle emoji, it can handle any UTF symbol",
      "created_at": "2019-07-04T10:45:54Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300342323",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300342323"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720",
      "pull_request_review_id": 258044877,
      "id": 300399720,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDM5OTcyMA==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "fqlx",
        "id": 1562849,
        "node_id": "MDQ6VXNlcjE1NjI4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1562849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fqlx",
        "html_url": "https://github.com/fqlx",
        "followers_url": "https://api.github.com/users/fqlx/followers",
        "following_url": "https://api.github.com/users/fqlx/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fqlx/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fqlx/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fqlx/subscriptions",
        "organizations_url": "https://api.github.com/users/fqlx/orgs",
        "repos_url": "https://api.github.com/users/fqlx/repos",
        "events_url": "https://api.github.com/users/fqlx/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fqlx/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just because it can handle emojis doesn't mean it's a good idea to use. Can we remove them?",
      "created_at": "2019-07-04T13:30:40Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300399720",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300399720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590",
      "pull_request_review_id": 258048645,
      "id": 300402590,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQwMjU5MA==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We are already using emojis elsewhere in the functional test suite.\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/413e438ea9767710d4810c4400fd1242ca52cd1c/test/functional/test_runner.py#L255",
      "created_at": "2019-07-04T13:37:27Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300402590",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300402590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609",
      "pull_request_review_id": 258115619,
      "id": 300455609,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ1NTYwOQ==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "achow101",
        "id": 3782274,
        "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/achow101",
        "html_url": "https://github.com/achow101",
        "followers_url": "https://api.github.com/users/achow101/followers",
        "following_url": "https://api.github.com/users/achow101/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/achow101/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/achow101/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
        "organizations_url": "https://api.github.com/users/achow101/orgs",
        "repos_url": "https://api.github.com/users/achow101/repos",
        "events_url": "https://api.github.com/users/achow101/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/achow101/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Emojis are UTF symbols. It is good to test that we are able to handle UTF symbols, especially in places that people may have entered them such as the configuration files where there may be UTF symbols in passwords or file paths. As such, it would be detrimental to remove them as otherwise we are losing the tests for these.",
      "created_at": "2019-07-04T16:05:31Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300455609",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300455609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085",
      "pull_request_review_id": 258125366,
      "id": 300463085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDQ2MzA4NQ==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 158,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300216890,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-07-04T16:42:44Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300463085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300463085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 91,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422",
      "pull_request_review_id": 258555969,
      "id": 300801422,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMTQyMg==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You don't clarify why it is not a good idea, so I am not sure what you are getting at. But in general, I would add that it would be better to have an explicit test for the usage of UTF symbols and not an implicit test within another test.",
      "created_at": "2019-07-05T21:45:40Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300801422",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300801422"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217",
      "pull_request_review_id": 258558102,
      "id": 300803217,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgwMzIxNw==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "While I agree that separating tests for \"if `rpcuser`/`rpcpassword` works at all\" from \"if `rpcuser`/`rpcpassword` works with UTF-8\" is worthwhile, it is beyond the scope of this PR.\r\n\r\nHowever, this separation looks like an easy enough change, and perhaps if @fjahr or @fqlx feel strongly about this they can take this up in a separate PR.",
      "created_at": "2019-07-05T22:00:56Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300803217",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300803217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063",
      "pull_request_review_id": 258600455,
      "id": 300841063,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA2Mw==",
      "diff_hunk": "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuser💻\"\n-        rpcpassword = \"rpcpassword=rpcpassword🔑\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuser💻\"\n+        self.rpcpassword = \"rpcpassword🔑\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
      "path": "test/functional/rpc_users.py",
      "position": 43,
      "original_position": 43,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Why do you generate a random username here instead of just hardcoding one?",
      "created_at": "2019-07-06T19:54:55Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841063",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841063"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084",
      "pull_request_review_id": 258600455,
      "id": 300841084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0MTA4NA==",
      "diff_hunk": "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 169,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "in_reply_to_id": null,
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Could this not also use the `test_auth` function?",
      "created_at": "2019-07-06T19:55:45Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300841084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300841084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134",
      "pull_request_review_id": 258606666,
      "id": 300847134,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzEzNA==",
      "diff_hunk": "@@ -47,160 +67,42 @@ def setup_chain(self):\n             f.write(rpcauth2+\"\\n\")\n             f.write(rpcauth3+\"\\n\")\n         with open(os.path.join(get_datadir_path(self.options.tmpdir, 1), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n-            f.write(rpcuser+\"\\n\")\n-            f.write(rpcpassword+\"\\n\")\n-\n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n+            f.write(\"rpcuser={}\\n\".format(self.rpcuser))\n+            f.write(\"rpcpassword={}\\n\".format(self.rpcpassword))\n \n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 169,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "in_reply_to_id": 300841084,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done!",
      "created_at": "2019-07-07T01:54:25Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847134",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847134"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 94,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144",
      "pull_request_review_id": 258606678,
      "id": 300847144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDg0NzE0NA==",
      "diff_hunk": "@@ -28,15 +39,24 @@ def set_test_params(self):\n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n+        self.rtpassword = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n-        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n-        rpcuser = \"rpcuser=rpcuser💻\"\n-        rpcpassword = \"rpcpassword=rpcpassword🔑\"\n \n-        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))\n+        self.rpcuser = \"rpcuser💻\"\n+        self.rpcpassword = \"rpcpassword🔑\"\n+\n         config = configparser.ConfigParser()\n         config.read_file(open(self.options.configfile))\n         gen_rpcauth = config['environment']['RPCAUTH']\n+\n+        # Generate RPCAUTH with specified password\n+        self.rt2password = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        p = subprocess.Popen([sys.executable, gen_rpcauth, 'rt2', self.rt2password], stdout=subprocess.PIPE, universal_newlines=True)\n+        lines = p.stdout.read().splitlines()\n+        rpcauth2 = lines[1]\n+\n+        # Generate RPCAUTH without specifying password\n+        self.user = ''.join(SystemRandom().choice(string.ascii_letters + string.digits) for _ in range(10))",
      "path": "test/functional/rpc_users.py",
      "position": 43,
      "original_position": 43,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "1d5312a9ada85af025f2e92b50a4bdaab3955a11",
      "in_reply_to_id": 300841063,
      "user": {
        "login": "dongcarl",
        "id": 3445290,
        "node_id": "MDQ6VXNlcjM0NDUyOTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dongcarl",
        "html_url": "https://github.com/dongcarl",
        "followers_url": "https://api.github.com/users/dongcarl/followers",
        "following_url": "https://api.github.com/users/dongcarl/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dongcarl/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dongcarl/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
        "organizations_url": "https://api.github.com/users/dongcarl/orgs",
        "repos_url": "https://api.github.com/users/dongcarl/repos",
        "events_url": "https://api.github.com/users/dongcarl/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dongcarl/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cuz it was originally done this way. Not really within scope but good catch!",
      "created_at": "2019-07-07T01:55:01Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r300847144",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300847144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819",
      "pull_request_review_id": 258906214,
      "id": 301096819,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTA5NjgxOQ==",
      "diff_hunk": "@@ -50,157 +68,40 @@ def setup_chain(self):\n             f.write(rpcuser+\"\\n\")\n             f.write(rpcpassword+\"\\n\")\n \n-    def run_test(self):\n-\n-        ##################################################\n-        # Check correctness of the rpcauth config option #\n-        ##################################################\n-        url = urllib.parse.urlparse(self.nodes[0].url)\n-\n-        #Old authpair\n-        authpair = url.username + ':' + url.password\n-\n-        #New authpair generated via share/rpcauth tool\n-        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n-\n-        #Second authpair with different username\n-        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n-        authpairnew = \"rt:\"+password\n-\n+    def test_auth(self, node, user, password):\n         self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n+        assert_equal(200, call_with_auth(node, user, password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Use new authpair to confirm both work\n-        self.log.info('Correct...')\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rt's password\n         self.log.info('Wrong...')\n-        authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user, password+'wrong').status)\n \n-        #Wrong password for rt\n         self.log.info('Wrong...')\n-        authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        assert_equal(401, call_with_auth(node, user+'wrong', password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Correct for rt2\n-        self.log.info('Correct...')\n-        authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong password for rt2\n         self.log.info('Wrong...')\n-        authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        assert_equal(401, call_with_auth(node, user+'wrong', password+'wrong').status)\n \n-        #Correct for randomly generated user\n-        self.log.info('Correct...')\n-        authpairnew = self.user+\":\"+self.password\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+    def run_test(self):\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urllib.parse.urlparse(self.nodes[0].url)\n \n-        #Wrong password for randomly generated user\n-        self.log.info('Wrong...')\n-        authpairnew = self.user+\":\"+self.password+\"Wrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+        self.log.info('Correct...')\n+        assert_equal(200, call_with_auth(self.nodes[0], url.username, url.password).status)\n \n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n+        self.test_auth(self.nodes[0], 'rt', password)\n+        self.test_auth(self.nodes[0], 'rt2', self.rt2password)\n+        self.test_auth(self.nodes[0], self.user, self.password)\n \n         ###############################################################\n         # Check correctness of the rpcuser/rpcpassword config options #\n         ###############################################################\n         url = urllib.parse.urlparse(self.nodes[1].url)\n \n-        # rpcuser and rpcpassword authpair\n-        self.log.info('Correct...')\n-        rpcuserauthpair = \"rpcuser💻:rpcpassword🔑\"\n-\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 200)\n-        conn.close()\n-\n-        #Wrong login name with rpcuser's password\n-        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n-        #Wrong password for rpcuser\n-        self.log.info('Wrong...')\n-        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n-        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n-\n-        conn = http.client.HTTPConnection(url.hostname, url.port)\n-        conn.connect()\n-        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n-        resp = conn.getresponse()\n-        assert_equal(resp.status, 401)\n-        conn.close()\n-\n+        self.test_auth(self.nodes[1], \"rpcuser💻\", \"rpcpassword🔑\")",
      "path": "test/functional/rpc_users.py",
      "position": null,
      "original_position": 213,
      "commit_id": "e263a343d4b6a2622df6bb734cd9d51a0d20a663",
      "original_commit_id": "30b12a286e2ea5c1c80aef1853e34bb014f95e62",
      "in_reply_to_id": 300220844,
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "UTF handling is not optional in this day and age. I think we should keep this as-is.",
      "created_at": "2019-07-08T13:36:50Z",
      "updated_at": "2019-07-08T20:13:54Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16334#discussion_r301096819",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301096819"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16334"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    }
  ]
}