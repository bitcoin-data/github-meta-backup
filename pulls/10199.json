{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199",
    "id": 115592945,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MTE1NTkyOTQ1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10199",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/10199.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/10199.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
    "number": 10199,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Better fee estimates",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is a substantial improvement of fee estimation code built off #9942.\r\nAlthough in many cases the estimates will not appear to differ by much from previous estimates, they will handle some situations much better.\r\n\r\nA longer writeup of the original algorithm and the changes in this PR can be found here:\r\nhttps://gist.github.com/morcos/d3637f015bc4e607e1fd10d8351e9f41\r\n\r\nA summary of major changes:\r\n- Estimates can now be given for up to a 1008 block target.\r\n- Estimates are tracked on 3 different time horizons which allows for both the longer targets and lets the estimates adjust more quickly to changes in conditions.\r\n- estimatefee is deprecated in favor of using only estimatesmartfee (already used by the GUI)\r\n- estimateSmartFee now requires a 60% success rate at target/2, an 85% rate at target and a 95% rate at 2*target.\r\n- estimates are by default conservative which requires the 95% rate for 2*target to be met at longer time horizons as well, but by choosing non-conservative estimates, the estimates are drastically reduced during periods of less transaction activity (such as the weekend).\r\n- estimates are smarter about making sure enough data has been gathered in order to return a valid estimate (at least twice the number of blocks as the requested target much have been recorded)\r\n- Fee rate buckets are half as big leading to a bit more precision.\r\n- estimaterawfee is added so that customized logic can be implemented to analyze the raw data and calculate estimates.\r\n- Transactions which leave the mempool due to eviction or other non-confirmed reasons now count as failures.  These are also saved at shutdown.\r\n\r\n**A summary of open issues:**\r\n- Estimates are not backwards compatible.  Currently when updating to this patch, any old fee estimates will be discarded and your node will have to be running for a while to provide new estimates.  It is a possibility to add logic to return the old estimates for targets 2-25 until the new estimates have gathered enough data.\r\n- estimatefee is probably a roughly similar calculation to what it used to be, but I've made no effort to make sure the quality of the estimates it gives have not degraded, so infrastructure which doesn't support estimatesmartfee should update.\r\n- The GUI needs to be updated to access the new range of estimates.  I would suggest providing options for targets of: 2,4,6,12,24,48,144,504,1008\r\n\r\n",
    "labels": [
      {
        "id": 82428251,
        "node_id": "MDU6TGFiZWw4MjQyODI1MQ==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/TX%20fees%20and%20policy",
        "name": "TX fees and policy",
        "color": "5319e7",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/25",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/25",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/25/labels",
      "id": 2174061,
      "node_id": "MDk6TWlsZXN0b25lMjE3NDA2MQ==",
      "number": 25,
      "state": "closed",
      "title": "0.15.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 119,
      "created_at": "2016-12-04T13:31:14Z",
      "updated_at": "2020-04-28T13:15:17Z",
      "closed_at": "2017-10-12T19:32:58Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2017-04-12T17:18:26Z",
    "updated_at": "2021-12-16T14:00:08Z",
    "closed_at": "2017-05-17T20:15:46Z",
    "mergeable_state": "unknown",
    "merged_at": "2017-05-17T20:15:46Z",
    "merge_commit_sha": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "morcos:smarterfee",
      "ref": "smarterfee",
      "sha": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 21699686,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMTY5OTY4Ng==",
        "name": "bitcoin",
        "full_name": "morcos/bitcoin",
        "owner": {
          "login": "morcos",
          "id": 4360349,
          "node_id": "MDQ6VXNlcjQzNjAzNDk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/morcos",
          "html_url": "https://github.com/morcos",
          "followers_url": "https://api.github.com/users/morcos/followers",
          "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
          "organizations_url": "https://api.github.com/users/morcos/orgs",
          "repos_url": "https://api.github.com/users/morcos/repos",
          "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/morcos/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/morcos/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/morcos/bitcoin",
        "archive_url": "https://api.github.com/repos/morcos/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/morcos/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/morcos/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/morcos/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/morcos/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/morcos/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/morcos/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/morcos/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/morcos/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/morcos/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/morcos/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/morcos/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/morcos/bitcoin/events",
        "forks_url": "https://api.github.com/repos/morcos/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/morcos/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/morcos/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/morcos/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/morcos/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/morcos/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/morcos/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/morcos/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/morcos/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/morcos/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/morcos/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/morcos/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/morcos/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/morcos/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/morcos/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/morcos/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:morcos/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/morcos/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/morcos/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/morcos/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/morcos/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/morcos/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/morcos/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/morcos/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/morcos/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/morcos/bitcoin/hooks",
        "svn_url": "https://github.com/morcos/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "C++",
        "forks_count": 1,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 119327,
        "default_branch": "master",
        "open_issues_count": 3,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2019-05-22T19:49:00Z",
        "created_at": "2014-07-10T15:39:10Z",
        "updated_at": "2022-02-11T23:59:55Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "e61fc2d7cb4ffbcd07e0576061c6c32650940f26",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 744,
    "deletions": 228,
    "changed_files": 8,
    "commits": 15,
    "review_comments": 71,
    "comments": 24
  },
  "events": [
    {
      "event": "labeled",
      "id": 1041013653,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDEwNDEwMTM2NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1041013653",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-12T22:35:44Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 293871720,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5Mzg3MTcyMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/293871720",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-13T11:58:45Z",
      "updated_at": "2017-04-13T11:58:45Z",
      "author_association": "CONTRIBUTOR",
      "body": "Great!\r\nConcept ACK.\r\n\r\n> The GUI needs to be updated to access the new range of estimates. I would suggest providing options for targets of: 2,4,6,12,24,48,144,504,1008\r\n\r\nI'll have a look at this soon.",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-293871720",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 295346654,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTM0NjY1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295346654",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T17:03:44Z",
      "updated_at": "2017-04-19T17:03:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "ping @crwatkins (he presented some fee estimation overview at the wallet standards group meeting in Berlin this month).",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295346654",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1048977143,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA0ODk3NzE0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1048977143",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T17:03:44Z"
    },
    {
      "event": "subscribed",
      "id": 1048977145,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNDg5NzcxNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1048977145",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T17:03:44Z"
    },
    {
      "event": "reviewed",
      "id": 33595467,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM1OTU0Njc=",
      "url": null,
      "actor": null,
      "commit_id": "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-33595467",
      "submitted_at": "2017-04-19T19:22:04Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "commented",
      "id": 295401425,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTQwMTQyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295401425",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T19:23:56Z",
      "updated_at": "2017-04-19T19:23:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not sure if this is a problem specific to your code, though requiring a leading 0 seems like a bug:\r\n\r\n```\r\nbitcoin-cli estimaterawfee 10 .85 0\r\nerror: Error parsing JSON:.85\r\n```",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295401425",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 295411118,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTQxMTExOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295411118",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T19:49:56Z",
      "updated_at": "2017-04-28T01:26:30Z",
      "author_association": "MEMBER",
      "body": "@jlopp `.85` is not valid JSON.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295411118",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1049255215,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA0OTI1NTIxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1049255215",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T19:49:56Z"
    },
    {
      "event": "subscribed",
      "id": 1049255218,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNDkyNTUyMTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1049255218",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-19T19:49:56Z"
    },
    {
      "event": "reviewed",
      "id": 33608339,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM2MDgzMzk=",
      "url": null,
      "actor": null,
      "commit_id": "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-33608339",
      "submitted_at": "2017-04-19T20:18:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGEyNzNmNGM4YmVkNTBkZTlmYzIyN2Q5OGQ5MGRjNWZmNzU1NTE1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "tree": {
        "sha": "5888822ef9969015299d7f1f9f6a02c5634d2c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5888822ef9969015299d7f1f9f6a02c5634d2c09"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14c948987f0b5128af4dcf9864cf5fa62977c401",
          "sha": "14c948987f0b5128af4dcf9864cf5fa62977c401",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/14c948987f0b5128af4dcf9864cf5fa62977c401"
        }
      ],
      "message": "Change file format for fee estimates.\n\nMove buckets and bucketMap to be stored as part of overall serialization of estimator.\nAdd some placeholder data so file format is only changed once.\nMaintain 3 different TxConfirmStats with potential for different decays and scales.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-20T19:46:15Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-23T20:13:41Z"
      },
      "sha": "c0a273f4c8bed50de9fc227d98d90dc5ff755515"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1051249362,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTA1MTI0OTM2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1051249362",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-20T20:09:49Z"
    },
    {
      "event": "commented",
      "id": 295887250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NTg4NzI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/295887250",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-20T20:10:29Z",
      "updated_at": "2017-04-20T20:10:29Z",
      "author_association": "MEMBER",
      "body": "clean rebase after #9942 was merged",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-295887250",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "milestoned",
      "id": 1051266781,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDEwNTEyNjY3ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1051266781",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-20T20:20:53Z",
      "milestone": {
        "title": "0.15.0"
      }
    },
    {
      "event": "commented",
      "id": 296847440,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg0NzQ0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296847440",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-24T23:13:35Z",
      "updated_at": "2017-04-24T23:13:35Z",
      "author_association": "NONE",
      "body": "Thanks @jonasschnelli.  In Berlin, I noted that at least 50% of the wallets listed on bitcoin.org use Core as a fee estimation source directly or through other servers based on Core and any statistical or algorithmic biases might compound over time because of the large number of clients using the single source.   I presented some anecdotal, non-scientific observations about fees and some reasons that they might be artificially high.  Some of my concerns about the current esitmatefee were\r\n\r\n* Slow to respond (2.5 day half life)\r\n* Too high confidence (95%)\r\n* No long term estimates (only 25 blocks)\r\n\r\nI believe that the changes in this PR mitigate some of those concerns, and thus I am in favor of these changes.  Nice work!  \r\n\r\nI'm still a little concerned about so many wallets \"competing\" using the same identical algorithm.  @morcos do you envision some devs (wallets) would use estimaterawfee to tweak the algorithm for their users?",
      "user": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296847440",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1055713851,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA1NTcxMzg1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055713851",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-24T23:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 1055713852,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNTU3MTM4NTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055713852",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-24T23:13:35Z"
    },
    {
      "event": "mentioned",
      "id": 1055713853,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA1NTcxMzg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055713853",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-24T23:13:35Z"
    },
    {
      "event": "subscribed",
      "id": 1055713854,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNTU3MTM4NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055713854",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-24T23:13:35Z"
    },
    {
      "event": "commented",
      "id": 296858336,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5Njg1ODMzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296858336",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T00:33:07Z",
      "updated_at": "2017-04-25T00:33:59Z",
      "author_association": "CONTRIBUTOR",
      "body": "@crwatkins I can only speak for BitGo, but we run custom compiled versions of Core with our own half life and confidence values. We then use the output as a baseline for a more complex fee algorithm that we adjust upward and downward based upon other data sources. I'm already working on transitioning us to using the estimaterawfee functionality.",
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-296858336",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1055772658,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA1NTc3MjY1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055772658",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T00:33:07Z"
    },
    {
      "event": "subscribed",
      "id": 1055772660,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNTU3NzI2NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1055772660",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T00:33:07Z"
    },
    {
      "event": "commented",
      "id": 297097692,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA5NzY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297097692",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:05:14Z",
      "updated_at": "2017-04-25T17:05:14Z",
      "author_association": "MEMBER",
      "body": "@crwatkins Yes that was the basic idea of including estimaterawfee (that and it's useful for debugging).  The exact strategy you use for determining what fee you want to put on a transaction depends on so many factors that its hard to have a one size fits all solution, but thats exactly what Bitcoin Core has to try to ship.  So rather than attempt to defend why the algorithm I picked is the one algorithm to rule them all, I thought it would also make sense to expose a way to examine all the collected data and let people build their own algorithms if they'd like to.\r\n  ",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297097692",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1057056811,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA1NzA1NjgxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1057056811",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:05:14Z"
    },
    {
      "event": "subscribed",
      "id": 1057056813,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNTcwNTY4MTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1057056813",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:05:14Z"
    },
    {
      "event": "commented",
      "id": 297099164,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzA5OTE2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297099164",
      "actor": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:08:36Z",
      "updated_at": "2017-04-25T17:08:36Z",
      "author_association": "NONE",
      "body": "@morcos Exclellent. Thanks!",
      "user": {
        "login": "crwatkins",
        "id": 11914193,
        "node_id": "MDQ6VXNlcjExOTE0MTkz",
        "avatar_url": "https://avatars.githubusercontent.com/u/11914193?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/crwatkins",
        "html_url": "https://github.com/crwatkins",
        "followers_url": "https://api.github.com/users/crwatkins/followers",
        "following_url": "https://api.github.com/users/crwatkins/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/crwatkins/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/crwatkins/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/crwatkins/subscriptions",
        "organizations_url": "https://api.github.com/users/crwatkins/orgs",
        "repos_url": "https://api.github.com/users/crwatkins/repos",
        "events_url": "https://api.github.com/users/crwatkins/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/crwatkins/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297099164",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1057062816,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA1NzA2MjgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1057062816",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:08:36Z"
    },
    {
      "event": "subscribed",
      "id": 1057062817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNTcwNjI4MTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1057062817",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T17:08:36Z"
    },
    {
      "event": "commented",
      "id": 297116075,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI5NzExNjA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/297116075",
      "actor": {
        "login": "Leviathn",
        "id": 14876936,
        "node_id": "MDQ6VXNlcjE0ODc2OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14876936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leviathn",
        "html_url": "https://github.com/Leviathn",
        "followers_url": "https://api.github.com/users/Leviathn/followers",
        "following_url": "https://api.github.com/users/Leviathn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leviathn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leviathn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leviathn/subscriptions",
        "organizations_url": "https://api.github.com/users/Leviathn/orgs",
        "repos_url": "https://api.github.com/users/Leviathn/repos",
        "events_url": "https://api.github.com/users/Leviathn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leviathn/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-25T18:05:39Z",
      "updated_at": "2017-04-25T18:05:39Z",
      "author_association": "NONE",
      "body": "Reviewing",
      "user": {
        "login": "Leviathn",
        "id": 14876936,
        "node_id": "MDQ6VXNlcjE0ODc2OTM2",
        "avatar_url": "https://avatars.githubusercontent.com/u/14876936?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Leviathn",
        "html_url": "https://github.com/Leviathn",
        "followers_url": "https://api.github.com/users/Leviathn/followers",
        "following_url": "https://api.github.com/users/Leviathn/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Leviathn/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Leviathn/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Leviathn/subscriptions",
        "organizations_url": "https://api.github.com/users/Leviathn/orgs",
        "repos_url": "https://api.github.com/users/Leviathn/repos",
        "events_url": "https://api.github.com/users/Leviathn/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Leviathn/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-297116075",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "added_to_project",
      "id": 1061058223,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQxMDYxMDU4MjIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1061058223",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-04-27T19:49:38Z",
      "project_card": {
        "id": 2689499,
        "url": "https://api.github.com/projects/columns/cards/2689499",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "reviewed",
      "id": 34187399,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxODczOTk=",
      "url": null,
      "actor": null,
      "commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good. With the exception of the fallback during upgrade and the one strange sharp edge LGTM. Needs testing because the code being correct isnt really enough, but no doubt better than today's estimates.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-34187399",
      "submitted_at": "2017-04-28T01:22:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "reviewed",
      "id": 35563708,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjM3MDg=",
      "url": null,
      "actor": null,
      "commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK 57e71c819d7653555b048288eee717d53d493924 provided `conservative` is defined to the user\r\n\r\nIf I find the time I'll do some real-world testing once the buckets fill up.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-35563708",
      "submitted_at": "2017-05-01T14:57:41Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "reviewed",
      "id": 35579353,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NzkzNTM=",
      "url": null,
      "actor": null,
      "commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-35579353",
      "submitted_at": "2017-05-01T15:06:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "mentioned",
      "id": 1064111174,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA2NDExMTE3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1064111174",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-01T15:47:14Z"
    },
    {
      "event": "subscribed",
      "id": 1064111175,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNjQxMTExNzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1064111175",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-01T15:47:14Z"
    },
    {
      "event": "reviewed",
      "id": 35586290,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODYyOTA=",
      "url": null,
      "actor": null,
      "commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-35586290",
      "submitted_at": "2017-05-01T15:47:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "reviewed",
      "id": 36103953,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDM5NTM=",
      "url": null,
      "actor": null,
      "commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-36103953",
      "submitted_at": "2017-05-03T18:39:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1075046455,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTA3NTA0NjQ1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1075046455",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T17:41:53Z"
    },
    {
      "event": "commented",
      "id": 300246808,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDI0NjgwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/300246808",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T17:46:50Z",
      "updated_at": "2017-05-09T17:46:50Z",
      "author_association": "MEMBER",
      "body": "Addressed the comments in fixup commmits e95eca7 ([smarterfee.ver5](https://github.com/morcos/bitcoin/commits/smarterfee.ver5)) and then squashed --> 9a34419 ([smarterfee.ver5.squash](https://github.com/morcos/bitcoin/commits/smarterfee.ver5.squash))",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-300246808",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1075093035,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA3NTA5MzAzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1075093035",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T18:09:30Z"
    },
    {
      "event": "subscribed",
      "id": 1075093038,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNzUwOTMwMzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1075093038",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T18:09:30Z"
    },
    {
      "event": "mentioned",
      "id": 1075100580,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA3NTEwMDU4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1075100580",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T18:14:03Z"
    },
    {
      "event": "subscribed",
      "id": 1075100581,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwNzUxMDA1ODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1075100581",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-09T18:14:03Z"
    },
    {
      "event": "reviewed",
      "id": 37103112,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMDMxMTI=",
      "url": null,
      "actor": null,
      "commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Code review ACK, with some nits. I haven't reviewed the changes to the estimation algorithm itself.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-37103112",
      "submitted_at": "2017-05-09T18:52:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTAwN2JhZTM1Y2UyMjAzNmE4MTY1MDUwMzgyNzdkOTljODRlM2Y3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5007bae35ce22036a816505038277d99c84e3f7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/e5007bae35ce22036a816505038277d99c84e3f7",
      "tree": {
        "sha": "aab87df2ef3fbc30e0fb3b3ca22d190d9ecdf1d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aab87df2ef3fbc30e0fb3b3ca22d190d9ecdf1d2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0a273f4c8bed50de9fc227d98d90dc5ff755515",
          "sha": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c0a273f4c8bed50de9fc227d98d90dc5ff755515"
        }
      ],
      "message": "Change parameters for fee estimation and estimates on all 3 time horizons.\n\nMake feerate buckets smaller (5% instead of 10%) and make the 3 different horizons have half lifes of 3 hours, 1 day and 1 week respectively.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-09T19:02:00Z"
      },
      "sha": "e5007bae35ce22036a816505038277d99c84e3f7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2UzMGJjYTFiZmE5OTAwYmMzMWZlYzk1N2JiMDAxMTE1YWNhYzdi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e30bca1bfa9900bc31fec957bb001115acac7b",
      "tree": {
        "sha": "020e3ff48c1f61d7528ed39ca55d7c195f83419e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/020e3ff48c1f61d7528ed39ca55d7c195f83419e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5007bae35ce22036a816505038277d99c84e3f7",
          "sha": "e5007bae35ce22036a816505038277d99c84e3f7",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/e5007bae35ce22036a816505038277d99c84e3f7"
        }
      ],
      "message": "Refactor to update moving average on fly",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-28T22:29:42Z"
      },
      "sha": "d3e30bca1bfa9900bc31fec957bb001115acac7b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmE0M2NjMGVjYWZmY2I2Mzg5ZGJiYjZiY2YwMzhlNzhjZjA0MDIz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
      "tree": {
        "sha": "796977bf2f41e53fbe45b588151709fb47123fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/796977bf2f41e53fbe45b588151709fb47123fc7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3e30bca1bfa9900bc31fec957bb001115acac7b",
          "sha": "d3e30bca1bfa9900bc31fec957bb001115acac7b",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e30bca1bfa9900bc31fec957bb001115acac7b"
        }
      ],
      "message": "Make EstimateMedianVal smarter about small failures.\n\nInstead of stopping if it encounters a \"sufficient\" number of transactions which don't meet the threshold for being confirmed within the target, it keeps looking to add more transactions to see if there is a temporary blip in the data.  This allows a smaller number of required data points.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-02T15:08:25Z"
      },
      "sha": "1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjgxMTUzYWYzODMyNDI1OGRhYjhkMWNmOGU4M2M4OTkzMjRlY2Ux",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2681153af38324258dab8d1cf8e83c899324ece1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2681153af38324258dab8d1cf8e83c899324ece1",
      "tree": {
        "sha": "b4b65d3f9e406b9888f589ef31316d87c08369e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4b65d3f9e406b9888f589ef31316d87c08369e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
          "sha": "1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/1ba43cc0ecaffcb6389dbbb6bcf038e78cf04023"
        }
      ],
      "message": "minor refactor: explicitly track start of new bucket range and don't update curNearBucket on final loop.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-02-22T03:18:13Z"
      },
      "sha": "2681153af38324258dab8d1cf8e83c899324ece1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTg2ZDNmZGZkMzE5YjU2OGI1MjBkZDU4N2JlMjdiZGZmNDVjNTNk",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4186d3fdfd319b568b520dd587be27bdff45c53d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/4186d3fdfd319b568b520dd587be27bdff45c53d",
      "tree": {
        "sha": "f5df89a7fd16f64329bb05240472ff5d7a7437d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5df89a7fd16f64329bb05240472ff5d7a7437d6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2681153af38324258dab8d1cf8e83c899324ece1",
          "sha": "2681153af38324258dab8d1cf8e83c899324ece1",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2681153af38324258dab8d1cf8e83c899324ece1"
        }
      ],
      "message": "Expose estimaterawfee\n\nTrack information the ranges of fee rates that were used to calculate the fee estimates (the last range of fee rates in which the data points met the threshold and the first to fail) and provide an RPC call to return this information.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:26Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-01-24T21:30:03Z"
      },
      "sha": "4186d3fdfd319b568b520dd587be27bdff45c53d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzQ0N2VjMzAzNDhiMzM4ZTc3YmM2NDI5ZmJmYWM5ZjkzNTQ5ZWY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/c7447ec30348b338e77bc6429fbfac9f93549ef6",
      "tree": {
        "sha": "d29e992933923be972226b92b687cd081183e504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d29e992933923be972226b92b687cd081183e504"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4186d3fdfd319b568b520dd587be27bdff45c53d",
          "sha": "4186d3fdfd319b568b520dd587be27bdff45c53d",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/4186d3fdfd319b568b520dd587be27bdff45c53d"
        }
      ],
      "message": "Track failures in fee estimation.\n\nStart tracking transactions which fail to confirm within the target and are then evicted or otherwise leave mempool.\n\nFix slight error in unit test.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:45:27Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-09T20:26:05Z"
      },
      "sha": "c7447ec30348b338e77bc6429fbfac9f93549ef6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODEwZTk3NmQ2YTM5NTZkZmY5ZTY2MDc3NDE1Y2YwNGMxZmUxZjkw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3810e976d6a3956dff9e66077415cf04c1fe1f90",
      "tree": {
        "sha": "0f32c47253bb1b439a5935392822a080b58bad73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f32c47253bb1b439a5935392822a080b58bad73"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7447ec30348b338e77bc6429fbfac9f93549ef6",
          "sha": "c7447ec30348b338e77bc6429fbfac9f93549ef6",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/c7447ec30348b338e77bc6429fbfac9f93549ef6"
        }
      ],
      "message": "Rewrite estimateSmartFee\n\nChange the logic of estimateSmartFee to check a 60% threshold at half the target, a 85% threshold at the target and a 95% threshold at double the target. Always check the shortest time horizon possible and ensure that estimates are monotonically decreasing.  Add a conservative mode, which makes sure that the 95% threshold is also met at longer time horizons as well.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:44Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-07T16:33:44Z"
      },
      "sha": "3810e976d6a3956dff9e66077415cf04c1fe1f90"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGY3Y2JkMjQ3MWFlMjg5ZDI4NDZlMDljNGIwODhmZGMwMzMwYzhm",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
      "tree": {
        "sha": "09377865a8899abf9bdc028cf6652c1e7a2b1c57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09377865a8899abf9bdc028cf6652c1e7a2b1c57"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3810e976d6a3956dff9e66077415cf04c1fe1f90",
          "sha": "3810e976d6a3956dff9e66077415cf04c1fe1f90",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3810e976d6a3956dff9e66077415cf04c1fe1f90"
        }
      ],
      "message": "Track first recorded height\n\nTrack the first time we seen txs in a block that we have been tracking in our mempool. Used to evaluate validity of fee estimates for different targets.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:44Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-07T20:01:50Z"
      },
      "sha": "10f7cbd2471ae289d2846e09c4b088fdc0330c8f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTE5YjhlYTQ0YjI5MmNkNjEyYzRjZTAxZTA4YzgzMzI0ZmE4Mjk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
      "tree": {
        "sha": "afa9c6f9c0e056696b8245e944474879149abdd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afa9c6f9c0e056696b8245e944474879149abdd6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
          "sha": "10f7cbd2471ae289d2846e09c4b088fdc0330c8f",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/10f7cbd2471ae289d2846e09c4b088fdc0330c8f"
        }
      ],
      "message": "Clean up fee estimate debug printing",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-10T21:57:21Z"
      },
      "sha": "aa19b8ea44b292cd612c4ce01e08c83324fa8296"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjFmMGM2NDkwNTQ5MWZlYTRiYTUwYzBhOGViNjhmYTU5ZDY1NDEx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
      "tree": {
        "sha": "ba3d8fcf85daea9a7d7f03ec4fce5a9b2809bb2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba3d8fcf85daea9a7d7f03ec4fce5a9b2809bb2f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa19b8ea44b292cd612c4ce01e08c83324fa8296",
          "sha": "aa19b8ea44b292cd612c4ce01e08c83324fa8296",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/aa19b8ea44b292cd612c4ce01e08c83324fa8296"
        }
      ],
      "message": "Historical block span\n\nStore in fee estimate file the block span for which we were tracking estimates, so we know what targets we can successfully evaluate with the data in the file. When restarting use either this historical block span to set valid range of targets until our current span of tracking estimates is just as long.",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-03-10T21:57:40Z"
      },
      "sha": "5f1f0c64905491fea4ba50c0a8eb68fa59d65411"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWU3NmQ2ZGU1YzhmODcwNWM0YjliYmNjNzVkYTBkZjRkNDJjOTY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
      "tree": {
        "sha": "73e4c35a931df13e5b8300e0fd983ebc26e00044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73e4c35a931df13e5b8300e0fd983ebc26e00044"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
          "sha": "5f1f0c64905491fea4ba50c0a8eb68fa59d65411",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1f0c64905491fea4ba50c0a8eb68fa59d65411"
        }
      ],
      "message": "Introduce a scale factor\n\nFor the per confirmation number tracking of data, introduce a scale factor so that in the longer horizones confirmations are bucketed together at a resolution of the scale.  (instead of 1008 individual data points for each fee bucket, have 42 data points each covering 24 different confirmation values.. (1-24), (25-48), etc.. )",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-03T15:31:27Z"
      },
      "sha": "3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjU4OWY4ZDQwZDkyNmJiYzc4YTU1NmExNDljMzY3Y2Y2MzRjMzc2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef589f8d40d926bbc78a556a149c367cf634c376",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/ef589f8d40d926bbc78a556a149c367cf634c376",
      "tree": {
        "sha": "94d04ab78c258fb1ca98f69a20715a7baca86d25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94d04ab78c258fb1ca98f69a20715a7baca86d25"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
          "sha": "3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/3ee76d6de5c8f8705c4b9bbcc75da0df4d42c966"
        }
      ],
      "message": "minor cleanup: remove unnecessary variable",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:47:45Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-12T16:05:10Z"
      },
      "sha": "ef589f8d40d926bbc78a556a149c367cf634c376"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDJlMTcwNTJjMzg5OTQ4YzUxMWQyYjVkNDFjNGNjMjQzY2RjMTQ1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2e17052c389948c511d2b5d41c4cc243cdc145",
      "tree": {
        "sha": "42818bf17591732fe5bf1d65be22ded212a47e29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42818bf17591732fe5bf1d65be22ded212a47e29"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef589f8d40d926bbc78a556a149c367cf634c376",
          "sha": "ef589f8d40d926bbc78a556a149c367cf634c376",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/ef589f8d40d926bbc78a556a149c367cf634c376"
        }
      ],
      "message": "Comments and improved documentation",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-10T15:48:46Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-04-12T16:29:03Z"
      },
      "sha": "2d2e17052c389948c511d2b5d41c4cc243cdc145"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1076698129,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTA3NjY5ODEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1076698129",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-10T15:51:34Z"
    },
    {
      "event": "commented",
      "id": 300527958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMDUyNzk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/300527958",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-10T15:54:42Z",
      "updated_at": "2017-05-10T15:54:42Z",
      "author_association": "MEMBER",
      "body": "OK.  I think I addressed remaining comments.\r\nI also tried to clean up the logic of estimateCombinedFee to be a bit clearer (although still not a loop)\r\nI also changed the logic to be smarter about returning an answer if one can be found on any horizon, instead of returning -1.   \r\nFixup commits are squashed.\r\n\r\nabe88e4 ([smarterfee.ver7](https://github.com/morcos/bitcoin/commits/smarterfee.ver7))  --> 2d2e170 ([smarterfee.ver7.squash](https://github.com/morcos/bitcoin/commits/smarterfee.ver7.squash))",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-300527958",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 301127829,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMTEyNzgyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/301127829",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-12T16:46:43Z",
      "updated_at": "2017-05-12T16:46:43Z",
      "author_association": "MEMBER",
      "body": "re-utACK https://github.com/bitcoin/bitcoin/pull/10199/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145\r\n\r\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-301127829",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "reviewed",
      "id": 38531945,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MzE5NDU=",
      "url": null,
      "actor": null,
      "commit_id": "4186d3fdfd319b568b520dd587be27bdff45c53d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "utACK",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-38531945",
      "submitted_at": "2017-05-17T01:43:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "reviewed",
      "id": 38707324,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDczMjQ=",
      "url": null,
      "actor": null,
      "commit_id": "2d2e17052c389948c511d2b5d41c4cc243cdc145",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "ACK.",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#pullrequestreview-38707324",
      "submitted_at": "2017-05-17T15:37:27Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGJjMWVjNGE0NzNiNWJkOWI3YmJjZTdiMjBhMTFlOGVkZmU0YjRj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "tree": {
        "sha": "2bc8ad47ab87b370901572e441d61ca0014d6708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bc8ad47ab87b370901572e441d61ca0014d6708"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2e17052c389948c511d2b5d41c4cc243cdc145",
          "sha": "2d2e17052c389948c511d2b5d41c4cc243cdc145",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2e17052c389948c511d2b5d41c4cc243cdc145"
        }
      ],
      "message": "Make more json-like output from estimaterawfee",
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-17T19:42:32Z"
      },
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-05-17T19:39:24Z"
      },
      "sha": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1086633308,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTA4NjYzMzMwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086633308",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:43:26Z"
    },
    {
      "event": "commented",
      "id": 302212186,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjIxMjE4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302212186",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:48:22Z",
      "updated_at": "2017-05-17T19:48:22Z",
      "author_association": "MEMBER",
      "body": "Added an extra commit to improve JSON output as per @sipa.  Was kind of annoying to squash, so will leave it if that's ok?\r\n\r\n@laanwj I think this is reviewed enough that we'd be better off merging and getting some more experimentation with the estimates..    It takes 2 full weeks for the longest estimates to even be exposed.  \r\n\r\nThe biggest open questions are whether I should add an ability to use old estimates during transition and whether we are going to build in GUI support.\r\n\r\nThe tests could also use some improvement but I don't think they're notably worse than they were.",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302212186",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1086640771,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4NjY0MDc3MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086640771",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:48:22Z"
    },
    {
      "event": "subscribed",
      "id": 1086640772,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODY2NDA3NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086640772",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:48:22Z"
    },
    {
      "event": "mentioned",
      "id": 1086640773,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4NjY0MDc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086640773",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:48:22Z"
    },
    {
      "event": "subscribed",
      "id": 1086640774,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODY2NDA3NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086640774",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:48:22Z"
    },
    {
      "event": "commented",
      "id": 302214753,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjIxNDc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302214753",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T19:58:56Z",
      "updated_at": "2017-05-17T19:58:56Z",
      "author_association": "MEMBER",
      "body": "utACK 38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302214753",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 302215324,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjIxNTMyNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302215324",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T20:01:16Z",
      "updated_at": "2017-05-17T20:01:16Z",
      "author_association": "MEMBER",
      "body": "utACK https://github.com/bitcoin/bitcoin/pull/10199/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302215324",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "merged",
      "id": 1086682152,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTA4NjY4MjE1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086682152",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "created_at": "2017-05-17T20:15:46Z"
    },
    {
      "event": "closed",
      "id": 1086682155,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTA4NjY4MjE1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086682155",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-17T20:15:46Z"
    },
    {
      "event": "referenced",
      "id": 1086682378,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEwODY2ODIzNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1086682378",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "318ea50a1c2f612e750a93e36620dd0c4531e9cf",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/318ea50a1c2f612e750a93e36620dd0c4531e9cf",
      "created_at": "2017-05-17T20:15:56Z"
    },
    {
      "event": "commented",
      "id": 302266086,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI2NjA4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302266086",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T00:18:43Z",
      "updated_at": "2017-05-18T00:20:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "I tried reading the description from help, and I don't really understand this:\r\n\r\n> [the rpc command also returns] the number of blocks for which the estimate is valid.\r\n\r\nbut from the actual return:\r\n\r\n>   \"blocks\" : n         (numeric) block number where estimate was found\r\n\r\n\r\nWithout reading the code, it's not clear what `blocks` means. Is it the block height when you called `estimatestartfee` or is it how long it's valid for? ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302266086",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 302281492,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI4MTQ5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302281492",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:14:13Z",
      "updated_at": "2017-05-18T02:14:13Z",
      "author_association": "MEMBER",
      "body": "@RHavar without actually looking at the code, I believe this refers to the \"cheapest bucket\" block which that feerate was found.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302281492",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1087040377,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4NzA0MDM3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087040377",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:14:13Z"
    },
    {
      "event": "subscribed",
      "id": 1087040378,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODcwNDAzNzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087040378",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:14:13Z"
    },
    {
      "event": "commented",
      "id": 302284734,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI4NDczNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302284734",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:39:39Z",
      "updated_at": "2017-05-18T02:40:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "@instagibbs  Yeah, you seem right. But I don't think that was inferable from the help information :P\r\n\r\nWhat's the motivation for `estimatefee` returning a different value than `estimatesmartfee` ? \r\n\r\n```\r\n$ bitcoin-cli estimatefee 6\r\n0.00254275\r\n```\r\n\r\n\r\n```\r\n$ bitcoin-cli estimatesmartfee 6\r\n{\r\n  \"feerate\": 0.00208824,\r\n  \"blocks\": 6\r\n}\r\n```\r\n\r\n\r\n?\r\n\r\nAnyway, fantastic work. This is a huge improvement, something that has been long needed. Well done @morcos ",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302284734",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1087057825,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4NzA1NzgyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087057825",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:39:39Z"
    },
    {
      "event": "subscribed",
      "id": 1087057826,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODcwNTc4MjY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087057826",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:39:39Z"
    },
    {
      "event": "mentioned",
      "id": 1087058559,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4NzA1ODU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087058559",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:40:35Z"
    },
    {
      "event": "subscribed",
      "id": 1087058560,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODcwNTg1NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087058560",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:40:35Z"
    },
    {
      "event": "commented",
      "id": 302286705,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjI4NjcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302286705",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T02:55:06Z",
      "updated_at": "2017-05-18T02:55:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "I've updated https://estimatefee.com/  to now use `estimatesmartfee $n` so if you're interested you can take a look there.\r\n\r\nThe bitcoin node has only been up a few hours, so it'll probably take a while to collect enough information.\r\n\r\nP.S. you kinda broke my domain name lol",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302286705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "removed_from_project",
      "id": 1087318354,
      "node_id": "MDIzOlJlbW92ZWRGcm9tUHJvamVjdEV2ZW50MTA4NzMxODM1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1087318354",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T08:00:19Z",
      "project_card": {
        "id": 2689499,
        "url": "https://api.github.com/projects/columns/cards/2689499",
        "project_id": 481835,
        "project_url": "https://api.github.com/projects/481835",
        "column_name": "Blockers"
      }
    },
    {
      "event": "commented",
      "id": 302476047,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjQ3NjA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302476047",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T17:08:50Z",
      "updated_at": "2017-05-18T17:08:50Z",
      "author_association": "MEMBER",
      "body": "@Rhavar you might be right that the description is not the clearest.\r\nblocks refers to the target for which you are getting an estimate, which is an expected number of blocks within which you will be confirmed.  Occasionally you ask for an estimate at one target but it returns you an estimate for a different target (b/c it is unable to give you an estimate for the target you asked for)",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302476047",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1088203328,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4ODIwMzMyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1088203328",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T17:08:50Z"
    },
    {
      "event": "subscribed",
      "id": 1088203329,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODgyMDMzMjk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1088203329",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T17:08:50Z"
    },
    {
      "event": "commented",
      "id": 302506157,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjUwNjE1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302506157",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T18:42:40Z",
      "updated_at": "2017-05-18T18:42:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "@morcos  In that case I'd suggest renaming it from \"blocks\" to \"target\" and changing the description to what you wrote above :P",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-302506157",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "mentioned",
      "id": 1088349955,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTA4ODM0OTk1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1088349955",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T18:42:40Z"
    },
    {
      "event": "subscribed",
      "id": 1088349958,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDEwODgzNDk5NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1088349958",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-05-18T18:42:40Z"
    },
    {
      "event": "commented",
      "id": 326767729,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMyNjc2NzcyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/326767729",
      "actor": {
        "login": "karelbilek",
        "id": 104945,
        "node_id": "MDQ6VXNlcjEwNDk0NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/karelbilek",
        "html_url": "https://github.com/karelbilek",
        "followers_url": "https://api.github.com/users/karelbilek/followers",
        "following_url": "https://api.github.com/users/karelbilek/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/karelbilek/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/karelbilek/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
        "organizations_url": "https://api.github.com/users/karelbilek/orgs",
        "repos_url": "https://api.github.com/users/karelbilek/repos",
        "events_url": "https://api.github.com/users/karelbilek/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/karelbilek/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-09-02T20:29:58Z",
      "updated_at": "2017-09-02T20:29:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Not sure where to put it, but just FYI\r\n\r\nI made a simple tool that looks up smart fees once per 10 minutes and puts it here\r\n\r\nhttps://estimatesmartfee.com/html.html\r\n\r\nor\r\n\r\nhttps://estimatesmartfee.com/json.json\r\n\r\nIf you want to use it for testing or something",
      "user": {
        "login": "karelbilek",
        "id": 104945,
        "node_id": "MDQ6VXNlcjEwNDk0NQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/karelbilek",
        "html_url": "https://github.com/karelbilek",
        "followers_url": "https://api.github.com/users/karelbilek/followers",
        "following_url": "https://api.github.com/users/karelbilek/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/karelbilek/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/karelbilek/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
        "organizations_url": "https://api.github.com/users/karelbilek/orgs",
        "repos_url": "https://api.github.com/users/karelbilek/repos",
        "events_url": "https://api.github.com/users/karelbilek/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/karelbilek/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-326767729",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "commented",
      "id": 339566393,
      "node_id": "MDEyOklzc3VlQ29tbWVudDMzOTU2NjM5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339566393",
      "actor": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-10-26T06:37:52Z",
      "updated_at": "2017-10-26T06:37:52Z",
      "author_association": "MEMBER",
      "body": "also FYIs, I put together a small bash script that uses this for quickly grabbing fees from the command line: https://bitcoin.stackexchange.com/a/61348/1235 \r\n\r\nthanks!",
      "user": {
        "login": "jb55",
        "id": 45598,
        "node_id": "MDQ6VXNlcjQ1NTk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/45598?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jb55",
        "html_url": "https://github.com/jb55",
        "followers_url": "https://api.github.com/users/jb55/followers",
        "following_url": "https://api.github.com/users/jb55/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jb55/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jb55/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
        "organizations_url": "https://api.github.com/users/jb55/orgs",
        "repos_url": "https://api.github.com/users/jb55/repos",
        "events_url": "https://api.github.com/users/jb55/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jb55/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#issuecomment-339566393",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10199"
    },
    {
      "event": "referenced",
      "id": 2402302685,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0MDIzMDI2ODU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2402302685",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "85c583c159ae0d19b215a78594aac6c2c9ee7345",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/85c583c159ae0d19b215a78594aac6c2c9ee7345",
      "created_at": "2019-06-10T21:42:30Z"
    },
    {
      "event": "referenced",
      "id": 2480543639,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0ODA1NDM2Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2480543639",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e4eff32b86e769076e296dbbc422d64115d52ae4",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/e4eff32b86e769076e296dbbc422d64115d52ae4",
      "created_at": "2019-07-13T03:56:56Z"
    },
    {
      "event": "referenced",
      "id": 2489773106,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI0ODk3NzMxMDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2489773106",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "29e0bfdb29405e6691725efc5deb9f8582433dec",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/29e0bfdb29405e6691725efc5deb9f8582433dec",
      "created_at": "2019-07-17T15:06:16Z"
    },
    {
      "event": "referenced",
      "id": 2503092921,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1MDMwOTI5MjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2503092921",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "40a19a76a71bf288ea1747f1228d877bc6fa213f",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/40a19a76a71bf288ea1747f1228d877bc6fa213f",
      "created_at": "2019-07-23T13:35:59Z"
    },
    {
      "event": "referenced",
      "id": 2507005794,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI1MDcwMDU3OTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2507005794",
      "actor": {
        "login": "PastaPastaPasta",
        "id": 6443210,
        "node_id": "MDQ6VXNlcjY0NDMyMTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6443210?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/PastaPastaPasta",
        "html_url": "https://github.com/PastaPastaPasta",
        "followers_url": "https://api.github.com/users/PastaPastaPasta/followers",
        "following_url": "https://api.github.com/users/PastaPastaPasta/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/PastaPastaPasta/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/PastaPastaPasta/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/PastaPastaPasta/subscriptions",
        "organizations_url": "https://api.github.com/users/PastaPastaPasta/orgs",
        "repos_url": "https://api.github.com/users/PastaPastaPasta/repos",
        "events_url": "https://api.github.com/users/PastaPastaPasta/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/PastaPastaPasta/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "b430366dd97e1511a33c788a89d3003557773aef",
      "commit_url": "https://api.github.com/repos/PastaPastaPasta/dash/commits/b430366dd97e1511a33c788a89d3003557773aef",
      "created_at": "2019-07-24T16:59:38Z"
    },
    {
      "event": "referenced",
      "id": 2971476655,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI5NzE0NzY2NTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2971476655",
      "actor": {
        "login": "barrystyle",
        "id": 14147070,
        "node_id": "MDQ6VXNlcjE0MTQ3MDcw",
        "avatar_url": "https://avatars.githubusercontent.com/u/14147070?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/barrystyle",
        "html_url": "https://github.com/barrystyle",
        "followers_url": "https://api.github.com/users/barrystyle/followers",
        "following_url": "https://api.github.com/users/barrystyle/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/barrystyle/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/barrystyle/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/barrystyle/subscriptions",
        "organizations_url": "https://api.github.com/users/barrystyle/orgs",
        "repos_url": "https://api.github.com/users/barrystyle/repos",
        "events_url": "https://api.github.com/users/barrystyle/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/barrystyle/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a769b945f8ee1ecefee0dcd7be5ca8dc0ab3c08a",
      "commit_url": "https://api.github.com/repos/PACGlobalOfficial/PAC/commits/a769b945f8ee1ecefee0dcd7be5ca8dc0ab3c08a",
      "created_at": "2020-01-22T20:22:17Z"
    },
    {
      "event": "locked",
      "id": 5778545650,
      "node_id": "LOE_lADOABII584NMUNjzwAAAAFYbZvy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5778545650",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-12-16T14:00:07Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112291804",
      "pull_request_review_id": 33595467,
      "id": 112291804,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjI5MTgwNA==",
      "diff_hunk": "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: implementation",
      "created_at": "2017-04-19T19:22:04Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112291804",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112291804"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 883,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112303336",
      "pull_request_review_id": 33608339,
      "id": 112303336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjMwMzMzNg==",
      "diff_hunk": "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();",
      "path": "src/rpc/mining.cpp",
      "position": 96,
      "original_position": 108,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "in_reply_to_id": null,
      "user": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would prefer more explicit range bounding on the threshold with an \"Invalid threshold\" error response; it currently allows numbers < 0 and > 1 and just returns a -1 feerate.",
      "created_at": "2017-04-19T20:18:07Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112303336",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112303336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 920,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112344863",
      "pull_request_review_id": 33652771,
      "id": 112344863,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMjM0NDg2Mw==",
      "diff_hunk": "@@ -853,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = mempool.estimateSmartFee(nBlocks, &answerFound);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();",
      "path": "src/rpc/mining.cpp",
      "position": 96,
      "original_position": 108,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "7306590db98a0d175083d89d572ac86d3c4ba4cb",
      "in_reply_to_id": 112303336,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason I didn't bother with that is I felt estimaterawfee should be a very low level feature that doesn't need all the user friendly bells and whistles..   But it could certainly be cleaned up to add that either in this PR or a follow on..",
      "created_at": "2017-04-20T00:42:57Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r112344863",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/112344863"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 920,
      "original_line": 919,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113279836",
      "pull_request_review_id": 34187399,
      "id": 113279836,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI3OTgzNg==",
      "diff_hunk": "@@ -214,9 +214,14 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n \n     bool foundAnswer = false;\n     unsigned int bins = unconfTxs.size();\n+    bool newBucketRange = true;\n \n     // Start counting from highest(default) or lowest feerate transactions\n     for (int bucket = startbucket; bucket >= 0 && bucket <= maxbucketindex; bucket += step) {\n+        if (newBucketRange) {",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "d2c4bc787b8cf05774e1fbd91f42942b80109791",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you update the commit message from \"Track start of new bucket range more carefully\" to something more descriptive.",
      "created_at": "2017-04-25T18:51:19Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113279836",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113279836"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113290214",
      "pull_request_review_id": 34187399,
      "id": 113290214,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzI5MDIxNA==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"  \\\"leftmempool\\\" : x.x,    (numeric) number of txs over history horizon in the feerate range that left mempool unconfirmed after target\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative value is returned if no answer can be given.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 81,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \"A negative *feerate* is returned\" (other values are zero, so might as well just specify feerate here).",
      "created_at": "2017-04-25T19:37:42Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113290214",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113290214"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 906,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113331719",
      "pull_request_review_id": 34187399,
      "id": 113331719,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzMzMTcxOQ==",
      "diff_hunk": "@@ -270,83 +308,109 @@ double TxConfirmStats::EstimateMedianVal(int confTarget, double sufficientTxVal,\n                 break;\n             }\n         }\n+\n+        passBucket.start = minBucket ? buckets[minBucket-1] : 0;\n+        passBucket.end = buckets[maxBucket];\n     }\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"%3d: For conf success %s %4.2f need feerate %s: %12.5g from buckets %8g - %8g  Cur Bucket stats %6.2f%%  %8.1f/(%.1f+%d mempool)\\n\",\n-             confTarget, requireGreater ? \">\" : \"<\", successBreakPoint,\n-             requireGreater ? \">\" : \"<\", median, buckets[minBucket], buckets[maxBucket],\n-             100 * nConf / (totalNum + extraNum), nConf, totalNum, extraNum);\n+    // If we were passing until we reached last few buckets with insufficient data, then report those as failed\n+    if (passing && !newBucketRange) {\n+        unsigned int failMinBucket = curNearBucket < curFarBucket ? curNearBucket : curFarBucket;",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 309,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: std::min/max here like you did above?",
      "created_at": "2017-04-25T22:58:51Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113331719",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113331719"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 318,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113333417",
      "pull_request_review_id": 34187399,
      "id": 113333417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzMzMzQxNw==",
      "diff_hunk": "@@ -26,40 +28,40 @@ class TxConfirmStats\n {\n private:\n     //Define the buckets we will group transactions into\n-    std::vector<double> buckets;              // The upper-bound of the range for the bucket (inclusive)\n-    std::map<double, unsigned int> bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n+    const std::vector<double>& buckets;              // The upper-bound of the range for the bucket (inclusive)\n+    const std::map<double, unsigned int>& bucketMap; // Map of bucket upper-bound to index into all vectors by bucket\n \n     // For each bucket X:\n     // Count the total # of txs in each bucket\n     // Track the historical moving average of this total over blocks\n     std::vector<double> txCtAvg;\n-    // and calculate the total for the current block to update the moving average\n-    std::vector<int> curBlockTxCt;\n \n     // Count the total # of txs confirmed within Y blocks in each bucket\n     // Track the historical moving average of theses totals over blocks\n-    std::vector<std::vector<double> > confAvg; // confAvg[Y][X]\n-    // and calculate the totals for the current block to update the moving averages\n-    std::vector<std::vector<int> > curBlockConf; // curBlockConf[Y][X]\n+    std::vector<std::vector<double>> confAvg; // confAvg[Y][X]\n+\n+    std::vector<std::vector<double>> failAvg; // future use",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably update this comment in the commit that puts failAvg to use.",
      "created_at": "2017-04-25T23:10:44Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113333417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113333417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113763559",
      "pull_request_review_id": 34187399,
      "id": 113763559,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2MzU1OQ==",
      "diff_hunk": "@@ -596,17 +608,79 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        int nVersionRequired, nVersionThatWrote, nFileBestSeenHeight;\n+        int nVersionRequired, nVersionThatWrote;\n+        unsigned int nFileBestSeenHeight;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n+\n+        // Read fee estimates file into temporary variables so existing data\n+        // structures aren't corrupted if there is an exception.\n         filein >> nFileBestSeenHeight;\n-        feeStats->Read(filein);\n-        nBestSeenHeight = nFileBestSeenHeight;\n-        // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+\n+        if (nVersionThatWrote < 149900) {\n+            // Read the old fee estimates file for temporary use, but then discard.  Will start collecting data from scratch.\n+            // decay is stored before buckets in old versions, so pre-read decay and pass into TxConfirmStats constructor\n+            double tempDecay;\n+            filein >> tempDecay;\n+            if (tempDecay <= 0 || tempDecay >= 1)\n+                throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n+\n+            std::vector<double> tempBuckets;\n+            filein >> tempBuckets;\n+            size_t tempNum = tempBuckets.size();\n+            if (tempNum <= 1 || tempNum > 1000)\n+                throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n+\n+            std::map<double, unsigned int> tempMap;\n+\n+            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MAX_BLOCK_CONFIRMS, tempDecay));\n+            tempFeeStats->Read(filein, nVersionThatWrote, tempNum);",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As discussed it'd be nice to use this chunk and tempFeeStats to just generate one fee estimate, cache that, and then start fresh (as you do) but use the cached fee estimate while our new buckets fill.",
      "created_at": "2017-04-27T18:03:25Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113763559",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113763559"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113764821",
      "pull_request_review_id": 34187399,
      "id": 113764821,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc2NDgyMQ==",
      "diff_hunk": "@@ -465,6 +469,8 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n \n     mapMemPoolTxs[hash].blockHeight = txHeight;\n     mapMemPoolTxs[hash].bucketIndex = feeStats->NewTx(txHeight, (double)feeRate.GetFeePerK());\n+    shortStats->NewTx(txHeight, (double)feeRate.GetFeePerK());",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 35,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "b2222ced4fac6419b3ff82cd1e4fae544b0ad2af",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: might be nice to assert that the bucketIndex is the same across all three calls here?",
      "created_at": "2017-04-27T18:08:58Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113764821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113764821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 472,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113774889",
      "pull_request_review_id": 34187399,
      "id": 113774889,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc3NDg4OQ==",
      "diff_hunk": "@@ -109,26 +162,39 @@ class CBlockPolicyEstimator\n     void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n \n     /** Remove a transaction from the mempool tracking stats*/\n-    bool removeTx(uint256 hash);\n+    bool removeTx(uint256 hash, bool inBlock);\n \n-    /** Return a feerate estimate */\n+    /** DEPRECATED. Return a feerate estimate */\n     CFeeRate estimateFee(int confTarget) const;\n \n-    /** Estimate feerate needed to get be included in a block within\n-     *  confTarget blocks. If no answer can be given at confTarget, return an\n-     *  estimate at the lowest target where one can be given.\n+    /** Estimate feerate needed to get be included in a block within confTarget\n+     *  blocks. If no answer can be given at confTarget, return an estimate at\n+     *  the closest target where one can be given.  'conservative' estimates are\n+     *  valid over longer time horizons also.\n      */\n-    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const;\n+    CFeeRate estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative = true) const;\n+\n+    /** Return a specific fee estimate calculation with a given success\n+     * threshold and time horizon, and optionally return detailed data about\n+     * calculation\n+     */\n+    CFeeRate estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult *result = nullptr) const;\n \n     /** Write estimation data to a file */\n     bool Write(CAutoFile& fileout) const;\n \n     /** Read estimation data from a file */\n     bool Read(CAutoFile& filein);\n \n+    /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n+    void ClearInMempool(CTxMemPool& pool);",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 192,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe a better name for this would be FlushFailedPreShutdown()?",
      "created_at": "2017-04-27T18:52:56Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113774889",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113774889"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 190,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113795130",
      "pull_request_review_id": 34187399,
      "id": 113795130,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzc5NTEzMA==",
      "diff_hunk": "@@ -448,7 +448,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     mapLinks.erase(it);\n     mapTx.erase(it);\n     nTransactionsUpdated++;\n-    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash);}\n+    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}",
      "path": "src/txmempool.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: it seems kinda strange that the \"inBlock\" flag is always set to false, even though it is sometimes called when the transaction was, indeed, in a block. Not a bug because it is a dummy call in fees.cpp, but maybe the API should stay the same and have the flag filled in inside of fees.cpp.",
      "created_at": "2017-04-27T20:32:01Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113795130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113795130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 451,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113824337",
      "pull_request_review_id": 34187399,
      "id": 113824337,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzgyNDMzNw==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {\n+                        estimate = medMax;\n+                    }\n+                }\n+                double longEstimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || longEstimate < estimate) {\n+                    estimate = longEstimate;\n+                }\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;",
      "path": "src/policy/fees.cpp",
      "position": 767,
      "original_position": 764,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems strange to me. Most of our APIs will already gracefully fail if you pass in too high a conf target, I'd rather we do the same here (same in GUI).",
      "created_at": "2017-04-27T23:25:06Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113824337",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113824337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 779,
      "original_line": 779,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113825211",
      "pull_request_review_id": 34187399,
      "id": 113825211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExMzgyNTIxMQ==",
      "diff_hunk": "@@ -576,14 +812,24 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     return CFeeRate(median);\n }\n \n+\n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n+        if (BlockSpan() > HistoricalBlockSpan()/2) {",
      "path": "src/policy/fees.cpp",
      "position": 820,
      "original_position": 806,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems like a sharp edge - you can restart a node and end up getting a fee estimate much higher than 30 seconds ago before you shut down. Maybe change the /2 to historicalBest more recent than OLDEST_ESTIMATE_HISTORY*3/4 or so? Would still have the issue but at least its less likely to be hit for those who regularly run a node just during the day or so?",
      "created_at": "2017-04-27T23:32:48Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r113825211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/113825211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 835,
      "original_line": 835,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114122396",
      "pull_request_review_id": 35563708,
      "id": 114122396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyMjM5Ng==",
      "diff_hunk": "@@ -53,13 +55,17 @@ class TxConfirmStats\n \n     double decay;\n \n+    unsigned int scale;",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Add description?",
      "created_at": "2017-05-01T12:54:00Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114122396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114122396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114122455",
      "pull_request_review_id": 35563708,
      "id": 114122455,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyMjQ1NQ==",
      "diff_hunk": "@@ -68,7 +74,8 @@ class TxConfirmStats\n      * @param maxConfirms max number of confirms to track\n      * @param decay how much to decay the historical moving average per block\n      */\n-    TxConfirmStats(const std::vector<double>& defaultBuckets, unsigned int maxConfirms, double decay);\n+    TxConfirmStats(const std::vector<double>& defaultBuckets, const std::map<double, unsigned int>& defaultBucketMap,",
      "path": "src/policy/fees.cpp",
      "position": 68,
      "original_position": 48,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "add description above?",
      "created_at": "2017-05-01T12:55:07Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114122455",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114122455"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 76,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114126367",
      "pull_request_review_id": 35563708,
      "id": 114126367,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyNjM2Nw==",
      "diff_hunk": "@@ -109,26 +162,39 @@ class CBlockPolicyEstimator\n     void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n \n     /** Remove a transaction from the mempool tracking stats*/\n-    bool removeTx(uint256 hash);\n+    bool removeTx(uint256 hash, bool inBlock);\n \n-    /** Return a feerate estimate */\n+    /** DEPRECATED. Return a feerate estimate */\n     CFeeRate estimateFee(int confTarget) const;\n \n-    /** Estimate feerate needed to get be included in a block within\n-     *  confTarget blocks. If no answer can be given at confTarget, return an\n-     *  estimate at the lowest target where one can be given.\n+    /** Estimate feerate needed to get be included in a block within confTarget\n+     *  blocks. If no answer can be given at confTarget, return an estimate at\n+     *  the closest target where one can be given.  'conservative' estimates are\n+     *  valid over longer time horizons also.",
      "path": "src/policy/fees.h",
      "position": 174,
      "original_position": 174,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "teeny nit: \"also\" unneeded",
      "created_at": "2017-05-01T13:45:34Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114126367",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114126367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114127237",
      "pull_request_review_id": 35563708,
      "id": 114127237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyNzIzNw==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {\n+                        estimate = medMax;\n+                    }\n+                }\n+                double longEstimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || longEstimate < estimate) {\n+                    estimate = longEstimate;\n+                }\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;\n+        }\n+\n+        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints",
      "path": "src/policy/fees.cpp",
      "position": 770,
      "original_position": 767,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this is impossible to hit, due to `confTarget <= 0` check and `maxUsableEstimate <= 1` check. (though this might make sense as belt and suspenders)",
      "created_at": "2017-05-01T13:54:04Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114127237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114127237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 782,
      "original_line": 782,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114128685",
      "pull_request_review_id": 35563708,
      "id": 114128685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEyODY4NQ==",
      "diff_hunk": "@@ -828,16 +829,16 @@ UniValue estimatefee(const JSONRPCRequest& request)\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"estimatesmartfee nblocks\\n\"\n-            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric)\\n\"\n+            \"1. nblocks       (numeric)\\n\"\n+            \"2. conservative  (bool, optional, default=true) Whether to return a more conservative estimate calculated from a longer history\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not clear to me as the API reader what \"conservative\" means here, depending on if I'm worrying about over-paying or waiting too long, or being conservative in the amount of data I'm using to estimate.\r\n\r\nsuggested: \"Whether to return a possibly higher feerate estimate calculated from a longer history\"",
      "created_at": "2017-05-01T14:07:12Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114128685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114128685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 841,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114131869",
      "pull_request_review_id": 35563708,
      "id": 114131869,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzMTg2OQ==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 68,
      "original_position": 64,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "perhaps mention how long each history is",
      "created_at": "2017-05-01T14:32:53Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114131869",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114131869"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132357",
      "pull_request_review_id": 35563708,
      "id": 114132357,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzMjM1Nw==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 72,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/first/highest/",
      "created_at": "2017-05-01T14:36:37Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132357",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 897,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132378",
      "pull_request_review_id": 35563708,
      "id": 114132378,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzMjM3OA==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 71,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: s/last/lowest/",
      "created_at": "2017-05-01T14:36:50Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 896,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132845",
      "pull_request_review_id": 35563708,
      "id": 114132845,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzMjg0NQ==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay for historical moving average of confirmation data\\n\"\n+            \"  \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n+            \"  \\\"pass.\\\"                 information about the last range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the first range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range total\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/total/that were confirmed at any point/",
      "created_at": "2017-05-01T14:40:20Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114132845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114132845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 901,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114133179",
      "pull_request_review_id": 35563708,
      "id": 114133179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzMzE3OQ==",
      "diff_hunk": "@@ -116,8 +116,8 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     for i,e in enumerate(all_estimates): # estimate is for i+1\n         if e >= 0:\n             valid_estimate = True\n-            # estimatesmartfee should return the same result\n-            assert_equal(node.estimatesmartfee(i+1)[\"feerate\"], e)\n+            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n+                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)",
      "path": "test/functional/smartfees.py",
      "position": 7,
      "original_position": 7,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "could also do a quick check that the transitive property is true for `conservative` estimates",
      "created_at": "2017-05-01T14:42:42Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114133179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114133179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114134808",
      "pull_request_review_id": 35563708,
      "id": 114134808,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzNDgwOA==",
      "diff_hunk": "@@ -96,6 +100,55 @@ static const double FEE_SPACING = 1.1;\n  */\n class CBlockPolicyEstimator\n {\n+private:\n+    /** Track confirm delays up to 12 blocks for short horizon */\n+    static constexpr unsigned int SHORT_BLOCK_PERIODS = 12;\n+    static constexpr unsigned int SHORT_SCALE = 1;\n+    /** Track confirm delays up to 48 blocks for medium horizon */\n+    static constexpr unsigned int MED_BLOCK_PERIODS = 24;\n+    static constexpr unsigned int MED_SCALE = 2;\n+    /** Track confirm delays up to 1008 blocks for long horizon */\n+    static constexpr unsigned int LONG_BLOCK_PERIODS = 42;\n+    static constexpr unsigned int LONG_SCALE = 24;\n+    /** Historical estimates that are older than this aren't valid */\n+    static const unsigned int OLDEST_ESTIMATE_HISTORY = 6 * 1008;\n+\n+    /** Decay of .962 is a half-life of 18 blocks or about 3 hours */\n+    static constexpr double SHORT_DECAY = .962;\n+    /** Decay of .998 is a half-life of 144 blocks or about 1 day */\n+    static constexpr double MED_DECAY = .9952;\n+    /** Decay of .9995 is a half-life of 1008 blocks or about 1 week */\n+    static constexpr double LONG_DECAY = .99931;\n+\n+    /** Require greater than 60% of X feerate transactions to be confirmed within Y/2 blocks*/\n+    static constexpr double HALF_SUCCESS_PCT = .6;\n+    /** Require greater than 85% of X feerate transactions to be confirmed within Y blocks*/\n+    static constexpr double SUCCESS_PCT = .85;\n+    /** Require greater than 95% of X feerate transactions to be confirmed within 2 * Y blocks*/\n+    static constexpr double DOUBLE_SUCCESS_PCT = .95;\n+\n+    /** Require an avg of 0.1 tx in the combined feerate bucket per block to have stat significance */\n+    static constexpr double SUFFICIENT_FEETXS = 0.1;\n+    /** Require an avg of 0.5 tx when using short decay since there are less blocks considered*/",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 134,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "grammar nit: s/less/fewer/",
      "created_at": "2017-05-01T14:53:30Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114134808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114134808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 132,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114136987",
      "pull_request_review_id": 35579353,
      "id": 114136987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDEzNjk4Nw==",
      "diff_hunk": "@@ -854,15 +855,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 51,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "missing `threshold`",
      "created_at": "2017-05-01T15:06:46Z",
      "updated_at": "2017-05-17T19:43:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114136987",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114136987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 876,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114143629",
      "pull_request_review_id": 35586290,
      "id": 114143629,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDE0MzYyOQ==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {\n+                        estimate = medMax;\n+                    }\n+                }\n+                double longEstimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || longEstimate < estimate) {\n+                    estimate = longEstimate;\n+                }\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;\n+        }\n+\n+        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, false);\n+        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, false);\n+        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, conservative);\n+        median = halfEst;\n+        if (actualEst > median) {\n+            median = actualEst;\n+        }\n+        if (doubleEst > median) {\n+            median = doubleEst;\n+        }\n+\n+        if (conservative) {",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 779,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe we may want to add a check that the previous code actually got a result here. And, generally, that all of the four estimate*Fee calls here actually succeed. It seems super strange to accept only one result as fine if the rest fail (eg on startup you may get a response from short horizon on SUFFICIENT_TXS_SHORT, but not on medium/long, also @sdaftuar saw a case this morning where he had an offline node for a while which succeeded in getting a result for conservative but not for non-conservative for  a 3 conftarget, I believe because estimateConservativeFee gave a result from the medium/long horizons when the short horizon could not).",
      "created_at": "2017-05-01T15:47:14Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114143629",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114143629"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114620496",
      "pull_request_review_id": 36102545,
      "id": 114620496,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDYyMDQ5Ng==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {\n+                        estimate = medMax;\n+                    }\n+                }\n+                double longEstimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || longEstimate < estimate) {\n+                    estimate = longEstimate;\n+                }\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;\n+        }\n+\n+        assert(confTarget > 0); //estimateCombinedFee and estimateConservativeFee take unsigned ints\n+        double halfEst = estimateCombinedFee(confTarget/2, HALF_SUCCESS_PCT, false);\n+        double actualEst = estimateCombinedFee(confTarget, SUCCESS_PCT, false);\n+        double doubleEst = estimateCombinedFee(2 * confTarget, DOUBLE_SUCCESS_PCT, conservative);\n+        median = halfEst;\n+        if (actualEst > median) {\n+            median = actualEst;\n+        }\n+        if (doubleEst > median) {\n+            median = doubleEst;\n+        }\n+\n+        if (conservative) {",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 779,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": 114143629,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After offline discussion, it appears the bigger issue is what to do when the short time horizon estimates have decayed to not being able to give you an answer.  It seems like what happens in conservative mode is probably the right thing where you take advantage of the fact that the longer time horizon estimates have not decayed yet.  We probably want the ability to utilize this as a fall back in non-conservative mode as well.  This can happen either from shutting down a node for a couple of days which means the short time horizon will decay too much, or even just from losing network activity from something like a laptop over the weekend.\r\nAs it is, I think its probably still a strict improvement to existing estimates, but could use further refinement.",
      "created_at": "2017-05-03T18:34:10Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114620496",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114620496"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 799,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114621796",
      "pull_request_review_id": 36103953,
      "id": 114621796,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDYyMTc5Ng==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 699,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in all 3 of these replacement evaluations (also line 709 and line 722), we probably don't want to do the replacement if the new estimate is -1, should be rare.",
      "created_at": "2017-05-03T18:39:51Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114621796",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114621796"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 723,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114836148",
      "pull_request_review_id": 36330166,
      "id": 114836148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgzNjE0OA==",
      "diff_hunk": "@@ -503,67 +586,220 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     // of unconfirmed txs to remove from tracking.\n     nBestSeenHeight = nBlockHeight;\n \n-    // Clear the current block state and update unconfirmed circular buffer\n+    // Update unconfirmed circular buffer\n     feeStats->ClearCurrent(nBlockHeight);\n+    shortStats->ClearCurrent(nBlockHeight);\n+    longStats->ClearCurrent(nBlockHeight);\n+\n+    // Decay all exponential averages\n+    feeStats->UpdateMovingAverages();\n+    shortStats->UpdateMovingAverages();\n+    longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Repopulate the current block states\n+    // Update averages with data points from current block\n     for (unsigned int i = 0; i < entries.size(); i++) {\n         if (processBlockTx(nBlockHeight, entries[i]))\n             countedTxs++;\n     }\n \n-    // Update all exponential averages with the current block state\n-    feeStats->UpdateMovingAverages();\n+    if (firstRecordedHeight == 0 && countedTxs > 0) {\n+        firstRecordedHeight = nBestSeenHeight;\n+        LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy first recorded height %u\\n\", firstRecordedHeight);\n+    }\n+\n \n-    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy after updating estimates for %u of %u txs in block, since last block %u of %u tracked, new mempool map size %u\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size());\n+    LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n+             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;\n     untrackedTxs = 0;\n }\n \n CFeeRate CBlockPolicyEstimator::estimateFee(int confTarget) const\n {\n+    // It's not possible to get reasonable estimates for confTarget of 1\n+    if (confTarget <= 1)\n+        return CFeeRate(0);\n+\n+    return estimateRawFee(confTarget, DOUBLE_SUCCESS_PCT, FeeEstimateHorizon::MED_HALFLIFE);\n+}\n+\n+CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThreshold, FeeEstimateHorizon horizon, EstimationResult* result) const\n+{\n+    TxConfirmStats* stats;\n+    double sufficientTxs = SUFFICIENT_FEETXS;\n+    switch (horizon) {\n+    case FeeEstimateHorizon::SHORT_HALFLIFE: {\n+        stats = shortStats;\n+        sufficientTxs = SUFFICIENT_TXS_SHORT;\n+        break;\n+    }\n+    case FeeEstimateHorizon::MED_HALFLIFE: {\n+        stats = feeStats;\n+        break;\n+    }\n+    case FeeEstimateHorizon::LONG_HALFLIFE: {\n+        stats = longStats;\n+        break;\n+    }\n+    default: {\n+        return CFeeRate(0);\n+    }\n+    }\n+\n     LOCK(cs_feeEstimator);\n     // Return failure if trying to analyze a target we're not tracking\n-    // It's not possible to get reasonable estimates for confTarget of 1\n-    if (confTarget <= 1 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+    if (confTarget <= 0 || (unsigned int)confTarget > stats->GetMaxConfirms())\n+        return CFeeRate(0);\n+    if (successThreshold > 1)\n         return CFeeRate(0);\n \n-    double median = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+    double median = stats->EstimateMedianVal(confTarget, sufficientTxs, successThreshold, true, nBestSeenHeight, result);\n \n     if (median < 0)\n         return CFeeRate(0);\n \n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);\n+}\n+\n+/** Return a fee estimate at the required successThreshold from the shortest\n+ * time horizon which tracks confirmations up to the desired target.  If\n+ * conservative answer is not requested, also allow short time horizon estimates\n+ * for a lower target to reduce the given answer */\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;\n+    if (confTarget >= 1 && confTarget <= longStats->GetMaxConfirms()) {\n+        if (confTarget <= shortStats->GetMaxConfirms()) {\n+            estimate = shortStats->EstimateMedianVal(confTarget, SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+        }\n+        else {\n+            if (!conservative) {\n+                // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                estimate = shortStats->EstimateMedianVal(shortStats->GetMaxConfirms(), SUFFICIENT_TXS_SHORT, successThreshold, true, nBestSeenHeight);\n+            }\n+            if (confTarget <= feeStats->GetMaxConfirms()) {\n+                double medEstimate = feeStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || medEstimate < estimate) {\n+                    estimate = medEstimate;\n+                }\n+            }\n+            else {\n+                if (!conservative) {\n+                    // When we aren't using conservative estimates, if a lower confTarget from a more recent horizon returns a lower answer use it.\n+                    double medMax = feeStats->EstimateMedianVal(feeStats->GetMaxConfirms(), SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                    if (estimate == -1 ||  medMax < estimate) {\n+                        estimate = medMax;\n+                    }\n+                }\n+                double longEstimate = longStats->EstimateMedianVal(confTarget, SUFFICIENT_FEETXS, successThreshold, true, nBestSeenHeight);\n+                if (estimate == -1 || longEstimate < estimate) {\n+                    estimate = longEstimate;\n+                }\n+            }\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** Ensure that for a conservative estimate, the DOUBLE_SUCCESS_PCT is also met\n+ * at 2 * target for any longer time horizons.\n+ */\n+double CBlockPolicyEstimator::estimateConservativeFee(unsigned int doubleTarget) const\n+{\n+    double estimate = -1;\n+    if (doubleTarget <= shortStats->GetMaxConfirms()) {\n+        estimate = feeStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+    }\n+    if (doubleTarget <= feeStats->GetMaxConfirms()) {\n+        double longEstimate = longStats->EstimateMedianVal(doubleTarget, SUFFICIENT_FEETXS, DOUBLE_SUCCESS_PCT, true, nBestSeenHeight);\n+        if (longEstimate > estimate) {\n+            estimate = longEstimate;\n+        }\n+    }\n+    return estimate;\n+}\n+\n+/** estimateSmartFee returns the max of the feerates calculated with a 60%\n+ * threshold required at target / 2, an 85% threshold required at target and a\n+ * 95% threshold required at 2 * target.  Each calculation is performed at the\n+ * shortest time horizon which tracks the required target.  Conservative\n+ * estimates, however, required the 95% threshold at 2 * target be met for any\n+ * longer time horizons also.\n+ */\n+CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool, bool conservative) const\n {\n     if (answerFoundAtTarget)\n         *answerFoundAtTarget = confTarget;\n \n     double median = -1;\n-\n     {\n         LOCK(cs_feeEstimator);\n \n         // Return failure if trying to analyze a target we're not tracking\n-        if (confTarget <= 0 || (unsigned int)confTarget > feeStats->GetMaxConfirms())\n+        if (confTarget <= 0 || (unsigned int)confTarget > longStats->GetMaxConfirms())\n             return CFeeRate(0);\n \n         // It's not possible to get reasonable estimates for confTarget of 1\n         if (confTarget == 1)\n             confTarget = 2;\n \n-        while (median < 0 && (unsigned int)confTarget <= feeStats->GetMaxConfirms()) {\n-            median = feeStats->EstimateMedianVal(confTarget++, SUFFICIENT_FEETXS, MIN_SUCCESS_PCT, true, nBestSeenHeight);\n+        unsigned int maxUsableEstimate = MaxUsableEstimate();\n+        if (maxUsableEstimate <= 1)\n+            return CFeeRate(0);\n+\n+        if ((unsigned int)confTarget > maxUsableEstimate) {\n+            confTarget = maxUsableEstimate;",
      "path": "src/policy/fees.cpp",
      "position": 767,
      "original_position": 764,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": 113824337,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The design of estimateSmartFee is to be used by the wallet to intelligently as possible automatically put a fee on a transaction being sent.  In the GUI, the slider clearly indicates what target the fee is being returned for.  For the RPC call estimatesmartfee, this is also clearly returned.  The difficulty comes with automatic estimation that happens from a sendtoaddress or sendmany RPC call.  If in the future we add a way to select a transaction confirm target with the desired RPC call, perhaps it would make sense to fail, but for now it seems to me that its more important for the transaction to go out, even if its paying a fee for a much faster target.",
      "created_at": "2017-05-04T17:10:42Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114836148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114836148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 779,
      "original_line": 779,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114836308",
      "pull_request_review_id": 36330328,
      "id": 114836308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNDgzNjMwOA==",
      "diff_hunk": "@@ -576,14 +812,24 @@ CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoun\n     return CFeeRate(median);\n }\n \n+\n bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << 149900; // version required to read: 0.14.99 or later\n         fileout << CLIENT_VERSION; // version that wrote the file\n         fileout << nBestSeenHeight;\n+        if (BlockSpan() > HistoricalBlockSpan()/2) {",
      "path": "src/policy/fees.cpp",
      "position": 820,
      "original_position": 806,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": 113825211,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After discussion, I agree that this logic could be more intelligent, but I think that can be left for a later improvement.",
      "created_at": "2017-05-04T17:11:22Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r114836308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/114836308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 835,
      "original_line": 835,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115526148",
      "pull_request_review_id": 37071499,
      "id": 115526148,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUyNjE0OA==",
      "diff_hunk": "@@ -596,17 +608,79 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        int nVersionRequired, nVersionThatWrote, nFileBestSeenHeight;\n+        int nVersionRequired, nVersionThatWrote;\n+        unsigned int nFileBestSeenHeight;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n             return error(\"CBlockPolicyEstimator::Read(): up-version (%d) fee estimate file\", nVersionRequired);\n+\n+        // Read fee estimates file into temporary variables so existing data\n+        // structures aren't corrupted if there is an exception.\n         filein >> nFileBestSeenHeight;\n-        feeStats->Read(filein);\n-        nBestSeenHeight = nFileBestSeenHeight;\n-        // if nVersionThatWrote < 139900 then another TxConfirmStats (for priority) follows but can be ignored.\n+\n+        if (nVersionThatWrote < 149900) {\n+            // Read the old fee estimates file for temporary use, but then discard.  Will start collecting data from scratch.\n+            // decay is stored before buckets in old versions, so pre-read decay and pass into TxConfirmStats constructor\n+            double tempDecay;\n+            filein >> tempDecay;\n+            if (tempDecay <= 0 || tempDecay >= 1)\n+                throw std::runtime_error(\"Corrupt estimates file. Decay must be between 0 and 1 (non-inclusive)\");\n+\n+            std::vector<double> tempBuckets;\n+            filein >> tempBuckets;\n+            size_t tempNum = tempBuckets.size();\n+            if (tempNum <= 1 || tempNum > 1000)\n+                throw std::runtime_error(\"Corrupt estimates file. Must have between 2 and 1000 feerate buckets\");\n+\n+            std::map<double, unsigned int> tempMap;\n+\n+            std::unique_ptr<TxConfirmStats> tempFeeStats(new TxConfirmStats(tempBuckets, tempMap, MAX_BLOCK_CONFIRMS, tempDecay));\n+            tempFeeStats->Read(filein, nVersionThatWrote, tempNum);",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 292,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": 113763559,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "leaving for a later improvement\r\n",
      "created_at": "2017-05-09T15:48:27Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115526148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115526148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 638,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115530273",
      "pull_request_review_id": 37076082,
      "id": 115530273,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTUzMDI3Mw==",
      "diff_hunk": "@@ -448,7 +448,7 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     mapLinks.erase(it);\n     mapTx.erase(it);\n     nTransactionsUpdated++;\n-    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash);}\n+    if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}",
      "path": "src/txmempool.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "57e71c819d7653555b048288eee717d53d493924",
      "in_reply_to_id": 113795130,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This will eventually be cleaned up when fee estimation listens to CValidationInterface",
      "created_at": "2017-05-09T16:04:04Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115530273",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115530273"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 451,
      "original_line": 451,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115555345",
      "pull_request_review_id": 37103112,
      "id": 115555345,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU1NTM0NQ==",
      "diff_hunk": "@@ -580,10 +587,15 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << 149900; // version required to read: 0.14.99 or later",
      "path": "src/policy/fees.cpp",
      "position": 817,
      "original_position": 245,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason to keep this number tied to client versions instead of just an independent \"fee estimates file version number\"?",
      "created_at": "2017-05-09T17:48:14Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115555345",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115555345"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 832,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115555681",
      "pull_request_review_id": 37103112,
      "id": 115555681,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU1NTY4MQ==",
      "diff_hunk": "@@ -141,19 +207,38 @@ class CBlockPolicyEstimator\n \n     /** Classes to track historical data on transaction confirmations */\n     TxConfirmStats* feeStats;\n+    TxConfirmStats* shortStats;",
      "path": "src/policy/fees.h",
      "position": 208,
      "original_position": 208,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "9a34419f98d55aff2f048ebe76600900a2cd35f0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Convert these to std::unique_ptrs?",
      "created_at": "2017-05-09T17:49:40Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115555681",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115555681"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 210,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115559654",
      "pull_request_review_id": 37103112,
      "id": 115559654,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU1OTY1NA==",
      "diff_hunk": "@@ -159,6 +171,10 @@ class CBlockPolicyEstimator\n \n class FeeFilterRounder\n {\n+private:\n+    static constexpr double MAX_FILTER_FEERATE = 1e7;\n+    static constexpr double FEE_FILTER_SPACING = 1.1;",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 88,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "280e244eb38c6fab25b852ffe107c7500ffc48ea",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you add a comment to explain the relation with the CBlockPolicyEstimator::FEE_SPACE constant?",
      "created_at": "2017-05-09T18:05:07Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115559654",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115559654"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115561899",
      "pull_request_review_id": 37103112,
      "id": 115561899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2MTg5OQ==",
      "diff_hunk": "@@ -854,15 +858,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "9a34419f98d55aff2f048ebe76600900a2cd35f0",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jlopp's comment hasn't been addressed yet: \"nit: Implementation\".",
      "created_at": "2017-05-09T18:14:03Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115561899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115561899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 883,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115562631",
      "pull_request_review_id": 37103112,
      "id": 115562631,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2MjYzMQ==",
      "diff_hunk": "@@ -863,6 +863,79 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();\n+    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n+    if (!request.params[2].isNull()) {\n+        int horizonInt = request.params[2].get_int();\n+        if (horizonInt < 0 || horizonInt > 2) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n+        }\n+        else {",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "116ab2abae808d4072e833fbacc3d0ec8a6b2106",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Style nit: `else` on the same line as `}`",
      "created_at": "2017-05-09T18:16:47Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115562631",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115562631"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115563021",
      "pull_request_review_id": 37103112,
      "id": 115563021,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2MzAyMQ==",
      "diff_hunk": "@@ -863,6 +863,79 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 68,
      "original_position": 21,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "116ab2abae808d4072e833fbacc3d0ec8a6b2106",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To make the RPC interface less dependent on the specific implementation, perhaps don't make horizon a parameter, and just return information for all applicable horizons for the given value of nblocks?",
      "created_at": "2017-05-09T18:18:16Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115563021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115563021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115564827",
      "pull_request_review_id": 37103112,
      "id": 115564827,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2NDgyNw==",
      "diff_hunk": "@@ -658,31 +658,97 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "d6918d281a39decc040a7488117ab6310aa8eda9",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you write this function as a loop over the 3 horizons, instead of a cascaded if/then/else?",
      "created_at": "2017-05-09T18:25:15Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115564827",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115564827"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 703,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115565503",
      "pull_request_review_id": 37103112,
      "id": 115565503,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2NTUwMw==",
      "diff_hunk": "@@ -173,6 +173,10 @@ class CBlockPolicyEstimator\n private:\n     CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n     unsigned int nBestSeenHeight;\n+    unsigned int firstRecordedHeight;\n+    unsigned int historicalFirst;",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 5,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "1313cc7b2b297fc011894246a1378df3503f2be2",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: unused until 2 commits later.",
      "created_at": "2017-05-09T18:27:34Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115565503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115565503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115568045",
      "pull_request_review_id": 37103112,
      "id": 115568045,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU2ODA0NQ==",
      "diff_hunk": "@@ -663,6 +664,29 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);",
      "path": "src/policy/fees.cpp",
      "position": 678,
      "original_position": 46,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "13cb4828886b2524c769578a9c24ec2b5d7fa744",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: If you'd return which of the two BlockSpans was chosen in a pair or a bool, you wouldn't need to repeat the decision logic in the debug print statement of processBlock.",
      "created_at": "2017-05-09T18:38:01Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115568045",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115568045"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 694,
      "original_line": 694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578505",
      "pull_request_review_id": 37128596,
      "id": 115578505,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3ODUwNQ==",
      "diff_hunk": "@@ -658,31 +658,97 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n-CFeeRate CBlockPolicyEstimator::estimateSmartFee(int confTarget, int *answerFoundAtTarget, const CTxMemPool& pool) const\n+\n+double CBlockPolicyEstimator::estimateCombinedFee(unsigned int confTarget, double successThreshold, bool conservative) const\n+{\n+    double estimate = -1;",
      "path": "src/policy/fees.cpp",
      "position": null,
      "original_position": 8,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "d6918d281a39decc040a7488117ab6310aa8eda9",
      "in_reply_to_id": 115564827,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can take a pass at rewriting the logic to be a bit clearer, but I'm not sure a loop is the right thing.  There are basically 6 different combinations of estimates you might want to check depending on what range your target is in and whether or not you want to check shorter horizons.  But the logic might be cleaner if those are just spelled out.",
      "created_at": "2017-05-09T19:17:43Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578505",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578505"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 703,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578563",
      "pull_request_review_id": 37128659,
      "id": 115578563,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3ODU2Mw==",
      "diff_hunk": "@@ -663,6 +664,29 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);",
      "path": "src/policy/fees.cpp",
      "position": 678,
      "original_position": 46,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "13cb4828886b2524c769578a9c24ec2b5d7fa744",
      "in_reply_to_id": 115568045,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok",
      "created_at": "2017-05-09T19:17:59Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578563",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578563"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 694,
      "original_line": 694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578711",
      "pull_request_review_id": 37128830,
      "id": 115578711,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3ODcxMQ==",
      "diff_hunk": "@@ -580,10 +587,15 @@ bool CBlockPolicyEstimator::Write(CAutoFile& fileout) const\n {\n     try {\n         LOCK(cs_feeEstimator);\n-        fileout << 139900; // version required to read: 0.13.99 or later\n+        fileout << 149900; // version required to read: 0.14.99 or later",
      "path": "src/policy/fees.cpp",
      "position": 817,
      "original_position": 245,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "c0a273f4c8bed50de9fc227d98d90dc5ff755515",
      "in_reply_to_id": 115555345,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "no reason..., but this also seems simple enough?",
      "created_at": "2017-05-09T19:18:39Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578711",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 832,
      "original_line": 590,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578906",
      "pull_request_review_id": 37129031,
      "id": 115578906,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3ODkwNg==",
      "diff_hunk": "@@ -159,6 +171,10 @@ class CBlockPolicyEstimator\n \n class FeeFilterRounder\n {\n+private:\n+    static constexpr double MAX_FILTER_FEERATE = 1e7;\n+    static constexpr double FEE_FILTER_SPACING = 1.1;",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 88,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "280e244eb38c6fab25b852ffe107c7500ffc48ea",
      "in_reply_to_id": 115559654,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah, there is no relation.\r\nwhen I made the filter spacing, I just copied the other one arbitrarily, but then I decided if I was changing the estimate spacing, there was no reason to also make a change to the filter spacing.   I can add a comment.",
      "created_at": "2017-05-09T19:19:34Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115578906",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115578906"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579270",
      "pull_request_review_id": 37129412,
      "id": 115579270,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3OTI3MA==",
      "diff_hunk": "@@ -141,19 +207,38 @@ class CBlockPolicyEstimator\n \n     /** Classes to track historical data on transaction confirmations */\n     TxConfirmStats* feeStats;\n+    TxConfirmStats* shortStats;",
      "path": "src/policy/fees.h",
      "position": 208,
      "original_position": 208,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "9a34419f98d55aff2f048ebe76600900a2cd35f0",
      "in_reply_to_id": 115555681,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This was the change made in #9942, and I couldn't get unique_ptrs to work while also moving the code to the cpp file.  I now also have other ideas how to clean up the wonky design of TxConfirmStats inside CBlockPolicyEstimator, but I don't want to do it now and churn this PR.",
      "created_at": "2017-05-09T19:21:18Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579270",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 210,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579454",
      "pull_request_review_id": 37129633,
      "id": 115579454,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3OTQ1NA==",
      "diff_hunk": "@@ -863,6 +863,79 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 68,
      "original_position": 21,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "116ab2abae808d4072e833fbacc3d0ec8a6b2106",
      "in_reply_to_id": 115563021,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "slightly prefer existing, but I could change it if prevailing opinion is otherwise..\r\nestimaterawfee is meant to be implementation dependent",
      "created_at": "2017-05-09T19:22:16Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579504",
      "pull_request_review_id": 37129682,
      "id": 115579504,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3OTUwNA==",
      "diff_hunk": "@@ -854,15 +858,98 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = request.params[0].get_int();\n+    bool conservative = true;\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        RPCTypeCheckArgument(request.params[1], UniValue::VBOOL);\n+        conservative = request.params[1].get_bool();\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n-    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool);\n+    CFeeRate feeRate = ::feeEstimator.estimateSmartFee(nBlocks, &answerFound, ::mempool, conservative);\n     result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n     result.push_back(Pair(\"blocks\", answerFound));\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 59,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "9a34419f98d55aff2f048ebe76600900a2cd35f0",
      "in_reply_to_id": 115561899,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oops",
      "created_at": "2017-05-09T19:22:29Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579504",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579504"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 883,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579513",
      "pull_request_review_id": 37129695,
      "id": 115579513,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3OTUxMw==",
      "diff_hunk": "@@ -863,6 +863,79 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();\n+    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n+    if (!request.params[2].isNull()) {\n+        int horizonInt = request.params[2].get_int();\n+        if (horizonInt < 0 || horizonInt > 2) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n+        }\n+        else {",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "116ab2abae808d4072e833fbacc3d0ec8a6b2106",
      "in_reply_to_id": 115562631,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "kk",
      "created_at": "2017-05-09T19:22:33Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579513",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579513"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 915,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579645",
      "pull_request_review_id": 37129847,
      "id": 115579645,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTU3OTY0NQ==",
      "diff_hunk": "@@ -173,6 +173,10 @@ class CBlockPolicyEstimator\n private:\n     CFeeRate minTrackedFee;    //!< Passed to constructor to avoid dependency on main\n     unsigned int nBestSeenHeight;\n+    unsigned int firstRecordedHeight;\n+    unsigned int historicalFirst;",
      "path": "src/policy/fees.h",
      "position": null,
      "original_position": 5,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "1313cc7b2b297fc011894246a1378df3503f2be2",
      "in_reply_to_id": 115565503,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I wanted to get the file format change over and done with...",
      "created_at": "2017-05-09T19:23:19Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115579645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115579645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 195,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115756853",
      "pull_request_review_id": 37322682,
      "id": 115756853,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNTc1Njg1Mw==",
      "diff_hunk": "@@ -663,6 +664,29 @@ CFeeRate CBlockPolicyEstimator::estimateRawFee(int confTarget, double successThr\n     return CFeeRate(median);\n }\n \n+unsigned int CBlockPolicyEstimator::BlockSpan() const\n+{\n+    if (firstRecordedHeight == 0) return 0;\n+    assert(nBestSeenHeight >= firstRecordedHeight);\n+\n+    return nBestSeenHeight - firstRecordedHeight;\n+}\n+\n+unsigned int CBlockPolicyEstimator::HistoricalBlockSpan() const\n+{\n+    if (historicalFirst == 0) return 0;\n+    assert(historicalBest >= historicalFirst);\n+\n+    if (nBestSeenHeight - historicalBest > OLDEST_ESTIMATE_HISTORY) return 0;\n+\n+    return historicalBest - historicalFirst;\n+}\n+\n+unsigned int CBlockPolicyEstimator::MaxUsableEstimate() const\n+{\n+    // Block spans are divided by 2 to make sure there are enough potential failing data points for the estimate\n+    return std::min(longStats->GetMaxConfirms(), std::max(BlockSpan(), HistoricalBlockSpan()) / 2);",
      "path": "src/policy/fees.cpp",
      "position": 678,
      "original_position": 46,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "13cb4828886b2524c769578a9c24ec2b5d7fa744",
      "in_reply_to_id": 115568045,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "after actually doing this, it seemed uglier, so leaving it as is",
      "created_at": "2017-05-10T14:32:19Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r115756853",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/115756853"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 694,
      "original_line": 694,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116875382",
      "pull_request_review_id": 38531945,
      "id": 116875382,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjg3NTM4Mg==",
      "diff_hunk": "@@ -863,6 +863,78 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementation changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();\n+    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n+    if (!request.params[2].isNull()) {\n+        int horizonInt = request.params[2].get_int();\n+        if (horizonInt < 0 || horizonInt > 2) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n+        } else {\n+            horizon = (FeeEstimateHorizon)horizonInt;\n+        }\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    CFeeRate feeRate;\n+    EstimationResult buckets;\n+    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"decay\", buckets.decay));\n+    result.push_back(Pair(\"pass.startrange\", round(buckets.pass.start)));",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "4186d3fdfd319b568b520dd587be27bdff45c53d",
      "in_reply_to_id": null,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I haven't seen a '.' inside RPC output field names. Why not bundle these into a `pass` and `fail` Object? That's probably easier to parse for external libraries too.",
      "created_at": "2017-05-16T22:40:40Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r116875382",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116875382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 925,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116875576",
      "pull_request_review_id": 38531945,
      "id": 116875576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNjg3NTU3Ng==",
      "diff_hunk": "@@ -863,6 +863,79 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementaion changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 68,
      "original_position": 21,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "116ab2abae808d4072e833fbacc3d0ec8a6b2106",
      "in_reply_to_id": 115563021,
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The reason for asking is that while the output of this RPC may be implementation dependent, it would be nice if (to the extent possible), its arguments aren't. The specific buckets used seem much more likely to change in other revisions.\r\n\r\nJust a nit.",
      "created_at": "2017-05-16T22:41:55Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r116875576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/116875576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 892,
      "original_line": 892,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117071061",
      "pull_request_review_id": 38744679,
      "id": 117071061,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDExNzA3MTA2MQ==",
      "diff_hunk": "@@ -863,6 +863,78 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue estimaterawfee(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1|| request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"estimaterawfee nblocks (threshold horizon)\\n\"\n+            \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n+            \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n+            \"         implementation of fee estimation. The parameters it can be called with\\n\"\n+            \"         and the results it returns will change if the internal implementation changes.\\n\"\n+            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"confirmation within nblocks blocks if possible. Uses virtual transaction size as defined\\n\"\n+            \"in BIP 141 (witness data is discounted).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. nblocks     (numeric)\\n\"\n+            \"2. threshold   (numeric, optional) The proportion of transactions in a given feerate range that must have been\\n\"\n+            \"               confirmed within nblocks in order to consider those feerates as high enough and proceed to check\\n\"\n+            \"               lower buckets.  Default: 0.95\\n\"\n+            \"3. horizon     (numeric, optional) How long a history of estimates to consider. 0=short, 1=medium, 2=long.\\n\"\n+            \"               Default: 1\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"feerate\\\" : x.x,        (numeric) estimate fee-per-kilobyte (in BTC)\\n\"\n+            \"  \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n+            \"  \\\"pass.\\\"                 information about the lowest range of feerates to succeed in meeting the threshold\\n\"\n+            \"  \\\"fail.\\\"                 information about the highest range of feerates to fail to meet the threshold\\n\"\n+            \"  \\\"startrange\\\" : x.x,     (numeric) start of feerate range\\n\"\n+            \"  \\\"endrange\\\" : x.x,       (numeric) end of feerate range\\n\"\n+            \"  \\\"withintarget\\\" : x.x,   (numeric) number of txs over history horizon in the feerate range that were confirmed within target\\n\"\n+            \"  \\\"totalconfirmed\\\" : x.x, (numeric) number of txs over history horizon in the feerate range that were confirmed at any point\\n\"\n+            \"  \\\"inmempool\\\" : x.x,      (numeric) current number of txs in mempool in the feerate range unconfirmed for at least target blocks\\n\"\n+            \"}\\n\"\n+            \"\\n\"\n+            \"A negative feerate is returned if no answer can be given.\\n\"\n+            \"\\nExample:\\n\"\n+            + HelpExampleCli(\"estimaterawfee\", \"6 0.9 1\")\n+            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VNUM), true);\n+    RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n+    int nBlocks = request.params[0].get_int();\n+    double threshold = 0.95;\n+    if (!request.params[1].isNull())\n+        threshold = request.params[1].get_real();\n+    FeeEstimateHorizon horizon = FeeEstimateHorizon::MED_HALFLIFE;\n+    if (!request.params[2].isNull()) {\n+        int horizonInt = request.params[2].get_int();\n+        if (horizonInt < 0 || horizonInt > 2) {\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid horizon for fee estimates\");\n+        } else {\n+            horizon = (FeeEstimateHorizon)horizonInt;\n+        }\n+    }\n+    UniValue result(UniValue::VOBJ);\n+    CFeeRate feeRate;\n+    EstimationResult buckets;\n+    feeRate = ::feeEstimator.estimateRawFee(nBlocks, threshold, horizon, &buckets);\n+\n+    result.push_back(Pair(\"feerate\", feeRate == CFeeRate(0) ? -1.0 : ValueFromAmount(feeRate.GetFeePerK())));\n+    result.push_back(Pair(\"decay\", buckets.decay));\n+    result.push_back(Pair(\"pass.startrange\", round(buckets.pass.start)));",
      "path": "src/rpc/mining.cpp",
      "position": null,
      "original_position": 63,
      "commit_id": "38bc1ec4a473b5bd9b7bbce7b20a11e8edfe4b4c",
      "original_commit_id": "4186d3fdfd319b568b520dd587be27bdff45c53d",
      "in_reply_to_id": 116875382,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, that makes sense.  i will make this change",
      "created_at": "2017-05-17T18:01:29Z",
      "updated_at": "2017-05-17T19:43:25Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/10199#discussion_r117071061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/117071061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10199"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 925,
      "side": "RIGHT"
    }
  ]
}