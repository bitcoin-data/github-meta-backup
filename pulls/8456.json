{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456",
    "id": 80081887,
    "node_id": "MDExOlB1bGxSZXF1ZXN0ODAwODE4ODc=",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/8456",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/8456.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/8456.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/cc0243ad32cee1cc9faab317364b889beaf07647",
    "number": 8456,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "[RPC] Simplified bumpfee command.",
    "user": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This purports to be a simplified \"bumpfee\" RPC command.\n\nThis pull was motivated by the discussion in #7865, where at the end, the idea was floated of submitting a simplified version of the code. I put a little thought into how a simple \"bumpfee\" command should work and here is what I came up with:\n\n1) The user should specify which output to decrement in order to pay increased fee. This saves us from trying to figure out which address(es) are \"change\" addresses. This is preferable not only because it simplifies the code, but because as far as I can tell, the code that identifies change outputs is not particularly robust and may be modified in the future. If it's desirable to have user-friendly code that figures out which output to decrement, perhaps that logic could be placed in the GUI?\n\n2) The command should not add new inputs. In other words, if the user can't identify an output that can be decremented in an amount sufficient to bump the fee then the command should fail. It seems likely that the vast majority of the time, identifying such an output would not be a problem. Adding new inputs complicates the code because the size of the transaction increases, perhaps significantly, so then the user would have to pay more fee for that reason as well, as opposed to just bumping the fee on the tx as it currently exists.\n\n3) If the tx has descendant transactions, the bumped tx has to pay the fees for all of the descendants since they will get evicted from the mempool, and the rule as I understand it is that replacing a tx cannot cause the total fees in the mempool to go down.\n\nSo, the required inputs are the txid and the output index.\n\nThe optional inputs are:\n\n```\nconfirmTarget - perhaps the reason the user feels the need to bump the fee is because the original confirmTarget was too slow\ntotalFee - for full control, the user can simply specify how many satoshis to pay as a fee on the bumped transaction (this may be useful when the parent tx has children tx'es)\n```\n\nThis pull includes a python test.\n",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98279177,
        "node_id": "MDU6TGFiZWw5ODI3OTE3Nw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/RPC/REST/ZMQ",
        "name": "RPC/REST/ZMQ",
        "color": "0052cc",
        "default": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21",
      "html_url": "https://github.com/bitcoin/bitcoin/milestone/21",
      "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones/21/labels",
      "id": 1823680,
      "node_id": "MDk6TWlsZXN0b25lMTgyMzY4MA==",
      "number": 21,
      "state": "closed",
      "title": "0.14.0",
      "description": "",
      "creator": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 156,
      "created_at": "2016-06-13T14:18:51Z",
      "updated_at": "2017-03-08T16:39:44Z",
      "closed_at": "2017-03-08T16:39:44Z"
    },
    "active_lock_reason": "resolved",
    "created_at": "2016-08-04T13:52:22Z",
    "updated_at": "2021-09-08T11:23:49Z",
    "closed_at": "2017-01-19T18:59:36Z",
    "mergeable_state": "unknown",
    "merged_at": "2017-01-19T18:59:36Z",
    "merge_commit_sha": "cc0243ad32cee1cc9faab317364b889beaf07647",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "mrbandrews:ba-rpcbumpfee",
      "ref": "ba-rpcbumpfee",
      "sha": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 26927292,
        "node_id": "MDEwOlJlcG9zaXRvcnkyNjkyNzI5Mg==",
        "name": "bitcoin",
        "full_name": "mrbandrews/bitcoin",
        "owner": {
          "login": "mrbandrews",
          "id": 7504522,
          "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/mrbandrews",
          "html_url": "https://github.com/mrbandrews",
          "followers_url": "https://api.github.com/users/mrbandrews/followers",
          "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
          "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
          "repos_url": "https://api.github.com/users/mrbandrews/repos",
          "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/mrbandrews/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/mrbandrews/bitcoin",
        "archive_url": "https://api.github.com/repos/mrbandrews/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/mrbandrews/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/mrbandrews/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/mrbandrews/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/mrbandrews/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/mrbandrews/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/mrbandrews/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/mrbandrews/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/mrbandrews/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/mrbandrews/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/mrbandrews/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/mrbandrews/bitcoin/events",
        "forks_url": "https://api.github.com/repos/mrbandrews/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/mrbandrews/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/mrbandrews/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/mrbandrews/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/mrbandrews/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/mrbandrews/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/mrbandrews/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/mrbandrews/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/mrbandrews/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/mrbandrews/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/mrbandrews/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/mrbandrews/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/mrbandrews/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/mrbandrews/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/mrbandrews/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/mrbandrews/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:mrbandrews/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/mrbandrews/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/mrbandrews/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/mrbandrews/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/mrbandrews/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/mrbandrews/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/mrbandrews/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/mrbandrews/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/mrbandrews/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/mrbandrews/bitcoin/hooks",
        "svn_url": "https://github.com/mrbandrews/bitcoin",
        "homepage": "https://bitcoin.org/en/download",
        "language": "TypeScript",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 70794,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2017-01-19T16:30:39Z",
        "created_at": "2014-11-20T19:05:45Z",
        "updated_at": "2018-08-21T18:58:53Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "054d664215ca8d5f17d8aadbfc5b78a8dcd5115c",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69818,
        "watchers_count": 69818,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-06T22:16:48Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 715,
    "deletions": 14,
    "changed_files": 8,
    "commits": 3,
    "review_comments": 182,
    "comments": 40
  },
  "events": [
    {
      "event": "labeled",
      "id": 745720221,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDc0NTcyMDIyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/745720221",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-04T18:50:06Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "commented",
      "id": 237822346,
      "node_id": "MDEyOklzc3VlQ29tbWVudDIzNzgyMjM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/237822346",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-05T10:56:24Z",
      "updated_at": "2016-08-05T10:56:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks! Looks good.\nConcept ACK will review and test soon.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-237822346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3MjY6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3Mjk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3MzA6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3MzI6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3MzU6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3Mzk6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "line-commented",
      "id": null,
      "node_id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDc5NzE3NDE6djI=",
      "url": null,
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null
    },
    {
      "event": "labeled",
      "id": 747628373,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDc0NzYyODM3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/747628373",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-07T08:09:23Z",
      "label": {
        "name": "Wallet",
        "color": "02d7e1"
      }
    },
    {
      "event": "commented",
      "id": 241071499,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI0MTA3MTQ5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/241071499",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-19T16:50:24Z",
      "updated_at": "2016-08-19T16:50:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase and reviewers... setting 0.14 milestone.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-241071499",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "milestoned",
      "id": 761513772,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDc2MTUxMzc3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/761513772",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-08-19T16:50:28Z",
      "milestone": {
        "title": "0.14.0"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 827892517,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODI3ODkyNTE3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/827892517",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-18T17:49:09Z"
    },
    {
      "event": "commented",
      "id": 254590532,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NDU5MDUzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/254590532",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-18T18:07:09Z",
      "updated_at": "2016-10-18T18:07:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased and addressed feedback.\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-254590532",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "referenced",
      "id": 830476328,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDgzMDQ3NjMyOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/830476328",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "75ed0b32a8c87f4dea4c53a99d0e219fae621fa6",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/75ed0b32a8c87f4dea4c53a99d0e219fae621fa6",
      "created_at": "2016-10-20T12:01:45Z"
    },
    {
      "event": "referenced",
      "id": 830476330,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDgzMDQ3NjMzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/830476330",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f0125201167391bf21e5046318553b2bb1d3be5e",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/f0125201167391bf21e5046318553b2bb1d3be5e",
      "created_at": "2016-10-20T12:01:45Z"
    },
    {
      "event": "referenced",
      "id": 830476335,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDgzMDQ3NjMzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/830476335",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e73a5f1dfb9bfc8b4c09b28ae5bc6562518ee3e5",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/e73a5f1dfb9bfc8b4c09b28ae5bc6562518ee3e5",
      "created_at": "2016-10-20T12:01:45Z"
    },
    {
      "event": "commented",
      "id": 255210711,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTIxMDcxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255210711",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-20T19:55:23Z",
      "updated_at": "2016-10-20T19:55:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Needs rebase again...\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-255210711",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 832205852,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODMyMjA1ODUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/832205852",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-21T15:35:14Z"
    },
    {
      "event": "commented",
      "id": 255412618,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NTQxMjYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/255412618",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-21T15:44:36Z",
      "updated_at": "2016-10-21T15:44:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Rebased and edited to use JSONRPCRequest, consistent with #8788.\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-255412618",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 5350229,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MDIyOQ==",
      "url": null,
      "actor": null,
      "commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-5350229",
      "submitted_at": "2016-10-22T14:35:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 256217731,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjIxNzczMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256217731",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-26T00:30:55Z",
      "updated_at": "2016-10-26T00:37:43Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think it's very important for this command to actual figure out the change output on its own.  I understand that it's a bit messier and more fragile doing it here -- but it actually has enough information to do this, and by avoiding it, it just pushes that mess into the caller which comes at a very significant usability issue.\n\nCompare:\nTransaction stuck? Use `bumpfee $txid`\n\nvs\n\nTransaction stuck? First use `gettransaction $txid`, and now get the data from the \"hex\" field to feed into `decoderawtransaction $hex`  now go through the \"vout\" fields until you find \"addresses\" nested in the \"scriptPubKey\". Now try figure out which is a change address. (I can't even see this exposed over rpc at all?). So maybe go `validateaddress $address` and check the `ismine` field. If one of them is yours, but the other one isn't -- then the one that is yours is a change address, so now go back through the results of `decoderawtransaction` to figure out which index that is. And finally `bumpfee $txid $index`.  Oh yeah, becareful to handle all the edge cases, like the transaction only having 1 output, some of the outputs not having address, both having the same address etc.\n\nI think you'll find the usability problem of needing to know the index will prevent the majority of use by users and services for this =)\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256217731",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 256218209,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1NjIxODIwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256218209",
      "actor": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-26T00:34:39Z",
      "updated_at": "2016-10-26T00:35:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "Also ideally, I think the `txid` argument should be an array of transaction ids to bump. And then it creates a single transaction that bumps the fees on all of those transactions (stripping out extraneous change outputs as it goes). However, I imagine this can be done separately and later as the `txid` argument could be overloaded to either accept a string or array of strings?\n",
      "user": {
        "login": "RHavar",
        "id": 9326759,
        "node_id": "MDQ6VXNlcjkzMjY3NTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/RHavar",
        "html_url": "https://github.com/RHavar",
        "followers_url": "https://api.github.com/users/RHavar/followers",
        "following_url": "https://api.github.com/users/RHavar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/RHavar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/RHavar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
        "organizations_url": "https://api.github.com/users/RHavar/orgs",
        "repos_url": "https://api.github.com/users/RHavar/repos",
        "events_url": "https://api.github.com/users/RHavar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/RHavar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256218209",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 5931993,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzMTk5Mw==",
      "url": null,
      "actor": null,
      "commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Overall seems like the right behavior for bumpfee, just a few minor suggestions.\n\nIt seems that the descendants fee adds additional complexity that probably can't be addressed in the scope of this PR but at least could merit some documentation so that a stuck user can find out what's wrong. \n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-5931993",
      "submitted_at": "2016-10-26T20:52:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 256770931,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1Njc3MDkzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/256770931",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-10-27T21:10:51Z",
      "updated_at": "2016-10-27T21:10:51Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed JeremyRubin feedback, edited the python test, and made a few other small changes I noticed with further testing. \n\nRHavar:  I understand your point but I still think it's better for this command to be low-level and not fragile.  A more user-friendly RPC (e.g., \"bumpfeeauto\" or something) could be layered on top, identifying the change output and then using this code.  Then if the change-output-identifying code breaks, it might break the user-friendly version but it wouldn't dismantle RBF entirely. \n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-256770931",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 259954550,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk1NDU1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259954550",
      "actor": {
        "login": "Victorsueca",
        "id": 11365204,
        "node_id": "MDQ6VXNlcjExMzY1MjA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/11365204?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Victorsueca",
        "html_url": "https://github.com/Victorsueca",
        "followers_url": "https://api.github.com/users/Victorsueca/followers",
        "following_url": "https://api.github.com/users/Victorsueca/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Victorsueca/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Victorsueca/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Victorsueca/subscriptions",
        "organizations_url": "https://api.github.com/users/Victorsueca/orgs",
        "repos_url": "https://api.github.com/users/Victorsueca/repos",
        "events_url": "https://api.github.com/users/Victorsueca/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Victorsueca/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-11T13:13:31Z",
      "updated_at": "2016-11-11T13:16:00Z",
      "author_association": "NONE",
      "body": "ACK f3833f4\nTested on Windows x64\n\n```\nbumpfee 8c56b13830405a55ec4bc58b26b531f1b187d2349ee19bd0dd01aa835972929a 1\n\n{\n  \"txid\": \"67d6af1a3e29e246eaef0b7ce272f745e2ae6178050ccb78fca515b13c0f9e92\",\n  \"oldfee\": 0.00000260,\n  \"fee\": 0.00000520\n}\n```\n",
      "user": {
        "login": "Victorsueca",
        "id": 11365204,
        "node_id": "MDQ6VXNlcjExMzY1MjA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/11365204?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Victorsueca",
        "html_url": "https://github.com/Victorsueca",
        "followers_url": "https://api.github.com/users/Victorsueca/followers",
        "following_url": "https://api.github.com/users/Victorsueca/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Victorsueca/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Victorsueca/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Victorsueca/subscriptions",
        "organizations_url": "https://api.github.com/users/Victorsueca/orgs",
        "repos_url": "https://api.github.com/users/Victorsueca/repos",
        "events_url": "https://api.github.com/users/Victorsueca/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Victorsueca/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-259954550",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 8194636,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE5NDYzNg==",
      "url": null,
      "actor": null,
      "commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8194636",
      "submitted_at": "2016-11-11T13:18:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 8194716,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE5NDcxNg==",
      "url": null,
      "actor": null,
      "commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8194716",
      "submitted_at": "2016-11-11T13:19:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 8195025,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE5NTAyNQ==",
      "url": null,
      "actor": null,
      "commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8195025",
      "submitted_at": "2016-11-11T13:22:38Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 8195411,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODE5NTQxMQ==",
      "url": null,
      "actor": null,
      "commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8195411",
      "submitted_at": "2016-11-11T13:25:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 259957619,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI1OTk1NzYxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/259957619",
      "actor": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-11T13:31:11Z",
      "updated_at": "2016-11-11T13:31:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh. I just realized that this PR does not add new inputs (it requires an output index to identify the change-output which then can be reduced).\n\nIMO we should...\n\n1.) not let the user identify which output is change\n2.) allow bumping fees including adding new inputs (some transactions do not have a change output, some will not allow a reasonable bumping without adding a new input).\n\nBut 1.) & 2.) can also be solved later.\n",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-259957619",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 260387468,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2MDM4NzQ2OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/260387468",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-14T16:38:21Z",
      "updated_at": "2016-11-14T16:38:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Feedback addressed.  Good catch on checking whether the tx had already been mined - that code was able to be shortened to a single line.\nYes, the approach of this PR is to solve 1) and 2) later.\nIf this looks good I'll squash the commits. \n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-260387468",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 8471777,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ3MTc3Nw==",
      "url": null,
      "actor": null,
      "commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8471777",
      "submitted_at": "2016-11-14T19:49:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 8472577,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODQ3MjU3Nw==",
      "url": null,
      "actor": null,
      "commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-8472577",
      "submitted_at": "2016-11-15T21:52:52Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "mentioned",
      "id": 862962393,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODYyOTYyMzkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/862962393",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T15:25:00Z"
    },
    {
      "event": "subscribed",
      "id": 862962394,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg2Mjk2MjM5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/862962394",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T15:25:00Z"
    },
    {
      "event": "mentioned",
      "id": 862962396,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODYyOTYyMzk2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/862962396",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T15:25:00Z"
    },
    {
      "event": "subscribed",
      "id": 862962397,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg2Mjk2MjM5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/862962397",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T15:25:00Z"
    },
    {
      "event": "commented",
      "id": 261294348,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTI5NDM0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261294348",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-17T16:26:00Z",
      "updated_at": "2016-11-17T16:26:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "morcos feedback addressed, including adding the first commit from #9167. \n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-261294348",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 9541621,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTU0MTYyMQ==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9541621",
      "submitted_at": "2016-11-21T21:04:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "mentioned",
      "id": 867260480,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODY3MjYwNDgw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/867260480",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-21T21:28:01Z"
    },
    {
      "event": "subscribed",
      "id": 867260481,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg2NzI2MDQ4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/867260481",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-21T21:28:01Z"
    },
    {
      "event": "mentioned",
      "id": 869309269,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODY5MzA5MjY5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/869309269",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-23T07:33:31Z"
    },
    {
      "event": "subscribed",
      "id": 869309270,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg2OTMwOTI3MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/869309270",
      "actor": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-11-23T07:33:31Z"
    },
    {
      "event": "reviewed",
      "id": 9810981,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgxMDk4MQ==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "IMO the main logic should probably be split up into non-RPC files so it can be reused in the GUI...",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9810981",
      "submitted_at": "2016-11-23T07:34:34Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 9812244,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgxMjI0NA==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9812244",
      "submitted_at": "2016-11-23T07:35:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 9816759,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgxNjc1OQ==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9816759",
      "submitted_at": "2016-11-23T08:24:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 9816778,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgxNjc3OA==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9816778",
      "submitted_at": "2016-11-23T08:24:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 9824056,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgyNDA1Ng==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9824056",
      "submitted_at": "2016-11-23T09:24:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 9833016,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3OTgzMzAxNg==",
      "url": null,
      "actor": null,
      "commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-9833016",
      "submitted_at": "2016-11-23T10:20:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 879019809,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODc5MDE5ODA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/879019809",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-01T19:46:01Z"
    },
    {
      "event": "commented",
      "id": 264275910,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDI3NTkxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264275910",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-01T19:52:49Z",
      "updated_at": "2016-12-01T19:52:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "OK, rebased and squashed, with edits addressing the most recent feedback in a separate commit.\r\n\r\nI didn't separate code into non-rpc files because I'm not 100% sure which logic should be moved, and thought this decision could be made when using it from the GUI, as moving the code then should be easy enough. \r\n \r\n\r\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264275910",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 11288639,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTEyODg2Mzk=",
      "url": null,
      "actor": null,
      "commit_id": "7d9f218dab0b4b152490923b5723061358b0f110",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-11288639",
      "submitted_at": "2016-12-04T04:48:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 264734557,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NDczNDU1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/264734557",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-04T21:55:15Z",
      "updated_at": "2016-12-04T21:55:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "Asking the user to identify change is unreasonable and dangerous.  Within our own wallet we should know which outputs are our own.  This also has a problem of creating a mess when the original version of the transaction it spent, but later sends may have spent the replacements output.\r\n\r\nI would suggest that a minimal bump-fee would do this:\r\n\r\n(1) Only be available on transactions where none of their outputs have been spent (even in mempool).\r\n(2) Preserve all the user provided outputs, potentially changing the change amount, potentially adding more inputs if needed to get past dust or just sufficient fees. Obey the opt-in RBF minimum increment\r\n(3) Mark its local output(s) as unspendable until confirmed.\r\n\r\n1/3 are required so that we don't end up with a mess when the 'wrong' version of the transaction confirms and invalidates the others.\r\n\r\nA somewhat more advanced -- and perhaps better to do instead-- would be a \"bumpunconfirmed\" which would not act on a single transaction but on all valid unconfirmed sends of the local wallet at once--  generating a single replacement transaction which conflicts each of the originals, pays a higher fee, and marks its own output as unspendable until confirmed.\r\n\r\nI suggest this might be better instead because it  would not need to have the requirement that its local outputs not be unspent, since it would replace all those spends at once. The reduced number of change outputs plus the ability to drop some of the inputs (so long as it still conflicts, and still marks them as unspendable until this transaction confirms) means that it can reduce the total transaction sizes. \r\n\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264734557",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 888760337,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODg4NzYwMzM3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/888760337",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-09T18:51:54Z"
    },
    {
      "event": "commented",
      "id": 266093096,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjA5MzA5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266093096",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-09T18:59:00Z",
      "updated_at": "2016-12-09T18:59:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "Addressed the gmaxwell feedback as follows: now it identifies the change output and guards against spending outputs until the bumped transaction (or perhaps the original transaction) is mined.\r\n\r\nI reorganized this into two commits, the latter being the python test, which is updated. ",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266093096",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "mentioned",
      "id": 889120252,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODg5MTIwMjUy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/889120252",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-10T00:32:39Z"
    },
    {
      "event": "subscribed",
      "id": 889120253,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg4OTEyMDI1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/889120253",
      "actor": {
        "login": "pstratem",
        "id": 620611,
        "node_id": "MDQ6VXNlcjYyMDYxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pstratem",
        "html_url": "https://github.com/pstratem",
        "followers_url": "https://api.github.com/users/pstratem/followers",
        "following_url": "https://api.github.com/users/pstratem/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/pstratem/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/pstratem/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
        "organizations_url": "https://api.github.com/users/pstratem/orgs",
        "repos_url": "https://api.github.com/users/pstratem/repos",
        "events_url": "https://api.github.com/users/pstratem/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/pstratem/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-10T00:32:39Z"
    },
    {
      "event": "reviewed",
      "id": 12334073,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTIzMzQwNzM=",
      "url": null,
      "actor": null,
      "commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-12334073",
      "submitted_at": "2016-12-10T00:34:09Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 266163465,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjE2MzQ2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266163465",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-10T00:51:10Z",
      "updated_at": "2016-12-10T00:51:10Z",
      "author_association": "MEMBER",
      "body": "I wonder if this ought to interact with abandontransaction in some way?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266163465",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "mentioned",
      "id": 890431588,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50ODkwNDMxNTg4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/890431588",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-12T14:30:36Z"
    },
    {
      "event": "subscribed",
      "id": 890431589,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDg5MDQzMTU4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/890431589",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-12T14:30:36Z"
    },
    {
      "event": "reviewed",
      "id": 12493443,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI0OTM0NDM=",
      "url": null,
      "actor": null,
      "commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks pretty good to me overall, though there's one bug here (after #8850) that needs to be fixed, plus some doc fixes to reflect the changes that have been made in this PR from when it was first opened.\r\n\r\nAlso, I think bumpfee.py should be added to rpc-tests.py.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-12493443",
      "submitted_at": "2016-12-12T18:57:21Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 892391812,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODkyMzkxODEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/892391812",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T17:39:04Z"
    },
    {
      "event": "commented",
      "id": 266810046,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjgxMDA0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266810046",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T17:49:36Z",
      "updated_at": "2016-12-13T17:49:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a new commit addressing the recent feedback and rebased due to a conflict in rpc-tests.py.\r\n\r\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-266810046",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 892454971,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODkyNDU0OTcx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/892454971",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-13T18:23:11Z"
    },
    {
      "event": "reviewed",
      "id": 12965641,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTI5NjU2NDE=",
      "url": null,
      "actor": null,
      "commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks good. Lots of nitpicky comments, nothing major.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-12965641",
      "submitted_at": "2016-12-14T20:13:35Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895481395,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1NDgxMzk1",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895481395",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:31:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895496847,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1NDk2ODQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895496847",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:42:01Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895508006,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1NTA4MDA2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895508006",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:48:48Z"
    },
    {
      "event": "commented",
      "id": 267380319,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzM4MDMxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267380319",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T16:55:58Z",
      "updated_at": "2016-12-15T16:55:58Z",
      "author_association": "CONTRIBUTOR",
      "body": "Pushed a new commit addressing ryanofsky's feedback.  \r\n\r\nI removed the maxFee option.  The rationale for this option was to have a more conservative tx fee limit for a bumpfee user, as the default maxTxFee (0.1 btc) is quite high and in particular, if bumping fee on a transaction with lots of descendants a user might end up paying a pretty high fee for the parent transaction alone (since the descendants would be removed).  Since the new approach is to not allow bumpfee to be used on a tx with descendants at all, this rationale mostly goes away and I think the maxFee option is not worth it. \r\n\r\nI moved the python test above 'nulldummy.py' in the pull-tester list for the purpose of avoiding a conflict.\r\n \r\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-267380319",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895792956,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1NzkyOTU2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895792956",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T20:13:28Z"
    },
    {
      "event": "commented",
      "id": 267432232,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzQzMjIzMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267432232",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T20:15:50Z",
      "updated_at": "2016-12-15T20:15:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "I got a travis failure I think due to the default transaction version=2, which caused a failure in the python test.  I corrected the test, rebased, and force-pushed.\r\n",
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-267432232",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 895803607,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50ODk1ODAzNjA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/895803607",
      "actor": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2016-12-15T20:21:39Z"
    },
    {
      "event": "reviewed",
      "id": 13692154,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTM2OTIxNTQ=",
      "url": null,
      "actor": null,
      "commit_id": "244319366ef1e5e4991c4184db20c53ff73a8622",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-13692154",
      "submitted_at": "2016-12-20T04:38:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "referenced",
      "id": 901148849,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTE0ODg0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901148849",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "844f0e14c424cd2b4244eeaac6f1e96dc9629dbe",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/844f0e14c424cd2b4244eeaac6f1e96dc9629dbe",
      "created_at": "2016-12-21T05:56:59Z"
    },
    {
      "event": "referenced",
      "id": 901148850,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTE0ODg1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901148850",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "60d8e8c94d7327d6a6014f74324fe2336c1fdb9f",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/60d8e8c94d7327d6a6014f74324fe2336c1fdb9f",
      "created_at": "2016-12-21T05:56:59Z"
    },
    {
      "event": "referenced",
      "id": 901148852,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTE0ODg1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901148852",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "3645224caa662a514a4d2d98de4dc1ce1d7f558d",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/3645224caa662a514a4d2d98de4dc1ce1d7f558d",
      "created_at": "2016-12-21T05:56:59Z"
    },
    {
      "event": "referenced",
      "id": 901148853,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTE0ODg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901148853",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "9111809b2ae68905fa81f46938624fb85cc32ceb",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/9111809b2ae68905fa81f46938624fb85cc32ceb",
      "created_at": "2016-12-21T05:56:59Z"
    },
    {
      "event": "referenced",
      "id": 901148854,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkwMTE0ODg1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/901148854",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "871840232765a795e2d8d00e718e6f96418e9680",
      "commit_url": "https://api.github.com/repos/bitcoinknots/bitcoin/commits/871840232765a795e2d8d00e718e6f96418e9680",
      "created_at": "2016-12-21T05:56:59Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 911385553,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTExMzg1NTUz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/911385553",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-04T16:03:42Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 911387554,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTExMzg3NTU0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/911387554",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-04T16:04:59Z"
    },
    {
      "event": "reviewed",
      "id": 15345817,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzNDU4MTc=",
      "url": null,
      "actor": null,
      "commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A couple nits that you can take or leave, and one minor bug that should be fixed.  Did some light testing (including review of the bumpfee.py test included here) and this otherwise looks good to me.",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-15345817",
      "submitted_at": "2017-01-05T20:17:15Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 914139459,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTE0MTM5NDU5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/914139459",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:10:42Z"
    },
    {
      "event": "commented",
      "id": 270928450,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDkyODQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270928450",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:32:50Z",
      "updated_at": "2017-01-09T18:11:01Z",
      "author_association": "MEMBER",
      "body": "~ACK b1a06207ed57425e0e4cccaad4588485d4483b08 (feel free to squash).~ EDIT: ACK pending resolution of https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95196336\r\n\r\nI believe all of @gmaxwell's comments in https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-264734557 have been addressed, with the exception of being able to add new inputs to a transaction to bump the fee.  I think that would be a fine improvement for the future, but I think this is still a useful feature even without it, so I don't think that should be a merge blocker.  @gmaxwell -- what do you think?",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-270928450",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "mentioned",
      "id": 914168933,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTE0MTY4OTMz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/914168933",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:32:50Z"
    },
    {
      "event": "subscribed",
      "id": 914168937,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDkxNDE2ODkzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/914168937",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:32:50Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 914177978,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTE0MTc3OTc4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/914177978",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:39:43Z"
    },
    {
      "event": "commented",
      "id": 270930464,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MDkzMDQ2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/270930464",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-06T15:41:09Z",
      "updated_at": "2017-01-06T15:41:09Z",
      "author_association": "MEMBER",
      "body": "Squashed b1a06207ed57425e0e4cccaad4588485d4483b08 -> f4fa93b29a59c6d0f0341f442fd1805972b43ca1.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-270930464",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "mentioned",
      "id": 916222928,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTE2MjIyOTI4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/916222928",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-09T16:54:09Z"
    },
    {
      "event": "subscribed",
      "id": 916222929,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDkxNjIyMjkyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/916222929",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-09T16:54:09Z"
    },
    {
      "event": "reviewed",
      "id": 15743456,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU3NDM0NTY=",
      "url": null,
      "actor": null,
      "commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-15743456",
      "submitted_at": "2017-01-09T16:54:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 15756715,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU3NTY3MTU=",
      "url": null,
      "actor": null,
      "commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-15756715",
      "submitted_at": "2017-01-09T17:57:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 15759605,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU3NTk2MDU=",
      "url": null,
      "actor": null,
      "commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-15759605",
      "submitted_at": "2017-01-09T18:12:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 15777019,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU3NzcwMTk=",
      "url": null,
      "actor": null,
      "commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-15777019",
      "submitted_at": "2017-01-09T19:33:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 271384781,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTM4NDc4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/271384781",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-09T19:35:09Z",
      "updated_at": "2017-01-09T19:35:09Z",
      "author_association": "MEMBER",
      "body": "ACK modulo comments above.  ",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271384781",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjZlOGE0MGI0NzgzNTNhODk2MjJmNDI4MDlkZGIxMWU2OTVhMGM5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/766e8a40b478353a89622f42809ddb11e695a0c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/766e8a40b478353a89622f42809ddb11e695a0c9",
      "tree": {
        "sha": "9684f52d1c11174b940e36e3f0ea5c209ef2d367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9684f52d1c11174b940e36e3f0ea5c209ef2d367"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5754e0341b7c033d4caf99534aca47e9981bd7ed",
          "sha": "5754e0341b7c033d4caf99534aca47e9981bd7ed",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/5754e0341b7c033d4caf99534aca47e9981bd7ed"
        }
      ],
      "message": "[wallet] Add IsAllFromMe: true if all inputs are from wallet",
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-01-10T13:14:50Z"
      },
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-12-09T20:31:06Z"
      },
      "sha": "766e8a40b478353a89622f42809ddb11e695a0c9"
    },
    {
      "event": "commented",
      "id": 271675511,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTY3NTUxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/271675511",
      "actor": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-10T19:37:44Z",
      "updated_at": "2017-01-10T19:37:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK, needs rebase.",
      "user": {
        "login": "jtimon",
        "id": 1008458,
        "node_id": "MDQ6VXNlcjEwMDg0NTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jtimon",
        "html_url": "https://github.com/jtimon",
        "followers_url": "https://api.github.com/users/jtimon/followers",
        "following_url": "https://api.github.com/users/jtimon/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jtimon/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jtimon/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
        "organizations_url": "https://api.github.com/users/jtimon/orgs",
        "repos_url": "https://api.github.com/users/jtimon/repos",
        "events_url": "https://api.github.com/users/jtimon/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jtimon/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271675511",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 918301067,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTE4MzAxMDY3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/918301067",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-10T22:43:08Z"
    },
    {
      "event": "commented",
      "id": 271722085,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MTcyMjA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/271722085",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-10T22:44:11Z",
      "updated_at": "2017-01-10T22:44:11Z",
      "author_association": "MEMBER",
      "body": "Rebased to handle named arguments.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-271722085",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 16142046,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYxNDIwNDY=",
      "url": null,
      "actor": null,
      "commit_id": "b0d4f9323250d81b53668362413134bc7a13d998",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16142046",
      "submitted_at": "2017-01-11T14:00:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 919253458,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTE5MjUzNDU4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/919253458",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-11T15:14:13Z"
    },
    {
      "event": "commented",
      "id": 272049263,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjA0OTI2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272049263",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T01:26:27Z",
      "updated_at": "2017-01-12T01:26:27Z",
      "author_association": "CONTRIBUTOR",
      "body": "I believe this should make the new transaction non-RBF replaceable.  (1) we currently won't replace it, (2) if someone made an original payment and the receiver is squaking because it's replaceable, a mechanism is needed to issue a non-replacable version.   Since we won't replace it, we can do this in one step.   Does this make sense? ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272049263",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 272050079,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjA1MDA3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272050079",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T01:31:36Z",
      "updated_at": "2017-01-12T01:31:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hm. I expected this to change the walletrbf default. ",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272050079",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 16296522,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTYyOTY1MjI=",
      "url": null,
      "actor": null,
      "commit_id": "a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16296522",
      "submitted_at": "2017-01-12T06:38:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 272136812,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjEzNjgxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272136812",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T11:09:19Z",
      "updated_at": "2017-01-12T13:54:56Z",
      "author_association": "MEMBER",
      "body": "> Hm. I expected this to change the walletrbf default.\r\n\r\nI don't think we should change that last-minute for 0.14 (only mentioning that because this is tagged 0.14).\r\n\r\nEdit: Concept ACK otherwise.",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272136812",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "referenced",
      "id": 920887679,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyMDg4NzY3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/920887679",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "700af943fe08cd0491875e4cb0b09fcf49e549e1",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/700af943fe08cd0491875e4cb0b09fcf49e549e1",
      "created_at": "2017-01-12T15:30:25Z"
    },
    {
      "event": "commented",
      "id": 272193979,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjE5Mzk3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272193979",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T15:33:00Z",
      "updated_at": "2017-01-12T15:33:00Z",
      "author_association": "MEMBER",
      "body": "Created https://github.com/bitcoin/bitcoin/pull/9527 for changing the walletrbf default.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272193979",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 272256286,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjI1NjI4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272256286",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T19:22:07Z",
      "updated_at": "2017-01-12T19:22:07Z",
      "author_association": "MEMBER",
      "body": "Added replaceable option in 8d3cd2844b844cad92d741d848ee0ffebdffef40, to allow users to create replacement transactions that are not replaceable.\r\n\r\nI ran into a lot of spurious errors related to `fundrawtransaction` in the bumpfee tests while trying to add a simple test for this. fundrawtransaction would sometimes chose different sized inputs than the `small_output_fails` and `dust_to_fee tests` were expecting, so I rewrote these tests in 13960f870c1ba94f391012f9c9243c59951ea6ab to manually create RBF transactions with the right inputs.\r\n\r\nI also ran into problems with `fundrawtransaction` using up all the right-sized inputs before these tests could use them, so I changed the order of the tests so they would run before any fundrawtransaction calls.\r\n\r\nI also ran into problems with `fundrawtransaction` sometimes chosing a higher fee for the RBF transaction than the `test_rebumping` test expected, causing the bumpfee command in the test to fail with an \"Invalid totalFee, must be at least ...\" error. I did not figure out what was causing this, but it seemed to somehow be related to the number of `peer_node.sendtoaddress(rbf_node_address, 0.001)` calls made during the test setup.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272256286",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 272280878,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjI4MDg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272280878",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T20:56:01Z",
      "updated_at": "2017-01-12T20:56:01Z",
      "author_association": "MEMBER",
      "body": "re-ACK 8d3cd28",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272280878",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 272284948,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjI4NDk0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272284948",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-12T21:12:23Z",
      "updated_at": "2017-01-12T21:12:23Z",
      "author_association": "MEMBER",
      "body": "tested ACK 8d3cd28\r\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272284948",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 922279384,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTIyMjc5Mzg0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/922279384",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-13T14:01:01Z"
    },
    {
      "event": "commented",
      "id": 272449558,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MjQ0OTU1OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272449558",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-13T14:02:36Z",
      "updated_at": "2017-01-13T14:02:36Z",
      "author_association": "MEMBER",
      "body": "Squashed 8d3cd2844b844cad92d741d848ee0ffebdffef40 -> 1d71fd0dab96430643b818ea993acea2aaa09256",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272449558",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 16460005,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY0NjAwMDU=",
      "url": null,
      "actor": null,
      "commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK with random nits. If you were to make one change I think printing out the necessary flat fee on rejection(for whatever reason) would be a solid improvement.",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16460005",
      "submitted_at": "2017-01-13T15:12:14Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 16601686,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MDE2ODY=",
      "url": null,
      "actor": null,
      "commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16601686",
      "submitted_at": "2017-01-13T16:36:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 16620382,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2MjAzODI=",
      "url": null,
      "actor": null,
      "commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Only reviewed parts of the wallet.cpp stuff just yet, but figured I'd post it now.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16620382",
      "submitted_at": "2017-01-13T18:31:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "referenced",
      "id": 922802669,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyMjgwMjY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/922802669",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "created_at": "2017-01-13T20:41:48Z"
    },
    {
      "event": "mentioned",
      "id": 922979912,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTIyOTc5OTEy",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/922979912",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-13T23:26:29Z"
    },
    {
      "event": "subscribed",
      "id": 922979913,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDkyMjk3OTkxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/922979913",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-13T23:26:29Z"
    },
    {
      "event": "reviewed",
      "id": 16671446,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY2NzE0NDY=",
      "url": null,
      "actor": null,
      "commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Almost there... (if you could use braces more, that'd be nice, but not critical)",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16671446",
      "submitted_at": "2017-01-13T23:40:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 16725044,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY3MjUwNDQ=",
      "url": null,
      "actor": null,
      "commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Implemented suggestions from @luke-jr in 23c389ab8697bc0040cfd45a32d282906554a84a, adding braces to all if statements, and making most of the other requested changes.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16725044",
      "submitted_at": "2017-01-15T23:22:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 272750912,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mjc1MDkxMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272750912",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-16T00:39:22Z",
      "updated_at": "2017-01-16T22:58:48Z",
      "author_association": "MEMBER",
      "body": "I know other ways of calling getbalance are pretty broken (#8183), but I think we need to fix a bit of how bumpfee interacts with getbalance \"\\*\". In testing I got getbalance \"\\*\" to give me a negative number, which seems super shitty.\r\n\r\nAdditionally, we need documentation on how bumpfee interacts with listunspent. While I dont mind the change outputs from bumpfee not appearing in the results, this is likely to be surprising to users (I believe this only otherwise occurs if the transaction was abandoned), so needs documented.",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272750912",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 16731890,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY3MzE4OTA=",
      "url": null,
      "actor": null,
      "commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16731890",
      "submitted_at": "2017-01-16T02:10:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 272760263,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mjc2MDI2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/272760263",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-16T02:30:13Z",
      "updated_at": "2017-01-16T02:30:13Z",
      "author_association": "MEMBER",
      "body": "@TheBlueMatt I don't see how this PR has any affect on any of the getbalance calls.  I think what you are seeing is pre-existing misbehavior for multiple spends of the same outputs being present in the wallet.   \r\n\r\nI went through all the calls to AvailableCoins (which is the only thing this PR changes) and I think the only open decision is deciding what we want the interaction with listunspent to be and documenting it.\r\n\r\n",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-272760263",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "mentioned",
      "id": 923729768,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50OTIzNzI5NzY4",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/923729768",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-16T02:30:13Z"
    },
    {
      "event": "subscribed",
      "id": 923729769,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDkyMzcyOTc2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/923729769",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-16T02:30:13Z"
    },
    {
      "event": "reviewed",
      "id": 16908479,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY5MDg0Nzk=",
      "url": null,
      "actor": null,
      "commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16908479",
      "submitted_at": "2017-01-17T01:33:53Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "reviewed",
      "id": 16910930,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTY5MTA5MzA=",
      "url": null,
      "actor": null,
      "commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-16910930",
      "submitted_at": "2017-01-17T02:08:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "referenced",
      "id": 925996753,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyNTk5Njc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/925996753",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "32c01603a90a08459814852ba0c531c5b08091ec",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/32c01603a90a08459814852ba0c531c5b08091ec",
      "created_at": "2017-01-17T15:49:17Z"
    },
    {
      "event": "reviewed",
      "id": 17025124,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcwMjUxMjQ=",
      "url": null,
      "actor": null,
      "commit_id": "759a7cd0b602003dc1dc990b8fca5025bd03ae7e",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-17025124",
      "submitted_at": "2017-01-17T16:01:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 926042281,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI2MDQyMjgx",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926042281",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T16:14:58Z"
    },
    {
      "event": "referenced",
      "id": 926042289,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyNjA0MjI4OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926042289",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2fd0475e98c468e372ed54258cf2aa7e68007b15",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/2fd0475e98c468e372ed54258cf2aa7e68007b15",
      "created_at": "2017-01-17T16:14:58Z"
    },
    {
      "event": "referenced",
      "id": 926065200,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyNjA2NTIwMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926065200",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ceeecad175b7e9f8c373f396ecc610c9ecb9c4b8",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/ceeecad175b7e9f8c373f396ecc610c9ecb9c4b8",
      "created_at": "2017-01-17T16:27:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 926116993,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI2MTE2OTkz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926116993",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T16:57:14Z"
    },
    {
      "event": "referenced",
      "id": 926117019,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyNjExNzAxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926117019",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0f83aa3a1e1b2668a6231a1660ed864e2da3a341",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/0f83aa3a1e1b2668a6231a1660ed864e2da3a341",
      "created_at": "2017-01-17T16:57:15Z"
    },
    {
      "event": "referenced",
      "id": 926117022,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyNjExNzAyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926117022",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a29b3f557fe8b7bb8e1b28933f3d5a4a3a36d362",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/a29b3f557fe8b7bb8e1b28933f3d5a4a3a36d362",
      "created_at": "2017-01-17T16:57:15Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 926130760,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI2MTMwNzYw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926130760",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T17:05:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 926137097,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI2MTM3MDk3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926137097",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T17:09:12Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 926152666,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI2MTUyNjY2",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/926152666",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T17:19:13Z"
    },
    {
      "event": "commented",
      "id": 273235705,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzIzNTcwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273235705",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T17:20:09Z",
      "updated_at": "2017-01-17T17:20:09Z",
      "author_association": "MEMBER",
      "body": "Squashed 28fd457a73fc6291f72d89d9dd3532ada9ebe35c -> ce3a363049bf8fdd8be926ca3ab8c803c98de6d2.",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273235705",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 273249816,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzI0OTgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273249816",
      "actor": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T18:08:18Z",
      "updated_at": "2017-01-17T18:08:18Z",
      "author_association": "MEMBER",
      "body": "utACK ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273249816",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 273250019,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzI1MDAxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273250019",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-17T18:09:11Z",
      "updated_at": "2017-01-17T18:09:11Z",
      "author_association": "MEMBER",
      "body": "tested previous iteration ACK ce3a363",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273250019",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 17286929,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcyODY5Mjk=",
      "url": null,
      "actor": null,
      "commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-17286929",
      "submitted_at": "2017-01-18T18:06:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "commented",
      "id": 273584313,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzU4NDMxMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273584313",
      "actor": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-18T19:59:55Z",
      "updated_at": "2017-01-18T19:59:55Z",
      "author_association": "MEMBER",
      "body": "utACK ce3a363049bf8fdd8be926ca3ab8c803c98de6d2 (reviewed diff from last iteration I tested and ACKed above).",
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273584313",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 17287177,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTcyODcxNzc=",
      "url": null,
      "actor": null,
      "commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Looks okay. A few suggested changes, but not a big deal if they don't go in.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-17287177",
      "submitted_at": "2017-01-18T20:12:21Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "referenced",
      "id": 928101559,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyODEwMTU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/928101559",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "4beb7c92c70b7668042383d37c49545198aa00cd",
      "commit_url": "https://api.github.com/repos/mrbandrews/bitcoin/commits/4beb7c92c70b7668042383d37c49545198aa00cd",
      "created_at": "2017-01-18T20:30:20Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmRkZTY2NzcwZDgzM2VlNWU0MmU3YzVmZWU2MTA0NTNhZTM4NTJh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52dde66770d833ee5e42e7c5fee610453ae3852a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/52dde66770d833ee5e42e7c5fee610453ae3852a",
      "tree": {
        "sha": "1cb223500d2737ffe81a3578df430e27ffaca8e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cb223500d2737ffe81a3578df430e27ffaca8e7"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/766e8a40b478353a89622f42809ddb11e695a0c9",
          "sha": "766e8a40b478353a89622f42809ddb11e695a0c9",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/766e8a40b478353a89622f42809ddb11e695a0c9"
        }
      ],
      "message": "[wallet] Add include_unsafe argument to listunspent RPC",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-19T16:29:29Z"
      },
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-17T15:40:41Z"
      },
      "sha": "52dde66770d833ee5e42e7c5fee610453ae3852a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzAyNDNhZDMyY2VlMWNjOWZhYWIzMTczNjRiODg5YmVhZjA3NjQ3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc0243ad32cee1cc9faab317364b889beaf07647",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/cc0243ad32cee1cc9faab317364b889beaf07647",
      "tree": {
        "sha": "4b2bf04e18d2900823c5c9d1d779410eb08d8f0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b2bf04e18d2900823c5c9d1d779410eb08d8f0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52dde66770d833ee5e42e7c5fee610453ae3852a",
          "sha": "52dde66770d833ee5e42e7c5fee610453ae3852a",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/52dde66770d833ee5e42e7c5fee610453ae3852a"
        }
      ],
      "message": "[RPC] bumpfee\n\nThis command allows a user to increase the fee on a wallet transaction T, creating a \"bumper\" transaction B.\nT must signal that it is BIP-125 replaceable.\nT's change output is decremented to pay the additional fee.  (B will not add inputs to T.)\nT cannot have any descendant transactions.\nOnce B bumps T, neither T nor B's outputs can be spent until either T or (more likely) B is mined.\n\nIncludes code by @jonasschnelli and @ryanofsky",
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-01-19T16:29:29Z"
      },
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2016-12-09T18:45:27Z"
      },
      "sha": "cc0243ad32cee1cc9faab317364b889beaf07647"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 929388509,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50OTI5Mzg4NTA5",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/929388509",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-19T16:30:41Z"
    },
    {
      "event": "commented",
      "id": 273825274,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3MzgyNTI3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273825274",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-19T16:31:46Z",
      "updated_at": "2017-01-19T16:31:46Z",
      "author_association": "MEMBER",
      "body": "Squashed 4beb7c92c70b7668042383d37c49545198aa00cd -> cc0243ad32cee1cc9faab317364b889beaf07647",
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273825274",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "commented",
      "id": 273853554,
      "node_id": "MDEyOklzc3VlQ29tbWVudDI3Mzg1MzU1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/273853554",
      "actor": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-19T18:13:16Z",
      "updated_at": "2017-01-19T18:13:16Z",
      "author_association": "MEMBER",
      "body": "Still ACK cc0243a",
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#issuecomment-273853554",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/8456"
    },
    {
      "event": "reviewed",
      "id": 17524852,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc1MjQ4NTI=",
      "url": null,
      "actor": null,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "tACK cc0243ad32cee1cc9faab317364b889beaf07647\r\n\r\nno need to change nit pre-merge, very minor",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-17524852",
      "submitted_at": "2017-01-19T18:36:26Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "merged",
      "id": 929615304,
      "node_id": "MDExOk1lcmdlZEV2ZW50OTI5NjE1MzA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/929615304",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc0243ad32cee1cc9faab317364b889beaf07647",
      "created_at": "2017-01-19T18:59:36Z"
    },
    {
      "event": "closed",
      "id": 929615307,
      "node_id": "MDExOkNsb3NlZEV2ZW50OTI5NjE1MzA3",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/929615307",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2017-01-19T18:59:36Z"
    },
    {
      "event": "referenced",
      "id": 929615666,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDkyOTYxNTY2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/929615666",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ef52d3cf11bd3b1117da8a7affcf9fcfd133767",
      "created_at": "2017-01-19T18:59:52Z"
    },
    {
      "event": "reviewed",
      "id": 17601366,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTc2MDEzNjY=",
      "url": null,
      "actor": null,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jameshilliard",
        "id": 3298484,
        "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jameshilliard",
        "html_url": "https://github.com/jameshilliard",
        "followers_url": "https://api.github.com/users/jameshilliard/followers",
        "following_url": "https://api.github.com/users/jameshilliard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jameshilliard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jameshilliard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
        "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
        "repos_url": "https://api.github.com/users/jameshilliard/repos",
        "events_url": "https://api.github.com/users/jameshilliard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#pullrequestreview-17601366",
      "submitted_at": "2017-01-20T02:10:26Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
    },
    {
      "event": "referenced",
      "id": 1094286672,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDEwOTQyODY2NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1094286672",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "02b059dd6a609f1a18a9acc5fe383ee90c4b8a85",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/02b059dd6a609f1a18a9acc5fe383ee90c4b8a85",
      "created_at": "2017-05-23T18:56:00Z"
    },
    {
      "event": "referenced",
      "id": 1107962806,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDExMDc5NjI4MDY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/1107962806",
      "actor": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ea282da6da3fbf8c2892f41cf1b8f9d973f3facd",
      "commit_url": "https://api.github.com/repos/ryanofsky/bitcoin/commits/ea282da6da3fbf8c2892f41cf1b8f9d973f3facd",
      "created_at": "2017-06-02T15:00:12Z"
    },
    {
      "event": "referenced",
      "id": 3306392454,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMDYzOTI0NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3306392454",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "60091d20f9bb6bb2d57b634567ba63b4f0e458d0",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60091d20f9bb6bb2d57b634567ba63b4f0e458d0",
      "created_at": "2020-05-05T23:37:24Z"
    },
    {
      "event": "referenced",
      "id": 3328123635,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMzMjgxMjM2MzU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3328123635",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "04bea9fcacec4495c23c39e39e2d734a806245e4",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/04bea9fcacec4495c23c39e39e2d734a806245e4",
      "created_at": "2020-05-12T15:42:27Z"
    },
    {
      "event": "locked",
      "id": 5271657603,
      "node_id": "LOE_lADOABII584KGIbHzwAAAAE6NxyD",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5271657603",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-09-08T11:23:49Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769322",
      "pull_request_review_id": null,
      "id": 73769322,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzY5MzIy",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Double negation makes it hards to read. I suggest to replace by\n\n```\n CAmount nOldFee = wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0;\n```\n",
      "created_at": "2016-08-05T22:39:53Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769322",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769322"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769911",
      "pull_request_review_id": null,
      "id": 73769911,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzY5OTEx",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 153,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure about this. The problem is that such case will rarely happen so applications risk to break during sudden peak usage, amplifying bad news. \n\nI suggest to silently bump fees to the minMempoolFeeRate.\n",
      "created_at": "2016-08-05T22:47:25Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73769911",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73769911"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770122",
      "pull_request_review_id": null,
      "id": 73770122,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzcwMTIy",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 176,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: \n\n```\n nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)\n```\n\nIs repeated. Suggest using variable.\n",
      "created_at": "2016-08-05T22:50:32Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770122",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770489",
      "pull_request_review_id": null,
      "id": 73770489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzcwNDg5",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 204,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "additional check should be done:\n\n```\nnDelta >= poutput->GetDustThreshold(::minRelayTxFee);\n```\n\nOr it won't get propagated.\n",
      "created_at": "2016-08-05T22:55:41Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770556",
      "pull_request_review_id": null,
      "id": 73770556,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzcwNTU2",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you use C++11 loop style ?\n",
      "created_at": "2016-08-05T22:56:20Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770556",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770556"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770774",
      "pull_request_review_id": null,
      "id": 73770774,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzcwNzc0",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size())) {\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You should use the same SIGHASH than the previous one. (might be done separate PR ?)\n",
      "created_at": "2016-08-05T22:58:48Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73770774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73770774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73771062",
      "pull_request_review_id": null,
      "id": 73771062,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDczNzcxMDYy",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size())) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": null,
      "user": {
        "login": "NicolasDorier",
        "id": 3020646,
        "node_id": "MDQ6VXNlcjMwMjA2NDY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/NicolasDorier",
        "html_url": "https://github.com/NicolasDorier",
        "followers_url": "https://api.github.com/users/NicolasDorier/followers",
        "following_url": "https://api.github.com/users/NicolasDorier/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/NicolasDorier/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/NicolasDorier/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
        "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
        "repos_url": "https://api.github.com/users/NicolasDorier/repos",
        "events_url": "https://api.github.com/users/NicolasDorier/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">  (nIn < (int)(*mi).second.vout.size())\n\nI think this is a bug, why does the index of the input to sign should be below the number of vout of the parent ? Does not make sense.\n",
      "created_at": "2016-08-05T23:02:03Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r73771062",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/73771062"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915487",
      "pull_request_review_id": 4727308,
      "id": 83915487,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE1NDg3",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 214,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73770556,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good idea, fixed.\n",
      "created_at": "2016-10-18T18:07:33Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915487",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915487"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915534",
      "pull_request_review_id": 4727354,
      "id": 83915534,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE1NTM0",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size())) {\n+            const CScript& scriptPubKey = (*mi).second.vout[(*it).prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 219,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73770774,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Let's punt to separate PR. \n",
      "created_at": "2016-10-18T18:07:47Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915534",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915788",
      "pull_request_review_id": 4727614,
      "id": 83915788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE1Nzg4",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto it(tx.vin.begin()); it != tx.vin.end(); ++it, nIn++) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find((*it).prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && (nIn < (int)(*mi).second.vout.size())) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 216,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73771062,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good catch, edited to bounds-check the prevout.\n",
      "created_at": "2016-10-18T18:09:04Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83915788",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83915788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916251",
      "pull_request_review_id": 4728048,
      "id": 83916251,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE2MjUx",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 204,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73770489,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I checked earlier that the bumped fee pays for the new relay fee;  I'm not following as to the relationship between nDelta and dust. \n",
      "created_at": "2016-10-18T18:11:13Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916251",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916251"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916320",
      "pull_request_review_id": 4728114,
      "id": 83916320,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE2MzIw",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 176,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73770122,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.\n",
      "created_at": "2016-10-18T18:11:32Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916320",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916320"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916647",
      "pull_request_review_id": 4728436,
      "id": 83916647,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE2NjQ3",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 153,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73769911,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I edited the comment to explain why I'm reporting an error.  Especially if the user set totalFee (or had in the recent past used paytxfee to set an explicit fee rate) I think silently bumping could surprise the user. \n",
      "created_at": "2016-10-18T18:13:02Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916680",
      "pull_request_review_id": 4728467,
      "id": 83916680,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDgzOTE2Njgw",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 113,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73769322,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.\n",
      "created_at": "2016-10-18T18:13:12Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r83916680",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/83916680"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84578211",
      "pull_request_review_id": 5350229,
      "id": 84578211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg0NTc4MjEx",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line is outdated\n",
      "created_at": "2016-10-22T14:35:52Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r84578211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/84578211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85203030",
      "pull_request_review_id": 5931993,
      "id": 85203030,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjAzMDMw",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 87,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps make this fail if there are any options other than confTarget or totalFee passed in to guard against the case where a user has a typo or something.\n",
      "created_at": "2016-10-26T19:38:20Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85203030",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85203030"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85204987",
      "pull_request_review_id": 5931993,
      "id": 85204987,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjA0OTg3",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add a tighter limit to your bumpfee code, bumpfeeMaxTxFee. Set this to be an optional default parameter in options. maxTxFee is huge, so might be safer to have something smaller and not much added code. This parameter can be overridden if need be, but not to more the maxTxFee.\n",
      "created_at": "2016-10-26T19:48:41Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85204987",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85204987"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85209694",
      "pull_request_review_id": 5931993,
      "id": 85209694,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjA5Njk0",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is kind of a weird deal here where nDelta can be <= 0 if totalFee is set, and will be accepted on a race condition with mempool, I would explicitly guard against this case by restricting nDelta > 0.\n",
      "created_at": "2016-10-26T20:12:09Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85209694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85209694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85209934",
      "pull_request_review_id": 5931993,
      "id": 85209934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjA5OTM0",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 118,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Using a nNewFee = 0 is fine here, it just slightly bothers me to use this as a null value when indeed 0 is a valid fee amount.\n\n-1 would be an invalid fee amount (creates coins) so I have a slight preference to use this.\n",
      "created_at": "2016-10-26T20:13:26Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85209934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85209934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85211353",
      "pull_request_review_id": 5931993,
      "id": 85211353,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjExMzUz",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 179,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would suggest that this should also return in the error message the txid of the furthest child, and suggest bumping the fee on that one if possible to take advantage of ancestor fee based mining and keep txs valid?\n",
      "created_at": "2016-10-26T20:21:00Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85211353",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85211353"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85216916",
      "pull_request_review_id": 5931993,
      "id": 85216916,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1MjE2OTE2",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 179,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is something kinda funky when a user is running in say blocksonlymode and doesn't know about any child transactions that may exist and therefore has trouble setting the fee correctly for those that they will invalidate.\n\nThis is probably a hard problem to solve; so I'm just pointing it out.\n",
      "created_at": "2016-10-26T20:48:30Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85216916",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85216916"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85427104",
      "pull_request_review_id": 6145468,
      "id": 85427104,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NDI3MTA0",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": 85209694,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\n",
      "created_at": "2016-10-27T21:03:03Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85427104",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85427104"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85427448",
      "pull_request_review_id": 6145807,
      "id": 85427448,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg1NDI3NDQ4",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 179,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": 85211353,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As far as I can tell it's a little tricky to track down the furthest child (and there could be numerous furthest children at the same level) but I edited the error message to give the user more info (number of children and size of those transactions) and explaining the situation a bit better.\n",
      "created_at": "2016-10-27T21:05:03Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r85427448",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/85427448"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586451",
      "pull_request_review_id": 8194636,
      "id": 87586451,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTg2NDUx",
      "diff_hunk": "@@ -2575,6 +2577,267 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" \\\"output\\\" \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: Maybe use txid to correspond with the call header at L2587 or use `transactionid` there?\n",
      "created_at": "2016-11-11T13:18:38Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586451",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586451"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586523",
      "pull_request_review_id": 8194716,
      "id": 87586523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTg2NTIz",
      "diff_hunk": "@@ -2575,6 +2577,267 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" \\\"output\\\" \\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "add third parameter `(\"options\")`?\n",
      "created_at": "2016-11-11T13:19:22Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586825",
      "pull_request_review_id": 8195025,
      "id": 87586825,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTg2ODI1",
      "diff_hunk": "@@ -2575,6 +2577,267 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" \\\"output\\\" \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not sure if we want absolute fee values here.\nThe user can't be sure how many inputs are getting added when setting this value, probably resulting in an uncontrollable feerate.\n\nWhat about switching this to a feerate?\n",
      "created_at": "2016-11-11T13:22:38Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87586825",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87586825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87587175",
      "pull_request_review_id": 8195411,
      "id": 87587175,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTg3MTc1",
      "diff_hunk": "@@ -2575,6 +2577,267 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" \\\"output\\\" \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    vector<COutput> vecOutputs;\n+    pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n+    BOOST_FOREACH(const COutput& out, vecOutputs) {\n+        if (out.tx->GetHash().GetHex() == hash.GetHex() && out.nDepth > 0)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 67,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This check looks really expensive for large wallets. Why not calling `mapWallet.find(hash)` and check `nDepth` (and maybe call `GetConflicts()` to ensure its not conflicted with a already mined tx)?\n",
      "created_at": "2016-11-11T13:25:49Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87587175",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87587175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87587201",
      "pull_request_review_id": 8195437,
      "id": 87587201,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3NTg3MjAx",
      "diff_hunk": "@@ -2575,6 +2577,267 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" \\\"output\\\" \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f3833f42d05209768c3360b4404b8b57f884bb79",
      "in_reply_to_id": 87586825,
      "user": {
        "login": "Victorsueca",
        "id": 11365204,
        "node_id": "MDQ6VXNlcjExMzY1MjA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/11365204?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Victorsueca",
        "html_url": "https://github.com/Victorsueca",
        "followers_url": "https://api.github.com/users/Victorsueca/followers",
        "following_url": "https://api.github.com/users/Victorsueca/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Victorsueca/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Victorsueca/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Victorsueca/subscriptions",
        "organizations_url": "https://api.github.com/users/Victorsueca/orgs",
        "repos_url": "https://api.github.com/users/Victorsueca/repos",
        "events_url": "https://api.github.com/users/Victorsueca/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Victorsueca/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Another possibility is to leave the RPC with an absolute value and use Fee/KB on the GUI.\nSome software may want to use it's own relative fee rate.\n",
      "created_at": "2016-11-11T13:26:03Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87587201",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87587201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87878468",
      "pull_request_review_id": 8471777,
      "id": 87878468,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3ODc4NDY4",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this section makes sense.  Transactions which are in newer in the wallet are not a good indication of the most \"up to date\" spend of the outputs.  If anything, conflicts in the mempool would be a good proxy, because at least for those you'd be able to calculate any descendants fees.  But it may make the most sense to make this more of a utility function and just assume the user is trying to bump the right txid.  I would just eliminate this set of checks entirely.\n",
      "created_at": "2016-11-14T19:49:02Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87878468",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87878468"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87879296",
      "pull_request_review_id": 8472577,
      "id": 87879296,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg3ODc5Mjk2",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be helpful to refer to this as the output index throughout...  (comments, help, and error messages)\n",
      "created_at": "2016-11-14T19:53:20Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r87879296",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/87879296"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88117668",
      "pull_request_review_id": 8472577,
      "id": 88117668,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTE3NjY4",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We need to be sure we are calculating the correct fee here.  Either using new `IsAllFromMe` or getting the fee from the mempool.\n",
      "created_at": "2016-11-15T21:29:51Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88117668",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88117668"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88120736",
      "pull_request_review_id": 8472577,
      "id": 88120736,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTIwNzM2",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you don't need this, you can just leave it out as an argument\n",
      "created_at": "2016-11-15T21:44:39Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88120736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88120736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88122200",
      "pull_request_review_id": 8472577,
      "id": 88122200,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4MTIyMjAw",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "~~I think this reduces bumpfee to a two step process in the common case (whenever there are children) and makes it so the second step is going to require setting totalfee.  It seems more user friendly to just pay what it takes?~~\n\n~~On a separate note, I think it might be nice to check all of the children transactions and make sure their ancestor fee rate isn't higher than the new feerate you are bumping to.  If one of them has a higher ancestor fee rate you are actually make your situation worse.~~\n",
      "created_at": "2016-11-15T21:52:42Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88122200",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88122200"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88474390",
      "pull_request_review_id": 9047192,
      "id": 88474390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDc0Mzkw",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": 88122200,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I spoke with @sdaftuar and @mrbandrews about this and withdraw both of the above points.  If the transaction has children, it becomes quite complicated to decide whether bumping fee makes sense and by how much and its probably better to just report to the user the minimum fee that would be required to bump and let the user decide whether that makes sense.\n",
      "created_at": "2016-11-17T15:25:00Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88474390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88474390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488019",
      "pull_request_review_id": 9060619,
      "id": 88488019,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDg4MDE5",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 76,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": 87878468,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed (removed)\n",
      "created_at": "2016-11-17T16:21:39Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488069",
      "pull_request_review_id": 9060666,
      "id": 88488069,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDg4MDY5",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 33,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": 87879296,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done.\n",
      "created_at": "2016-11-17T16:21:47Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488069",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488069"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488714",
      "pull_request_review_id": 9061267,
      "id": 88488714,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDg4NzE0",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": 88117668,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should be correct since now we're checking that the user owns all the inputs.\n",
      "created_at": "2016-11-17T16:24:17Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488714",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488714"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488750",
      "pull_request_review_id": 9061300,
      "id": 88488750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NDg4NzUw",
      "diff_hunk": "@@ -2575,6 +2577,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output                (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\"          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 143,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "82062cd27dac300319bdd41af5a0820e1c0ccbfd",
      "in_reply_to_id": 88120736,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed. \n",
      "created_at": "2016-11-17T16:24:25Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88488750",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88488750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88987177",
      "pull_request_review_id": 9541621,
      "id": 88987177,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4OTg3MTc3",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 65,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You should probably check that the depth is exactly 0, because otherwise the tx is already mined or conflicted with a mined tx and no point in bumping.",
      "created_at": "2016-11-21T21:04:02Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88987177",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88987177"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88991899",
      "pull_request_review_id": 9546280,
      "id": 88991899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4OTkxODk5",
      "diff_hunk": "@@ -2575,6 +2577,234 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = (wtx.IsFromMe(ISMINE_SPENDABLE) ? nDebit - wtx.GetValueOut() : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 159,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8e969e3fc4d16f77882fe2a858c47de990161a91",
      "in_reply_to_id": 85209694,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@JeremyRubin how could nDelta be negative here?",
      "created_at": "2016-11-21T21:28:01Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r88991899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88991899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89264742",
      "pull_request_review_id": 9810981,
      "id": 89264742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY0NzQy",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"BIP 125\"",
      "created_at": "2016-11-23T07:18:13Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89264742",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89264742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89264849",
      "pull_request_review_id": 9810981,
      "id": 89264849,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY0ODQ5",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe move output into options? Even if it's required in this version, it should ideally become optional in the future...",
      "created_at": "2016-11-23T07:19:30Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89264849",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89264849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265083",
      "pull_request_review_id": 9810981,
      "id": 89265083,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1MDgz",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 128,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just use `int64_t`? `int` is only guaranteed to be 15-bit, so it's too small anyway.",
      "created_at": "2016-11-23T07:22:02Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265083",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265083"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265215",
      "pull_request_review_id": 9810981,
      "id": 89265215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1MjE1",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 135,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`nNewFeeRate = payTxFee;`?",
      "created_at": "2016-11-23T07:23:58Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265391",
      "pull_request_review_id": 9810981,
      "id": 89265391,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1Mzkx",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 152,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`+ wtx.vin.size()` seems appropriate here too?",
      "created_at": "2016-11-23T07:26:17Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265391",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265811",
      "pull_request_review_id": 9810981,
      "id": 89265811,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1ODEx",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");\n+                strError += strprintf(\"The bumped fee must be at least: %s.\\n\", FormatMoney(nFeesWithDescendantsPlusRelay));\n+                strError += strprintf(\"Number of child transactions: %u, total size of child transactions: %u\\n\", numDescendants, sizeDescendants);\n+                strError += strprintf(\"Note that the child transactions would be evicted from the mempool and would not be mined.\\n\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/would/may probably/\r\n\r\nIn the future, it may make sense to combine some children transactions (ie, our own) into this one while bumping the fee.",
      "created_at": "2016-11-23T07:31:49Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265811",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265811"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265932",
      "pull_request_review_id": 9810981,
      "id": 89265932,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1OTMy",
      "diff_hunk": "@@ -2554,6 +2556,230 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue bumpfee(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\"\\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"\\nThis command requires that the txid is in the wallet.\\n\"\n+                            \"\\nUser specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"\\nThis command will NOT add new inputs.\\n\"\n+                            \"\\nFee must be high enough to pay a new relay fee.\\n\"\n+                            \"\\nIf tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"\\nThis command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"\\nUser can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"transactionid\\\"     (string, required) The txid to be bumped\\n\"\n+                            \"2. \\\"output\\\"            (int, required) The output to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\"      (int, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\"        (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\", (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transactions txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // Check that if the original tx has wallet conflicts (meaning there is at least one other tx\n+    // in the wallet that spends at least one of the same outputs) that it is the most recent one.\n+    // This prevents us from trying to bump fee on a tx that has already been bumped.  So if the\n+    // user created txid1, bumped the fee which resulted in txid2, and now wishes to bump the fee\n+    // again, the user must call bumpfee on txid2.\n+    const CWalletTx *conflictTx;\n+    BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts()) {\n+        conflictTx = pwalletMain->GetWalletTx(conflict);\n+        LogPrint(\"rpc\", \"bumpfee wallet conflict, conflicted tx has time: %d\\n\", conflictTx->GetTxTime());\n+        if (conflictTx->GetTxTime() > wtx.GetTxTime()) {\n+            strError = strprintf(\"Transaction conflicts with later wallet tx: %s\", conflict.GetHex());\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+    }\n+\n+    // bounds-check the output to decrement\n+    int nOutput = params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (params.size() > 2) {\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = params[2];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nDebit = wtx.GetDebit(ISMINE_SPENDABLE);\n+    CAmount nOldFee = -(wtx.IsFromMe(ISMINE_SPENDABLE) ? wtx.GetValueOut() - nDebit : 0);\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        int estimateFoundTarget = newConfirmTarget;\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget, &estimateFoundTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendants = it->GetModFeesWithDescendants();\n+            if (nNewFee < nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)) {\n+                std::string strError = strprintf(\"Insufficent fee due to child transactions, the bumped fee must be at least: %s\", FormatMoney(nFeesWithDescendants + ::minRelayTxFee.GetFee(txSize)));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempol of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to go ahead and bump/commit/relay the transaction.  In the event that\n+            // the tx does have children and the fee is insufficient to cover, the peer(s) will reject\n+            // the tx on that basis, so we warn the user of this possibility.\n+            //\n+            LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 204,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "41572b183d33080602b8522ff7085f472ef3e4a7",
      "in_reply_to_id": 73770489,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@NicolasDorier I also don't see a need for that...",
      "created_at": "2016-11-23T07:33:31Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265932",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265943",
      "pull_request_review_id": 9810981,
      "id": 89265943,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY1OTQz",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");\n+                strError += strprintf(\"The bumped fee must be at least: %s.\\n\", FormatMoney(nFeesWithDescendantsPlusRelay));\n+                strError += strprintf(\"Number of child transactions: %u, total size of child transactions: %u\\n\", numDescendants, sizeDescendants);\n+                strError += strprintf(\"Note that the child transactions would be evicted from the mempool and would not be mined.\\n\");\n+                strError += strprintf(\"To avoid mempool eviction, consider bumping fee on the child transactions (with fee to pay for the ancestors).\\n\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempool of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to require the user to force processing in this situation. If the user has not set the \"force\" option,\n+            // we throw an error. Otherwise, we bump/commit/relay the transaction.  If the tx has children and the fee is insufficient\n+            // to cover, peers will reject the tx on that basis, so we warn the user of this possibility.\n+            //\n+            if (fForce)\n+                LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+            else\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Set the \\'force\\' option to bump fee on a tx that is not in the mempool\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 235,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why not just discard the change?",
      "created_at": "2016-11-23T07:33:40Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89265943",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89265943"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89266113",
      "pull_request_review_id": 9812244,
      "id": 89266113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjY2MTEz",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");\n+                strError += strprintf(\"The bumped fee must be at least: %s.\\n\", FormatMoney(nFeesWithDescendantsPlusRelay));\n+                strError += strprintf(\"Number of child transactions: %u, total size of child transactions: %u\\n\", numDescendants, sizeDescendants);\n+                strError += strprintf(\"Note that the child transactions would be evicted from the mempool and would not be mined.\\n\");\n+                strError += strprintf(\"To avoid mempool eviction, consider bumping fee on the child transactions (with fee to pay for the ancestors).\\n\");\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+            }\n+        }\n+        else\n+        {\n+            // Tx not in mempool\n+            // -----------------\n+            // If the tx is in the wallet but not the mempool, we cannot check its descendants' fees.\n+            //\n+            // Not being in the mempool likely means that it was evicted for having a low fee.\n+            // In this situation, we may not need RBF for this node (if the tx is not in the mempool,\n+            // then it doesn't need to be replaced), but it may still be in the mempool of peers\n+            // (perhaps a peer has allocated more space for the mempool).\n+            //\n+            // Our approach is to require the user to force processing in this situation. If the user has not set the \"force\" option,\n+            // we throw an error. Otherwise, we bump/commit/relay the transaction.  If the tx has children and the fee is insufficient\n+            // to cover, peers will reject the tx on that basis, so we warn the user of this possibility.\n+            //\n+            if (fForce)\n+                LogPrint(\"rpc\", \"Warning: bumping fee on tx that is not in the mempool; if it has child transactions, it may be rejected by peers\\n\");\n+            else\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Set the \\'force\\' option to bump fee on a tx that is not in the mempool\");\n+        }\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // Output must be able to pay the increased fee, without being reduced to dust\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue >= nDelta + poutput->GetDustThreshold(::minRelayTxFee)) {\n+        poutput->nValue = poutput->nValue - nDelta;\n+    }\n+    else {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Output does not have enough money to bump the fee\");\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, tx);\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get()))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 256,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This needs to be rebased...",
      "created_at": "2016-11-23T07:35:50Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89266113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89266113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89270776",
      "pull_request_review_id": 9816759,
      "id": 89270776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjcwNzc2",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 197,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "No need for strprintf here",
      "created_at": "2016-11-23T08:24:37Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89270776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89270776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89270794",
      "pull_request_review_id": 9816778,
      "id": 89270794,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5MjcwNzk0",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");\n+                strError += strprintf(\"The bumped fee must be at least: %s.\\n\", FormatMoney(nFeesWithDescendantsPlusRelay));\n+                strError += strprintf(\"Number of child transactions: %u, total size of child transactions: %u\\n\", numDescendants, sizeDescendants);\n+                strError += strprintf(\"Note that the child transactions would be evicted from the mempool and would not be mined.\\n\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 200,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also no strprintf here",
      "created_at": "2016-11-23T08:24:50Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89270794",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89270794"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89278178",
      "pull_request_review_id": 9824056,
      "id": 89278178,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5Mjc4MTc4",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 37,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "jonasschnelli",
        "id": 178464,
        "node_id": "MDQ6VXNlcjE3ODQ2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonasschnelli",
        "html_url": "https://github.com/jonasschnelli",
        "followers_url": "https://api.github.com/users/jonasschnelli/followers",
        "following_url": "https://api.github.com/users/jonasschnelli/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonasschnelli/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonasschnelli/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
        "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
        "repos_url": "https://api.github.com/users/jonasschnelli/repos",
        "events_url": "https://api.github.com/users/jonasschnelli/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think, because every else use fee-ratres per KB, we should make clear at this point that `totalFee` and `maxFee` are absolute fee-values (and not per KB).",
      "created_at": "2016-11-23T09:24:18Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89278178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89278178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89287183",
      "pull_request_review_id": 9833016,
      "id": 89287183,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg5Mjg3MTgz",
      "diff_hunk": "@@ -2575,6 +2577,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee to pay, in satoshis (not btc)\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that we are not trying to bump a tx that has already been mined\n+    if (wtx.GetDepthInMainChain() > 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has already been mined!\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not bip-125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int txSize = (int)GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate;\n+    if (payTxFee.GetFeePerK() > 0) {\n+        nNewFeeRate = CFeeRate(payTxFee.GetFeePerK());\n+    }\n+    else {\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0) nNewFeeRate = CWallet::fallbackFee;\n+    }\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize) + minRelayTxFee.GetFee(txSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's mininum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end()) {\n+\n+            // Tx with descendants\n+            // --------------------\n+            // Idea:  When a tx is bumped, its descendants (if any) are evicted from the mempool.\n+            // Policy is that when you replace a tx, the total fees in the mempool cannot go down.\n+            // So when you bump a tx that has children, you have to bump your fee by the sum of all of the\n+            // descendants, plus the new bumped tx's relay fee.\n+            //\n+            // If the bumped fee is less than what's required because of children, we fail.  This is a different\n+            // situation than bumping the fee to pay the minimum relay fee. Here, we can't be sure whether the user\n+            // really wants to pay full price for all of the child transactions.  If so, the user can set payTxFee\n+            // and run the command again.\n+            //\n+            CAmount nFeesWithDescendantsPlusRelay = it->GetModFeesWithDescendants() + ::minRelayTxFee.GetFee(txSize);\n+            if (nNewFee < nFeesWithDescendantsPlusRelay) {\n+                uint64_t numDescendants = it->GetCountWithDescendants()-1;\n+                uint64_t sizeDescendants = it->GetSizeWithDescendants() - it->GetTxSize();\n+                std::string strError = strprintf(\"Insufficent fee due to the child transactions.\\n\");\n+                strError += strprintf(\"The bumped fee must be at least: %s.\\n\", FormatMoney(nFeesWithDescendantsPlusRelay));\n+                strError += strprintf(\"Number of child transactions: %u, total size of child transactions: %u\\n\", numDescendants, sizeDescendants);\n+                strError += strprintf(\"Note that the child transactions would be evicted from the mempool and would not be mined.\\n\");\n+                strError += strprintf(\"To avoid mempool eviction, consider bumping fee on the child transactions (with fee to pay for the ancestors).\\n\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 201,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a0b7e342c65a9bc6b26a4000fdee81bfc6ed9572",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "del strprintf",
      "created_at": "2016-11-23T10:20:47Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r89287183",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/89287183"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90770633",
      "pull_request_review_id": 11288639,
      "id": 90770633,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkwNzcwNjMz",
      "diff_hunk": "@@ -2582,6 +2584,262 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" output ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"User specifies which output (e.g., a change output) will be used to bump the fee.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. output index          (numeric, required) The output index to be decremented\\n\"\n+                            \"3. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"     \\\"force\\\":            \\\"true/false\\\", (boolean, optional) Force replacement even if txid is not in user's mempool\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    // check that tx hasn't already been mined, not does it conflict with a mined transation\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"This transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    // check that original tx signals opt-in-RBF\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // bounds-check the output index to decrement\n+    int nOutput = request.params[1].get_int();\n+    if (nOutput < 0 || (unsigned int) nOutput > wtx.vout.size())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Output index out of bounds\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    bool fForce = false;\n+    if (request.params.size() > 2) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VNUM)(UniValue::VOBJ));\n+        UniValue options = request.params[2];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+                {\"force\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+        if (options.exists(\"force\")) {\n+            fForce = options[\"force\"].get_bool();\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK()) {\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    nNewFee = nNewFeeRate.GetFee(txSize + wtx.vin.size());\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(txSize+wtx.vin.size()) + minRelayTxFee.GetFee(txSize+wtx.vin.size());",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 149,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "7d9f218dab0b4b152490923b5723061358b0f110",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You should calculate txSize + wtx.vin.size() once and keep it in a const variable for these...\r\n\r\n```C++\r\nconst int64_t maxNewTxSize = txSize + wtx.vin.size();\r\n```",
      "created_at": "2016-12-04T04:48:46Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r90770633",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/90770633"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91820598",
      "pull_request_review_id": 12334073,
      "id": 91820598,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODIwNTk4",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Any reason not to automatically just switch to the new txid here?",
      "created_at": "2016-12-10T00:25:19Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91820598",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91820598"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91820649",
      "pull_request_review_id": 12334073,
      "id": 91820649,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODIwNjQ5",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just use a size_t here, not cast to int... And use ++i, not i++\r\n\r\nBut more importantly, better to use C++11 iterators in this case:\r\n\r\n```C++\r\nfor (const CTxOut& txout : wtx.tv->vout) {\r\n    if (pwalletMain->IsChange(txout)) {\r\n        if (nOutput != -1) {\r\n            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\r\n        }\r\n        nOutput = i;\r\n    }\r\n}\r\n```",
      "created_at": "2016-12-10T00:25:56Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91820649",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91820649"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821141",
      "pull_request_review_id": 12334073,
      "id": 91821141,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODIxMTQx",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+\n+    // mark the original tx as bumped\n+    {\n+        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 228,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we're trying to keep CWalletDB only used by CWallet. @pstratem ?",
      "created_at": "2016-12-10T00:32:39Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821141",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821594",
      "pull_request_review_id": 12335058,
      "id": 91821594,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODIxNTk0",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+\n+    // mark the original tx as bumped\n+    {\n+        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 228,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91821141,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Probably this needs to go through CWallet::AddToWallet",
      "created_at": "2016-12-10T00:39:17Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821594",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821594"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821708",
      "pull_request_review_id": 12335174,
      "id": 91821708,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxODIxNzA4",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+\n+    // mark the original tx as bumped\n+    {\n+        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 228,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91821141,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "May need to be atomic with adding the new one as well...",
      "created_at": "2016-12-10T00:41:05Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91821708",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91821708"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91956751",
      "pull_request_review_id": 12465546,
      "id": 91956751,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTU2NzUx",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91820649,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@luke-jr  That won't compile since`i` is undefined...  Is there a better way to loop here where the index is needed?  Also I'd suggest that this kind of style nit can be cleaned up in a later pull anyway; this one has been open for long enough.",
      "created_at": "2016-12-12T14:30:36Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91956751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91956751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91984171",
      "pull_request_review_id": 12493443,
      "id": 91984171,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTg0MTcx",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This line in the help text needs to be updated for the latest semantics (no descendants in mempool or wallet).",
      "created_at": "2016-12-12T16:34:31Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91984171",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91984171"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91984951",
      "pull_request_review_id": 12493443,
      "id": 91984951,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTg0OTUx",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 28,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I found this sentence, and the ones below (\"This command will fail if fee is not high enough...\") to be confusing.  Perhaps some explanation of what automatic fee calculation will occur, unless overriden/modified by the options, and that if the resulting fee isn't high enough then the command will fail? ",
      "created_at": "2016-12-12T16:37:50Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91984951",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91984951"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91985184",
      "pull_request_review_id": 12493443,
      "id": 91985184,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTg1MTg0",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 48,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`<output>` should not be here anymore.",
      "created_at": "2016-12-12T16:38:54Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91985184",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91985184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91995460",
      "pull_request_review_id": 12493443,
      "id": 91995460,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTk1NDYw",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 131,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this cast isn't correct after #8580 was merged; looks like the correct way to do this is `GetVirtualTransactionSize(*wtx->tx)`.",
      "created_at": "2016-12-12T17:24:43Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91995460",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91995460"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91997774",
      "pull_request_review_id": 12493443,
      "id": 91997774,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkxOTk3Nzc0",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(wtx);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 188,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should rely on the CMerkleTx function\r\n```    \r\noperator const CTransaction&() const { return *tx; }\r\n```\r\nthat makes this work, as that function has a comment saying it should be removed.  `*wtx->tx` here again I think?",
      "created_at": "2016-12-12T17:35:58Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r91997774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/91997774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92012040",
      "pull_request_review_id": 12493443,
      "id": 92012040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMDEyMDQw",
      "diff_hunk": "@@ -112,6 +112,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"setnetworkactive\", 0 },\n     { \"getmempoolancestors\", 1 },\n     { \"getmempooldescendants\", 1 },\n+    { \"bumpfee\", 1 },\n+    { \"bumpfee\", 2 },",
      "path": "src/rpc/client.cpp",
      "position": null,
      "original_position": 5,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "64a17d6b95ed1eb1a9af118eb3376d6108debad2",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this line should be removed now that the output is no longer specified?",
      "created_at": "2016-12-12T18:47:08Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92012040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92012040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92224356",
      "pull_request_review_id": 12735765,
      "id": 92224356,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMjI0MzU2",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 70,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91820598,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For now, I'd rather leave it as is, and let the user resubmit with the correct txid.",
      "created_at": "2016-12-13T17:42:26Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92224356",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92224356"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92224536",
      "pull_request_review_id": 12735951,
      "id": 92224536,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMjI0NTM2",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 80,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91820649,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed to a size_t (and ++i)",
      "created_at": "2016-12-13T17:43:20Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92224536",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92224536"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92225380",
      "pull_request_review_id": 12736816,
      "id": 92225380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMjI1Mzgw",
      "diff_hunk": "@@ -2581,6 +2584,233 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of a opt-in-RBF transaction.\\n\"\n+                            \"This command requires that the transaction with the given txid is in the wallet.\\n\"\n+                            \"This command will NOT add new inputs.\\n\"\n+                            \"Fee must be high enough to pay a new relay fee.\\n\"\n+                            \"If tx has child transactions in mempool, the new fee must pay for them as well.\\n\"\n+                            \"This command will fail if fee is not high enough or output is not large enough.\\n\"\n+                            \"User can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid> <output>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or if there were multiple change outputs, fail\n+    int nOutput = -1;\n+    for (int i=0; i < (int) wtx.tx->vout.size(); i++) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize((CTransaction)wtx);\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(wtx);\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+\n+    // mark the original tx as bumped\n+    {\n+        CWalletDB walletdb(pwalletMain->strWalletFile, \"r+\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 228,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "d16db273381e249d84e55f8377d9c0dd50123936",
      "in_reply_to_id": 91821141,
      "user": {
        "login": "mrbandrews",
        "id": 7504522,
        "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mrbandrews",
        "html_url": "https://github.com/mrbandrews",
        "followers_url": "https://api.github.com/users/mrbandrews/followers",
        "following_url": "https://api.github.com/users/mrbandrews/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mrbandrews/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mrbandrews/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
        "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
        "repos_url": "https://api.github.com/users/mrbandrews/repos",
        "events_url": "https://api.github.com/users/mrbandrews/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I moved this code into a new method on the wallet so the CWalletDB is only used from CWallet.  I looked at AddToWallet but I would need to have edited it a bit, plus it does some stuff I don't need so I thought a new but concise method was a better approach. \r\n",
      "created_at": "2016-12-13T17:48:04Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92225380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92225380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92449789",
      "pull_request_review_id": 12965641,
      "id": 92449789,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDQ5Nzg5",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why use `0.01 * COIN` instead of the global `maxTxFee`? I think it would be worth explaining in a comment. Also, if `0.01 * COIN` is a significant value, maybe it would be good to declare it in validation.h alongside similar sounding constants like `HIGH_MAX_TX_FEE`.",
      "created_at": "2016-12-14T17:51:16Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92449789",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92449789"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92452706",
      "pull_request_review_id": 12965641,
      "id": 92452706,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDUyNzA2",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 136,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would move this declaration down closer to where the variable is first used (line 2719 `nNewFee = nNewFeeRate.GetFee(maxNewTxSize);`",
      "created_at": "2016-12-14T18:06:40Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92452706",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92452706"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92459085",
      "pull_request_review_id": 12965641,
      "id": 92459085,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDU5MDg1",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 152,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like if this condition is true, the work done above gets thrown away. Maybe that code could be moved into an else block so the sematics of the totalFee > 0 case are more straightforward.",
      "created_at": "2016-12-14T18:37:21Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92459085",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92459085"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92461226",
      "pull_request_review_id": 12965641,
      "id": 92461226,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDYxMjI2",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 138,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This block of code seems very similar to existing code in `CWallet::GetMinimumFee`. If you tweaked that function to return the fee rate in addition to the fee, could that function be reused here?",
      "created_at": "2016-12-14T18:48:35Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92461226",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92461226"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92463667",
      "pull_request_review_id": 12965641,
      "id": 92463667,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDYzNjY3",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What should the user do when this case happens? Should they report a bug because it should not be possible for this condition to happen? Or should they just try passing in a high(er) totalFee value? I think it'd be good to clarify in the error message.",
      "created_at": "2016-12-14T19:00:44Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92463667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92463667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92463788",
      "pull_request_review_id": 12965641,
      "id": 92463788,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDYzNzg4",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 174,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would suggest changing error code below to RPC_INTERNAL_ERROR if it's really not possible for this condition to happen at this point.",
      "created_at": "2016-12-14T19:01:22Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92463788",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92463788"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92466211",
      "pull_request_review_id": 12965641,
      "id": 92466211,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDY2MjEx",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 178,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think it would make sense to move this check up towards the top of this function near the pwalletMain / wtx checks, instead of leaving it down here after fee estimation & option parsing. As a user I wouldn't want to first resolve a bunch of errors about fees and options before finding out that the transaction I am trying to bump can't be bumped in the first place.",
      "created_at": "2016-12-14T19:13:54Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92466211",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92466211"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92467255",
      "pull_request_review_id": 12965641,
      "id": 92467255,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDY3MjU1",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 196,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Think `<=` would be better than `<` here. Thinking in a theoretical situation where nValue was 0 and dust threshould was somehow also 0, it would be more consistent to remove the output than keep it.",
      "created_at": "2016-12-14T19:18:35Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92467255",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92467255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92468014",
      "pull_request_review_id": 12965641,
      "id": 92468014,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDY4MDE0",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 195,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe use `poutput->nValue -= nDelta` syntax here (and `nNewFee += poutput->nValue` below). `+=` and `-=` operators I think would make the code easier to read and less prone to typo errors.",
      "created_at": "2016-12-14T19:21:57Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92468014",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92468014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92469677",
      "pull_request_review_id": 12965641,
      "id": 92469677,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDY5Njc3",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe say this will decrease and possibly remove the change output, but leave other outputs alone. Also could say explicitly that this will not change existing inputs.\r\n\r\n",
      "created_at": "2016-12-14T19:29:00Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92469677",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92469677"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92470862",
      "pull_request_review_id": 12965641,
      "id": 92470862,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDcwODYy",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 205,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`it` isn't really a good name for this variable, since it's a direct reference to the input, and not an iterator. Maybe `in` or `input` would be a better name.",
      "created_at": "2016-12-14T19:34:31Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92470862",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92470862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92471236",
      "pull_request_review_id": 12965641,
      "id": 92471236,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDcxMjM2",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 206,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe use auto here since you're already using it one line up.",
      "created_at": "2016-12-14T19:36:15Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92471236",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92471236"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92471762",
      "pull_request_review_id": 12965641,
      "id": 92471762,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDcxNzYy",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 212,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would suggest replacing `tx.vin[nIn]` here with `it` or replacing the opposite way above to be consistent about how the input is referred to inside the loop.",
      "created_at": "2016-12-14T19:38:43Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92471762",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92471762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92473397",
      "pull_request_review_id": 12965641,
      "id": 92473397,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDczMzk3",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {\n+            const CScript& scriptPubKey = (*mi).second.tx->vout[it.prevout.n].scriptPubKey;\n+            SignatureData sigdata;\n+            if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+            tx.vin[nIn].scriptSig = sigdata.scriptSig;\n+        }\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 222,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe add `|| !state.IsValid()` to the condition here or assert(state.IsValid()) as a sanity check below.",
      "created_at": "2016-12-14T19:45:16Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92473397",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92473397"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92474152",
      "pull_request_review_id": 12965641,
      "id": 92474152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDc0MTUy",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 55,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Unclear what good having this variable does. Seems like it's always just set in one line then thrown in the next line, making the code more verbose and causing unnecessary string copies.",
      "created_at": "2016-12-14T19:48:40Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92474152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92474152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92475795",
      "pull_request_review_id": 12965641,
      "id": 92475795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDc1Nzk1",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 3)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"maxFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"maxFee\")) {\n+            CAmount proposedMaxFee = options[\"maxFee\"].get_int();\n+            if (proposedMaxFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be <= 0)\");\n+            else if (proposedMaxFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid maxFee (cannot be higher than the global maxTxFee)\");\n+            bumpfeeMaxTxFee = proposedMaxFee;\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > bumpfeeMaxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than bumpfee's maxFee)\");\n+        }\n+    }\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+\n+    // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+    CAmount nNewFee = 0;\n+    CFeeRate nNewFeeRate = payTxFee;\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+    if (nNewFeeRate.GetFeePerK() == 0)\n+        nNewFeeRate = CWallet::fallbackFee;\n+\n+    // new fee rate must be at least old rate + minimum relay rate\n+    if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+        nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+    nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+\n+    // if user set totalFee, use that instead\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            strError = strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee));\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strError);\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n+        strError = strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()));\n+        throw JSONRPCError(RPC_MISC_ERROR, strError);\n+    }\n+\n+    CAmount nDelta = nNewFee - nOldFee;\n+    if (nDelta <= 0) // it should not be possible to have a negative delta at this point (an attempt to reduce the fee)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"New fee must be higher than old fee\");\n+\n+    // Fail if the tx has any descendants - check both the wallet and the mempool\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue = poutput->nValue - nDelta;\n+    if (poutput->nValue < poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee = nNewFee + poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto &it : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(it.prevout.hash);\n+        if (mi != pwalletMain->mapWallet.end() && it.prevout.n < (*mi).second.tx->vout.size()) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 207,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can write mi->second instead of (*mi).second.",
      "created_at": "2016-12-14T19:56:12Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92475795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92475795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92476143",
      "pull_request_review_id": 12965641,
      "id": 92476143,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDc2MTQz",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+class BumpFeeTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-walletrbf\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def create_fund_sign_send(self, node, outputs, feerate=0):",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 30,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "self isn't being used here, would suggest making this a standalone function like submit_block_with_tx below.",
      "created_at": "2016-12-14T19:57:43Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92476143",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92476143"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92478972",
      "pull_request_review_id": 12965641,
      "id": 92478972,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDc4OTcy",
      "diff_hunk": "@@ -0,0 +1,198 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+class BumpFeeTest (BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-walletrbf\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def create_fund_sign_send(self, node, outputs, feerate=0):\n+        if feerate != 0:\n+            node.settxfee(feerate)\n+        rawtx = node.createrawtransaction([], outputs)\n+        fundtx = node.fundrawtransaction(rawtx)\n+        signedtx = node.signrawtransaction(fundtx['hex'])\n+        txid = node.sendrawtransaction(signedtx['hex'])\n+        return txid\n+\n+\n+    def run_test (self):\n+\n+        print(\"Mining blocks...\")\n+\n+        # fund node0 with 10 coins of 0.001 btc (100,000 satoshis)\n+        self.nodes[1].generate(110)\n+        self.sync_all()\n+        a0 = self.nodes[0].getnewaddress()\n+        a1 = self.nodes[1].getnewaddress()\n+        for i in range(10):\n+            self.nodes[1].sendtoaddress(a0, 0.001)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), Decimal('0.01'))\n+\n+        # create and bump an RBF transaction",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 56,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": null,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This test is long and it's not clear right away whether the different parts of it depend on each other. If it could be broken up in some way, I think it would be more readable and easier to work with in the future. E.g.\r\n\r\n```\r\nself.test_simple_bumpfee_succeeds(a1)\r\nself.test_nonrbf_bumpfee_fails(a1)\r\nself.test_notmine_bumpfee_fails(a0)\r\n...\r\n```",
      "created_at": "2016-12-14T20:11:50Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92478972",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92478972"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92496592",
      "pull_request_review_id": 13013653,
      "id": 92496592,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyNDk2NTky",
      "diff_hunk": "@@ -2581,6 +2584,228 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs.\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"     \\\"maxFee\\\":           \\\"n\\\",          (numeric, optional) Allows user to override bumpfee's max fee\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+    std::string strError;\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    CAmount bumpfeeMaxTxFee = 0.01 * COIN;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 94,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "c215e1dcb37ae28bbdc2fd9b098524b05f25b38d",
      "in_reply_to_id": 92449789,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Regardless, we don't want to use flops for CAmount.\r\n\r\n(I know that in this case the compiler can do static analysis and figure out the exact result, but we should not promote bad practice; It is proved to break on 32 bit platforms when static code analysis does not catch the flop.)",
      "created_at": "2016-12-14T21:47:04Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r92496592",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92496592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93170722",
      "pull_request_review_id": 13692154,
      "id": 93170722,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTcwNzIy",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs or alter existing inputs.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "244319366ef1e5e4991c4184db20c53ff73a8622",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should guarantee this. (sorry for reposting)",
      "created_at": "2016-12-20T04:38:42Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r93170722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93170722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94610929",
      "pull_request_review_id": 15140586,
      "id": 94610929,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0NjEwOTI5",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will not add new inputs or alter existing inputs.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 27,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "244319366ef1e5e4991c4184db20c53ff73a8622",
      "in_reply_to_id": 93170722,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, I changed the wording to describe the current behavior but suggest it could be improved in the future.",
      "created_at": "2017-01-04T16:08:24Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94610929",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94610929"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94807302",
      "pull_request_review_id": 15345817,
      "id": 94807302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODA3MzAy",
      "diff_hunk": "@@ -11,9 +11,12 @@\n #include \"init.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"ui_interface.h\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this include is not needed.",
      "created_at": "2017-01-05T17:03:24Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94807302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94807302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94812614",
      "pull_request_review_id": 15345817,
      "id": 94812614,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODEyNjE0",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: We're calling RPCTypeCheck multiple times, which I don't think should be needed.  I believe we can just change this to `RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ))` and remove the one at line 2675 below.",
      "created_at": "2017-01-05T17:31:46Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94812614",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94812614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94819938",
      "pull_request_review_id": 15345817,
      "id": 94819938,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0ODE5OTM4",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+          throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": null,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this should be `CFeeRate(totalFee, maxNewTxSize)`.",
      "created_at": "2017-01-05T18:10:47Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94819938",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94819938"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958773",
      "pull_request_review_id": 15502501,
      "id": 94958773,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0OTU4Nzcz",
      "diff_hunk": "@@ -11,9 +11,12 @@\n #include \"init.h\"\n #include \"validation.h\"\n #include \"net.h\"\n+#include \"policy/policy.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n+#include \"script/sign.h\"\n #include \"timedata.h\"\n+#include \"ui_interface.h\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 9,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": 94807302,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, removed.",
      "created_at": "2017-01-06T15:09:18Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958773",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958773"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958806",
      "pull_request_review_id": 15502536,
      "id": 94958806,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0OTU4ODA2",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 53,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": 94812614,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2017-01-06T15:09:30Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958806",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958806"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958882",
      "pull_request_review_id": 15502622,
      "id": 94958882,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0OTU4ODgy",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+          throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": 94819938,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added a comment. I think this was probably intentional since it makes the fee rate check below more conservative.",
      "created_at": "2017-01-06T15:10:05Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94958882",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94958882"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94961158",
      "pull_request_review_id": 15505193,
      "id": 94961158,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk0OTYxMTU4",
      "diff_hunk": "@@ -2581,6 +2584,212 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+                            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+                            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+                            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+                            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+                            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+                            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+                            \"The user can specify a confirmation target for estimatefee.\\n\"\n+                            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+                            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+                            \"2. options               (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+                            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+                            \"   }\\n\"\n+                            \"\\nResult:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+                            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+                            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            \"\\nBump the fee, get the new transaction\\'s txid\\n\"\n+                            + HelpExampleCli(\"bumpfee\", \"<txid>\")\n+                            );\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+          throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+      throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i=0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, txSize);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 145,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "eb50c62afdd3a2cc95c3fb4d02d9d4f523975c89",
      "in_reply_to_id": 94819938,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Now fixed (got this backward).",
      "created_at": "2017-01-06T15:24:54Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r94961158",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/94961158"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95196336",
      "pull_request_review_id": 15743456,
      "id": 95196336,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MTk2MzM2",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        input.scriptSig = sigdata.scriptSig;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 194,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@sdaftuar points out that this won't correctly update scriptWitness for witness transactions\r\nProbably better to use the UpdateTransaction function\r\n",
      "created_at": "2017-01-09T16:54:09Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95196336",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95196336"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95208926",
      "pull_request_review_id": 15756715,
      "id": 95208926,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjA4OTI2",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: mentioning fallbackfee is too much implementation detail here",
      "created_at": "2017-01-09T17:57:27Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95208926",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95208926"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95211699",
      "pull_request_review_id": 15759605,
      "id": 95211699,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjExNjk5",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should there be a check against providing both options",
      "created_at": "2017-01-09T18:12:09Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95211699",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95211699"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95228707",
      "pull_request_review_id": 15777019,
      "id": 95228707,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1MjI4NzA3",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+# Sequence number that is BIP 125 opt-in and BIP 68-compliant\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd\n+\n+\n+class BumpFeeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-walletrbf\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        rbf_node, peer_node = self.nodes\n+        rbf_node_address = rbf_node.getnewaddress()\n+\n+        # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n+        print(\"Mining blocks...\")\n+        self.nodes[1].generate(110)\n+        self.sync_all()\n+        for i in range(10):\n+            self.nodes[1].sendtoaddress(rbf_node_address, 0.001)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), Decimal(\"0.01\"))\n+\n+        print(\"Running tests\")\n+        dest_address = peer_node.getnewaddress()\n+        test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n+        test_nonrbf_bumpfee_fails(peer_node, dest_address)\n+        test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n+        test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n+        test_small_output_fails(rbf_node, dest_address)\n+        test_dust_to_fee(rbf_node, dest_address)\n+        test_settxfee(rbf_node, dest_address)\n+        test_rebumping(rbf_node, dest_address)\n+        test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        print(\"Success\")\n+\n+\n+def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    sync_mempools((rbf_node, peer_node))\n+    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    # check that bumped_tx propogates, original tx was evicted and has a wallet conflict\n+    sync_mempools((rbf_node, peer_node))\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert bumped_tx[\"txid\"] in peer_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+    assert rbfid not in peer_node.getrawmempool()\n+    oldwtx = rbf_node.gettransaction(rbfid)\n+    assert len(oldwtx[\"walletconflicts\"]) > 0\n+    # check wallet transaction replaces and replaced_by values\n+    bumpedwtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n+    assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n+\n+\n+def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n+    # cannot replace a non RBF transaction (from node which did not enable RBF)\n+    not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+\n+\n+def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n+    # cannot bump fee unless the tx has only inputs that we own.\n+    # here, the rbftx has a peer_node coin and then adds a rbf_node input\n+    # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n+    # (since it can't use fundrawtransaction, it lacks a proper change output)\n+    utxos = [node.listunspent()[-1] for node in (rbf_node, peer_node)]\n+    inputs = [{\n+        \"txid\": utxo[\"txid\"],\n+        \"vout\": utxo[\"vout\"],\n+        \"address\": utxo[\"address\"],\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    } for utxo in utxos]\n+    output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n+    rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n+    signedtx = rbf_node.signrawtransaction(rawtx)\n+    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):\n+    # cannot bump fee if the transaction has a descendant\n+    # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n+    parent_id = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00050000})\n+    tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n+    tx = rbf_node.signrawtransaction(tx)\n+    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+\n+\n+def test_small_output_fails(rbf_node, dest_address):\n+    # cannot bump fee with a too-small output\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbf_node.bumpfee(rbfid, {\"totalFee\": 10000})\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 10001})\n+\n+\n+def test_dust_to_fee(rbf_node, dest_address):\n+    # check that if output is reduced to dust, it will be converted to fee\n+    # the bumped tx sets fee=9900, but it converts to 10,000\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    fulltx = rbf_node.getrawtransaction(rbfid, 1)\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 9900})\n+    full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n+    assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00010000\"))\n+    assert_equal(len(fulltx[\"vout\"]), 2)\n+    assert_equal(len(full_bumped_tx[\"vout\"]), 1)  #change output is eliminated\n+\n+\n+def test_settxfee(rbf_node, dest_address):\n+    # check that bumpfee reacts correctly to the use of settxfee (paytxfee)\n+    # increase feerate by 2.5x, test that fee increased at least 2x\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    rbf_node.settxfee(Decimal(\"0.00002500\"))\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] > 2 * abs(rbftx[\"fee\"])\n+    rbf_node.settxfee(Decimal(\"0.00000000\"))  # unset paytxfee\n+\n+\n+def test_rebumping(rbf_node, dest_address):\n+    # check that re-bumping the original tx fails, but bumping the bumper succeeds\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000}, Decimal(\"0.00001000\"))\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n+    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n+\n+\n+def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n+    # check that unconfirmed outputs from bumped transactions are not spendable\n+    rbfid = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)[\"hex\"]\n+    assert rbfid in rbf_node.getrawmempool()\n+    bumpid = rbf_node.bumpfee(rbfid)[\"txid\"]\n+    assert bumpid in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+    # check that outputs from the bump transaction are not spendable\n+    # due to the replaces_txid check in CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(0) if t[\"txid\"] == bumpid], [])\n+\n+    # submit a block with the rbf tx to clear the bump transaction out\n+    # of the mempool, then invalidate the block so the rbf transaction will be\n+    # put back in the mempool. this makes it possible to check whether the rbf\n+    # transaction outputs are spendable before the rbf tx is confirmed.\n+    block = submit_block_with_tx(rbf_node, rbftx)",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 177,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "i'd abandon bumpid here so it doesn't accidentally rereplace rbfid if its reaccepted from the wallet\r\n\r\nif later abandoning conflicts/replacements frees up the original to spend again then thats a change in behavior that can result in changing the test",
      "created_at": "2017-01-09T19:33:43Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95228707",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95228707"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 242,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475856",
      "pull_request_review_id": 16031993,
      "id": 95475856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDc1ODU2",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, SIGHASH_ALL), scriptPubKey, sigdata))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        input.scriptSig = sigdata.scriptSig;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 194,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": 95196336,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added UpdateTransaction in e4a766291a90440d0ee8b8b25619cdd91329ffc2, and after a lot of struggle, eventually got a test to work which creates a segwit transaction and makes sure scriptWitness is set.\r\n\r\nThe test also uncovered another bug in the TransactionSignatureCreator call above where the SIGHASH_ALL value was incorrectly being interpretted as a CAmount. This is also fixed in e4a766291a90440d0ee8b8b25619cdd91329ffc2.",
      "created_at": "2017-01-10T22:48:48Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475856",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475915",
      "pull_request_review_id": 16032052,
      "id": 95475915,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDc1OTE1",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": 95208926,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed in e4a766291a90440d0ee8b8b25619cdd91329ffc2.",
      "created_at": "2017-01-10T22:49:09Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475915",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475915"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475942",
      "pull_request_review_id": 16032076,
      "id": 95475942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDc1OTQy",
      "diff_hunk": "@@ -2581,6 +2583,209 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee/fallbackfee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        }\n+        if (options.exists(\"totalFee\")) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 117,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": 95211699,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in e4a766291a90440d0ee8b8b25619cdd91329ffc2.",
      "created_at": "2017-01-10T22:49:19Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95475942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95475942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95477645",
      "pull_request_review_id": 16033804,
      "id": 95477645,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NDc3NjQ1",
      "diff_hunk": "@@ -0,0 +1,223 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework import blocktools\n+from test_framework.mininode import CTransaction\n+from test_framework.util import *\n+from test_framework.util import *\n+\n+import io\n+import time\n+\n+# Sequence number that is BIP 125 opt-in and BIP 68-compliant\n+BIP125_SEQUENCE_NUMBER = 0xfffffffd\n+\n+\n+class BumpFeeTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-walletrbf\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        rbf_node, peer_node = self.nodes\n+        rbf_node_address = rbf_node.getnewaddress()\n+\n+        # fund rbf node with 10 coins of 0.001 btc (100,000 satoshis)\n+        print(\"Mining blocks...\")\n+        self.nodes[1].generate(110)\n+        self.sync_all()\n+        for i in range(10):\n+            self.nodes[1].sendtoaddress(rbf_node_address, 0.001)\n+        self.sync_all()\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        assert_equal(self.nodes[0].getbalance(), Decimal(\"0.01\"))\n+\n+        print(\"Running tests\")\n+        dest_address = peer_node.getnewaddress()\n+        test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address)\n+        test_nonrbf_bumpfee_fails(peer_node, dest_address)\n+        test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address)\n+        test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n+        test_small_output_fails(rbf_node, dest_address)\n+        test_dust_to_fee(rbf_node, dest_address)\n+        test_settxfee(rbf_node, dest_address)\n+        test_rebumping(rbf_node, dest_address)\n+        test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        print(\"Success\")\n+\n+\n+def test_simple_bumpfee_succeeds(rbf_node, peer_node, dest_address):\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    sync_mempools((rbf_node, peer_node))\n+    assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] - abs(rbftx[\"fee\"]) > 0\n+    # check that bumped_tx propogates, original tx was evicted and has a wallet conflict\n+    sync_mempools((rbf_node, peer_node))\n+    assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n+    assert bumped_tx[\"txid\"] in peer_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+    assert rbfid not in peer_node.getrawmempool()\n+    oldwtx = rbf_node.gettransaction(rbfid)\n+    assert len(oldwtx[\"walletconflicts\"]) > 0\n+    # check wallet transaction replaces and replaced_by values\n+    bumpedwtx = rbf_node.gettransaction(bumped_tx[\"txid\"])\n+    assert_equal(oldwtx[\"replaced_by_txid\"], bumped_tx[\"txid\"])\n+    assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n+\n+\n+def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n+    # cannot replace a non RBF transaction (from node which did not enable RBF)\n+    not_rbfid = create_fund_sign_send(peer_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+\n+\n+def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n+    # cannot bump fee unless the tx has only inputs that we own.\n+    # here, the rbftx has a peer_node coin and then adds a rbf_node input\n+    # Note that this test depends upon the RPC code checking input ownership prior to change outputs\n+    # (since it can't use fundrawtransaction, it lacks a proper change output)\n+    utxos = [node.listunspent()[-1] for node in (rbf_node, peer_node)]\n+    inputs = [{\n+        \"txid\": utxo[\"txid\"],\n+        \"vout\": utxo[\"vout\"],\n+        \"address\": utxo[\"address\"],\n+        \"sequence\": BIP125_SEQUENCE_NUMBER\n+    } for utxo in utxos]\n+    output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n+    rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n+    signedtx = rbf_node.signrawtransaction(rawtx)\n+    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction contains inputs that don't belong to this wallet\",\n+                          rbf_node.bumpfee, rbfid)\n+\n+\n+def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address):\n+    # cannot bump fee if the transaction has a descendant\n+    # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n+    parent_id = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00050000})\n+    tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n+    tx = rbf_node.signrawtransaction(tx)\n+    txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n+    assert_raises_message(JSONRPCException, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+\n+\n+def test_small_output_fails(rbf_node, dest_address):\n+    # cannot bump fee with a too-small output\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbf_node.bumpfee(rbfid, {\"totalFee\": 10000})\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    assert_raises_message(JSONRPCException, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 10001})\n+\n+\n+def test_dust_to_fee(rbf_node, dest_address):\n+    # check that if output is reduced to dust, it will be converted to fee\n+    # the bumped tx sets fee=9900, but it converts to 10,000\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    fulltx = rbf_node.getrawtransaction(rbfid, 1)\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 9900})\n+    full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n+    assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00010000\"))\n+    assert_equal(len(fulltx[\"vout\"]), 2)\n+    assert_equal(len(full_bumped_tx[\"vout\"]), 1)  #change output is eliminated\n+\n+\n+def test_settxfee(rbf_node, dest_address):\n+    # check that bumpfee reacts correctly to the use of settxfee (paytxfee)\n+    # increase feerate by 2.5x, test that fee increased at least 2x\n+    rbf_node.settxfee(Decimal(\"0.00001000\"))\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)\n+    rbf_node.settxfee(Decimal(\"0.00002500\"))\n+    bumped_tx = rbf_node.bumpfee(rbfid)\n+    assert bumped_tx[\"fee\"] > 2 * abs(rbftx[\"fee\"])\n+    rbf_node.settxfee(Decimal(\"0.00000000\"))  # unset paytxfee\n+\n+\n+def test_rebumping(rbf_node, dest_address):\n+    # check that re-bumping the original tx fails, but bumping the bumper succeeds\n+    rbfid = create_fund_sign_send(rbf_node, {dest_address: 0.00090000}, Decimal(\"0.00001000\"))\n+    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 1000})\n+    assert_raises_message(JSONRPCException, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 2000})\n+\n+\n+def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n+    # check that unconfirmed outputs from bumped transactions are not spendable\n+    rbfid = create_fund_sign_send(rbf_node, {rbf_node_address: 0.00090000})\n+    rbftx = rbf_node.gettransaction(rbfid)[\"hex\"]\n+    assert rbfid in rbf_node.getrawmempool()\n+    bumpid = rbf_node.bumpfee(rbfid)[\"txid\"]\n+    assert bumpid in rbf_node.getrawmempool()\n+    assert rbfid not in rbf_node.getrawmempool()\n+\n+    # check that outputs from the bump transaction are not spendable\n+    # due to the replaces_txid check in CWallet::AvailableCoins\n+    assert_equal([t for t in rbf_node.listunspent(0) if t[\"txid\"] == bumpid], [])\n+\n+    # submit a block with the rbf tx to clear the bump transaction out\n+    # of the mempool, then invalidate the block so the rbf transaction will be\n+    # put back in the mempool. this makes it possible to check whether the rbf\n+    # transaction outputs are spendable before the rbf tx is confirmed.\n+    block = submit_block_with_tx(rbf_node, rbftx)",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 177,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f4fa93b29a59c6d0f0341f442fd1805972b43ca1",
      "in_reply_to_id": 95228707,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added abandontransaction call in b0d4f9323250d81b53668362413134bc7a13d998.",
      "created_at": "2017-01-10T22:59:37Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95477645",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95477645"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 242,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95582692",
      "pull_request_review_id": 16142046,
      "id": 95582692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NTgyNjky",
      "diff_hunk": "@@ -213,6 +213,10 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n \n+    # call abandontransaction to make sure the wallet does not add the bump\n+    # transaction back into the mempool.\n+    rbf_node.abandontransaction(bumpid)",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 6,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "b0d4f9323250d81b53668362413134bc7a13d998",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should take place after `submit_block_with_tx` and before `invalidateblock`\r\nThat is the only time it is guaranteed that bumpid is not in the mempool.\r\n",
      "created_at": "2017-01-11T14:00:59Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95582692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95582692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95598215",
      "pull_request_review_id": 16158462,
      "id": 95598215,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NTk4MjE1",
      "diff_hunk": "@@ -213,6 +213,10 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n \n+    # call abandontransaction to make sure the wallet does not add the bump\n+    # transaction back into the mempool.\n+    rbf_node.abandontransaction(bumpid)",
      "path": "qa/rpc-tests/bumpfee.py",
      "position": null,
      "original_position": 6,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "b0d4f9323250d81b53668362413134bc7a13d998",
      "in_reply_to_id": 95582692,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Oops, yes, I got confused about what the test was doing with the two transactions. Fixed and updated the comment in a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef.",
      "created_at": "2017-01-11T15:16:54Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95598215",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95598215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95732721",
      "pull_request_review_id": 16296522,
      "id": 95732721,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzMyNzIx",
      "diff_hunk": "@@ -2582,6 +2584,211 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef",
      "in_reply_to_id": null,
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I can't see where it checks if the wallet is unlocked. Am I missing it?",
      "created_at": "2017-01-12T06:38:58Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95732721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95732721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95792084",
      "pull_request_review_id": 16357840,
      "id": 95792084,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1NzkyMDg0",
      "diff_hunk": "@@ -2582,6 +2584,211 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef",
      "in_reply_to_id": 95732721,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yikes that seems like a pretty big oversight",
      "created_at": "2017-01-12T13:40:40Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95792084",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95792084"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95815232",
      "pull_request_review_id": 16381814,
      "id": 95815232,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODE1MjMy",
      "diff_hunk": "@@ -2582,6 +2584,211 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txid\\\"              (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\":       \\\"n\\\",          (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\":         \\\"n\\\",          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":    n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":       n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    if (!pwalletMain->mapWallet.count(hash))",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 57,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "a1046e099e4fac8b82d6e268eeb9fb97e4a9c9ef",
      "in_reply_to_id": 95732721,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added EnsureWalletIsUnlocked call in 59e425aa8e634a939e12594ce7c8824e9764e61c",
      "created_at": "2017-01-12T15:29:24Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95815232",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95815232"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890149",
      "pull_request_review_id": 16460005,
      "id": 95890149,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODkwMTQ5",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: maybe name the relay fee constant in case user wants to look it up.",
      "created_at": "2017-01-12T21:36:34Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890149",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890163",
      "pull_request_review_id": 16460005,
      "id": 95890163,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODkwMTYz",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 108,
      "original_position": 37,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: add `n` here as well as below",
      "created_at": "2017-01-12T21:36:38Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890163",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2624,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890379",
      "pull_request_review_id": 16460005,
      "id": 95890379,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODkwMzc5",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "can you explain why user-chosen feerate isn't an option, but absolute fee?",
      "created_at": "2017-01-12T21:37:40Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95890379",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95890379"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95891750",
      "pull_request_review_id": 16460005,
      "id": 95891750,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODkxNzUw",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: or full RBF nodes relay it",
      "created_at": "2017-01-12T21:45:08Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95891750",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95891750"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95892125",
      "pull_request_review_id": 16460005,
      "id": 95892125,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODkyMTI1",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you already check that the wallet is available above, I believe unneeded. ",
      "created_at": "2017-01-12T21:47:29Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95892125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95892125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95899033",
      "pull_request_review_id": 16460005,
      "id": 95899033,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk1ODk5MDMz",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 266,
      "original_position": 176,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if this is the intended user flow, we might want to inform them via the following error message by including a totalfee guess alongside the minimum required feerate with a suggestion to use that option.",
      "created_at": "2017-01-12T22:25:15Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r95899033",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/95899033"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2782,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96012078",
      "pull_request_review_id": 16460005,
      "id": 96012078,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDEyMDc4",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 293,
      "original_position": 202,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "just set it",
      "created_at": "2017-01-13T15:06:55Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96012078",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96012078"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2809,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96026308",
      "pull_request_review_id": 16601686,
      "id": 96026308,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDI2MzA4",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "why does it need to be in the mempool?",
      "created_at": "2017-01-13T16:36:28Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96026308",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96026308"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2610,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96026776",
      "pull_request_review_id": 16602098,
      "id": 96026776,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDI2Nzc2",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 96026308,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(weird, comments are in wrong order) it doesn't you're right. ",
      "created_at": "2017-01-13T16:39:48Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96026776",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96026776"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2610,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96028852",
      "pull_request_review_id": 16604347,
      "id": 96028852,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDI4ODUy",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 293,
      "original_position": 202,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96012078,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I guess I don't see how it makes a difference, but it seems to me that the whole point of this PR is to change the transaction to the least degree possible.  I don't know why someone would have chosen to set their sequence to 0xffffffff, but if they did, why should we change it for them here?",
      "created_at": "2017-01-13T16:52:11Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96028852",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96028852"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2809,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033375",
      "pull_request_review_id": 16609310,
      "id": 96033375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDMzMzc1",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95890149,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d",
      "created_at": "2017-01-13T17:16:45Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033441",
      "pull_request_review_id": 16609310,
      "id": 96033441,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDMzNDQx",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95892125,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Removed in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d",
      "created_at": "2017-01-13T17:17:07Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033441",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033483",
      "pull_request_review_id": 16609310,
      "id": 96033483,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDMzNDgz",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 266,
      "original_position": 176,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95899033,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in 7c9ad69f946f1db623d4243aa4a10fe57296cc4d",
      "created_at": "2017-01-13T17:17:22Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96033483",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96033483"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2782,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96034071",
      "pull_request_review_id": 16609310,
      "id": 96034071,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDM0MDcx",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 108,
      "original_position": 37,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95890163,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Options style here is the same as the style used in fundrawtransaction (and it seems clearer without all the n's and extra punctuation).",
      "created_at": "2017-01-13T17:20:39Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96034071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96034071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2624,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96035383",
      "pull_request_review_id": 16609310,
      "id": 96035383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDM1Mzgz",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 38,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95890379,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "User chosen feerate is possible with settxfee, and could be added as another option here in the future. Absolute fee is a reasonable thing a user might want to set, probably determining it from the fee of the previous transaction.",
      "created_at": "2017-01-13T17:28:24Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96035383",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96035383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96036049",
      "pull_request_review_id": 16609310,
      "id": 96036049,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDM2MDQ5",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95891750,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Referring to nodes that don't follow BIP-125? Maybe a more general note about these nodes would be helpful, but it seems like an odd thing to mention only in this context.",
      "created_at": "2017-01-13T17:32:14Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96036049",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96036049"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96043848",
      "pull_request_review_id": 16620382,
      "id": 96043848,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDQzODQ4",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Hum, should we be ignoring the return value here? (We check it in some places, ignore it in others in wallet.cpp, but it seems wrong to ignore it).",
      "created_at": "2017-01-13T18:17:20Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96043848",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96043848"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96044619",
      "pull_request_review_id": 16620382,
      "id": 96044619,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDQ0NjE5",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm super not convinced that this is sufficient. See all the places where isAbandoned is checked - we probably need to check for replacement in most, if not all, of the same places.\r\n\r\neg probably want to check in RelayWalletTransaction and possibly isSpent?",
      "created_at": "2017-01-13T18:21:39Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96044619",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96044619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96045410",
      "pull_request_review_id": 16620382,
      "id": 96045410,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDQ1NDEw",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);\n+\n+    NotifyTransactionChanged(this, originalHash, CT_UPDATED);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do we need/want a MarkDirty here, too? I think we might not need it, but it seems strange to not have it here when we have it in all the other similar things (conflicted, abandon, etc).",
      "created_at": "2017-01-13T18:26:04Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96045410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96045410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 860,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96046375",
      "pull_request_review_id": 16620382,
      "id": 96046375,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDQ2Mzc1",
      "diff_hunk": "@@ -1958,6 +2011,35 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\"))\n+                continue;\n+\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\"))",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Obviously prefer to leave this in because belt-and-suspenders, but shouldn't this check be redundant with the !InMempool() check, two checks above?",
      "created_at": "2017-01-13T18:31:03Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96046375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96046375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96054845",
      "pull_request_review_id": 16631966,
      "id": 96054845,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDU0ODQ1",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is being set specifically to change the behavior of AvailableCoins to avoid creating new transactions which spend outputs of rbf & bumpfee transactions, for reasons described in comments in AvailableCoins.\r\n\r\nI'm actually not sure why we don't mark the transaction that is being replaced to be abandoned. But I don't think it should make any practical difference right now.\r\n\r\nRelayWalletTransaction in the normal case should already skip this transaction because it conflicts with the bumpfee transaction and won't be in mempool.\r\n\r\nIsSpent could perhaps be written to not consider inputs of a transaction that's been replaced to be spent, though in practice it doesn't make a difference because the bumpfee replacing transaction always spends the same inputs as the replaced transaction.",
      "created_at": "2017-01-13T19:16:28Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96054845",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96054845"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96060042",
      "pull_request_review_id": 16631966,
      "id": 96060042,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDYwMDQy",
      "diff_hunk": "@@ -1958,6 +2011,35 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\"))\n+                continue;\n+\n+            // Similarly, we should not consider coins from transactions that\n+            // have been replaced. In the example above, we would want to prevent\n+            // creation of a transaction A' spending an output of A, because if\n+            // transaction B were initially confirmed, conflicting with A and\n+            // A', we wouldn't want to the user to create a transaction D\n+            // intending to replace A', but potentially resulting in a scenario\n+            // where A, A', and D could all be accepted (instead of just B and\n+            // D, or just A and A' like the user would want).\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\"))",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 111,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96046375,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's not completely redundant (see https://github.com/mrbandrews/bitcoin/blob/1d71fd0dab96430643b818ea993acea2aaa09256/qa/rpc-tests/bumpfee.py#L251 for the test which triggers this condition), but this is checking for a really esoteric case. See description above for all the gory details, but in this can happen when the replaced transaction A temporarily becomes part of a block instead of the replacing transaction B, and then gets added back to the mempool when there's a reorg.",
      "created_at": "2017-01-13T19:42:16Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96060042",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96060042"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96062364",
      "pull_request_review_id": 16639616,
      "id": 96062364,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDYyMzY0",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fee bumped should not imply abandoned -- it's entirely possible the original version of the transaction will confirm.\r\n\r\nChanging IsSpent as you suggest ought to have no visible effect (since bumpfee spends all the same inputs, currently), yet I think it would be incorrect to make your change -- if we add smarter fee bumping behavior in the future, and it becomes possible to drop an input from the original tx in a replacement transaction, we would still want to treat the original input as spent until the transaction that spends it becomes conflicted (or the user explicitly abandons it).\r\n\r\nIn RelayWalletTransaction, I think it's more debatable whether to attempt relay of the original version, but since it would only succeed if somehow the feebumped version dropped out of your mempool, I think it's reasonable for the wallet to attempt to relay unless the user explicitly calls abandontransaction on it.  We don't care which version gets mined, and if something is subtly wrong with the bumped transaction then we might as well attempt the original.  The effect on tx relay bandwidth should be negligible.\r\n\r\nAlso -- I believe this is no different behavior than if we have conflicting transactions in our wallet that originate via some means other than bumpfee.  For instance if someone sends funds to us and then fee bumps it themselves, we'll wind up with both transactions in our wallet, and we'll attempt to relay both, which I think is correct behavior.",
      "created_at": "2017-01-13T19:54:19Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96062364",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96062364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96063132",
      "pull_request_review_id": 16631966,
      "id": 96063132,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDYzMTMy",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);\n+\n+    NotifyTransactionChanged(this, originalHash, CT_UPDATED);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96045410,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will look more, but I would want to find a specific case it is needed before adding MarkDirty here. I have another PR https://github.com/bitcoin/bitcoin/pull/9381 which eliminates MarkDirty from AddToWallet() and will get rid of this entire MarkReplaced() method, replacing it with an AddToWallet call.",
      "created_at": "2017-01-13T19:58:49Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96063132",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96063132"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 860,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96063240",
      "pull_request_review_id": 16631966,
      "id": 96063240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDYzMjQw",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96043848,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Will add a check.",
      "created_at": "2017-01-13T19:59:30Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96063240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96063240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96064667",
      "pull_request_review_id": 16642065,
      "id": 96064667,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDY0NjY3",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "100% agree with sdaftuar.  it would be incorrect to auto abandon the bumpee.  ",
      "created_at": "2017-01-13T20:08:12Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96064667",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96064667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96065043",
      "pull_request_review_id": 16642424,
      "id": 96065043,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDY1MDQz",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);\n+\n+    NotifyTransactionChanged(this, originalHash, CT_UPDATED);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 36,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96045410,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think we should treat this differently from any other unconfirmed, conflicting transaction entering the wallet, so I don't believe this is necessary (and it seems confusing to me to add calls like that in places where we think that balances shouldn't be changing).",
      "created_at": "2017-01-13T20:10:17Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96065043",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96065043"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 860,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96065599",
      "pull_request_review_id": 16642972,
      "id": 96065599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDY1NTk5",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96043848,
      "user": {
        "login": "sdaftuar",
        "id": 7463573,
        "node_id": "MDQ6VXNlcjc0NjM1NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sdaftuar",
        "html_url": "https://github.com/sdaftuar",
        "followers_url": "https://api.github.com/users/sdaftuar/followers",
        "following_url": "https://api.github.com/users/sdaftuar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sdaftuar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sdaftuar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
        "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
        "repos_url": "https://api.github.com/users/sdaftuar/repos",
        "events_url": "https://api.github.com/users/sdaftuar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think we can just clean this up in a subsequent PR?  I agree that the differing behaviors are not good, but perhaps this is a small enough issue to not hold this up...",
      "created_at": "2017-01-13T20:13:34Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96065599",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96065599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96068068",
      "pull_request_review_id": 16645642,
      "id": 96068068,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDY4MDY4",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Abandoned doesn't imply the original version of the transaction won't confirm, it just means \"pretend this isnt here, unless it somehow gets confirmed\"?\r\n\r\nBut, ok, fair point regarding IsSpent - I'm not convinced thats is definitely The Right Behavior to not allow a user to spend something they removed from their transaction, but this is the more conservative option, so have no problem with it for now.\r\n\r\nre: RelayWalletTransaction: I think this absolutely should have a replacement check...if a transaction has been replaced it shouldn't make it back into our mempool without the other transaction also replacing it, sure, but belt-and-suspenders. Plus a user could, theoretically, restart with a higher min relay fee (or upgrade to a new version), and this could break.",
      "created_at": "2017-01-13T20:27:57Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96068068",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96068068"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96070260",
      "pull_request_review_id": 16647935,
      "id": 96070260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDcwMjYw",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96043848,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Either way seems fine. Added a check and error print for now in f9c4007977a25d53cc5ad9459db51a831fb8ae89.",
      "created_at": "2017-01-13T20:42:24Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96070260",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96070260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96070737",
      "pull_request_review_id": 16648440,
      "id": 96070737,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDcwNzM3",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96043848,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I only brought it up because I'd prefer new code to check it...it seems bad to not do so.",
      "created_at": "2017-01-13T20:45:33Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96070737",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96070737"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96074805",
      "pull_request_review_id": 16652854,
      "id": 96074805,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDc0ODA1",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n+\n+    CWalletDB walletdb(strWalletFile, \"r+\");\n+    walletdb.WriteTx(wtx);",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 34,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96043848,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed, check is added in f9c4007977a25d53cc5ad9459db51a831fb8ae89.",
      "created_at": "2017-01-13T21:12:14Z",
      "updated_at": "2017-01-19T16:30:40Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96074805",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96074805"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96075289",
      "pull_request_review_id": 16653403,
      "id": 96075289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDc1Mjg5",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'll withdraw my request after IRC discussion. I've been convinced that in some use-cases a user might prefer us to accept the old version of a transaction which has been bumped, so no need to change that.",
      "created_at": "2017-01-13T21:15:35Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96075289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96075289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96077369",
      "pull_request_review_id": 16655623,
      "id": 96077369,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDc3MzY5",
      "diff_hunk": "@@ -826,6 +833,29 @@ void CWallet::MarkDirty()\n     }\n }\n \n+bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n+{\n+    LOCK(cs_wallet);\n+\n+    auto mi = mapWallet.find(originalHash);\n+    if (mi == mapWallet.end())\n+        return false;\n+\n+    CWalletTx& wtx = (*mi).second;\n+\n+    // Ensure for now that we're not overwriting data\n+    assert(wtx.mapValue.count(\"replaced_by_txid\") == 0);\n+\n+    wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();",
      "path": "src/wallet/wallet.cpp",
      "position": 32,
      "original_position": 31,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96044619,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Long discussion in IRC about this beginning here: https://botbot.me/freenode/bitcoin-core-dev/msg/79332875/.\r\n\r\nI think the conclusion is that it is preferable to keep the current code which attempts to add all replaced and replacing transactions to the mempool , because there are cases when there is a problem with the replacing tx (e.g. output too close to dust limit) that would cause it to get rejected from mempool, and where it would be preferable to relay the original replaced transaction.\r\n\r\nAlso, the risk of the wallet relaying both replaced and replaced transactions to peers is very low. It will not happen unless a CWallet::ResendWalletTransactions call somehow is made before the initial CWallet::ReacceptWalletTransactions call in CWallet::postInitProcess finishes.\r\n",
      "created_at": "2017-01-13T21:28:06Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96077369",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96077369"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 850,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96082690",
      "pull_request_review_id": 16661267,
      "id": 96082690,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDgyNjkw",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 96026308,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It says in the wallet, not the mempool...?",
      "created_at": "2017-01-13T22:01:14Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96082690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96082690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2610,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96084174",
      "pull_request_review_id": 16662882,
      "id": 96084174,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDg0MTc0",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 95891750,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"(though it may still be replacable in practice)\" seems sufficient.",
      "created_at": "2017-01-13T22:11:12Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96084174",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96084174"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092534",
      "pull_request_review_id": 16671446,
      "id": 96092534,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDkyNTM0",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`>3` now... but I don't know that we need an explicit check here. Seems like asking for bugs.",
      "created_at": "2017-01-13T23:13:07Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092534",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092534"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092748",
      "pull_request_review_id": 16671446,
      "id": 96092748,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDkyNzQ4",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should be `1` now (as of #9239). Maybe make a const int in some header for this number...",
      "created_at": "2017-01-13T23:14:56Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092748",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092748"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092826",
      "pull_request_review_id": 16671446,
      "id": 96092826,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDkyODI2",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`get_int64`",
      "created_at": "2017-01-13T23:15:44Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96092826",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96092826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96093010",
      "pull_request_review_id": 16671446,
      "id": 96093010,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDkzMDEw",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer to just do:\r\n\r\n```C++\r\nif (options.exists(\"replaceable\")) {\r\n    replaceable = options[\"replaceable\"].get_bool();\r\n}\r\n```\r\n\r\nSo that if the default changes, this still works right.",
      "created_at": "2017-01-13T23:17:21Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96093010",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96093010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96094023",
      "pull_request_review_id": 16671446,
      "id": 96094023,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDk0MDIz",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 287,
      "original_position": 195,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "So long as the user is explicitly setting a total fee, we should either fail when discarding dust, or at least document this behaviour in the RPC help.",
      "created_at": "2017-01-13T23:25:31Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96094023",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96094023"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2803,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96094125",
      "pull_request_review_id": 16671446,
      "id": 96094125,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDk0MTI1",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 293,
      "original_position": 202,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96012078,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Agreed with @morcos, leave this as-is.",
      "created_at": "2017-01-13T23:26:29Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96094125",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96094125"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2809,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96095311",
      "pull_request_review_id": 16671446,
      "id": 96095311,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDk1MzEx",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid())\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+\n+    // mark the original tx as bumped\n+    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to mark the original transaction as replaced.\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe just add `\"errors\"` to the response below?",
      "created_at": "2017-01-13T23:38:06Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96095311",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96095311"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96098001",
      "pull_request_review_id": 16676880,
      "id": 96098001,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDk4MDAx",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96092748,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nothing bad happens if you call it with 1, i think it makes most sense to allow users to select 1 meaning as fast as possible, and then we just return the fastest estimate we're comfortable with",
      "created_at": "2017-01-14T00:06:42Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96098001",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96098001"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96098610",
      "pull_request_review_id": 16677539,
      "id": 96098610,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MDk4NjEw",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 126,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96092748,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay",
      "created_at": "2017-01-14T00:14:17Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96098610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96098610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149281",
      "pull_request_review_id": 16725044,
      "id": 96149281,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ5Mjgx",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 112,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96092534,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Makes sense, removed in 23c389ab8697bc0040cfd45a32d282906554a84a.",
      "created_at": "2017-01-15T22:21:00Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149281",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149335",
      "pull_request_review_id": 16725044,
      "id": 96149335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ5MzM1",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    assert(pwalletMain != NULL);\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least oldFee + relayFee: %s\", FormatMoney(minTotalFee)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is too low to get into the mempool (min rate: %s)\",\n+                                               FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 293,
      "original_position": 202,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "1d71fd0dab96430643b818ea993acea2aaa09256",
      "in_reply_to_id": 96094125,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok, keeping as is to change the transaction as little as possible.",
      "created_at": "2017-01-15T22:22:29Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2809,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149671",
      "pull_request_review_id": 16725044,
      "id": 96149671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ5Njcx",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid())\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+\n+    // mark the original tx as bumped\n+    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to mark the original transaction as replaced.\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96095311,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Clarified the error message in 23c389ab8697bc0040cfd45a32d282906554a84a. If there are other examples of returning an \"errors\" key in a RPC response, I could change this to conform. But my preference would be to keep the exception (since this would be a sign of a serious problem that should not be ignored) and to just return more complete status information with the exception.",
      "created_at": "2017-01-15T22:35:42Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149705",
      "pull_request_review_id": 16725044,
      "id": 96149705,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTQ5NzA1",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 96082690,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "morcos was responding to a review comment \"painfully obvious, but needs to be in mempool as well :)\" that is gone now.",
      "created_at": "2017-01-15T22:37:41Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96149705",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96149705"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2610,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150047",
      "pull_request_review_id": 16725044,
      "id": 96150047,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTUwMDQ3",
      "diff_hunk": "@@ -2582,6 +2584,232 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 44,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "8d3cd2844b844cad92d741d848ee0ffebdffef40",
      "in_reply_to_id": 96084174,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reworded, adding \"for example\" in 23c389ab8697bc0040cfd45a32d282906554a84a. Just saying non-replaceable transactions are replaceable sounds mysterious. Maybe I'm less knowledgeable than the target user, but at least I would find it confusing.",
      "created_at": "2017-01-15T22:51:51Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150047",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150117",
      "pull_request_review_id": 16725044,
      "id": 96150117,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTUwMTE3",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 129,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96092826,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, fixed in 23c389ab8697bc0040cfd45a32d282906554a84a.",
      "created_at": "2017-01-15T22:54:59Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150117",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150117"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150124",
      "pull_request_review_id": 16725044,
      "id": 96150124,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTUwMTI0",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 137,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96093010,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Good point, fixed in 23c389ab8697bc0040cfd45a32d282906554a84a.",
      "created_at": "2017-01-15T22:55:10Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150124",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150124"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150335",
      "pull_request_review_id": 16725044,
      "id": 96150335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTUwMzM1",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 287,
      "original_position": 195,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96094023,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added note to totalFee documentation in 4e1a04002b0783d53c27eaed8df4ddb2bded6bf7.",
      "created_at": "2017-01-15T23:04:17Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96150335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96150335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2803,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96156341",
      "pull_request_review_id": 16731890,
      "id": 96156341,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MTU2MzQx",
      "diff_hunk": "@@ -2609,7 +2609,10 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"2. options               (object, optional)\\n\"\n             \"   {\\n\"\n             \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n-            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 6,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": null,
      "user": {
        "login": "morcos",
        "id": 4360349,
        "node_id": "MDQ6VXNlcjQzNjAzNDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morcos",
        "html_url": "https://github.com/morcos",
        "followers_url": "https://api.github.com/users/morcos/followers",
        "following_url": "https://api.github.com/users/morcos/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/morcos/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/morcos/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
        "organizations_url": "https://api.github.com/users/morcos/orgs",
        "repos_url": "https://api.github.com/users/morcos/repos",
        "events_url": "https://api.github.com/users/morcos/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/morcos/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd vote against making this statement.\r\nI think it should be a more general principle of our wallet that you might always lose unexpectedly something on the order of the dust threshold, rather than explicitly mention it every time we think it could happen.   But if I'm outvoted, so be it..\r\n",
      "created_at": "2017-01-16T02:10:09Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96156341",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96156341"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2626,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96330335",
      "pull_request_review_id": 16908479,
      "id": 96330335,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MzMwMzM1",
      "diff_hunk": "@@ -2582,6 +2584,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+    }\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            } else if (totalFee > maxTxFee) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            }\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think if you have specified a manual confTarget you probably want to always take this branch.",
      "created_at": "2017-01-17T01:33:53Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96330335",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96330335"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96332908",
      "pull_request_review_id": 16910930,
      "id": 96332908,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MzMyOTA4",
      "diff_hunk": "@@ -1958,6 +2017,37 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": null,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I believe this and the check further down should have a fOnlyConfirmed && at the beginning to avoid not showing the tx currently in mempool's change output in listunspent, which I think would be the correct behavior.",
      "created_at": "2017-01-17T02:08:58Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96332908",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96332908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96333048",
      "pull_request_review_id": 16911065,
      "id": 96333048,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2MzMzMDQ4",
      "diff_hunk": "@@ -1958,6 +2017,37 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": 96332908,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or maybe only the one below, but in either case should be well-documented.",
      "created_at": "2017-01-17T02:10:50Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96333048",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96333048"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96440795",
      "pull_request_review_id": 17022253,
      "id": 96440795,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDQwNzk1",
      "diff_hunk": "@@ -1958,6 +2017,37 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n             if (nDepth == 0 && !pcoin->InMempool())\n                 continue;\n \n+            // We should not consider coins from transactions that are replacing\n+            // other transactions.\n+            //\n+            // Example: There is a transaction A which is replaced by bumpfee\n+            // transaction B. In this case, we want to prevent creation of\n+            // a transaction B' which spends an output of B.\n+            //\n+            // Reason: If transaction A were initially confirmed, transactions B\n+            // and B' would no longer be valid, so the user would have to create\n+            // a new transaction C to replace B'. However, in the case of a\n+            // one-block reorg, transactions B' and C might BOTH be accepted,\n+            // when the user only wanted one of them. Specifically, there could\n+            // be a 1-block reorg away from the chain where transactions A and C\n+            // were accepted to another chain where B, B', and C were all\n+            // accepted.\n+            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 106,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": 96332908,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added in 0f83aa3a1e1b2668a6231a1660ed864e2da3a341.",
      "created_at": "2017-01-17T15:51:07Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96440795",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96440795"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96443450",
      "pull_request_review_id": 17025124,
      "id": 96443450,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDQzNDUw",
      "diff_hunk": "@@ -2413,11 +2417,17 @@ UniValue listunspent(const JSONRPCRequest& request)\n         }\n     }\n \n+    bool include_untrusted = true;\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n+        RPCTypeCheckArgument(request.params[3], UniValue::VBOOL);\n+        include_untrusted = request.params[3].get_bool();\n+    }\n+\n     UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n     assert(pwalletMain != NULL);\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n-    pwalletMain->AvailableCoins(vecOutputs, false, NULL, true);\n+    pwalletMain->AvailableCoins(vecOutputs, !include_untrusted, NULL, true);",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 62,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "759a7cd0b602003dc1dc990b8fca5025bd03ae7e",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "note: in the future we should rename and invert the AvailableCoins argument to this. ",
      "created_at": "2017-01-17T16:01:29Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96443450",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96443450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96450396",
      "pull_request_review_id": 17032285,
      "id": 96450396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NDUwMzk2",
      "diff_hunk": "@@ -2582,6 +2584,258 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+    }\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            }\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+    }\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) { // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+            }\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int64();\n+            if (totalFee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            } else if (totalFee > maxTxFee) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+            }\n+        }\n+\n+        if (options.exists(\"replaceable\")) {\n+            replaceable = options[\"replaceable\"].get_bool();\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        }\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 175,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "4e1a04002b0783d53c27eaed8df4ddb2bded6bf7",
      "in_reply_to_id": 96330335,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done in a29b3f557fe8b7bb8e1b28933f3d5a4a3a36d362.",
      "created_at": "2017-01-17T16:27:49Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96450396",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96450396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96696736",
      "pull_request_review_id": 17286343,
      "id": 96696736,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Njk2NzM2",
      "diff_hunk": "@@ -2582,6 +2584,236 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n+        return NullUniValue;\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice if it has unconfirmed ancestors which are\\n\"\n+            \"                         replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash))\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1)\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0)\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+\n+    if (!SignalsOptInRBF(wtx))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\"))\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n+\n+    // figure out which output was change\n+    // if there was no change output or multiple change outputs, fail\n+    int nOutput = -1;\n+    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n+        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+            if (nOutput != -1)\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n+            nOutput = i;\n+        }\n+    }\n+    if (nOutput == -1)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction does not have a change output\");\n+\n+    // optional parameters\n+    int newConfirmTarget = nTxConfirmTarget;\n+    CAmount totalFee = 0;\n+    bool replaceable = true;\n+    if (request.params.size() > 1) {\n+        UniValue options = request.params[1];\n+        if (options.size() > 2)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Too many optional parameters\");\n+        RPCTypeCheckObj(options,\n+            {\n+                {\"confTarget\", UniValueType(UniValue::VNUM)},\n+                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {\"replaceable\", UniValueType(UniValue::VBOOL)},\n+            },\n+            true, true);\n+\n+        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        } else if (options.exists(\"confTarget\")) {\n+            newConfirmTarget = options[\"confTarget\"].get_int();\n+            if (newConfirmTarget <= 0) // upper-bound will be checked by estimatefee/smartfee\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid confTarget (cannot be <= 0)\");\n+        } else if (options.exists(\"totalFee\")) {\n+            totalFee = options[\"totalFee\"].get_int();\n+            if (totalFee <= 0)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be <= 0)\");\n+            else if (totalFee > maxTxFee)\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid totalFee (cannot be higher than maxTxFee)\");\n+        }\n+\n+        if (options.exists(\"replaceable\") && !options[\"replaceable\"].get_bool()) {\n+            replaceable = false;\n+        }\n+    }\n+\n+    // signature sizes can vary by a byte, so add 1 for each input when calculating the new fee\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    const int64_t maxNewTxSize = txSize + wtx.tx->vin.size();\n+\n+    // calculate the old fee and fee-rate\n+    CAmount nOldFee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    CFeeRate nOldFeeRate(nOldFee, txSize);\n+    CAmount nNewFee;\n+    CFeeRate nNewFeeRate;\n+\n+    if (totalFee > 0) {\n+        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + minRelayTxFee.GetFee(maxNewTxSize);\n+        if (totalFee < minTotalFee)\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee, must be at least %s (oldFee %s + relayFee %s)\", FormatMoney(minTotalFee), nOldFeeRate.GetFee(maxNewTxSize), minRelayTxFee.GetFee(maxNewTxSize)));\n+        nNewFee = totalFee;\n+        nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n+    } else {\n+        // use the user-defined payTxFee if possible, otherwise use smartfee / fallbackfee\n+        nNewFeeRate = payTxFee;\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = mempool.estimateSmartFee(newConfirmTarget);\n+        if (nNewFeeRate.GetFeePerK() == 0)\n+            nNewFeeRate = CWallet::fallbackFee;\n+\n+        // new fee rate must be at least old rate + minimum relay rate\n+        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK())\n+            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + ::minRelayTxFee.GetFeePerK());\n+\n+        nNewFee = nNewFeeRate.GetFee(maxNewTxSize);\n+    }\n+\n+    // check that fee rate is higher than mempool's minimum fee\n+    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n+    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n+    // moment earlier. In this case, we report an error to the user, who may use totalFee to make an adjustment.\n+    CFeeRate minMempoolFeeRate = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK())\n+        throw JSONRPCError(RPC_MISC_ERROR, strprintf(\"New fee rate (%s) is less than the minimum fee rate (%s) to get into the mempool. totalFee value should to be at least %s or settxfee value should be at least %s to add transaction.\", FormatMoney(nNewFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFeePerK()), FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)), FormatMoney(minMempoolFeeRate.GetFeePerK())));\n+\n+    // Now modify the output to increase the fee.\n+    // If the output is not large enough to pay the fee, fail.\n+    CAmount nDelta = nNewFee - nOldFee;\n+    assert(nDelta > 0);\n+    CMutableTransaction tx(*(wtx.tx));\n+    CTxOut* poutput = &(tx.vout[nOutput]);\n+    if (poutput->nValue < nDelta)\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Change output is too small to bump the fee\");\n+\n+    // If the output would become dust, discard it (converting the dust to fee)\n+    poutput->nValue -= nDelta;\n+    if (poutput->nValue <= poutput->GetDustThreshold(::minRelayTxFee)) {\n+        LogPrint(\"rpc\", \"Bumping fee and discarding dust output\\n\");\n+        nNewFee += poutput->nValue;\n+        tx.vout.erase(tx.vout.begin() + nOutput);\n+    }\n+\n+    // Mark new tx not replaceable, if requested.\n+    if (!replaceable) {\n+        for (auto& input : tx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n+\n+    // sign the new tx\n+    CTransaction txNewConst(tx);\n+    int nIn = 0;\n+    for (auto& input : tx.vin) {\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n+        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        SignatureData sigdata;\n+        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata))\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        UpdateTransaction(tx, nIn, sigdata);\n+        nIn++;\n+    }\n+\n+    // commit/broadcast the tx\n+    CReserveKey reservekey(pwalletMain);\n+    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state) || !state.IsValid())\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n+\n+    // mark the original tx as bumped\n+    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+        // TODO: see if JSON-RPC has a standard way of returning a response\n+        // along with an exception. It would be good to return information about\n+        // wtxBumped to the caller even if marking the original transaction\n+        // replaced does not succeed for some reason.\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to mark the original transaction as replaced.\");",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 234,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "f9c4007977a25d53cc5ad9459db51a831fb8ae89",
      "in_reply_to_id": 96095311,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I would worry that a caller might ignore the error and try again, but I guess the harm risk of that is minimal with bumpfee.",
      "created_at": "2017-01-18T18:04:02Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96696736",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96696736"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697253",
      "pull_request_review_id": 17286929,
      "id": 96697253,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Njk3MjUz",
      "diff_hunk": "@@ -79,16 +79,20 @@ void RPCTypeCheck(const UniValue& params,\n             break;\n \n         const UniValue& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n-        {\n-            string err = strprintf(\"Expected type %s, got %s\",\n-                                   uvTypeName(t), uvTypeName(v.type()));\n-            throw JSONRPCError(RPC_TYPE_ERROR, err);\n+        if (!(fAllowNull && v.isNull())) {\n+            RPCTypeCheckArgument(v, t);\n         }\n         i++;\n     }\n }\n \n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)",
      "path": "src/rpc/server.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This seems redundant. Type-checking is the purpose of the .get_&lt;type> methods on UniValue.",
      "created_at": "2017-01-18T18:06:40Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697489",
      "pull_request_review_id": 17287177,
      "id": 96697489,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Njk3NDg5",
      "diff_hunk": "@@ -2364,6 +2366,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"address\\\"   (string) bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n+            \"                  because they come from unconfirmed untrusted transactions or unconfirmed\\n\"\n+            \"                  replacement transactions (cases where we can't be sure a conflicting\\n\"\n+            \"                  transaction won't be mined).\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We can't be sure 1-block confirmed transactions won't have a replacement mined either...",
      "created_at": "2017-01-18T18:07:52Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697489",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2372,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697761",
      "pull_request_review_id": 17287459,
      "id": 96697761,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2Njk3NzYx",
      "diff_hunk": "@@ -79,16 +79,20 @@ void RPCTypeCheck(const UniValue& params,\n             break;\n \n         const UniValue& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n-        {\n-            string err = strprintf(\"Expected type %s, got %s\",\n-                                   uvTypeName(t), uvTypeName(v.type()));\n-            throw JSONRPCError(RPC_TYPE_ERROR, err);\n+        if (!(fAllowNull && v.isNull())) {\n+            RPCTypeCheckArgument(v, t);\n         }\n         i++;\n     }\n }\n \n+void RPCTypeCheckArgument(const UniValue& value, UniValue::VType typeExpected)",
      "path": "src/rpc/server.cpp",
      "position": 16,
      "original_position": 16,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": 96697253,
      "user": {
        "login": "TheBlueMatt",
        "id": 649246,
        "node_id": "MDQ6VXNlcjY0OTI0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/TheBlueMatt",
        "html_url": "https://github.com/TheBlueMatt",
        "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
        "following_url": "https://api.github.com/users/TheBlueMatt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/TheBlueMatt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/TheBlueMatt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
        "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
        "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
        "events_url": "https://api.github.com/users/TheBlueMatt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We absolutely do not use .get_<type>'s built-in type check anywhere - it throws a different type of exception which will not be correctly reported as an RPC_TYPE_ERROR.",
      "created_at": "2017-01-18T18:09:19Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96697761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96697761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96701580",
      "pull_request_review_id": 17287177,
      "id": 96701580,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NzAxNTgw",
      "diff_hunk": "@@ -2350,9 +2352,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] )\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Prefer to add an options Object for this.",
      "created_at": "2017-01-18T18:26:53Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96701580",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96701580"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2357,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96727363",
      "pull_request_review_id": 17318476,
      "id": 96727363,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NzI3MzYz",
      "diff_hunk": "@@ -2364,6 +2366,10 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"address\\\"   (string) bitcoin address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"4. include_unsafe (bool, optional, default=true) Include outputs that are not safe to spend\\n\"\n+            \"                  because they come from unconfirmed untrusted transactions or unconfirmed\\n\"\n+            \"                  replacement transactions (cases where we can't be sure a conflicting\\n\"\n+            \"                  transaction won't be mined).\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": null,
      "original_position": 30,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": 96697489,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Changed wording in 4beb7c92c70b7668042383d37c49545198aa00cd.",
      "created_at": "2017-01-18T20:32:49Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96727363",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96727363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2372,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96727791",
      "pull_request_review_id": 17318902,
      "id": 96727791,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2NzI3Nzkx",
      "diff_hunk": "@@ -2350,9 +2352,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n     if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] )\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] )\\n\"",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 19,
      "original_position": 19,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "ce3a363049bf8fdd8be926ca3ab8c803c98de6d2",
      "in_reply_to_id": 96701580,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Interesting. I wasn't following the named argument discussion in detail, but I thought named arguments would be preferable to options because they are easier to specify on the command line. But maybe there are advantages to options objects that I'm not aware of.",
      "created_at": "2017-01-18T20:34:58Z",
      "updated_at": "2017-01-19T16:30:41Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96727791",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96727791"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2357,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96925962",
      "pull_request_review_id": 17524852,
      "id": 96925962,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk2OTI1OTYy",
      "diff_hunk": "@@ -2595,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction is not BIP 125 replaceable\");\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        throw JSONRPCError(RPC_INVALID_REQUEST, strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", hash.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 165,
      "original_position": 96,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ultra-nit: \"bumped\" is a bit confusing since it's already used in another sense(bumped fee), \"replace\" is likely better.",
      "created_at": "2017-01-19T18:34:56Z",
      "updated_at": "2017-01-19T18:36:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r96925962",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/96925962"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2681,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97000879",
      "pull_request_review_id": 17601366,
      "id": 97000879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MDAwODc5",
      "diff_hunk": "@@ -2582,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 160,
      "original_position": 160,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "in_reply_to_id": null,
      "user": {
        "login": "jameshilliard",
        "id": 3298484,
        "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jameshilliard",
        "html_url": "https://github.com/jameshilliard",
        "followers_url": "https://api.github.com/users/jameshilliard/followers",
        "following_url": "https://api.github.com/users/jameshilliard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jameshilliard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jameshilliard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
        "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
        "repos_url": "https://api.github.com/users/jameshilliard/repos",
        "events_url": "https://api.github.com/users/jameshilliard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should probably have an option to override this.",
      "created_at": "2017-01-20T02:10:26Z",
      "updated_at": "2017-01-20T02:10:26Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97000879",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97000879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2676,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97013772",
      "pull_request_review_id": 17614336,
      "id": 97013772,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MDEzNzcy",
      "diff_hunk": "@@ -2582,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 160,
      "original_position": 160,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "in_reply_to_id": 97000879,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An option to signal RBF in the original transaction (which already exists, see -walletrbf option, and #9592, #9527), or an option to create a bumpfee transaction even if the original doesn't signal RBF?",
      "created_at": "2017-01-20T05:14:37Z",
      "updated_at": "2017-01-20T05:14:37Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97013772",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97013772"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2676,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97014539",
      "pull_request_review_id": 17615143,
      "id": 97014539,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3MDE0NTM5",
      "diff_hunk": "@@ -2582,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 160,
      "original_position": 160,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "in_reply_to_id": 97000879,
      "user": {
        "login": "jameshilliard",
        "id": 3298484,
        "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3298484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jameshilliard",
        "html_url": "https://github.com/jameshilliard",
        "followers_url": "https://api.github.com/users/jameshilliard/followers",
        "following_url": "https://api.github.com/users/jameshilliard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jameshilliard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jameshilliard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
        "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
        "repos_url": "https://api.github.com/users/jameshilliard/repos",
        "events_url": "https://api.github.com/users/jameshilliard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "An option to create a bumpfee transaction regardless of if the original signaled RBF since some nodes may accept it.",
      "created_at": "2017-01-20T05:26:55Z",
      "updated_at": "2017-01-20T05:26:55Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97014539",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97014539"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2676,
      "original_line": null,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97621411",
      "pull_request_review_id": 18237114,
      "id": 97621411,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDk3NjIxNDEx",
      "diff_hunk": "@@ -2582,6 +2597,261 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue bumpfee(const JSONRPCRequest& request)\n+{\n+    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw runtime_error(\n+            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+            \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+            \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n+            \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n+            \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+            \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n+            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"Alternatively, the user can specify totalFee, or use RPC setpaytxfee to set a higher fee rate.\\n\"\n+            \"At a minimum, the new fee rate must be high enough to pay a new relay fee (relay fee amount returned\\n\"\n+            \"by getnetworkinfo RPC) and to enter the node's mempool.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. txid                  (string, required) The txid to be bumped\\n\"\n+            \"2. options               (object, optional)\\n\"\n+            \"   {\\n\"\n+            \"     \\\"confTarget\\\"        (numeric, optional) Confirmation target (in blocks)\\n\"\n+            \"     \\\"totalFee\\\"          (numeric, optional) Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n+            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         the dust threshold.\\n\"\n+            \"     \\\"replaceable\\\"       (boolean, optional, default true) Whether the new transaction should still be\\n\"\n+            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+            \"                         still be replacable in practice, for example if it has unconfirmed ancestors which\\n\"\n+            \"                         are replaceable).\\n\"\n+            \"   }\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n+            \"  \\\"oldfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n+            \"  \\\"fee\\\":     n,         (numeric) Fee of the new transaction\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n+            HelpExampleCli(\"bumpfee\", \"<txid>\"));\n+    }\n+\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+    uint256 hash;\n+    hash.SetHex(request.params[0].get_str());\n+\n+    // retrieve the original tx from the wallet\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+    if (!pwalletMain->mapWallet.count(hash)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n+    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+\n+    if (pwalletMain->HasWalletSpend(hash)) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n+    }\n+\n+    {\n+        LOCK(mempool.cs);\n+        auto it = mempool.mapTx.find(hash);\n+        if (it != mempool.mapTx.end() && it->GetCountWithDescendants() > 1) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the mempool\");\n+        }\n+    }\n+\n+    if (wtx.GetDepthInMainChain() != 0) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction has been mined, or is conflicted with a mined transaction\");\n+    }\n+\n+    if (!SignalsOptInRBF(wtx)) {",
      "path": "src/wallet/rpcwallet.cpp",
      "position": 160,
      "original_position": 160,
      "commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "original_commit_id": "cc0243ad32cee1cc9faab317364b889beaf07647",
      "in_reply_to_id": 97000879,
      "user": {
        "login": "ryanofsky",
        "id": 7133040,
        "node_id": "MDQ6VXNlcjcxMzMwNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ryanofsky",
        "html_url": "https://github.com/ryanofsky",
        "followers_url": "https://api.github.com/users/ryanofsky/followers",
        "following_url": "https://api.github.com/users/ryanofsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ryanofsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ryanofsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
        "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
        "repos_url": "https://api.github.com/users/ryanofsky/repos",
        "events_url": "https://api.github.com/users/ryanofsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There was some discussion about this idea in IRC https://botbot.me/freenode/bitcoin-core-dev/msg/79836432/ (unclear what the outcome was)",
      "created_at": "2017-01-24T18:51:32Z",
      "updated_at": "2017-01-24T18:51:32Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/8456#discussion_r97621411",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/97621411"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/8456"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 2676,
      "original_line": null,
      "side": "RIGHT"
    }
  ]
}