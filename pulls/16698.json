{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698",
    "id": 310460975,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNDYwOTc1",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16698",
    "diff_url": "https://github.com/bitcoin/bitcoin/pull/16698.diff",
    "patch_url": "https://github.com/bitcoin/bitcoin/pull/16698.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698",
    "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/939e2206021fd00cfd56c4de090434e4152bae8a",
    "number": 16698,
    "state": "closed",
    "locked": true,
    "maintainer_can_modify": false,
    "title": "Mempool: rework rebroadcast logic to improve privacy",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The current rebroadcast logic is terrible for privacy because only the source wallet will rebroadcast transactions, and does so quite frequently. This PR aims to improve privacy dramatically while preserving the benefits of rebroadcasting that ensure txns are successfully propagated through the network.\r\n\r\nThis PR introduces changes so nodes will resend transactions that it believes should have already been mined. It extracts the logic from the wallet into the mempool, so nodes will rebroadcast txns regardless of the originating wallet. Txns are defined as \"should have been mined\" by using the block assembler logic, and excluding txns that were recently added to the mempool. The wallet will resubmit txns to the mempool on a regular cadence to ensure those txns aren't dropped (due to eviction, expiry, etc..) before being confirmed. \r\n\r\nFor more information, see: https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba",
    "labels": [
      {
        "id": 149424,
        "node_id": "MDU6TGFiZWwxNDk0MjQ=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet",
        "name": "Wallet",
        "color": "08a781",
        "default": false
      },
      {
        "id": 98298007,
        "node_id": "MDU6TGFiZWw5ODI5ODAwNw==",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/P2P",
        "name": "P2P",
        "color": "006b75",
        "default": false
      },
      {
        "id": 164208572,
        "node_id": "MDU6TGFiZWwxNjQyMDg1NzI=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool",
        "name": "Mempool",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 955867938,
        "node_id": "MDU6TGFiZWw5NTU4Njc5Mzg=",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Needs%20rebase",
        "name": "Needs rebase",
        "description": "",
        "color": "cccccc",
        "default": false
      }
    ],
    "active_lock_reason": "resolved",
    "created_at": "2019-08-23T16:48:58Z",
    "updated_at": "2022-08-16T17:04:02Z",
    "closed_at": "2020-03-31T00:25:03Z",
    "mergeable": false,
    "mergeable_state": "dirty",
    "merge_commit_sha": "42b07f5bd4182ba496ab060a5fd1301f744de888",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "amitiuttarwar:rebroadcast",
      "ref": "rebroadcast",
      "sha": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 164037357,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNjQwMzczNTc=",
        "name": "bitcoin",
        "full_name": "amitiuttarwar/bitcoin",
        "owner": {
          "login": "amitiuttarwar",
          "id": 1500952,
          "node_id": "MDQ6VXNlcjE1MDA5NTI=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/amitiuttarwar",
          "html_url": "https://github.com/amitiuttarwar",
          "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
          "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
          "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
          "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
          "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/amitiuttarwar/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": true,
        "url": "https://api.github.com/repos/amitiuttarwar/bitcoin",
        "archive_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/events",
        "forks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/amitiuttarwar/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:amitiuttarwar/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/amitiuttarwar/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/amitiuttarwar/bitcoin/hooks",
        "svn_url": "https://github.com/amitiuttarwar/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 4,
        "stargazers_count": 6,
        "watchers_count": 6,
        "size": 216794,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T23:05:52Z",
        "created_at": "2019-01-04T00:31:16Z",
        "updated_at": "2021-09-05T22:29:09Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "816464198c34a373229e865d76f4bc0ca8f127dc",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 1181927,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMTgxOTI3",
        "name": "bitcoin",
        "full_name": "bitcoin/bitcoin",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bitcoin",
        "description": "Bitcoin Core integration/staging tree",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bitcoin",
        "archive_url": "https://api.github.com/repos/bitcoin/bitcoin/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bitcoin/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bitcoin/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bitcoin/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bitcoin/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bitcoin/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bitcoin/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bitcoin/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bitcoin/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bitcoin/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bitcoin/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bitcoin/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bitcoin/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bitcoin.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bitcoin/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bitcoin/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bitcoin/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bitcoin/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bitcoin/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bitcoin/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bitcoin/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bitcoin.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bitcoin/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bitcoin/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bitcoin/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bitcoin/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bitcoin/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bitcoin/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bitcoin.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bitcoin/hooks",
        "svn_url": "https://github.com/bitcoin/bitcoin",
        "homepage": "https://bitcoincore.org/en/download",
        "language": "C++",
        "forks_count": 34324,
        "stargazers_count": 69817,
        "watchers_count": 69817,
        "size": 233879,
        "default_branch": "master",
        "open_issues_count": 627,
        "is_template": false,
        "topics": [
          "bitcoin",
          "c-plus-plus",
          "cryptocurrency",
          "cryptography",
          "p2p"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": false,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-06T22:42:00Z",
        "created_at": "2010-12-19T15:16:43Z",
        "updated_at": "2023-06-07T01:13:41Z",
        "license": {
          "key": "mit",
          "name": "MIT License",
          "node_id": "MDc6TGljZW5zZTEz",
          "spdx_id": "MIT",
          "url": "https://api.github.com/licenses/mit",
          "html_url": null,
          "description": null,
          "implementation": null,
          "permissions": null,
          "conditions": null,
          "limitations": null,
          "body": null,
          "featured": null
        }
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 698,
    "deletions": 115,
    "changed_files": 17,
    "commits": 7,
    "review_comments": 121,
    "comments": 29
  },
  "events": [
    {
      "event": "labeled",
      "id": 2580291653,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291653",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "Mempool",
        "color": "fef2c0"
      }
    },
    {
      "event": "labeled",
      "id": 2580291654,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291654",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "Mining",
        "color": "c7def8"
      }
    },
    {
      "event": "labeled",
      "id": 2580291656,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291656",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 2580291657,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NTc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291657",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "labeled",
      "id": 2580291658,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291658",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "labeled",
      "id": 2580291660,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NjA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291660",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "labeled",
      "id": 2580291661,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODAyOTE2NjE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580291661",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T16:57:36Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "commented",
      "id": 524422172,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQyMjE3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524422172",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T18:45:17Z",
      "updated_at": "2020-01-29T18:20:55Z",
      "author_association": "MEMBER",
      "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17805](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17805.html) (test: Add test for rpcwhitelistdefault by emilengler)\n* [#17786](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17786.html) (refactor: Nuke policy/fees->mempool circular dependencies by hebasto)\n* [#17693](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17693.html) (rpc: Add generateblock to mine a custom set of transactions by andrewtoth)\n* [#17484](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17484.html) (wallet: add cached m_is_ibd to remove Chain::isInitialBlockDownload by ariard)\n* [#17303](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17303.html) (p2p: Stop relaying non-mempool txs, improve tx privacy slightly by MarcoFalke)\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface and the wallet to have multiple by achow101)\n* [#16910](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16910.html) (wallet: reduce loading time by using unordered maps by achow101)\n* [#16528](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16528.html) ([WIP] Native Descriptor Wallets (take 2) by achow101)\n* [#15719](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15719.html) (Drop Chain::requestMempoolTransactions method by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524422172",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2580733380,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MDczMzM4MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580733380",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T20:12:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2580748907,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MDc0ODkwNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580748907",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T20:19:24Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2580769162,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MDc2OTE2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580769162",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T20:27:21Z"
    },
    {
      "event": "reviewed",
      "id": 279235742,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc5MjM1NzQy",
      "url": null,
      "actor": null,
      "commit_id": "c383bdeea494fe05d1fd6332b72b7517e78b2ba0",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-279235742",
      "submitted_at": "2019-08-23T21:45:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2580942261,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MDk0MjI2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580942261",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T21:56:04Z"
    },
    {
      "event": "commented",
      "id": 524480540,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDU0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480540",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T22:23:04Z",
      "updated_at": "2019-08-23T22:23:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "This code is ready for initial review.\r\n\r\nthere are still some to dos before it would be ready for merge: \r\n- identify expected rebroadcast traffic & worst case bandwidth usage.\r\n- persist `setUnbroadcastTxIDs` to `mempool.dat` \r\n- add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\nthere are also some follow-ups that can be addressed in separate PRs: \r\n- `m_best_block_time` is no longer used & can be removed & the wallet no longer needs to subscribe to `UpdatedBlockTip()` validation interface method\r\n- functionality to mark a peer (as \"local\" or such) so the mempool would still enforce initial broadcast for transactions received from one of these peers. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 524480853,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNDQ4MDg1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524480853",
      "actor": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T22:24:32Z",
      "updated_at": "2019-08-23T22:24:32Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480853",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2580999431,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MDk5OTQzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2580999431",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-23T22:35:03Z"
    },
    {
      "event": "unlabeled",
      "id": 2581156873,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1Njg3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581156873",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:37:30Z",
      "label": {
        "name": "Mining",
        "color": "c7def8"
      }
    },
    {
      "event": "unlabeled",
      "id": 2581156874,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1Njg3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581156874",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:37:30Z",
      "label": {
        "name": "RPC/REST/ZMQ",
        "color": "0052cc"
      }
    },
    {
      "event": "unlabeled",
      "id": 2581156875,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1Njg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581156875",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:37:30Z",
      "label": {
        "name": "TX fees and policy",
        "color": "5319e7"
      }
    },
    {
      "event": "unlabeled",
      "id": 2581156876,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1Njg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581156876",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:37:30Z",
      "label": {
        "name": "Tests",
        "color": "d4c5f9"
      }
    },
    {
      "event": "unlabeled",
      "id": 2581156877,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1Njg3Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581156877",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:37:30Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "unlabeled",
      "id": 2581157206,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjU4MTE1NzIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581157206",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:38:14Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "labeled",
      "id": 2581157208,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODExNTcyMDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581157208",
      "actor": {
        "login": "meshcollider",
        "id": 3211283,
        "node_id": "MDQ6VXNlcjMyMTEyODM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/meshcollider",
        "html_url": "https://github.com/meshcollider",
        "followers_url": "https://api.github.com/users/meshcollider/followers",
        "following_url": "https://api.github.com/users/meshcollider/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/meshcollider/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/meshcollider/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
        "organizations_url": "https://api.github.com/users/meshcollider/orgs",
        "repos_url": "https://api.github.com/users/meshcollider/repos",
        "events_url": "https://api.github.com/users/meshcollider/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/meshcollider/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:38:14Z",
      "label": {
        "name": "Wallet",
        "color": "08a781"
      }
    },
    {
      "event": "labeled",
      "id": 2581157518,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI1ODExNTc1MTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581157518",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T01:39:00Z",
      "label": {
        "name": "P2P",
        "color": "006b75"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2581403730,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjU4MTQwMzczMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2581403730",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-24T13:08:30Z"
    },
    {
      "event": "reviewed",
      "id": 279342223,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc5MzQyMjIz",
      "url": null,
      "actor": null,
      "commit_id": "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Concept ACK. Some questions about why microseconds are truncated to seconds among other stuff. ",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-279342223",
      "submitted_at": "2019-08-25T16:02:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 279845040,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mjc5ODQ1MDQw",
      "url": null,
      "actor": null,
      "commit_id": "4bda14245c53d89beb790053158c0ba39cb08a28",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": ">  Txns are defined as \"should have been mined\" by using the block assembler logic\r\n\r\nI don’t understand 1) the concept “should have been mined”, and 2) how the block assembler logic achieves this.\r\nAs to 1) do you mean the txns should have been mined in a specific block/range of blocks, but weren’t? Should no rebroadcasts happen in an ideal world where miners have an identical mempool to ours and mine rationally?\r\nAs to 2) from what I understand,  `BlockAssembler` creates a block template with `3/4*MAX_BLOCK_WEIGHT` including the top feerate packages of our current mempool. Wouldn’t it always fill this block template with txns if our mempool is large enough, and therefore rather include 75% of the txns that we expect to be mined in the next block, instead of txns that should have been mined in the past?",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-279845040",
      "submitted_at": "2019-08-26T21:33:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "commented",
      "id": 525055857,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA1NTg1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525055857",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T22:20:52Z",
      "updated_at": "2019-08-26T22:20:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the review @mzumsande ! \r\n\r\n> I don’t understand 1) the concept “should have been mined\" [...] do you mean the txns should have been mined in a specific block/range of blocks, but weren’t? Should no rebroadcasts happen in an ideal world where miners have an identical mempool to ours and mine rationally?\r\n\r\nbased on the local mempool, we are attempting to answer the question of what txns we think should have been mined. And saying if it wasn't, maybe there was an issue with relay. \r\nYou are correct- in a world where all mempools are consistent there wouldn't be rebroadcasts.\r\n\r\n> As to 2) from what I understand, BlockAssembler creates a block template with 3/4*MAX_BLOCK_WEIGHT including the top feerate packages of our current mempool. Wouldn’t it always fill this block template with txns if our mempool is large enough, and therefore rather include 75% of the txns that we expect to be mined in the next block, instead of txns that should have been mined in the past?\r\n\r\nyes. you will start with txns you expect to be mined in the next block. the recency filter will (likely) remove some of those transactions. however, in the case of a mempool thats emptying out, the recency filter might not have much effect. for that I have this todo before the PR would be ready for merge: \r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525055857",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2585178947,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU4NTE3ODk0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2585178947",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T22:20:52Z"
    },
    {
      "event": "subscribed",
      "id": 2585178949,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1ODUxNzg5NDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2585178949",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T22:20:52Z"
    },
    {
      "event": "commented",
      "id": 525063430,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNTA2MzQzMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/525063430",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-26T22:51:23Z",
      "updated_at": "2019-08-26T22:51:23Z",
      "author_association": "MEMBER",
      "body": "> based on the local mempool, we are attempting to answer the question of what txns we think should have been mined.\r\n\r\nWhat confuses me is how we can answer that without actually looking into recent blocks. \r\nConsidering that txns are removed from the mempool once they are included in a valid block, it is possible that the previous blocks removed the respective top of our previous versions of the mempool, so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\nOr the miners could have left out several high-fee-rate txns in favor of lower ones, in which case the higher ones are still present in our mempool and we would like to rebroadcast them. \r\nOr there just might have been no new blocks found in the hour since the last rebroadcast, in which case we wouldn't need to rebroadcast. \r\n\r\nHow could we distinguish between these cases by just looking at our current mempool?\r\n",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-525063430",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 526321842,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjMyMTg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526321842",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-29T19:10:47Z",
      "updated_at": "2019-08-29T19:10:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "great questions @mzumsande. I've thought about this a lot, so let me share some of my reasoning- \r\n \r\n> What confuses me is how we can answer that without actually looking into recent blocks.\r\n\r\nWe can't. And further, even if we do look at the recent blocks, we still cannot answer exactly what \"should\" have been included. The two main pieces of information we are missing are 1. what the miner's mempool looked like and 2. any weight applied through `prioritisetransaction`. By looking at a block, it is difficult to extrapolate the exact minimum fee rate for transactions to be included. So instead, the approach here is for a node to look at its local mempool and work towards the picture of what it believes should have already been included.  \r\n\r\n> so we are left with txns that were not at the top of the mempool earlier but are now, which we wouldn't want to rebroadcast. \r\n\r\nyup, specifically in the case of the emptying out mempool, we would currently rebroadcast a full set of txns, thats why I want to build a cache of min fee rate and apply an extra filter to reduce noise in this circumstance ( from https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-524480540 ): \r\n\r\n> add functionality to run an automated job to cache min fee rate for txns to be included in block, then apply that filter to exclude txns with fee rate < min from rebroadcast set. this will reduce rebroadcast noise in scenarios where the mempool is emptying out.\r\n\r\n--\r\n\r\nThe crux of the thinking is that we are not going to get the rebroadcast set perfect, but that is ok. When a node rebroadcasts a txn, it sends an INV message to new connections (see `filterInventoryKnown`). Since INV messages are relatively small & can incorporate many transactions, we have some leeway. \r\n\r\nAll these different mechanisms are to reduce noise. I want to ensure the parameters chosen allow the worst case scenario (rebroadcasting the full set) to not be disruptive to the network. And these mechanisms should make the worst case infrequent.\r\n\r\nDoes this make sense to you? Let me know if you still have questions. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526321842",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2595048248,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjU5NTA0ODI0OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2595048248",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-29T19:10:47Z"
    },
    {
      "event": "subscribed",
      "id": 2595048249,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI1OTUwNDgyNDk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2595048249",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-29T19:10:47Z"
    },
    {
      "event": "commented",
      "id": 526857552,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUyNjg1NzU1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526857552",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-08-31T19:04:39Z",
      "updated_at": "2019-08-31T19:04:39Z",
      "author_association": "MEMBER",
      "body": "Thanks for the answer! I think that your approach makes sense and am looking forward to the traffic/bandwidth analysis. \r\nI am still not so sure if your approach is best described with the notion of \"should have been mined\", but to a degree that's just semantics.",
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-526857552",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "labeled",
      "id": 2616159491,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI2MTYxNTk0OTE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2616159491",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-07T11:32:37Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 531756860,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMTc1Njg2MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/531756860",
      "actor": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-16T12:32:56Z",
      "updated_at": "2019-09-16T12:32:56Z",
      "author_association": "MEMBER",
      "body": "Concept ACK",
      "user": {
        "login": "laanwj",
        "id": 126646,
        "node_id": "MDQ6VXNlcjEyNjY0Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/laanwj",
        "html_url": "https://github.com/laanwj",
        "followers_url": "https://api.github.com/users/laanwj/followers",
        "following_url": "https://api.github.com/users/laanwj/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/laanwj/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/laanwj/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
        "organizations_url": "https://api.github.com/users/laanwj/orgs",
        "repos_url": "https://api.github.com/users/laanwj/repos",
        "events_url": "https://api.github.com/users/laanwj/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/laanwj/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-531756860",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 532793902,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjc5MzkwMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532793902",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T17:51:07Z",
      "updated_at": "2019-09-18T17:51:07Z",
      "author_association": "MEMBER",
      "body": "Are you still working on this? This missed the 0.19 feature freeze, but I'd like to see it in 0.20 (hopefully early in the cycle)",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-532793902",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "milestoned",
      "id": 2644403045,
      "node_id": "MDE1Ok1pbGVzdG9uZWRFdmVudDI2NDQ0MDMwNDU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2644403045",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-18T17:51:16Z",
      "milestone": {
        "title": "0.20.0"
      }
    },
    {
      "event": "commented",
      "id": 533302150,
      "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzMwMjE1MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533302150",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T20:44:46Z",
      "updated_at": "2019-09-19T20:44:46Z",
      "author_association": "CONTRIBUTOR",
      "body": "@MarcoFalke yes will resume soon",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-533302150",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2648361052,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjY0ODM2MTA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2648361052",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T20:44:46Z"
    },
    {
      "event": "subscribed",
      "id": 2648361054,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI2NDgzNjEwNTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2648361054",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-09-19T20:44:46Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2700606296,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMDYwNjI5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700606296",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T21:43:17Z"
    },
    {
      "event": "unlabeled",
      "id": 2700634349,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjcwMDYzNDM0OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700634349",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T21:54:44Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2700665773,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMDY2NTc3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2700665773",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-09T22:08:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2703900486,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwMzkwMDQ4Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2703900486",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-10T19:23:21Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2707780618,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcwNzc4MDYxOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2707780618",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-12T02:31:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2712050831,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcxMjA1MDgzMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2712050831",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-14T22:57:18Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2726619393,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNjYxOTM5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726619393",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T00:47:13Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2726675740,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNjY3NTc0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726675740",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T01:48:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2726682572,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNjY4MjU3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2726682572",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T01:57:08Z"
    },
    {
      "event": "commented",
      "id": 544049895,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NDA0OTg5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544049895",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-19T02:01:53Z",
      "updated_at": "2019-11-20T22:19:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "an update on my current thinking for anyone interested-\r\n\r\nnext steps\r\n- [x] some misc small cleanup (make `PoissonNextSend` interface consistent, pull out 7f8056c50d047d12201ad5d0f75e00103f8a0bd6 into separate PR, etc.) \r\n- [x] cache the min fee rate for a txn to be included in a block & add as filter on rebroadcast set\r\n\r\nthen this PR would be ready for code review & I'd want to observe & gather data on bandwidth usage\r\n\r\nin follow up PRs\r\n- persist the unbroadcast txn set to `mempool.dat`\r\n- remove `m_best_block_time`\r\n- fix circular dependency introduced between txmempool & miner\r\n\r\nLMK if you have any questions or feedback! ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2727373925,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNzM3MzkyNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2727373925",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-20T00:04:55Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2727385743,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNzM4NTc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2727385743",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-20T00:43:20Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2727387735,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjcyNzM4NzczNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2727387735",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-20T00:49:31Z"
    },
    {
      "event": "reviewed",
      "id": 304269148,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA0MjY5MTQ4",
      "url": null,
      "actor": null,
      "commit_id": "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-304269148",
      "submitted_at": "2019-10-20T17:33:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2731227197,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczMTIyNzE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2731227197",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T20:52:44Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2731246273,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczMTI0NjI3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2731246273",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-21T20:59:07Z"
    },
    {
      "event": "reviewed",
      "id": 305514159,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzA1NTE0MTU5",
      "url": null,
      "actor": null,
      "commit_id": "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-305514159",
      "submitted_at": "2019-10-22T21:17:11Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2738187005,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczODE4NzAwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2738187005",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T18:51:25Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2738296137,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjczODI5NjEzNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2738296137",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-23T19:29:57Z"
    },
    {
      "event": "commented",
      "id": 546079321,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjA3OTMyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546079321",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T20:01:26Z",
      "updated_at": "2019-10-24T20:01:26Z",
      "author_association": "MEMBER",
      "body": "is this ready for review? ",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546079321",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "labeled",
      "id": 2742362412,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI3NDIzNjI0MTI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2742362412",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-24T22:05:02Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 546149954,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU0NjE0OTk1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/546149954",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T00:15:28Z",
      "updated_at": "2019-10-25T00:16:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "@instagibbs - working on it ! building out one more piece of functionality (described https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-544049895), then will be ready for review. I'll remove the WIP from the title & leave a comment when it is :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-546149954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2742572566,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjc0MjU3MjU2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2742572566",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T00:16:09Z"
    },
    {
      "event": "subscribed",
      "id": 2742572567,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI3NDI1NzI1Njc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2742572567",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-10-25T00:16:09Z"
    },
    {
      "event": "referenced",
      "id": 2772321979,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI3NzIzMjE5Nzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2772321979",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c7e6b3b343e836ff41e9a8872187e0b24f13064d",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e6b3b343e836ff41e9a8872187e0b24f13064d",
      "created_at": "2019-11-05T17:39:32Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2817012978,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjgxNzAxMjk3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2817012978",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T22:19:58Z"
    },
    {
      "event": "unlabeled",
      "id": 2817033964,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjgxNzAzMzk2NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2817033964",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T22:28:13Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2817097293,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjgxNzA5NzI5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2817097293",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T22:54:55Z"
    },
    {
      "event": "renamed",
      "id": 2817127803,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MjgxNzEyNzgwMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2817127803",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T23:08:25Z",
      "rename": {
        "from": "[WIP] Mempool: rework rebroadcast logic to improve privacy",
        "to": "Mempool: rework rebroadcast logic to improve privacy"
      }
    },
    {
      "event": "commented",
      "id": 556534669,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NjUzNDY2OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/556534669",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-20T23:15:08Z",
      "updated_at": "2019-11-20T23:15:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "🎉 this PR is ready for review!",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-556534669",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "reviewed",
      "id": 320570229,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwNTcwMjI5",
      "url": null,
      "actor": null,
      "commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-320570229",
      "submitted_at": "2019-11-21T00:15:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 320575120,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIwNTc1MTIw",
      "url": null,
      "actor": null,
      "commit_id": "6b70e7af8281f16d14d9c25138078e1131a1c3bd",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-320575120",
      "submitted_at": "2019-11-21T00:31:39Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2820715878,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjgyMDcxNTg3OA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2820715878",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-21T18:31:15Z"
    },
    {
      "event": "reviewed",
      "id": 321309451,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIxMzA5NDUx",
      "url": null,
      "actor": null,
      "commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is some really cool work! :clap: \r\n\r\nI did some basic review, left comments below.\r\n\r\n*It also seems that (maybe?) GitHub is screwing you on topological ordering, if I recall `git rebase --ignore-date` can make github show commits in proper order again (at the expense of the actual time you did the work). If you end up needing to rebase for whatever reason, may be worth doing that.*\r\n\r\nGenerally, this gets a concept ack from me, it does seem to be a logical improvement.\r\n\r\nOpen questions for me are:\r\n\r\n1) Testing -- I didn't review the python tests. I'm not sure what are the edgiest conditions that might come up\r\n2) I don't quite like using the mining code as a dependency for figuring out what to rebroadcast. Prior to this it would be possible to disable the ancestor-scored mapTx if you were a non-mining node, after this you will need to keep that index around. If we're only rebroadcasting once an hour or so though, how bad would it be to rebuild this index as a bounded-size priority queue (drop low scoring values) when needed (e.g., for future non-mining nodes)?\r\n3) I don't find the constants chosen unreasonable, but would be good to hear a bit more on why they were selected\r\n4) Would this PR be better if we used a \"thin blocks\" style relay? We already form a block template, but then we don't take advantage of the compact-blocks relay code which would minimize the data sent, assuming the neighbor node does have most of what we rebroadcast...",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-321309451",
      "submitted_at": "2019-11-22T03:26:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 321150871,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIxMTUwODcx",
      "url": null,
      "actor": null,
      "commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-321150871",
      "submitted_at": "2019-11-22T19:27:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "commented",
      "id": 557662617,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1NzY2MjYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/557662617",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-22T19:28:59Z",
      "updated_at": "2019-11-22T19:28:59Z",
      "author_association": "MEMBER",
      "body": "gave some opening suggestions while I digest the general strategy, feel free to not engage in the suggestions until enough concept/approach ACKs come in",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-557662617",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2829814945,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgyOTgxNDk0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2829814945",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-25T22:14:14Z"
    },
    {
      "event": "subscribed",
      "id": 2829814953,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4Mjk4MTQ5NTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2829814953",
      "actor": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-25T22:14:14Z"
    },
    {
      "event": "reviewed",
      "id": 322664247,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIyNjY0MjQ3",
      "url": null,
      "actor": null,
      "commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-322664247",
      "submitted_at": "2019-11-26T00:29:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "commented",
      "id": 558925008,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1ODkyNTAwOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/558925008",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T04:38:35Z",
      "updated_at": "2019-11-27T04:38:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "thanks for the reviews @JeremyRubin & @instagibbs. I'm making my way through them, but want to leave a high level comment- the biggest concern with these changes is the bandwidth impact to the node & network. The parameters I have currently chosen are fairly arbitrary, with the intent of keeping the size of the rebroadcast set small but meaningful. I'm working on running a node with some extra logging, and will share my findings once I have some real world data. Also can tweak parameters based on that info if needed. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-558925008",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2834271952,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgzNDI3MTk1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2834271952",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T04:38:36Z"
    },
    {
      "event": "mentioned",
      "id": 2834271953,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjgzNDI3MTk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2834271953",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T04:38:36Z"
    },
    {
      "event": "subscribed",
      "id": 2834271954,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MzQyNzE5NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2834271954",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T04:38:36Z"
    },
    {
      "event": "subscribed",
      "id": 2834271956,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4MzQyNzE5NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2834271956",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T04:38:36Z"
    },
    {
      "event": "reviewed",
      "id": 323783708,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzNzgzNzA4",
      "url": null,
      "actor": null,
      "commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-323783708",
      "submitted_at": "2019-11-27T16:01:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 323836870,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzODM2ODcw",
      "url": null,
      "actor": null,
      "commit_id": "cadd572afd8b1468aee8a0a3ba65b5e38fc021dd",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "A few issues with the builds (https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351371480 and https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349752418) and functional tests. Overall, found the code well commented.",
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-323836870",
      "submitted_at": "2019-11-27T17:49:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 323826007,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzODI2MDA3",
      "url": null,
      "actor": null,
      "commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Interesting ideas!\r\n\r\nBuilt and ran tests both on your branch and rebased to current master while looking over the code.\r\n\r\nAt a high level, I think it would help reviewers and future contributors to:\r\n- give more detail in the PR description (e.g. the specific parameters chosen and why with justification, links to mailing list discussions, research and benchmarking)\r\n-  update the gist that is provided for more information (the implementation plan appears to be out of date?) or remove it\r\n- add more supporting explanation/documentation in the code\r\n\r\nKudos the for the functional tests. So far `mempool_rebroadcast.py` seems flakey for me, see my comment below.\r\n\r\nOverall my first impression (which could be wrong!) is that these changes may need substantive research and benchmarking to help with reasoning about them and to demonstrate rigorously that they are a worthwhile improvement without introducing x-order effects, but I need to think more deeply about them and look more into the tests.\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-323826007",
      "submitted_at": "2019-11-27T17:54:55Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "reviewed",
      "id": 323860643,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzODYwNjQz",
      "url": null,
      "actor": null,
      "commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-323860643",
      "submitted_at": "2019-11-27T18:05:18Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "commented",
      "id": 559199311,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTE5OTMxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559199311",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-27T18:16:27Z",
      "updated_at": "2019-11-27T18:16:27Z",
      "author_association": "MEMBER",
      "body": "I think we should try to hold off nits until further concept acks and\ndevelopment\n\nOn Wed, Nov 27, 2019, 1:05 PM Emil Engler <notifications@github.com> wrote:\n\n> *@emilengler* commented on this pull request.\n> ------------------------------\n>\n> In src/miner.cpp\n> <https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222>:\n>\n> > @@ -406,6 +452,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n>          // This transaction will make it in; reset the failed counter.\n>          nConsecutiveFailed = 0;\n>\n> +        CFeeRate newFeeRate(packageFees, packageSize * WITNESS_SCALE_FACTOR);\n> +\n> +        if (newFeeRate < minPackageFeeRate) {\n>\n> Nit: Wouldn't it be better to use the one line if coding style?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/16698?email_source=notifications&email_token=ABMAFU2BUVGFY7OHVHV7D2LQV2ZGDA5CNFSM4IPBPTD2YY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCNG3RIY#pullrequestreview-323860643>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABMAFU4O72DQV3NMFNPPUFTQV2ZGDANCNFSM4IPBPTDQ>\n> .\n>\n",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-559199311",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "reviewed",
      "id": 323793323,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzIzNzkzMzIz",
      "url": null,
      "actor": null,
      "commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "I think this PR is going in the right direction.\r\n\r\nSome open questions:\r\n* wallet resend timer, would it be a real issue it's scaled under the rebroadcast one to be sure than wallet txn have at least an attempt at every rebroadcast selection ?\r\n* on GETDATA/`m_unbroadcast_txids` logic: we don't have a delivery insurance right now for our wallet txn so this PR makes it not worse? maybe this part could be splitted for a future PR which would also explore the aforementioned \"thin blocks\" idea\r\n* privacy-side: I think it's better even it's still lower bounded by initial relay",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-323793323",
      "submitted_at": "2019-11-27T19:45:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "mentioned",
      "id": 2842911667,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50Mjg0MjkxMTY2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2842911667",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-30T18:42:04Z"
    },
    {
      "event": "subscribed",
      "id": 2842911668,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI4NDI5MTE2Njg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2842911668",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-11-30T18:42:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2847593993,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0NzU5Mzk5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2847593993",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-02T23:04:41Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2847904787,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50Mjg0NzkwNDc4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2847904787",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-03T00:34:18Z"
    },
    {
      "event": "commented",
      "id": 561315010,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MTMxNTAxMA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/561315010",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-03T19:16:21Z",
      "updated_at": "2019-12-03T19:16:21Z",
      "author_association": "MEMBER",
      "body": "Tested 5335439a8c0cc591d717665d9dcd57d6adfb3fa8, if helpful. Same test issue:\r\n```\r\nwallet_watchonly.py                    | ✓ Passed  | 2 s\r\nwallet_watchonly.py --usecli           | ✓ Passed  | 3 s\r\nwallet_zapwallettxes.py                | ✓ Passed  | 6 s\r\nmempool_rebroadcast.py                 | ✖ Failed  | 338 s\r\n\r\nALL                                    | ✖ Failed  | 3064 s (accumulated) \r\nRuntime: 833 s\r\n\r\n\r\nbitcoin/bitcoin ((HEAD detached at origin/pr/16698))$ test/functional/mempool_rebroadcast.py \r\n2019-12-03T19:04:39.827000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_qb0fjic5\r\n2019-12-03T19:04:40.899000Z TestFramework (INFO): Test simplest rebroadcast case\r\n2019-12-03T19:04:42.876000Z TestFramework (INFO): Test recent txns don't get rebroadcast\r\n2019-12-03T19:09:52.917000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n'''\r\n2019-12-03T19:09:52.918000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 111, in main\r\n    self.run_test()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 44, in run_test\r\n    self.test_recency_filter()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 171, in test_recency_filter\r\n    wait_until(lambda: new_tx in node.getrawmempool())\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 229, in wait_until\r\n    raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\r\nAssertionError: Predicate ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n''' not true after 60 seconds\r\n2019-12-03T19:09:52.974000Z TestFramework (INFO): Stopping nodes\r\n```",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-561315010",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "referenced",
      "id": 2852417804,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDI4NTI0MTc4MDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2852417804",
      "actor": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "e265fd2fbe30ba3ec1346f30ec0c308cc710fb24",
      "commit_url": "https://api.github.com/repos/andrewtoth/electrum-personal-server/commits/e265fd2fbe30ba3ec1346f30ec0c308cc710fb24",
      "created_at": "2019-12-04T02:40:20Z"
    },
    {
      "event": "commented",
      "id": 562912194,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjkxMjE5NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562912194",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-08T04:35:13Z",
      "updated_at": "2019-12-08T04:35:54Z",
      "author_association": "MEMBER",
      "body": "After talking with Amiti out-of-band, I'm concept ACK on the privacy fix. Turning relay flag of `SubmitMemoryPoolAndRelay` to false in `ResendWalletTransactions` means than wallet rebroadcast logic cascade in mempool one and so shouldn't be observable by a connected peer. Wallet tx is hidden in mempool \"anonymity set\".",
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-562912194",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "labeled",
      "id": 2881038104,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI4ODEwMzgxMDQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2881038104",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-13T11:19:53Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 569158954,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU2OTE1ODk1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/569158954",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-12-27T01:04:00Z",
      "updated_at": "2019-12-27T01:04:00Z",
      "author_association": "MEMBER",
      "body": "Concept ACK on improving privacy here. I still need to put more work in going into the details of the approach but I took down some notes while looking over the code and previous discussions:\r\n- Implications of empty blocks were mentioned in PR Review Club and I just want to echo here that the behavior should be investigated and documented here. In addition to that, I can also see cases arise of blocks that are full but have a much lower fee rate than the mempool. Miners could have exclusive deals with parties that do not want to broadcast their transactions to the network and pay the miners privately to mine their transactions. Also, I thought of a case where a miner was sweeping a lot of dust outputs from publicly known private keys in a huge transaction a few months ago (did not find the link right now).\r\n- One heuristic that came to mind to detect the former case is comparing fee rate ranges, i.e. if the fee rate of the latest block was just flat 1 sat/byte but our block template says we would expect a range of 20 - 50 sat/byte, probably something is going on that is out of our control and a rebroadcast would not change this.\r\n- I am not so happy with the changes in the miner code as they are not concerns of the miner. Naively, I would suggest a more \"functional\" design within `GetRebroadcastTransactions`: A block template would be requested from unchanged miner code and then run through a series of filters that kick out rebroadcast candidates for different reasons. IMO it would make code easier to reason about, filters could be added/removed as the behavior of different combinations are tested and they should be easily unit testable. In pseudo-code:\r\n```\r\ncandidates = getBlockTemplate();\r\nfilterRecentTransactions(candidates);\r\nfilterOverMinFee(candidates, minFeeCache);\r\n...\r\nreturn candidates;\r\n```\r\n- My suggestion in the latter point also includes a behavior change: recent transactions are filtered after the template is constructed and not before. And I think this also makes sense on a conceptual level. Let's say we have a full block of up to 20 sat/byte txs that are older and should be rebroadcast per your logic and we also have just received over a block full of new 30 sat/byte txs. We would rebroadcast txs of <= 20 sat/byte although we know that they actually will not make it into the next 1-2 blocks because there are these 30 sat/byte txs, which well-connected miners probably received even earlier than we did. So we might as well hold off from rebroadcasting them right now. I think it's right to not rebroadcast recent transactions but we should not ignore their existence either. This may be a controversial point but I think we can save network traffic by deferring rebroadcasting in this case.\r\n\r\nFWIW, I am also experiencing the test failures mentioned by others but only when running them through the test harness. In that case, `wallet_resendwallettransactions.py` fails consistently for me and `mempool_rebroadcast.py` fails about 80% of the time.",
      "user": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-569158954",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2920885111,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyMDg4NTExMQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2920885111",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T18:23:05Z"
    },
    {
      "event": "subscribed",
      "id": 2920885113,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjA4ODUxMTM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2920885113",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T18:23:05Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2921338822,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMTMzODgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2921338822",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T22:03:34Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2921405823,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMTQwNTgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2921405823",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T22:44:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTliMTg1MTg2YjZkZTk4ZDU4ZjAwM2U3OTBmMWQ0MjdhOTBiNWVl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e9b185186b6de98d58f003e790f1d427a90b5ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/9e9b185186b6de98d58f003e790f1d427a90b5ee",
      "tree": {
        "sha": "9baa6d9e228982446cdd3381f06b8efb7b3389fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9baa6d9e228982446cdd3381f06b8efb7b3389fe"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/816464198c34a373229e865d76f4bc0ca8f127dc",
          "sha": "816464198c34a373229e865d76f4bc0ca8f127dc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/816464198c34a373229e865d76f4bc0ca8f127dc"
        }
      ],
      "message": "[p2p] implement mempool rebroadcast functionality\n\nUpdate rebroadcast logic to live in the mempool & have two\nfundamental differences from the existing wallet logic:\n1. Apply to all transactions (not just mine)\n2. Rebroadcast txns expected to have been mined by now.\n\nThe main reasoning behind these changes are to improve privacy.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T17:56:51Z"
      },
      "sha": "9e9b185186b6de98d58f003e790f1d427a90b5ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjJjMzZlNmEzNjEyNDExYTc3MTU4MjIxNjkyYTFlYjcyZDM1NDA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b2c36e6a3612411a77158221692a1eb72d35404",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2c36e6a3612411a77158221692a1eb72d35404",
      "tree": {
        "sha": "dad01601ef030188c4cab61898438d8b0e24afeb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dad01601ef030188c4cab61898438d8b0e24afeb"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e9b185186b6de98d58f003e790f1d427a90b5ee",
          "sha": "9e9b185186b6de98d58f003e790f1d427a90b5ee",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/9e9b185186b6de98d58f003e790f1d427a90b5ee"
        }
      ],
      "message": "[docs] updates to prioritisetransaction help man",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:10:10Z"
      },
      "sha": "0b2c36e6a3612411a77158221692a1eb72d35404"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNGZmN2RlNzg4ZTc3YWYzZGY2ZGVmN2ZmZGU3OTE3ZGZmM2Y4OGNj",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ff7de788e77af3df6def7ffde7917dff3f88cc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/24ff7de788e77af3df6def7ffde7917dff3f88cc",
      "tree": {
        "sha": "45174224fbf94c67bf49f872ffbf6388e5a0e19c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45174224fbf94c67bf49f872ffbf6388e5a0e19c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b2c36e6a3612411a77158221692a1eb72d35404",
          "sha": "0b2c36e6a3612411a77158221692a1eb72d35404",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/0b2c36e6a3612411a77158221692a1eb72d35404"
        }
      ],
      "message": "[mining] add recency filter on block creation to get rebroadcast set\n\nTo reduce noise, apply a filter to ensure recent txns are not rebroadcast",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:11:14Z"
      },
      "sha": "24ff7de788e77af3df6def7ffde7917dff3f88cc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzE1NGYxMTYwNGRiYWYwMThiMTIzYTY5MTU1Njc0ZWFmMzE2ZmNi",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3154f11604dbaf018b123a69155674eaf316fcb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/d3154f11604dbaf018b123a69155674eaf316fcb",
      "tree": {
        "sha": "2c7b670f496c5c6a7a95d5bf8297a039d26d3b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c7b670f496c5c6a7a95d5bf8297a039d26d3b73"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/24ff7de788e77af3df6def7ffde7917dff3f88cc",
          "sha": "24ff7de788e77af3df6def7ffde7917dff3f88cc",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/24ff7de788e77af3df6def7ffde7917dff3f88cc"
        }
      ],
      "message": "[test] Test rebroadcast functionality\n\nAdd functional tests to ensure that rebroadcast behavior works\nas expected, namely that only txns at the top of the mempool\n(according to block assembler logic) are rebroadcast, and txns\nthat are recent are excluded from the set.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:09:48Z"
      },
      "sha": "d3154f11604dbaf018b123a69155674eaf316fcb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWY3ZGUyMjEwOGViOTA4MWRkYzcwMDA2N2I3MjQwOWVmYmMzODJl",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baf7de22108eb9081ddc700067b72409efbc382e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/baf7de22108eb9081ddc700067b72409efbc382e",
      "tree": {
        "sha": "c37a4265a29561285626c69b7a8f056aa4c32759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c37a4265a29561285626c69b7a8f056aa4c32759"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3154f11604dbaf018b123a69155674eaf316fcb",
          "sha": "d3154f11604dbaf018b123a69155674eaf316fcb",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/d3154f11604dbaf018b123a69155674eaf316fcb"
        }
      ],
      "message": "[wallet] update wallet to resubmit to node rather than rebroadcast\n\nWith the new functionality added to the mempool, the wallet\nno longer needs to rebroadcast transactions to peers directly.\nInstead, it resubmits txns to the nodes once a day in case they\nwere dropped (expired, evicted, etc.) from the local mempool\nbefore being confirmed.\n\nRename `ResendWalletTransactions` method to\n`ResubmitWalletTransactionsToMempool` for clarity.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:13:15Z"
      },
      "sha": "baf7de22108eb9081ddc700067b72409efbc382e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODgzNWM5ODliYjY4OTdhNDY4NGM3Y2ZmYzAwYTFmNmNkNDQyZTA0",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8835c989bb6897a4684c7cffc00a1f6cd442e04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/f8835c989bb6897a4684c7cffc00a1f6cd442e04",
      "tree": {
        "sha": "4dd5796fe59e38a331c45b48612054ad4166c769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dd5796fe59e38a331c45b48612054ad4166c769"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baf7de22108eb9081ddc700067b72409efbc382e",
          "sha": "baf7de22108eb9081ddc700067b72409efbc382e",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/baf7de22108eb9081ddc700067b72409efbc382e"
        }
      ],
      "message": "[mempool] mempool tracks wallet txns & ensures successful initial broadcast\n\nSince the newly implemented functionality only rebroadcasts txns at\nthe top of the mempool, its possible to hit a case where if a txn was\nsubmitted locally & not immediately relayed, it would take a long time\nto be included in the rebroadcast set & ever succesfully be initially\nbroadcast.\n\nTo prevent this case, the mempool keeps track of `m_unbroadcast_txids`,\nand deems the txn relay successful when an associated GETDATA message is\nreceived. On the rebroadcast timer, txns from this set are added to the\ntxns being relayed.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T20:09:50Z"
      },
      "sha": "f8835c989bb6897a4684c7cffc00a1f6cd442e04"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzllMjIwNjAyMWZkMDBjZmQ1NmM0ZGUwOTA0MzRlNDE1MmJhZThh",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/939e2206021fd00cfd56c4de090434e4152bae8a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bitcoin/commit/939e2206021fd00cfd56c4de090434e4152bae8a",
      "tree": {
        "sha": "2687bf64794129bbd0c26494fdf024505e872398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2687bf64794129bbd0c26494fdf024505e872398"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8835c989bb6897a4684c7cffc00a1f6cd442e04",
          "sha": "f8835c989bb6897a4684c7cffc00a1f6cd442e04",
          "html_url": "https://github.com/bitcoin/bitcoin/commit/f8835c989bb6897a4684c7cffc00a1f6cd442e04"
        }
      ],
      "message": "[mempool] add fee rate filter on rebroadcast set\n\nPeriodically (~20 mins) construct a block, identify the minimum\nfee rate for a package to be included & cache the result. Only\nrebroadcast transactions with higher fee rate than cached value.\nThis is to reduce rebroadcast noise.\n\nWe add logic to ensure a new block between last cache run &\nrebroadcast, because otherwise the cache doesn't eliminate any\ntransactions from the set.\n\nAt the time of rebroadcast, if the cache has run within the past\n30 mins, it will work together with the recency filter to remove\ntxns from the rebroadcast set.",
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-01-03T22:56:56Z"
      },
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-11-20T18:21:39Z"
      },
      "sha": "939e2206021fd00cfd56c4de090434e4152bae8a"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 2921425692,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MjkyMTQyNTY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2921425692",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-03T22:58:48Z"
    },
    {
      "event": "unlabeled",
      "id": 2921520040,
      "node_id": "MDE0OlVubGFiZWxlZEV2ZW50MjkyMTUyMDA0MA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2921520040",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-04T00:13:51Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 570838774,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MDgzODc3NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570838774",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-05T02:42:38Z",
      "updated_at": "2020-01-05T02:42:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "first off, thank you all for the thoughtful reviews! here is an update: \r\n\r\nTLDR; overview of this PR & open threads [here](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba).\r\nYou can help me move this PR forward by\r\n1. approach ACKs or explaining unaddressed concerns\r\n2. running the `mempool_rebroadcast` test and sharing your results with me.\r\n\r\n--\r\n\r\nI pushed changes that ...\r\n* should fix the test failures -> there was an uninitialized variable that only failed sporadically due to shared memory space, causing the test to have different results on different operating systems. Got the test to succeed on ubuntu & it passes on travis, but looks like appveyor is failing. Might be a different issue, looks like I need to debug further 😬. \r\nI'd love some reviewers to run the tests to see if it passes locally / share failure logs with me. \r\n* address most misc review comments (a couple small ones are still open)\r\n* rebased \r\n* renamed `ResendWalletTransactions` to `ResubmitWalletTransactionsToMempool` to make it very clear that the wallet submits txns to the local mempool, not the network. \r\n\r\nBy my count, this PR currently has 7 concept ACKS & 0 NACKs. To move these changes forward I'm currently monitoring the patch on the network & am working on improving the monitoring mechanisms to make it easy for reviewers to see the results of & run themselves if willing. Simultaneously I'm working to address conceptual concerns & hope to begin receiving approach ACKs.\r\n\r\nI've updated the gist in OP ([link](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba)) with an overview of the changes, open threads & concerns, monitoring results, etc. My intention is to capture all the branches in an understandable way and make it easier for reviewers to follow. I've tried to capture all open conceptual concerns there.\r\n\r\nThe biggest question we all have about these changes is the bandwidth impact. While I have implemented various mechanisms to mitigate, its important to monitor the patch live and observe results. \r\n\r\nI'm keeping the gist updated with the results of my monitoring. Copy pasting the latest results:\r\n```\r\nafter running the patch for..\r\n10 days, node has only outbound connections -> 30 additional invs sent to peers (28, 2, 1)\r\n6 days, node also accepts incoming connections -> 186 additional invs sent to peers (22, 29, 28, 2, 3, 24, 35, 7, 5, 3, 28)\r\n\r\nSince each inv message is 36 bytes, this means...\r\n~1 kb of data sent in 10 days with only outbound connections\r\n~6.5 kb of data sent in 6 days when also accepting incoming connections\r\n```\r\n\r\n--\r\nresponses to individual conceptual concerns \r\n\r\n@JeremyRubin - I've updated the gist with these topics, but answering here as well. \r\n* mining code as a dependency -> if reviewers agree with the concern around introducing a dependency on the mining code for non-mining nodes, I think the best way to address would be a kill switch to disable rebroadcasting. creating a bounded-size priority queue might be viable, but would significantly increase the complexity of this diff so I hope to avoid. A switch to disable would have some fingerprint leaks but much less than a customizable rebroadcast interval, and the ability to disable addresses any bandwidth issues for low resourced nodes. Thoughts? \r\n\r\n* using compact-blocks relay code - seems like a suggestion to address concerns around bandwidth usage, which I believe can be addressed in simpler ways. to use compact-blocks, we'd have to introduce a different P2P message to indicate these are mempool transactions.\r\n\r\n@fjahr - thank you for your thoughtful review. here are my responses-\r\n* changes to the miner code -> initially I tried to take the approach of getting the block template then applying the filters. the issue that arose with the recency filter has to do with processing packages. consider a CPFP case. If the child arrives in the past 5 minutes and causes the parent to be in the block template, the parent should also be filtered out by the recency logic (aka not rebroadcast). Updating the miner logic takes care of this automatically. If we are to apply filters after retrieving the template, we would have to reconstruct the dependency tree to handle appropriately. I agree with you that its not an ideal separation of concerns, but the flip would be unnecessary code complexity and computation that I believe would be harder to reason about and an undesirable tradeoff in processing time. Let me know if that makes sense or if you have further concerns / considerations.\r\n\r\n* comparing fee rate ranges -> I've thought a lot about the idea of comparing fee-rate expectations based on our mempool vs the block, and I've been entirely unable to come up with any mechanisms robust for all situations. While _maybe_ we would be able to _look_ at a block and identify that a miner is intentionally choosing low fee rate transactions over high fee rate ones, I haven't been able to figure out a way to identify that algorithmically. To allow some room for manual priority is why I chose the rebroadcast set to begin with 3/4 block weight instead of a full block. Similarly, its possible to have a case where txns have successfully propagated the network but are intentionally being censored. While that would mean a lot of not useful transactions being rebroadcast, the network would have bigger issues. I'm happy to discuss this further (maybe in a DM convo & we can share a summary) if you'd like to hear more about strategies I have thought through, or if you have ideas for potentially viable strategies for automated rules to detect. \r\n\r\n* my understanding is that your example with 20 vs 30 sat/byte txns is trying to capture a situation where the miner receives transactions that you don't & they are higher fee rate. Since it only takes a max of a few seconds for txns to propagate the network, I don't think we would run into a dramatic race condition here. so that means the situation you've described here converges on the one you're talking about earlier where a miner picks up txns that are unseen to the network. Again, I haven't figured out any sensical way of algorithmically determining such case. Its possible but doesn't seem worth the tradeoffs (storing a lot of extra data). In the current implementation, if this case does occasionally occur, I think it would be ok because of all the other bandwidth mitigation (max 3/4 block, inv messages only sent to peers that didn't receive recently because of filterInventoryKnown). \r\n\r\n* empty blocks -> still have to think this one fully through. I'll do so soon & update the gist.",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-570838774",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2922165953,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyMjE2NTk1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2922165953",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-05T02:42:39Z"
    },
    {
      "event": "subscribed",
      "id": 2922165954,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjIxNjU5NTQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2922165954",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-05T02:42:39Z"
    },
    {
      "event": "mentioned",
      "id": 2922165955,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyMjE2NTk1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2922165955",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-05T02:42:39Z"
    },
    {
      "event": "subscribed",
      "id": 2922165958,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjIxNjU5NTg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2922165958",
      "actor": {
        "login": "fjahr",
        "id": 1322187,
        "node_id": "MDQ6VXNlcjEzMjIxODc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fjahr",
        "html_url": "https://github.com/fjahr",
        "followers_url": "https://api.github.com/users/fjahr/followers",
        "following_url": "https://api.github.com/users/fjahr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fjahr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fjahr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
        "organizations_url": "https://api.github.com/users/fjahr/orgs",
        "repos_url": "https://api.github.com/users/fjahr/repos",
        "events_url": "https://api.github.com/users/fjahr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fjahr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-05T02:42:39Z"
    },
    {
      "event": "reviewed",
      "id": 338390281,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MzkwMjgx",
      "url": null,
      "actor": null,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": ">     2. running the `mempool_rebroadcast` test and sharing your results with me.\r\n\r\nRan tests at 939e2206021fd00cfd56c4de090434e4152bae8a repeatedly on Debian 4.19 x86/64 and they appear to be much more stable, both when called directly (10 runs) and when running the test suite (twice) via the runner. :rocket: The resubmit txs test takes 2-3 seconds; the mempool tests each take 2-3 minutes.\r\n\r\n- `mempool_rebroadcast.py` and `wallet_resubmit_txs.py` both appear to be passing reliably\r\n\r\n- `mempool_local_transactions.py` timed out only once out of ten solo runs ([log](https://gist.github.com/jonatack/0ec5637975e986dd4367f6f46d4719f8) 168 lines, [consolidated log](https://gist.github.com/jonatack/7919aadaaf39e943ab60b6839c0dbb23) last ~1000 lines) with\r\n```\r\n  File \"test/functional/mempool_local_transactions.py\", line 110, in run_test\r\n    wait_until(lambda: wallet_tx_id in conn.get_invs())\r\n```\r\nI could not reproduce the mempool_local_transactions timeout on further runs and provide the log details only in case they are helpful.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#pullrequestreview-338390281",
      "submitted_at": "2020-01-05T09:44:41Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
    },
    {
      "event": "mentioned",
      "id": 2925902754,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyNTkwMjc1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925902754",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T23:22:45Z"
    },
    {
      "event": "subscribed",
      "id": 2925902756,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjU5MDI3NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2925902756",
      "actor": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-06T23:22:45Z"
    },
    {
      "event": "mentioned",
      "id": 2926074772,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkyNjA3NDc3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2926074772",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-07T01:04:42Z"
    },
    {
      "event": "subscribed",
      "id": 2926074774,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MjYwNzQ3NzQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2926074774",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-07T01:04:42Z"
    },
    {
      "event": "commented",
      "id": 571399346,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTM5OTM0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571399346",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-07T02:05:09Z",
      "updated_at": "2020-01-07T02:07:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I think the best way to address would be a kill switch to disable rebroadcasting.\r\n\r\nThere is one, -walletbroadcast=0.\r\n\r\nHow should this be handling dependencies?\r\n\r\nIf you are merely filtering on feerate will you end up with a situation where you rebroadcast a child transaction that has a high feerate even when the low feerate of its parent means it has no chance of being included?\r\n\r\nHas anyone considered significantly increasing the time between rebroadcasts as an additional change (and one that could go in separately much faster)? Particularly once you've performed one *successful* broadcast per execution additional rebroadcasts usually do nothing except leak data to attackers that frequently reconnect to you-- you won't resend to a host you've sent to before, and its not usually useful to do so.  This wouldn't obviate the need to be more intelligent, but it would reduce the bleeding and also make it more acceptable for the rest of the change to be more approximate.\r\n\r\n> Miners could have exclusive deals with parties that do not want to broadcast their transactions to the network and pay the miners privately to mine their transactions. \r\n\r\nThis sort of concern would be substantially mitigated by not rebroadcasting as soon as the transaction is 'missed' but only after it is missed by N blocks (say 3) blocks where, according to your mempool they should have included the transaction.  Then you would only rebroadcast inappropriately if all 3 miners should have included it but skipped it for some reason.\r\n\r\n> The biggest question we all have about these changes is the bandwidth impact. \r\n\r\nBandwidth impact should be somewhat mitigated by the fact that the known filters should block many of the rebroadcasts to long running peers.\r\n\r\nFWIW,  I missed on the first pass that this change makes rebroadcasting apply to all mempool transactions.   I think that is conceptually a very good move but it has *considerable* implications.\r\n\r\nLooking at your average bandwidth usage isn't enough, you have to worry about cases like what if all nodes are running into their mempool limits under high load-- will this change cause the network to start DOS attacking itself?\r\n\r\n> Would this PR be better if we used a \"thin blocks\" style relay? We already form a block template, but then we don't take advantage of the compact-blocks relay code which would minimize the data sent, assuming the neighbor node does have most of what we rebroadcast...\r\n\r\nCompact blocks would be entirely the wrong mechanism.  The transactions are unordered, unlike a block.   And they are almost entirely known.  The mechanism you want is the erlay reconcillation mechanism because it uses bandwidth equal to the size of the actual set difference, not the size of the mempool.\r\n\r\nIn fact with that mechanism, *in theory* there is no need to do any additional mempool feerate tracking, comparisons with blocks or whatever.  Just use erlay to send IDs for the entire mempool (filtered only by the peer's current relay minimum feerate) after every block. This takes bandwidth equal to 4 bytes times the number of differences, no bytes per entry in common. \r\n\r\nHowever, in practice it isn't that simple. While designing erlay we specifically consider and discarded the approach of making it work by synchronizing the mempools (which was how I approached the relay efficiency problem in my original writeup).  The reason for this is that difference in mempool policy (standardness, minfees, maximum mempool sizes, ancestor depth limits, softforks) or even just simple transaction ordering causes persistent network-wide bandwidth leaks if you relay by syncing the mempool.\r\n\r\nAll these problems also apply here, because this is essentially a mempool syncing proposal, but even worse because compared to the erlay reconciliation this is an extremely inefficient way of syncing: it spends bandwidth for transactions the peer already knows.\r\n\r\nConsider an attacker that monitors the network and finds nodes close to miners.  Then he sends the near-miner nodes a bunch of very low feerate transactions which won't get mined soon . He concurrently sends conflicting high feerate transactions to every other node.  The high feerate transactions don't get mined, the other nodes have no idea why,  and they bleed bandwidth continually uselessly re-advertising transactions. (if the higher feerate txn gets mined by accident he just tries again)\r\n\r\nIf erlay style relay is used, the bandwidth is really only wasted at the low/high feerate boundary... but unfortunately the attacker can make that boundary arbitrarily large (e.g. give half the nodes the low feerate txn in additional to all the miner-proximal nodes).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571399346",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 571412136,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MTQxMjEzNg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571412136",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-07T03:02:40Z",
      "updated_at": "2020-01-07T03:11:57Z",
      "author_association": "CONTRIBUTOR",
      "body": "Question: Is it a goal to rebroadcast transactions to peers that have already had them sent to them?\r\n\r\nIf yes: the current PR (and wallet rebroadcasting) fails to do that (reliably) because of the per peer bloom filters on broadcasts.\r\n\r\nIf no: great that reduces bandwidth, but the current bloomfiltering approach doesn't successfully do that reliably-- because it forgets.   The existing bloom filters are slow and use a lot of memory (they're gigantic to avoid false positives that would break txn relay).  For other reasons its been previously proposed to replace them with data in each mempool transaction that indicates which peers its been relayed to.\r\n\r\nE.g. a possible approach is each mempool txn gets a\r\n```\r\nNodeId lowest_connected_unsent_peer;\r\nvector<bool> sent_peers_above_lowest_unsent;\r\n```\r\n\r\nOr something analogous but with less allocation overhead. :)\r\n\r\nI suspect that for reasonable numbers of peers and transactions this could take less memory than the bloom filter (which I seem to vaguely recall is something like 1MB per peer?).\r\n",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-571412136",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 572400405,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU3MjQwMDQwNQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/572400405",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T05:51:07Z",
      "updated_at": "2020-01-09T05:51:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "thank you for your review @gmaxwell !\r\n\r\nRE: kill switch & `-walletbroadcast=0`\r\n- This mechanism previously disabled rebroadcasts, since that was a purely wallet focused responsibility. With these changes (in the current state), setting this flag to false will not disable the node rebroadcasting transactions. \r\n- Conceptually I think this makes sense. with these changes rebroadcasting transactions is more of a p2p/mempool responsibility. Disabling wallet broadcast shouldn’t disable rebroadcasting.\r\n- `-blocksonly` mode would disable rebroadcast because there would be no txns in the mempool (unless you submit locally) \r\n- I’m planning to add another flag to disable rebroadcast specifically. This can also be used for rollout, and nodes can choose to enable the new logic to verify reasonable behavior. \r\n\r\nRE: handling dependencies \r\nfor the reasons you mentioned I use `addPackageTx` for calculating top of mempool. \r\n\r\n> Has anyone considered significantly increasing the time between rebroadcasts as an additional change (and one that could go in separately much faster)\r\n\r\nI have not. That’s a great idea. I'm going to create a smaller PR with the mempool logic that guarantees delivery of wallet transactions & reduce frequency of rebroadcasts in the existing implementation. Thank you!\r\n\r\n> This sort of concern would be substantially mitigated by not rebroadcasting as soon as the transaction is ‘missed’ but only after it is missed by N blocks (say 3) blocks …\r\n\r\nYeah. For these sorts of reason there are impositions on the rebroadcast set (mainly txn must be >30 mins old. block must have arrived between last cache run and rebroadcast ). Still an open question whether the params chosen are the most reasonable.\r\n\r\nRE: bandwidth \r\n\r\nYup and yup. `filterInventoryKnown` hugely decreases the inv messages sent to peers in the normal cases. But average bandwidth usage is insufficient for accepting these changes, simply just one aspect. \r\n\r\nThe attack you’ve portrayed here is in line with the open question I’ve been pondering about mempools with different policies - the non-adversarial case you’ve mentioned.  The solution I’m thinking about is adding another data structure, `max_rebroadcast_count` that would maintain txids, expiry times, and count (number of times I have rebroadcasted). Over a certain count, it would serve as a rebroadcast blacklist. If the txn is mined into a block it would be removed from the list, still have to think through the other expiry conditions. I’m still hammering out the details but would be interested in hearing your feedback. \r\n\r\n> Question: Is it a goal to rebroadcast transactions to peers that have already had them sent to them?\r\n\r\nHm, somewhere in between? The goal of rebroadcasting transactions is to propagate a transaction out to the network in your mempool that you suspect the miners might not have. If you’ve recently sent a txn to a peer, you don’t have reason to believe resending it to them would help solve this issue, and would just waste bandwidth. On the other hand, you would want to rebroadcast to the same peers in eg. a situation where you have a large mempool, your peers have small mempools & a competitive fee rate market caused them to drop a transaction. After the fee pressure reduces, re-announcing the txn to them could help it get mined. In its current form, the bloom filter is conducive to this behavior by preventing repeat sends to a peer within a ~2-6 hr time period (including txns dropped from the mempool). \r\n\r\nRE: alternative peer-transaction tracking system\r\n\r\nI’m definitely interested in thinking through this approach you’re proposing / other alternatives to the current bloom filter, but think its tangential to this PR? Would be happy to continue the convo on a new issue if you’re interested in opening.",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-572400405",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 2933688738,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MjkzMzY4ODczOA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2933688738",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T05:51:07Z"
    },
    {
      "event": "subscribed",
      "id": 2933688739,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDI5MzM2ODg3Mzk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2933688739",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-09T05:51:07Z"
    },
    {
      "event": "added_to_project",
      "id": 2961054473,
      "node_id": "MDE5OkFkZGVkVG9Qcm9qZWN0RXZlbnQyOTYxMDU0NDcz",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2961054473",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-19T18:13:43Z",
      "project_card": {
        "id": 31847417,
        "url": "https://api.github.com/projects/columns/cards/31847417",
        "project_id": 3826895,
        "project_url": "https://api.github.com/projects/3826895",
        "column_name": "Rebroadcasting"
      }
    },
    {
      "event": "labeled",
      "id": 2992091110,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDI5OTIwOTExMTA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/2992091110",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T06:08:26Z",
      "label": {
        "name": "Needs rebase",
        "color": "cccccc"
      }
    },
    {
      "event": "commented",
      "id": 580098467,
      "node_id": "MDEyOklzc3VlQ29tbWVudDU4MDA5ODQ2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/580098467",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-01-30T06:08:27Z",
      "updated_at": "2020-01-30T06:08:27Z",
      "author_association": "MEMBER",
      "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "user": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-580098467",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "referenced",
      "id": 3045357572,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDUzNTc1NzI=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045357572",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f42e1bf43f2c9f3b4642814051cedf66f05a5e",
      "created_at": "2020-02-18T01:05:19Z"
    },
    {
      "event": "referenced",
      "id": 3045780359,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMwNDU3ODAzNTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3045780359",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "2fc510301e079ef27438bcb998e95a0ff5a6d640",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/2fc510301e079ef27438bcb998e95a0ff5a6d640",
      "created_at": "2020-02-18T05:54:10Z"
    },
    {
      "event": "demilestoned",
      "id": 3180189714,
      "node_id": "MDE3OkRlbWlsZXN0b25lZEV2ZW50MzE4MDE4OTcxNA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3180189714",
      "actor": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-30T19:41:03Z",
      "milestone": {
        "title": "0.20.0"
      }
    },
    {
      "event": "commented",
      "id": 606322844,
      "node_id": "MDEyOklzc3VlQ29tbWVudDYwNjMyMjg0NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/606322844",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T00:25:03Z",
      "updated_at": "2020-03-31T00:25:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "closing this PR until #18038 gets merged. \r\n\r\nif you're interested in moving this project forward, #18038 is ready for review :) thanks in advance!",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-606322844",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "closed",
      "id": 3181006692,
      "node_id": "MDExOkNsb3NlZEV2ZW50MzE4MTAwNjY5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3181006692",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-03-31T00:25:03Z"
    },
    {
      "event": "referenced",
      "id": 3216910903,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMTY5MTA5MDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3216910903",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "1cd6797373586d6599efe4bfae047b28b7dc8fdd",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/1cd6797373586d6599efe4bfae047b28b7dc8fdd",
      "created_at": "2020-04-09T06:17:29Z"
    },
    {
      "event": "referenced",
      "id": 3224844556,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMjQ4NDQ1NTY=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3224844556",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "a26a2d82cf6a2e6f3c370335b377e1441c28d436",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/a26a2d82cf6a2e6f3c370335b377e1441c28d436",
      "created_at": "2020-04-12T07:27:45Z"
    },
    {
      "event": "referenced",
      "id": 3224988948,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMjQ5ODg5NDg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3224988948",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "debd93a84c023ee36be12183c5f5a6f7e4a67bf8",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/debd93a84c023ee36be12183c5f5a6f7e4a67bf8",
      "created_at": "2020-04-12T11:13:23Z"
    },
    {
      "event": "referenced",
      "id": 3225495784,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMjU0OTU3ODQ=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3225495784",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "02ee99718af662159cd00423842ce29898a66c46",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/02ee99718af662159cd00423842ce29898a66c46",
      "created_at": "2020-04-12T22:01:17Z"
    },
    {
      "event": "referenced",
      "id": 3230714987,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyMzA3MTQ5ODc=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3230714987",
      "actor": {
        "login": "codablock",
        "id": 1884269,
        "node_id": "MDQ6VXNlcjE4ODQyNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1884269?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/codablock",
        "html_url": "https://github.com/codablock",
        "followers_url": "https://api.github.com/users/codablock/followers",
        "following_url": "https://api.github.com/users/codablock/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/codablock/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/codablock/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/codablock/subscriptions",
        "organizations_url": "https://api.github.com/users/codablock/orgs",
        "repos_url": "https://api.github.com/users/codablock/repos",
        "events_url": "https://api.github.com/users/codablock/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/codablock/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "c52c1e1ce5c8946ba401bd3befe0503508966bad",
      "commit_url": "https://api.github.com/repos/codablock/dash/commits/c52c1e1ce5c8946ba401bd3befe0503508966bad",
      "created_at": "2020-04-14T11:33:13Z"
    },
    {
      "event": "referenced",
      "id": 3283553700,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODM1NTM3MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3283553700",
      "actor": {
        "login": "fanquake",
        "id": 863730,
        "node_id": "MDQ6VXNlcjg2MzczMA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fanquake",
        "html_url": "https://github.com/fanquake",
        "followers_url": "https://api.github.com/users/fanquake/followers",
        "following_url": "https://api.github.com/users/fanquake/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/fanquake/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/fanquake/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
        "organizations_url": "https://api.github.com/users/fanquake/orgs",
        "repos_url": "https://api.github.com/users/fanquake/repos",
        "events_url": "https://api.github.com/users/fanquake/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/fanquake/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "0ef0d33f7562c3b7f9c021549e70b3b4dbcc504c",
      "commit_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ef0d33f7562c3b7f9c021549e70b3b4dbcc504c",
      "created_at": "2020-04-29T08:32:50Z"
    },
    {
      "event": "referenced",
      "id": 3285264438,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDMyODUyNjQ0Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3285264438",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "7fc0f22e3dba2cd85e75d3d6f91d368b79c5da89",
      "commit_url": "https://api.github.com/repos/syscoin/syscoin/commits/7fc0f22e3dba2cd85e75d3d6f91d368b79c5da89",
      "created_at": "2020-04-29T15:49:52Z"
    },
    {
      "event": "referenced",
      "id": 3428717500,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg3MTc1MDA=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428717500",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "285bce192addfa7ee010825cb60e71f3a14f94d5",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/285bce192addfa7ee010825cb60e71f3a14f94d5",
      "created_at": "2020-06-10T09:23:39Z"
    },
    {
      "event": "referenced",
      "id": 3428984499,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM0Mjg5ODQ0OTk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3428984499",
      "actor": {
        "login": "ComputerCraftr",
        "id": 27882076,
        "node_id": "MDQ6VXNlcjI3ODgyMDc2",
        "avatar_url": "https://avatars.githubusercontent.com/u/27882076?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ComputerCraftr",
        "html_url": "https://github.com/ComputerCraftr",
        "followers_url": "https://api.github.com/users/ComputerCraftr/followers",
        "following_url": "https://api.github.com/users/ComputerCraftr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ComputerCraftr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ComputerCraftr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ComputerCraftr/subscriptions",
        "organizations_url": "https://api.github.com/users/ComputerCraftr/orgs",
        "repos_url": "https://api.github.com/users/ComputerCraftr/repos",
        "events_url": "https://api.github.com/users/ComputerCraftr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ComputerCraftr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "69e7eee7a15bf6f5b0b199f425cded2b50b2c2af",
      "commit_url": "https://api.github.com/repos/ComputerCraftr/bitcoin/commits/69e7eee7a15bf6f5b0b199f425cded2b50b2c2af",
      "created_at": "2020-06-10T10:31:16Z"
    },
    {
      "event": "referenced",
      "id": 3980858789,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDM5ODA4NTg3ODk=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/3980858789",
      "actor": {
        "login": "sidhujag",
        "id": 6238042,
        "node_id": "MDQ6VXNlcjYyMzgwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sidhujag",
        "html_url": "https://github.com/sidhujag",
        "followers_url": "https://api.github.com/users/sidhujag/followers",
        "following_url": "https://api.github.com/users/sidhujag/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sidhujag/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sidhujag/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
        "organizations_url": "https://api.github.com/users/sidhujag/orgs",
        "repos_url": "https://api.github.com/users/sidhujag/repos",
        "events_url": "https://api.github.com/users/sidhujag/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sidhujag/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "990a3ee8c872de175cac0e6291ecc42fe8573371",
      "commit_url": "https://api.github.com/repos/syscoin-core/syscoin/commits/990a3ee8c872de175cac0e6291ecc42fe8573371",
      "created_at": "2020-11-10T20:39:50Z"
    },
    {
      "event": "commented",
      "id": 757485579,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1NzQ4NTU3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757485579",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-10T14:30:12Z",
      "updated_at": "2021-01-10T14:30:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is this work going to continue now that #18038 is done?",
      "user": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-757485579",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "commented",
      "id": 758354262,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1ODM1NDI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/758354262",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T02:34:33Z",
      "updated_at": "2021-01-12T02:34:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "@gmaxwell yes! I'm currently trying to work out a couple more kinks before continuing the review process on github & seeking feedback on approach. ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-758354262",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "mentioned",
      "id": 4193702075,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE5MzcwMjA3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4193702075",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T02:34:33Z"
    },
    {
      "event": "subscribed",
      "id": 4193702081,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxOTM3MDIwODE=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4193702081",
      "actor": {
        "login": "gmaxwell",
        "id": 858454,
        "node_id": "MDQ6VXNlcjg1ODQ1NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gmaxwell",
        "html_url": "https://github.com/gmaxwell",
        "followers_url": "https://api.github.com/users/gmaxwell/followers",
        "following_url": "https://api.github.com/users/gmaxwell/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gmaxwell/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gmaxwell/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
        "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
        "repos_url": "https://api.github.com/users/gmaxwell/repos",
        "events_url": "https://api.github.com/users/gmaxwell/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-12T02:34:34Z"
    },
    {
      "event": "referenced",
      "id": 4233851215,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQyMzM4NTEyMTU=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4233851215",
      "actor": {
        "login": "Fabcien",
        "id": 44533924,
        "node_id": "MDQ6VXNlcjQ0NTMzOTI0",
        "avatar_url": "https://avatars.githubusercontent.com/u/44533924?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fabcien",
        "html_url": "https://github.com/Fabcien",
        "followers_url": "https://api.github.com/users/Fabcien/followers",
        "following_url": "https://api.github.com/users/Fabcien/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Fabcien/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Fabcien/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Fabcien/subscriptions",
        "organizations_url": "https://api.github.com/users/Fabcien/orgs",
        "repos_url": "https://api.github.com/users/Fabcien/repos",
        "events_url": "https://api.github.com/users/Fabcien/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Fabcien/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "674a222fdbabc744bc5b6c4c662de4a10096aca0",
      "commit_url": "https://api.github.com/repos/Bitcoin-ABC/bitcoin-abc/commits/674a222fdbabc744bc5b6c4c662de4a10096aca0",
      "created_at": "2021-01-21T14:46:03Z"
    },
    {
      "event": "commented",
      "id": 775329154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3NTMyOTE1NA==",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/775329154",
      "actor": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-08T17:55:15Z",
      "updated_at": "2021-02-08T17:55:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "this work is being continued in #21061 :) ",
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-775329154",
      "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16698"
    },
    {
      "event": "referenced",
      "id": 4517982343,
      "node_id": "MDE1OlJlZmVyZW5jZWRFdmVudDQ1MTc5ODIzNDM=",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/4517982343",
      "actor": {
        "login": "ckti",
        "id": 7046769,
        "node_id": "MDQ6VXNlcjcwNDY3Njk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7046769?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ckti",
        "html_url": "https://github.com/ckti",
        "followers_url": "https://api.github.com/users/ckti/followers",
        "following_url": "https://api.github.com/users/ckti/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ckti/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ckti/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ckti/subscriptions",
        "organizations_url": "https://api.github.com/users/ckti/orgs",
        "repos_url": "https://api.github.com/users/ckti/repos",
        "events_url": "https://api.github.com/users/ckti/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ckti/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "fb46609fd94ffffb513d51b16524045a94d4defa",
      "commit_url": "https://api.github.com/repos/ckti-ioncore-current/ion/commits/fb46609fd94ffffb513d51b16524045a94d4defa",
      "created_at": "2021-03-28T10:03:21Z"
    },
    {
      "event": "referenced",
      "id": 5576107967,
      "node_id": "REFE_lADOABII584c4ruZzwAAAAFMXKe_",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/5576107967",
      "actor": {
        "login": "malbit",
        "id": 35476352,
        "node_id": "MDQ6VXNlcjM1NDc2MzUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/35476352?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/malbit",
        "html_url": "https://github.com/malbit",
        "followers_url": "https://api.github.com/users/malbit/followers",
        "following_url": "https://api.github.com/users/malbit/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/malbit/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/malbit/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/malbit/subscriptions",
        "organizations_url": "https://api.github.com/users/malbit/orgs",
        "repos_url": "https://api.github.com/users/malbit/repos",
        "events_url": "https://api.github.com/users/malbit/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/malbit/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "602513f825a5791285cea054da7cb791eabd1236",
      "commit_url": "https://api.github.com/repos/malbit/raptoreum/commits/602513f825a5791285cea054da7cb791eabd1236",
      "created_at": "2021-11-05T18:34:08Z"
    },
    {
      "event": "referenced",
      "id": 6256654603,
      "node_id": "REFE_lADOABII584c4ruZzwAAAAF07PkL",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6256654603",
      "actor": {
        "login": "gades",
        "id": 4200730,
        "node_id": "MDQ6VXNlcjQyMDA3MzA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4200730?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gades",
        "html_url": "https://github.com/gades",
        "followers_url": "https://api.github.com/users/gades/followers",
        "following_url": "https://api.github.com/users/gades/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/gades/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/gades/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/gades/subscriptions",
        "organizations_url": "https://api.github.com/users/gades/orgs",
        "repos_url": "https://api.github.com/users/gades/repos",
        "events_url": "https://api.github.com/users/gades/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/gades/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ff57a3caff59ba284f06c85120fb1a7177a883de",
      "commit_url": "https://api.github.com/repos/cosanta/cosanta-core/commits/ff57a3caff59ba284f06c85120fb1a7177a883de",
      "created_at": "2022-03-17T07:43:32Z"
    },
    {
      "event": "referenced",
      "id": 6370125587,
      "node_id": "REFE_lADOABII584c4ruZzwAAAAF7sGcT",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6370125587",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "877d0a1d2a03013742e8dce208f51bafe4a810e1",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/877d0a1d2a03013742e8dce208f51bafe4a810e1",
      "created_at": "2022-04-05T10:50:26Z"
    },
    {
      "event": "referenced",
      "id": 6637813808,
      "node_id": "REFE_lADOABII584c4ruZzwAAAAGLpQAw",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/6637813808",
      "actor": {
        "login": "vijaydasmp",
        "id": 2348066,
        "node_id": "MDQ6VXNlcjIzNDgwNjY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2348066?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/vijaydasmp",
        "html_url": "https://github.com/vijaydasmp",
        "followers_url": "https://api.github.com/users/vijaydasmp/followers",
        "following_url": "https://api.github.com/users/vijaydasmp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/vijaydasmp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/vijaydasmp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/vijaydasmp/subscriptions",
        "organizations_url": "https://api.github.com/users/vijaydasmp/orgs",
        "repos_url": "https://api.github.com/users/vijaydasmp/repos",
        "events_url": "https://api.github.com/users/vijaydasmp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/vijaydasmp/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "5ce7ce2c4d55069443653d7cea92a88aa2547430",
      "commit_url": "https://api.github.com/repos/vijaydasmp/dash/commits/5ce7ce2c4d55069443653d7cea92a88aa2547430",
      "created_at": "2022-05-19T01:51:56Z"
    },
    {
      "event": "locked",
      "id": 7199015441,
      "node_id": "LOE_lADOABII584c4ruZzwAAAAGtGEIR",
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/events/7199015441",
      "actor": {
        "login": "DrahtBot",
        "id": 39886733,
        "node_id": "MDQ6VXNlcjM5ODg2NzMz",
        "avatar_url": "https://avatars.githubusercontent.com/u/39886733?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DrahtBot",
        "html_url": "https://github.com/DrahtBot",
        "followers_url": "https://api.github.com/users/DrahtBot/followers",
        "following_url": "https://api.github.com/users/DrahtBot/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DrahtBot/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DrahtBot/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
        "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
        "repos_url": "https://api.github.com/users/DrahtBot/repos",
        "events_url": "https://api.github.com/users/DrahtBot/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2022-08-16T17:04:02Z",
      "lock_reason": "resolved"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984",
      "pull_request_review_id": 279235742,
      "id": 317311984,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzMxMTk4NA==",
      "diff_hunk": "@@ -6,11 +6,10 @@\n from collections import defaultdict\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n-from test_framework.messages import ToHex\n-from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.blocktools import create_coinbase",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 7,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "c383bdeea494fe05d1fd6332b72b7517e78b2ba0",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\r\n```\r\ntest/functional/wallet_resendwallettransactions.py:9:1: F401 'test_framework.blocktools.create_coinbase' imported but unused",
      "created_at": "2019-08-23T21:45:00Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317311984",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317311984"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 9,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017",
      "pull_request_review_id": 279342223,
      "id": 317404017,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDAxNw==",
      "diff_hunk": "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "path": "src/net.h",
      "position": null,
      "original_position": 12,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit 25a3b0ac6aea95845c48c0a345325af8ad15c3ca:\r\n\r\nThe legacy signature of this function takes as argument type and return type microseconds. Can you explain why this one is different?\r\nNote that you are allowed to pass in `std::chrono::seconds` when the function takes `std::chrono::microseconds`.",
      "created_at": "2019-08-25T15:44:13Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404017",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 953,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110",
      "pull_request_review_id": 279342223,
      "id": 317404110,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDExMA==",
      "diff_hunk": "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "path": "src/net.h",
      "position": null,
      "original_position": 15,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "same commit:\r\n\r\nCan you explain how the cast to seconds has an effect on the distribution? It appears that the most likely return value will be exactly `0`? Alternatively, I'd rather return microseconds just like the existing function.",
      "created_at": "2019-08-25T15:46:46Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404110",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404110"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179",
      "pull_request_review_id": 279342223,
      "id": 317404179,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDE3OQ==",
      "diff_hunk": "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "fd92d22540f97924bd73301dc061005b401d7472",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "In commit fd92d22540f97924bd73301dc061005b401d7472:\r\n\r\nI'd prefer if new members are prefixed with `m_` and used snake case according to the dev notes. This makes it easier to guess from the variable name if something is a member, a global, or just  a symbol in the local scope. Additionally, I'd prefer to use `std::chrono::seconds` (or whatever the type is) for those reasons:\r\n\r\n* It documents the type for reviewers\r\n* It enforces the type at compile time and prevents unwanted casts\r\n* It documents that the time is mockable. (I know that the memepool currently is mockable and uses the legacy `GetTime()` function and types, but at least new code should use the new `GetTime<>()` functions and types.)",
      "created_at": "2019-08-25T15:48:22Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560",
      "pull_request_review_id": 279342223,
      "id": 317404560,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzQwNDU2MA==",
      "diff_hunk": "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit af38c70497575c9ad33901a19db01a7f104ffaeb\r\n\r\nCan you add a comment why this would ever be true, otherwise remove the dead code.",
      "created_at": "2019-08-25T15:57:55Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317404560",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317404560"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787",
      "pull_request_review_id": 279809888,
      "id": 317776787,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzc3Njc4Nw==",
      "diff_hunk": "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)\n+{\n+    int64_t now_micros = (std::chrono::duration_cast<std::chrono::microseconds>(now)).count();\n+    return std::chrono::duration_cast<std::chrono::seconds>(std::chrono::microseconds{PoissonNextSend(now_micros, average_interval_seconds)});",
      "path": "src/net.h",
      "position": null,
      "original_position": 15,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "in_reply_to_id": 317404110,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah my bad, will fix\r\n\r\nbased on this tip \r\n> Note that you are allowed to pass in std::chrono::seconds when the function takes std::chrono::microseconds.\r\n\r\nI'm thinking of updating the function signature to both take in & return microseconds. And the caller can pass through seconds when needed. I'm interested in moving all the poisson invocations to the chrono in a follow up PR. Its less of a gotcha since chrono requires the duration to be explicit, but it would be nice for it to be consistent. ",
      "created_at": "2019-08-26T20:11:09Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317776787",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317776787"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 956,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991",
      "pull_request_review_id": 279845040,
      "id": 317803991,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwMzk5MQ==",
      "diff_hunk": "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "4bda14245c53d89beb790053158c0ba39cb08a28",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If we add wallet transactions to the rebroadcast INV that have a smaller feerate than the top of our mempool, wouldn’t there be a feerate gap to the other INVs of the message, making the wallet transactions easily identifiable as such and reducing privacy?",
      "created_at": "2019-08-26T21:20:46Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317803991",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317803991"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635",
      "pull_request_review_id": 279845040,
      "id": 317805635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgwNTYzNQ==",
      "diff_hunk": "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 90,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "in_reply_to_id": null,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This goes into timeout for me, causing `wallet_resendwallettransactions` to fail when I run the entire test suite (same as in AppVeyor build here) but the test succeeds if I run it in isolation. If you can’t reproduce this I could look deeper into why it fails.",
      "created_at": "2019-08-26T21:25:09Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317805635",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317805635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628",
      "pull_request_review_id": 279853357,
      "id": 317810628,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMDYyOA==",
      "diff_hunk": "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "in_reply_to_id": 317404560,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I added it as a safeguard. Do you feel confident it would never happen? If so, I will take another careful look at the logic to build my own confidence & remove. ",
      "created_at": "2019-08-26T21:39:34Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317810628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317810628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879",
      "pull_request_review_id": 279856083,
      "id": 317812879,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMjg3OQ==",
      "diff_hunk": "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "in_reply_to_id": 317404560,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Even if it would, any follow-up logic that deals with the returned set needs to be robust against missing txs anyway.",
      "created_at": "2019-08-26T21:46:17Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317812879",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317812879"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390",
      "pull_request_review_id": 279856718,
      "id": 317813390,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxMzM5MA==",
      "diff_hunk": "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "in_reply_to_id": 317404560,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Note that `::mempool.cs` is released as soon as this method returns.",
      "created_at": "2019-08-26T21:47:47Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317813390",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317813390"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851",
      "pull_request_review_id": 279858549,
      "id": 317814851,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNDg1MQ==",
      "diff_hunk": "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "4bda14245c53d89beb790053158c0ba39cb08a28",
      "in_reply_to_id": 317803991,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "correct. I will add a comment to document.\r\n\r\nthis logic should only trigger when a user submits a txn locally and it doesn't get initially relayed..  an example where this would be needed.. a user submits a low fee rate txn with p2p disabled, inspects it in the local mempool, and enables p2p. currently, the txn would get initially relayed due to the wallet rebroadcast logic. with the proposed changes (w/out this additional mempool-force-relays-unbroadcast-txns mechansim), the node could have to be running at a pretty specific time (when the mempool is clearing out and mining low fee rate txns) in order for the txn to ever initially get broadcast. thus, `setInventoryTxToSend`. \r\n\r\nIn terms of privacy guarantees (or lack thereof) it mimics the current behavior. If you have any suggestions for how we could improve while preserving the propagation guarantees, I'm all ears :) ",
      "created_at": "2019-08-26T21:52:14Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317814851",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317814851"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144",
      "pull_request_review_id": 279858950,
      "id": 317815144,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzgxNTE0NA==",
      "diff_hunk": "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 90,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "in_reply_to_id": 317805635,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh interesting. I haven't been able to reproduce locally. I would love some help! ",
      "created_at": "2019-08-26T21:53:15Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r317815144",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317815144"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941",
      "pull_request_review_id": 280336125,
      "id": 318189941,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE4OTk0MQ==",
      "diff_hunk": "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 90,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "in_reply_to_id": 317805635,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that this is due to a bug with the time: `RESEND_TXS_FREQUENCY` is in microseconds. It is added to `GetTime()`  which is in seconds, so an actual resend doesn't ever happen in test. \r\nYet the test sometimes succeeds because there is an initial resend (`nNextResend` is initialized to 0) which in some runs happens after the mocktime is set to two weeks and the tx has been expired (test passes), in some runs happens earlier (test fails).",
      "created_at": "2019-08-27T16:55:19Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318189941",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318189941"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467",
      "pull_request_review_id": 281165072,
      "id": 318842467,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODg0MjQ2Nw==",
      "diff_hunk": "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 90,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "in_reply_to_id": 317805635,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "thanks for digging in!! I will fix the bug and ensure the times are consistent in microseconds. \r\n\r\ncould you tell me more about how you debugged? were you able to isolate the failure, or was it always when run in the entire suite? I'm curious why this behavior wouldn't manifest as a flaky test when run in isolation. ",
      "created_at": "2019-08-29T00:14:24Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r318842467",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318842467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326",
      "pull_request_review_id": 281753422,
      "id": 319296326,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTI5NjMyNg==",
      "diff_hunk": "@@ -32,45 +31,45 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        node = self.nodes[0]  # alias\n \n-        node.add_p2p_connection(P2PStoreTxInvs())\n+        node = self.nodes[0]\n \n-        self.log.info(\"Create a new transaction and wait until it's broadcast\")\n-        txid = int(node.sendtoaddress(node.getnewaddress(), 1), 16)\n+        self.log.info(\"Create a new wallet transaction\")\n+\n+        relayfee = node.getnetworkinfo()['relayfee']\n+        node.settxfee(relayfee)\n+        txhsh = node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        assert txhsh in node.getrawmempool()\n+\n+        # bump mocktime so the transaction should expire\n+        # add an extra hour for good measure\n+        two_weeks_in_seconds = 60 * 60 * 24 * 14\n+        mocktime = int(time.time()) + two_weeks_in_seconds + 60 * 60\n+        node.setmocktime(mocktime)\n+\n+        # making a new transaction invokes ATMP which expires old txns\n+        node.sendtoaddress(node.getnewaddress(), 1)\n+\n+        # confirm txn is no longer in mempool\n+        self.log.info(\"Confirm transaction is no longer in mempool\")\n+        assert txhsh not in node.getrawmempool()\n+\n+        # bumptime so ResendWalletTransactions triggers\n+        # we resend once / day, so bump 25 hours just to be sure\n+        # we don't resubmit the first time, so we bump mocktime\n+        # twice so the resend occurs the second time around\n+        one_day_in_seconds = 60 * 60 * 25\n+        node.setmocktime(mocktime + one_day_in_seconds)\n \n-        # Wallet rebroadcast is first scheduled 1 sec after startup (see\n-        # nNextResend in ResendWalletTransactions()). Sleep for just over a\n-        # second to be certain that it has been called before the first\n-        # setmocktime call below.\n         time.sleep(1.1)\n \n-        # Can take a few seconds due to transaction trickling\n-        wait_until(lambda: node.p2p.tx_invs_received[txid] >= 1, lock=mininode_lock)\n-\n-        # Add a second peer since txs aren't rebroadcast to the same peer (see filterInventoryKnown)\n-        node.add_p2p_connection(P2PStoreTxInvs())\n-\n-        self.log.info(\"Create a block\")\n-        # Create and submit a block without the transaction.\n-        # Transactions are only rebroadcast if there has been a block at least five minutes\n-        # after the last time we tried to broadcast. Use mocktime and give an extra minute to be sure.\n-        block_time = int(time.time()) + 6 * 60\n-        node.setmocktime(block_time)\n-        block = create_block(int(node.getbestblockhash(), 16), create_coinbase(node.getblockcount() + 1), block_time)\n-        block.rehash()\n-        block.solve()\n-        node.submitblock(ToHex(block))\n-\n-        # Transaction should not be rebroadcast\n-        node.p2ps[1].sync_with_ping()\n-        assert_equal(node.p2ps[1].tx_invs_received[txid], 0)\n-\n-        self.log.info(\"Transaction should be rebroadcast after 30 minutes\")\n-        # Use mocktime and give an extra 5 minutes to be sure.\n-        rebroadcast_time = int(time.time()) + 41 * 60\n-        node.setmocktime(rebroadcast_time)\n-        wait_until(lambda: node.p2ps[1].tx_invs_received[txid] >= 1, lock=mininode_lock)\n+        node.setmocktime(mocktime + 2 * one_day_in_seconds)\n+\n+        # confirm that its back in the mempool\n+        self.log.info(\"Transaction should be resubmitted to mempool\")\n+        wait_until(lambda: txhsh in node.getrawmempool(), timeout=30)",
      "path": "test/functional/wallet_resendwallettransactions.py",
      "position": null,
      "original_position": 90,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "1053c0e915bc0b60181754ad8ac9852cc20d316b",
      "in_reply_to_id": 317805635,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "On my other computer it also sometimes failed in the single run, which made testing easier. I found this the bug adding some debug statements in `ResendWalletTransactions`. \r\n\r\nFixing the times might not solve this completely, because the initial rebroadcast after startup also happened for me in a few runs right before `assert txhsh not in node.getrawmempool()`, which then fails. Adding a sleep before you jump ahead in time could help.",
      "created_at": "2019-08-29T22:26:22Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r319296326",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319296326"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577",
      "pull_request_review_id": 283080119,
      "id": 320337577,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMDMzNzU3Nw==",
      "diff_hunk": "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "4bda14245c53d89beb790053158c0ba39cb08a28",
      "in_reply_to_id": 317803991,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> making the wallet transactions easily identifiable as such and reducing privacy?\r\n\r\nI don't think this is true (at least no worse than today). While it is possible to guess whether a list of INVs is a rebroadcast inv or not, it shouldn't be possible to trivially find the source of the low feerate txs in that inv. Txs broadcast for the first time from our node should be no different from txs broadcast for the first time from another node to us and then relayed by us. It is know to not be perfect (see dandelion tx relay), but improving that seems like a separate issue to me.",
      "created_at": "2019-09-03T15:29:25Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r320337577",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/320337577"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949",
      "pull_request_review_id": 304236022,
      "id": 336757949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1Nzk0OQ==",
      "diff_hunk": "@@ -885,11 +885,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::seconds PoissonNextSend(std::chrono::seconds now, int average_interval_seconds)",
      "path": "src/net.h",
      "position": null,
      "original_position": 12,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "25a3b0ac6aea95845c48c0a345325af8ad15c3ca",
      "in_reply_to_id": 317404017,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-10-20T00:08:04Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336757949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336757949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 953,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783",
      "pull_request_review_id": 304236960,
      "id": 336758783,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc1ODc4Mw==",
      "diff_hunk": "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    int64_t nMaxTxTime;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "fd92d22540f97924bd73301dc061005b401d7472",
      "in_reply_to_id": 317404179,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed.",
      "created_at": "2019-10-20T00:53:34Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336758783",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336758783"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290",
      "pull_request_review_id": 304269148,
      "id": 336788290,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjc4ODI5MA==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": null,
      "original_position": 27,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this is a temporary parking spot for this code. All three tests use it, so I'd like to pull it out into some shared utility, but haven't figured out where makes sense yet. Any suggestions?",
      "created_at": "2019-10-20T17:33:49Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r336788290",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336788290"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008",
      "pull_request_review_id": 304818554,
      "id": 337215008,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzIxNTAwOA==",
      "diff_hunk": "@@ -97,6 +99,28 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        if (mapTx.find(tx->GetHash()) == mapTx.end()) continue;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "af38c70497575c9ad33901a19db01a7f104ffaeb",
      "in_reply_to_id": 317404560,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok my understanding is.. without the check, if the txn was no longer in the mempool, it would..\r\n1.  get added to setRebroadcastTxs in this function. \r\n2. returned to the caller [here](https://github.com/bitcoin/bitcoin/pull/16698/files#diff-eff7adeaec73a769788bb78858815c91R3799) & insert into `setInventoryTxToSend`\r\n3. `setInventoryTxToSend` gets copied into `vInvTx` [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3825)\r\n4. checks if txn is in mempool otherwise skips it [here](https://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L3854) \r\n\r\nwhich all seems fine so I'll remove the check.",
      "created_at": "2019-10-21T20:09:08Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337215008",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337215008"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986",
      "pull_request_review_id": 305207858,
      "id": 337517986,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzUxNzk4Ng==",
      "diff_hunk": "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from collections import defaultdict\n+from test_framework.mininode import P2PInterface, mininode_lock\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class P2PStoreTxInvs(P2PInterface):",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": null,
      "original_position": 27,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "5b5151dd64931dd2df40fcbb124b429834bcee2b",
      "in_reply_to_id": 336788290,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It doesn't depend on any outside modules except `mininode`, so it could be moved there or to a new module.",
      "created_at": "2019-10-22T13:33:03Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337517986",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337517986"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765",
      "pull_request_review_id": 305514159,
      "id": 337754765,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzc1NDc2NQ==",
      "diff_hunk": "@@ -943,11 +943,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n+{\n+    int64_t interval_seconds = (std::chrono::duration_cast<std::chrono::seconds>(average_interval)).count();\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds)};",
      "path": "src/net.h",
      "position": null,
      "original_position": 15,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "in commit e768ad10fbd24929059a1ada67cefaa3bc570b0d:\r\n\r\nI don't think casting (truncating) microseconds to seconds is acceptable, as it degrades everything smaller than a second to a delay of zero.\r\n\r\nYou could just pass in `std::chrono::seconds average_interval` and then call here:\r\n\r\n```cpp\r\n     return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds.count())};",
      "created_at": "2019-10-22T21:17:11Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r337754765",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337754765"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 953,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338220615",
      "pull_request_review_id": 306114884,
      "id": 338220615,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIyMDYxNQ==",
      "diff_hunk": "@@ -943,11 +943,14 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::microseconds average_interval)\n+{\n+    int64_t interval_seconds = (std::chrono::duration_cast<std::chrono::seconds>(average_interval)).count();\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), interval_seconds)};",
      "path": "src/net.h",
      "position": null,
      "original_position": 15,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "e768ad10fbd24929059a1ada67cefaa3bc570b0d",
      "in_reply_to_id": 337754765,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok I get it. fixed.",
      "created_at": "2019-10-23T18:51:50Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r338220615",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338220615"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 953,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348840194",
      "pull_request_review_id": 320570229,
      "id": 348840194,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODg0MDE5NA==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure if one `GETDATA` is the best solution to indicate the txn has been successfully broadcast to the network. \r\n\r\nThe worst case is highlighted by the tests- a node receives the getdata back from the first peer before announcing to any other peers. so I have to disconnect the other peers to send to the new connection. (see [here](https://github.com/bitcoin/bitcoin/pull/16698/files?file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-e4786db1a6d286db4b104018b9b77608R70))\r\n\r\nin practice, this means a user who submits a txn with p2p disabled, then re-enables, might only get the txn out to _one_ other peer before marking it as \"broadcast\" ",
      "created_at": "2019-11-21T00:15:45Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348840194"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348844259",
      "pull_request_review_id": 320575120,
      "id": 348844259,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0ODg0NDI1OQ==",
      "diff_hunk": "@@ -100,59 +130,6 @@ def test_simple_rebroadcast(self):\n         # check that node1 got txns bc rebroadcasting\n         wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n \n-    def test_rebroadcast_top_txns(self):",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": null,
      "original_position": 108,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "6b70e7af8281f16d14d9c25138078e1131a1c3bd",
      "in_reply_to_id": null,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I removed this test because it was converging with `test_fee_rate_cache.`",
      "created_at": "2019-11-21T00:31:38Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348844259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/348844259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349290407",
      "pull_request_review_id": 321150871,
      "id": 349290407,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI5MDQwNw==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "s/resbumit/resubmit/",
      "created_at": "2019-11-21T20:00:06Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349290407",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349290407"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1921,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349291579",
      "pull_request_review_id": 321150871,
      "id": 349291579,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTI5MTU3OQ==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "path": "src/wallet/wallet.cpp",
      "position": 61,
      "original_position": 60,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "suggested bikeshedding of name for new readers:\r\n\r\n`SubmitMemoryPoolAndMaybeRelay` or `SubmitMemoryPool` since `relay` is an argument...",
      "created_at": "2019-11-21T20:02:51Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349291579",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349291579"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1958,
      "original_line": 1958,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413481",
      "pull_request_review_id": 321309451,
      "id": 349413481,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxMzQ4MQ==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does it make sense to hardcode a smaller MIN_TX_REBROADCAST_INTERVAL (5 minutes?), and then a TX_REBROADCAST_INTERVAL which is either 1 hour or  a custom parameter?",
      "created_at": "2019-11-22T02:47:17Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413481",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413481"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413523",
      "pull_request_review_id": 321309451,
      "id": 349413523,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxMzUyMw==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can be addressed in a follow up PR.",
      "created_at": "2019-11-22T02:47:30Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349413523",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349413523"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414243",
      "pull_request_review_id": 321309451,
      "id": 349414243,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDI0Mw==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There's no real point to using a set here -- the block is already guaranteed to be de-duplicated, so you can make this interface just use a vector (or move the vtx out of the block template, and insert directly into setRebroadcastTxs later)",
      "created_at": "2019-11-22T02:51:47Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414243",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414243"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414400",
      "pull_request_review_id": 321309451,
      "id": 349414400,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDQwMA==",
      "diff_hunk": "@@ -35,6 +35,10 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// we rebroadcast 3/4 of max block weight (defined in consensus.h)\n+// to reduce noise due to circumstances such as miners mining priority txns\n+static const unsigned int MAX_REBROADCAST_WEIGHT = 3000000;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can this be re-written in terms of the consensus.h parameters?",
      "created_at": "2019-11-22T02:52:41Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414729",
      "pull_request_review_id": 321309451,
      "id": 349414729,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDcyOQ==",
      "diff_hunk": "@@ -35,6 +35,9 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// Default minimum age for a txn to be rebroadcast in seconds - 30 min",
      "path": "src/txmempool.h",
      "position": 12,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why 30 minutes?",
      "created_at": "2019-11-22T02:54:18Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414729",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414729"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414959",
      "pull_request_review_id": 321309451,
      "id": 349414959,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNDk1OQ==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "technically, for the name to be accurate should be >= (as we won't allow a tx with the max time).",
      "created_at": "2019-11-22T02:55:42Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349414959",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349414959"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415067",
      "pull_request_review_id": 321309451,
      "id": 349415067,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNTA2Nw==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349414959,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could either do >= or rename it tx_time_bound",
      "created_at": "2019-11-22T02:56:20Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415453",
      "pull_request_review_id": 321309451,
      "id": 349415453,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNTQ1Mw==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't this a more obvious privacy leak now? Because you'd see the tx hash appear in two updates?",
      "created_at": "2019-11-22T02:58:25Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349415453",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349415453"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1921,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416833",
      "pull_request_review_id": 321309451,
      "id": 349416833,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNjgzMw==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;",
      "path": "src/wallet/wallet.cpp",
      "position": 30,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Maybe this line should \"go away\", and then it should be ensured that GetBroadcastTransactions is false during reindex/import/IBD (which would block the calls below in SubmitMemoryPoolAndRelay).\r\n\r\n\"Go away\" in scare quotes, so that way we're only using this line as an optimization to prevent having to lock the chain. below, but it's not required for any correctness reasons.",
      "created_at": "2019-11-22T03:06:48Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1926,
      "original_line": 1926,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416865",
      "pull_request_review_id": 321309451,
      "id": 349416865,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTQxNjg2NQ==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps rename this because now we're not resending?",
      "created_at": "2019-11-22T03:07:01Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349416865",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349416865"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1923,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349741004",
      "pull_request_review_id": 321150871,
      "id": 349741004,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MTAwNA==",
      "diff_hunk": "@@ -31,6 +31,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"qt/guiutil -> qt/walletmodel -> qt/optionsmodel -> qt/guiutil\"\n     \"txmempool -> validation -> validationinterface -> txmempool\"\n     \"wallet/scriptpubkeyman -> wallet/wallet -> wallet/scriptpubkeyman\"\n+    \"miner -> txmempool -> miner\"",
      "path": "test/lint/lint-circular-dependencies.sh",
      "position": 4,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "how much work is it to avoid this? ",
      "created_at": "2019-11-22T18:46:43Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349741004",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349741004"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 29,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743181",
      "pull_request_review_id": 321150871,
      "id": 349743181,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MzE4MQ==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);",
      "path": "src/net_processing.cpp",
      "position": 32,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you could re-arrange this to just check the count directly and use in below conditional, then set the new value for `pto->m_next_rebroadcast` after the conditional block. Gets rid of `fFirst`.",
      "created_at": "2019-11-22T18:51:57Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743181",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743181"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3804,
      "original_line": 3804,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743339",
      "pull_request_review_id": 321150871,
      "id": 349743339,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0MzMzOQ==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);\n+\n+                        for (const auto& hash : setRebroadcastTxs) {\n+                            LogPrint(BCLog::NET, \"Rebroadcast tx=%s peer=%d\\n\", hash.GetHex(), pto->GetId());\n+                        }\n+\n+                        // add rebroadcast txns\n+                        pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+                }",
      "path": "src/net_processing.cpp",
      "position": 59,
      "original_position": 34,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Think these brackets are off by a tab?",
      "created_at": "2019-11-22T18:52:21Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349743339",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349743339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3831,
      "original_line": 3831,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349745040",
      "pull_request_review_id": 321150871,
      "id": 349745040,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NTA0MA==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think it needs to be a non-empty script, blank is fine for this.\r\n\r\nalso try using snake_case for new variables aka `dummy_script`.",
      "created_at": "2019-11-22T18:56:19Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349745040",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349745040"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746237",
      "pull_request_review_id": 321150871,
      "id": 349746237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NjIzNw==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 26,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "very high level question: how much compute time does creating a unique block template for each peer roughly every 10 minutes take?",
      "created_at": "2019-11-22T18:59:12Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3826,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746841",
      "pull_request_review_id": 321150871,
      "id": 349746841,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0Njg0MQ==",
      "diff_hunk": "@@ -35,6 +35,10 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// we rebroadcast 3/4 of max block weight (defined in consensus.h)\n+// to reduce noise due to circumstances such as miners mining priority txns\n+static const unsigned int MAX_REBROADCAST_WEIGHT = 3000000;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349414400,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd also like a slightly stronger justification for 3/4 if there is one. What is \"noise\" in this context? Any simulations/estimations to show that 1/4 cut off is a lot of bandwidth in practice?",
      "created_at": "2019-11-22T19:00:42Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349746841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349746841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349747931",
      "pull_request_review_id": 321150871,
      "id": 349747931,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0NzkzMQ==",
      "diff_hunk": "@@ -35,6 +35,9 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// Default minimum age for a txn to be rebroadcast in seconds - 30 min",
      "path": "src/txmempool.h",
      "position": 12,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349414729,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "probably want it a value related to the `consensus.nPowTargetSpacing` ?",
      "created_at": "2019-11-22T19:03:25Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349747931",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349747931"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 39,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349748672",
      "pull_request_review_id": 321150871,
      "id": 349748672,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0ODY3Mg==",
      "diff_hunk": "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    std::chrono::seconds m_max_tx_time;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this name is pretty ambiguous.\r\n\r\n`m_skip_inclusion_until` or something in that vicinity? \r\n",
      "created_at": "2019-11-22T19:05:11Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349748672",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349748672"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749113",
      "pull_request_review_id": 321150871,
      "id": 349749113,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0OTExMw==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349414959,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I suggested rename eslewhere to be self-describing(something like `m_skip_inclusion_until` ?) and then you can drop the comment on this line because it's obvious what the meaning is.",
      "created_at": "2019-11-22T19:06:07Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749113",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749113"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749692",
      "pull_request_review_id": 321150871,
      "id": 349749692,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc0OTY5Mg==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);\n+\n+                        for (const auto& hash : setRebroadcastTxs) {\n+                            LogPrint(BCLog::NET, \"Rebroadcast tx=%s peer=%d\\n\", hash.GetHex(), pto->GetId());\n+                        }\n+\n+                        // add rebroadcast txns\n+                        pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+                }",
      "path": "src/net_processing.cpp",
      "position": 59,
      "original_position": 34,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349743339,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "oh I see in `38599640a1afae2bcf2aa46b0009bc0b94a46434` it's fixed anyways, not worth messing around...",
      "created_at": "2019-11-22T19:07:33Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349749692",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349749692"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3831,
      "original_line": 3831,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349752418",
      "pull_request_review_id": 321150871,
      "id": 349752418,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc1MjQxOA==",
      "diff_hunk": "@@ -3831,8 +3831,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                         // add rebroadcast txns\n                         pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                        // also include wallet txns that haven't been successfully broadcast yet\n+                        LogPrint(BCLog::NET, \"Force initial broadcast of %lu transactions \\n\", mempool.m_unbroadcast_txids.size());",
      "path": "src/net_processing.cpp",
      "position": 55,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "this commit `38599640a1afae2bcf2aa46b0009bc0b94a46434` introduces `m_unbroadcast_txids` before it's defined anywhere.\r\n\r\nI'd also suggest a rename if it's wallet-related only. `m_unbroadcast_wallet_txids`",
      "created_at": "2019-11-22T19:14:11Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349752418",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349752418"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3827,
      "original_line": 3827,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349754289",
      "pull_request_review_id": 321150871,
      "id": 349754289,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0OTc1NDI4OQ==",
      "diff_hunk": "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This also adds anything submitted via `sendrawtransaction`, at least, so it's not explicitly wallet-related.\r\n\r\nI think it's wallet-or-sendrawtransaction transactions only :)\r\n\r\nconfirmed:\r\n`src/node/transaction.cpp:19:    // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.`\r\n\r\nthis should get a test!",
      "created_at": "2019-11-22T19:18:35Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r349754289",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/349754289"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350450955",
      "pull_request_review_id": 322613879,
      "id": 350450955,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ1MDk1NQ==",
      "diff_hunk": "@@ -3823,6 +3829,10 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n \n                     pto->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                    // also ensure inclusion of wallet txns that haven't been successfully broadcast yet\n+                    // since set elements are unique, this will be a no-op if the txns are already in setInventoryTxToSend\n+                    pto->setInventoryTxToSend.insert(mempool.setUnbroadcastTxIDs.begin(), mempool.setUnbroadcastTxIDs.end());",
      "path": "src/net_processing.cpp",
      "position": null,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "4bda14245c53d89beb790053158c0ba39cb08a28",
      "in_reply_to_id": 317803991,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Want to clarify my expectations of the behavior- \r\n\r\nWe add transactions to `setInventoryTxToSend` when we expect to relay the transaction to a peer. This includes if we are the source node for the transaction as well as if we are relaying it. With these changes, both the transactions to rebroadcast and the \"unbroadcast\" transactions are added to `setInventoryTxToSend` on the rebroadcast poisson timer. \r\n\r\nLater, all transactions from `setInventoryTxToSend` get added to `vInvTx`, passed through some checks, then relayed to peers. \r\n\r\nSo, what this means... \r\n* if they are keeping track, peers can detect rebroadcast transactions because `INV` messages have been sent for that transaction before. \r\n* `INVs` for unbroadcast transactions have probably not been sent out before (unless all the peers who received the message did not send a `GETDATA` back). \r\n* In the normal case, the peer would not be able to distinguish a transaction sent from the unbroadcast set from a transaction being submitted initially, or the initial relay. This is known to be imperfect, but these changes should not make privacy worse than current behavior. \r\n* The only new potential for privacy leak that I see based on these changes- \r\nA node disables p2p, creates a transaction, enables p2p. At that time, that transaction gets propagated out to the network due to being on the unbroadcast set. The first peer the node sends an `INV` to is the attacker. The attacker is able to send back a `GETDATA` before any other `INV` messages are sent out. The attacker does not relay the transaction to any other nodes.\r\nTime passes, the node calculates the transaction \"should have been mined\" by now, puts it into the rebroadcast set, relays it out to its peers. The attacker has another connection open to the node & is able to identify that it is a rebroadcast. The attacker would also have to have many other nodes & connections to the rest of the network to identify that this is the only node rebroadcasting that transaction. This seems pretty difficult to execute, definitely harder to discern source node based on rebroadcast logic than in the existing implementation. \r\n* In this case, the much bigger concern would be the ability of an attacker to stop the propagation of a transaction by sending the `GETDATA` back very quickly, thus removing it from the node's unbroadcast set. I'm trying to better understand the risk of this & brainstorm possible better solutions (see https://github.com/bitcoin/bitcoin/pull/16698#discussion_r348840194). If any reviewers have thoughts or questions about this mechanism, let's continue the convo on that thread. \r\n\r\n@mzumsande to conclude this long explanation, hopefully this resolves your original question? The unbroadcast set should have (pretty much) the same guarantees as initial relay. LMK if you have any outstanding questions or recommendations for improved documentation. ",
      "created_at": "2019-11-25T22:14:13Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350450955"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 3811,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350490922",
      "pull_request_review_id": 322664247,
      "id": 350490922,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ5MDkyMg==",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Ensure that wallet transactions get successfully broadcast to at least one peer.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_greater_than,\n+        wait_until,\n+        create_confirmed_utxos,\n+        disconnect_nodes\n+)\n+from test_framework.mininode import P2PTxInvStore\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolWalletTransactionsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-blockmaxweight=3000000\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"test that mempool will ensure initial broadcast of wallet txns\")\n+\n+        node = self.nodes[0]\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 2000)\n+\n+        self.log.info(\"populate mempool with transactions\")\n+        node.settxfee(min_relay_fee * 3)\n+\n+        addresses = []\n+        for _ in range(50):\n+            addresses.append(self.nodes[1].getnewaddress())\n+\n+        # create large txns by sending to all the addresses\n+        outputs = {}\n+        for addr in addresses:\n+            outputs[addr] = 0.0001\n+\n+        self.sync_mempools()\n+\n+        # create lots of txns with that large output\n+        for _ in range(len(utxos) - 1):\n+            utxo = utxos.pop()\n+            inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+            raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+            signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+            node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+            self.nodes[1].sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)",
      "path": "test/functional/mempool_wallet_transactions.py",
      "position": null,
      "original_position": 61,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": null,
      "user": {
        "login": "MarcoFalke",
        "id": 6399679,
        "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/MarcoFalke",
        "html_url": "https://github.com/MarcoFalke",
        "followers_url": "https://api.github.com/users/MarcoFalke/followers",
        "following_url": "https://api.github.com/users/MarcoFalke/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/MarcoFalke/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/MarcoFalke/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
        "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
        "repos_url": "https://api.github.com/users/MarcoFalke/repos",
        "events_url": "https://api.github.com/users/MarcoFalke/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You are creating blocks on node[0], that this node (node[1]) might not have. This will lead to a race.\r\n\r\nYou can avoid it by calling sync_blocks or sync_all after you have generated the blocks.",
      "created_at": "2019-11-26T00:29:21Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350490922",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350490922"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350499480",
      "pull_request_review_id": 322674656,
      "id": 350499480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDQ5OTQ4MA==",
      "diff_hunk": "@@ -0,0 +1,103 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Ensure that wallet transactions get successfully broadcast to at least one peer.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_greater_than,\n+        wait_until,\n+        create_confirmed_utxos,\n+        disconnect_nodes\n+)\n+from test_framework.mininode import P2PTxInvStore\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolWalletTransactionsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-blockmaxweight=3000000\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.log.info(\"test that mempool will ensure initial broadcast of wallet txns\")\n+\n+        node = self.nodes[0]\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 2000)\n+\n+        self.log.info(\"populate mempool with transactions\")\n+        node.settxfee(min_relay_fee * 3)\n+\n+        addresses = []\n+        for _ in range(50):\n+            addresses.append(self.nodes[1].getnewaddress())\n+\n+        # create large txns by sending to all the addresses\n+        outputs = {}\n+        for addr in addresses:\n+            outputs[addr] = 0.0001\n+\n+        self.sync_mempools()\n+\n+        # create lots of txns with that large output\n+        for _ in range(len(utxos) - 1):\n+            utxo = utxos.pop()\n+            inputs = [{'txid': utxo['txid'], 'vout': utxo['vout']}]\n+            raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+            signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+            node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+            self.nodes[1].sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)",
      "path": "test/functional/mempool_wallet_transactions.py",
      "position": null,
      "original_position": 61,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 350490922,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ah, got it now. thank you! ",
      "created_at": "2019-11-26T01:05:18Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350499480",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350499480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 61,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350513338",
      "pull_request_review_id": 322691809,
      "id": 350513338,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUxMzMzOA==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "are you proposing the minimum to support a user configurable frequency, or for the current case (since its possible bc of poisson distribution)? ",
      "created_at": "2019-11-26T02:08:58Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350513338",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350513338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350514958",
      "pull_request_review_id": 322693940,
      "id": 350514958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUxNDk1OA==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "would be happy to support customizable rebroadcast interval in a future PR if that's of interest. request for anyone coming across this who'd like that feature to leave a 👍response",
      "created_at": "2019-11-26T02:17:06Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350514958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350514958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520484",
      "pull_request_review_id": 322700972,
      "id": 350520484,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMDQ4NA==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think the min can be hard-coded, and that it shouldn't happen more frequently even when drawing poisson time (e.g.,  something like: min_time + poisson(avg_time - min_time)).\r\n\r\nSo as to impose a strict cap on how frequently this is happening, because if you draw out of a poisson a large number of times eventually you'll see a run of small interval windows.\r\n\r\nYou also want something to ensure that there is always some entropy, even if min_time == avg_time (maybe enforce that avg_time >= min_time*2).\r\n\r\nThen, I think that the *actual* rebroadcast interval should be configurable, based on a user parameter. E.g., default is 30 minutes, but can be changes down to the min_time. This can happen in a future PR. ",
      "created_at": "2019-11-26T02:44:29Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520484",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520484"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520715",
      "pull_request_review_id": 322701244,
      "id": 350520715,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMDcxNQ==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": 348840194,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "some relevant info on how an attack could potentially be carried out here: https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350450955. but relevant parts reiterated here- \r\n\r\nthe attack seems simple to execute, but rare to get the right conditions where it succeeds, and the incentive seems weak. \r\n- execution: attacker sends `GETDATAs` back for every transaction it receives & never propagate them out to the network. \r\n- conditions needed: \r\n1. node would be relying on unbroadcast set to broadcast txn to network (attacker couldn't discern) \r\n2. node would have to relay to attacker first \r\n3. timing would have to be fast enough that node receives & processes `GETDATA` before sending out other `INVs`. \r\n- outcome: the transaction doesn't propagate until the rebroadcast logic picks it up & sends it out to all peers. the attacker delayed the initial propagation of the transaction. \r\n\r\ndoesn't seem like a very worthwhile attack to me.... \r\nseems much more likely to occur under accidental conditions. \r\n\r\nbut I was thinking it through & am sharing incase reviewers want to weigh in. \r\n",
      "created_at": "2019-11-26T02:45:32Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350520715",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350520715"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350521441",
      "pull_request_review_id": 322702186,
      "id": 350521441,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMTQ0MQ==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 22,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 349415453,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not sure I follow. This method would be a no-op if the transaction is in your mempool. If its not in your mempool, it would call through to `BroadcastTransaction` with relay=false, so it would go through ATMP, but not be immediately relayed. Another `INV` will only be sent if the transaction is selected for rebroadcast. \r\n\r\nI’m sure there’s some small privacy leak here based on timing of re-entrance to mempool. Haven’t fully thought it through yet. But it should be much less than before? What two updates are you referring to?  ",
      "created_at": "2019-11-26T02:49:34Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350521441",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350521441"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1921,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350523086",
      "pull_request_review_id": 322704220,
      "id": 350523086,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUyMzA4Ng==",
      "diff_hunk": "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "in_reply_to_id": 349754289,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yup. Totally. I think I use the language of “local” transactions elsewhere. Do you find that clear or should I just spell it all out every time? \r\n\r\nAlso, revisiting my `mempool_wallet_transactions` test, I realized I actually end up creating the “wallet” transaction with `sendrawtransaction`. Oops. I'll add another transaction in that test that uses `sendtoaddress` then it will cover both :) \r\n\r\nThanks ! ",
      "created_at": "2019-11-26T02:57:58Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350523086",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350523086"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350530044",
      "pull_request_review_id": 322712899,
      "id": 350530044,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDUzMDA0NA==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "jnewbery",
        "id": 1063656,
        "node_id": "MDQ6VXNlcjEwNjM2NTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jnewbery",
        "html_url": "https://github.com/jnewbery",
        "followers_url": "https://api.github.com/users/jnewbery/followers",
        "following_url": "https://api.github.com/users/jnewbery/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jnewbery/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jnewbery/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
        "organizations_url": "https://api.github.com/users/jnewbery/orgs",
        "repos_url": "https://api.github.com/users/jnewbery/repos",
        "events_url": "https://api.github.com/users/jnewbery/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jnewbery/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think a customizable rebroadcast interval is a good idea:\r\n\r\n- we should avoid adding command line options that have minimal impact on user experience. Take a look at the 10s of options in `init.cpp`. I'm sure there are many of them that hardly anyone uses, and they just add unnecessary complexity/interactions to the code.\r\n- we should try to avoid adding unnecessary fingerprints to nodes by keeping their p2p behaviour as uniform as possible.",
      "created_at": "2019-11-26T03:35:18Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350530044",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350530044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350542949",
      "pull_request_review_id": 322728777,
      "id": 350542949,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU0Mjk0OQ==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()",
      "path": "src/wallet/wallet.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 349416865,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "we're resending (or attempting) to the mempool. I could rename to `ResubmitWalletTransactions`, but that doesn't seem much different? ",
      "created_at": "2019-11-26T04:52:51Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350542949",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350542949"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 1923,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350545734",
      "pull_request_review_id": 322732303,
      "id": 350545734,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU0NTczNA==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "path": "src/wallet/wallet.cpp",
      "position": 61,
      "original_position": 60,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 349291579,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yeah I agree. seems unrelated to this PR though? I can easily make it as a separate PR, but not sure on the etiquette around that since it would be a pure refactor. thoughts? ",
      "created_at": "2019-11-26T05:09:18Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350545734",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350545734"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1958,
      "original_line": 1958,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350573667",
      "pull_request_review_id": 322768409,
      "id": 350573667,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU3MzY2Nw==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Then that's an argument against doing this *at all*, as it increases bandwidth requirements for low-resourced nodes who need to rebroadcast transactions.",
      "created_at": "2019-11-26T07:18:53Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350573667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350573667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350574103",
      "pull_request_review_id": 322768979,
      "id": 350574103,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU3NDEwMw==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "To be clear; I'm in favor of this change :)\r\n\r\nI just think if you're a low resourced node you'd want to be able to decrease the frequency at which your rebroadcasts are occurring if you have to send out an entire block worth of data.",
      "created_at": "2019-11-26T07:20:33Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350574103",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350574103"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350590665",
      "pull_request_review_id": 322790789,
      "id": 350590665,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDU5MDY2NQ==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think there's a case for reviewing the worst case resource usage, but I think in the normal case the bandwidth for rebroadcast will be very low and not really something that needs to be throttled even for low powered nodes. (Reducing your mempool size would be one way of reducing your outgoing rebroadcast traffic, but I think that's mostly just a tradeoff against incoming rebroadcast traffic)",
      "created_at": "2019-11-26T08:15:23Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350590665",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350590665"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350753952",
      "pull_request_review_id": 322995350,
      "id": 350753952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDc1Mzk1Mg==",
      "diff_hunk": "@@ -1916,47 +1918,29 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-// Rebroadcast transactions from the wallet. We do this on a random timer\n-// to slightly obfuscate which transactions come from our wallet.\n-//\n-// Ideally, we'd only resend transactions that we think should have been\n-// mined in the most recent block. Any transaction that wasn't in the top\n-// blockweight of transactions in the mempool shouldn't have been mined,\n-// and so is probably just sitting in the mempool waiting to be confirmed.\n-// Rebroadcasting does nothing to speed up confirmation and only damages\n-// privacy.\n+// Once a day, resbumit all wallet transactions to the node,\n+// in case it has been dropped from your mempool.\n void CWallet::ResendWalletTransactions()\n {\n     // During reindex, importing and IBD, old wallet transactions become\n-    // unconfirmed. Don't resend them as that would spam other nodes.\n+    // unconfirmed. Don't need to resubmit to our node.\n     if (!chain().isReadyToBroadcast()) return;\n \n-    // Do this infrequently and randomly to avoid giving away\n-    // that these are our transactions.\n-    if (GetTime() < nNextResend || !fBroadcastTransactions) return;\n-    bool fFirst = (nNextResend == 0);\n-    nNextResend = GetTime() + GetRand(30 * 60);\n-    if (fFirst) return;\n-\n-    // Only do it if there's been a new block since last time\n-    if (m_best_block_time < nLastResend) return;\n-    nLastResend = GetTime();\n+    // Do this once per day.\n+    if (std::chrono::milliseconds{GetTime()} < nNextResend) return;\n+    nNextResend = std::chrono::milliseconds{GetTime()} + RESEND_TXS_FREQUENCY;\n \n     int submitted_tx_count = 0;\n \n     { // locked_chain and cs_wallet scope\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n \n-        // Relay transactions\n+        // Resubmit transactions\n         for (std::pair<const uint256, CWalletTx>& item : mapWallet) {\n             CWalletTx& wtx = item.second;\n-            // Attempt to rebroadcast all txes more than 5 minutes older than\n-            // the last block. SubmitMemoryPoolAndRelay() will not rebroadcast\n-            // any confirmed or conflicting txs.\n-            if (wtx.nTimeReceived > m_best_block_time - 5 * 60) continue;\n             std::string unused_err_string;\n-            if (wtx.SubmitMemoryPoolAndRelay(unused_err_string, true)) ++submitted_tx_count;",
      "path": "src/wallet/wallet.cpp",
      "position": 61,
      "original_position": 60,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 349291579,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's fine to not change it. I might do it myself since it's just bothering me :) ",
      "created_at": "2019-11-26T13:54:55Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350753952",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350753952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1958,
      "original_line": 1958,
      "side": "LEFT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350754700",
      "pull_request_review_id": 322996304,
      "id": 350754700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MDc1NDcwMA==",
      "diff_hunk": "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "in_reply_to_id": 349754289,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "{node, locally}-submitted transactions is fine, just noting the comments are wrong in certain places",
      "created_at": "2019-11-26T13:56:11Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r350754700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/350754700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351000417",
      "pull_request_review_id": 323310777,
      "id": 351000417,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTAwMDQxNw==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349414959,
      "user": {
        "login": "mzumsande",
        "id": 48763452,
        "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
        "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mzumsande",
        "html_url": "https://github.com/mzumsande",
        "followers_url": "https://api.github.com/users/mzumsande/followers",
        "following_url": "https://api.github.com/users/mzumsande/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mzumsande/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mzumsande/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
        "organizations_url": "https://api.github.com/users/mzumsande/orgs",
        "repos_url": "https://api.github.com/users/mzumsande/repos",
        "events_url": "https://api.github.com/users/mzumsande/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mzumsande/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think that this commit should have more detailed documentation, both in the header and here where txes are filtered out. Since the code is intended for actual mining, most readers won't expect this kind of \"creative\" indirect use and will wonder why we would ever exclude transactions from a block for being too recent.",
      "created_at": "2019-11-26T21:57:06Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351000417",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351000417"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351371480",
      "pull_request_review_id": 323783708,
      "id": 351371480,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTM3MTQ4MA==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "91eefef24 isn't compiling for me due to `no member named 'm_max_tx_time' in 'BlockAssembler::Options'`",
      "created_at": "2019-11-27T16:01:50Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351371480",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351371480"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351379073",
      "pull_request_review_id": 323793323,
      "id": 351379073,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTM3OTA3Mw==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        // add to rebroadcast set",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: you could print log here instead of in net_processing to avoid iterating on the set/vector again like \"Submitting tx for rebroadcast to net processing\"",
      "created_at": "2019-11-27T16:15:12Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351379073",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351379073"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351404225",
      "pull_request_review_id": 323826007,
      "id": 351404225,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQwNDIyNQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This assertion timed out for me (\"not true after 60 seconds\") on the first run of 375 secs. Passed on a second run, then timed out in the same place again in the third run.  Passed a few more runs, then failed again.",
      "created_at": "2019-11-27T17:02:37Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351404225",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351404225"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351412622",
      "pull_request_review_id": 323836870,
      "id": 351412622,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQxMjYyMg==",
      "diff_hunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-acceptnonstdtxn=1\",\n+            \"-blockmaxweight=3000000\",\n+            \"-whitelist=127.0.0.1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_rebroadcast_top_txns()\n+        self.test_recency_filter()\n+\n+    # helper method that uses getblocktemplate with node arg\n+    # set to MAX_REBROADCAST_WEIGHT to find txns expected to\n+    # be rebroadcast\n+    def find_top_txns(self, node):\n+        tmpl = node.getblocktemplate({'rules': ['segwit']})\n+\n+        tx_hshs = []\n+        for tx in tmpl['transactions']:\n+            tx_hshs.append(tx['hash'])\n+\n+        return tx_hshs\n+\n+    def compare_txns_to_invs(self, txn_hshs, invs):\n+        tx_ids = [int(txhsh, 16) for txhsh in txn_hshs]\n+\n+        assert_equal(len(tx_ids), len(invs))\n+        assert_equal(tx_ids.sort(), invs.sort())\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+    def test_rebroadcast_top_txns(self):\n+        self.log.info(\"Testing that only txns with top fee rate get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(0)\n+\n+        # mine a block to clear out the mempool\n+        node.generate(1)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        conn1 = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create txns\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        txouts = gen_return_txouts()\n+        utxo_count = 90\n+        utxos = create_confirmed_utxos(min_relay_fee, node, utxo_count)\n+        base_fee = min_relay_fee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        range_size = utxo_count // 3\n+\n+        for i in range(3):\n+            start_range = i * range_size\n+            end_range = start_range + range_size\n+            txids.append(create_lots_of_big_transactions(node, txouts, utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee))\n+\n+        # 90 transactions should be created\n+        # confirm the invs were sent (initial broadcast)\n+        assert_equal(len(node.getrawmempool()), 90)\n+        wait_until(lambda: len(conn1.tx_invs_received) == 90)\n+\n+        # confirm txns are more than max rebroadcast amount\n+        assert_greater_than(node.getmempoolinfo()['bytes'], MAX_REBROADCAST_WEIGHT)\n+\n+        self.sync_all()",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": null,
      "original_position": 139,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "cadd572afd8b1468aee8a0a3ba65b5e38fc021dd",
      "in_reply_to_id": null,
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I am unable to get this to pass in cadd572afd8b1468aee8a0a3ba65b5e38fc021dd or ffd154d06. Getting an 'Mempool sync timed out` AssertionError.",
      "created_at": "2019-11-27T17:21:21Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351412622",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351412622"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351428700",
      "pull_request_review_id": 323857341,
      "id": 351428700,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQyODcwMA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Both at 42c460a24f6d9d9c2c65c30287965acbce096ecf and rebased to current master.\r\n\r\n```\r\n~/projects/bitcoin/bitcoin (pr/16698) $ test/functional/mempool_rebroadcast.py \r\n2019-11-27T17:51:11.955000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_g9hdr2e_\r\n2019-11-27T17:51:13.096000Z TestFramework (INFO): Test simplest rebroadcast case\r\n2019-11-27T17:51:14.928000Z TestFramework (INFO): Test recent txns don't get rebroadcast\r\n2019-11-27T17:56:31.453000Z TestFramework.utils (ERROR): wait_until() failed. Predicate: ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n'''\r\n2019-11-27T17:56:31.467000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 111, in main\r\n    self.run_test()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 44, in run_test\r\n    self.test_recency_filter()\r\n  File \"test/functional/mempool_rebroadcast.py\", line 171, in test_recency_filter\r\n    wait_until(lambda: new_tx in node.getrawmempool())\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 229, in wait_until\r\n    raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\r\nAssertionError: Predicate ''''\r\n            wait_until(lambda: new_tx in node.getrawmempool())\r\n''' not true after 60 seconds\r\n2019-11-27T17:56:31.519000Z TestFramework (INFO): Stopping nodes\r\n```",
      "created_at": "2019-11-27T17:58:52Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351428700",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351428700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351430669",
      "pull_request_review_id": 323859923,
      "id": 351430669,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzMDY2OQ==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "adamjonas",
        "id": 755825,
        "node_id": "MDQ6VXNlcjc1NTgyNQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/adamjonas",
        "html_url": "https://github.com/adamjonas",
        "followers_url": "https://api.github.com/users/adamjonas/followers",
        "following_url": "https://api.github.com/users/adamjonas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/adamjonas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/adamjonas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
        "organizations_url": "https://api.github.com/users/adamjonas/orgs",
        "repos_url": "https://api.github.com/users/adamjonas/repos",
        "events_url": "https://api.github.com/users/adamjonas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/adamjonas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This on my first run as well, but then passed six in a row so didn't report.",
      "created_at": "2019-11-27T18:03:55Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351430669",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351430669"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351431222",
      "pull_request_review_id": 323860643,
      "id": 351431222,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzMTIyMg==",
      "diff_hunk": "@@ -406,6 +452,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // This transaction will make it in; reset the failed counter.\n         nConsecutiveFailed = 0;\n \n+        CFeeRate newFeeRate(packageFees, packageSize * WITNESS_SCALE_FACTOR);\n+\n+        if (newFeeRate < minPackageFeeRate) {",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 105,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": null,
      "user": {
        "login": "emilengler",
        "id": 12272949,
        "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
        "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/emilengler",
        "html_url": "https://github.com/emilengler",
        "followers_url": "https://api.github.com/users/emilengler/followers",
        "following_url": "https://api.github.com/users/emilengler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/emilengler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/emilengler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
        "organizations_url": "https://api.github.com/users/emilengler/orgs",
        "repos_url": "https://api.github.com/users/emilengler/repos",
        "events_url": "https://api.github.com/users/emilengler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/emilengler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: Wouldn't it be better to use the one line if coding style?",
      "created_at": "2019-11-27T18:05:17Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351431222",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351431222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 459,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434318",
      "pull_request_review_id": 323793323,
      "id": 351434318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNDMxOA==",
      "diff_hunk": "@@ -262,7 +262,9 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"prioritisetransaction\",\n-                \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n+                \"Accepts the transaction into mined blocks at a higher (or lower) priority.\\n\"\n+                \"\\nNote that prioritizing a transaction could leak privacy, through both\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "0723e61274c72bb55e0c684af7d0ebb146689c03",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"could LEAK PRIVACY if tx is new and hasn't previously flooded on the network\"",
      "created_at": "2019-11-27T18:13:10Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434318",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 271,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434890",
      "pull_request_review_id": 323793323,
      "id": 351434890,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNDg5MA==",
      "diff_hunk": "@@ -44,6 +44,8 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n };\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+// frequency of resubmitting txns to mempool- 24 hours",
      "path": "src/wallet/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "rational of every 24h? I wondering if we shouldn't be more aggressive to have a chance of wallet rebroadcast being staggered in next mempool rebroadcast happening every 10min so resend like 1 min",
      "created_at": "2019-11-27T18:14:36Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351434890",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351434890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351437537",
      "pull_request_review_id": 323793323,
      "id": 351437537,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQzNzUzNw==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)",
      "path": "src/miner.cpp",
      "position": 42,
      "original_position": 26,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "need to update comment",
      "created_at": "2019-11-27T18:21:15Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351437537",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351437537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 280,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465071",
      "pull_request_review_id": 323793323,
      "id": 351465071,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NTA3MQ==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": 348840194,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I find the mechanism a bit weird as it leaks a wallet concern in the P2P stack. If you have multiple wallets connected to your node or even accept tx from third-party through your RPC command are you going to ensure success for all of them ? ",
      "created_at": "2019-11-27T19:32:52Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465071",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465071"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465381",
      "pull_request_review_id": 323793323,
      "id": 351465381,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NTM4MQ==",
      "diff_hunk": "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "IMO just set the nLocktimeCutoff to nMedianTimePast, as we care about up to date mempool all of them are far ahead BIP 113 activation.",
      "created_at": "2019-11-27T19:33:40Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351465381",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351465381"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351466313",
      "pull_request_review_id": 323793323,
      "id": 351466313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTQ2NjMxMw==",
      "diff_hunk": "@@ -3844,6 +3851,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // cache the min fee rate for a txn to be included in a block\n+                // applied as rebroadcast filter above\n+                if (mempool.m_next_min_fee_cache < current_time){\n+                    mempool.CacheMinRebroadcastFee();",
      "path": "src/net_processing.cpp",
      "position": 64,
      "original_position": 24,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": null,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Did you benchmark `CacheMinRebroadcastFee` ? Not sure if it's the best way to encumber ThreadMessageHandler with mempool computation. I think it could be scheduled by the scheduler like we are doing for DumpBanList or DumpAddresses.",
      "created_at": "2019-11-27T19:36:02Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351466313",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351466313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3836,
      "original_line": 3836,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351562187",
      "pull_request_review_id": 324017785,
      "id": 351562187,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MTU2MjE4Nw==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Reducing mempool does not obviously help with resource reduction for a few reasons:\r\n\r\n1) because of compact blocks (slower to get new blocks, so if you're peak-bandwidth capped it's bad).\r\n2) If you're bandwidth constrained, you aren't necessarily memory constrained either (why throw away a transaction if it seems good?)\r\n3) It stands to reason that when fees are going up, you'll evict a lot of stuff from your mempool as newer txns go in, and when the fees go back down you'll need stuff re-relayed.\r\n\r\n\r\nI think I'd just like to understand how this does impact bandwidth usage, it seemed to not be a non trivial amount more as it's 1/f * block size * period * #peers more data volume? If it's actually small then so be it. But it does seem, to me, to be non-negligible",
      "created_at": "2019-11-28T01:43:38Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r351562187",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/351562187"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352298564",
      "pull_request_review_id": 324903855,
      "id": 352298564,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI5ODU2NA==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm unable to reproduce this locally. Asked @jonatack for logs & looks like the failure occurs after going through the while loop >150 times, which means the `if new_conn.get_invs()` conditional is never hitting. Theoretically it would be possible for the condition to not hit, but that should be an _extreme_ edge case, vs the frequency of failures being seen. I'll try to run this test in different environments to see if I can reproduce. ",
      "created_at": "2019-11-30T18:42:04Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352298564",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352298564"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352300626",
      "pull_request_review_id": 324905547,
      "id": 352300626,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMwMDYyNg==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW this was on a recent Debian and building with `--enable-debug --enable-bench`. Could be good to have other data points in the form of people running this test. I hope to dig into these tests soon.",
      "created_at": "2019-11-30T19:35:06Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352300626",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352300626"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352811413",
      "pull_request_review_id": 325657690,
      "id": 352811413,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjgxMTQxMw==",
      "diff_hunk": "@@ -262,7 +262,9 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n static UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"prioritisetransaction\",\n-                \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n+                \"Accepts the transaction into mined blocks at a higher (or lower) priority.\\n\"\n+                \"\\nNote that prioritizing a transaction could leak privacy, through both\\n\"",
      "path": "src/rpc/mining.cpp",
      "position": 6,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "0723e61274c72bb55e0c684af7d0ebb146689c03",
      "in_reply_to_id": 351434318,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm, there could be a privacy leak even if the txn isn't new. Even if it has propagated the network, if you `prioritisetransaction` it could cause the rebroadcast logic to pick up the txn & rebroadcast it sooner than it would have otherwise. this would indicate to a spy node that this txn is of special interest to you, thus leaking privacy.",
      "created_at": "2019-12-02T20:26:57Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352811413",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352811413"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 271,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352820701",
      "pull_request_review_id": 325716963,
      "id": 352820701,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjgyMDcwMQ==",
      "diff_hunk": "@@ -44,6 +44,8 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n };\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+// frequency of resubmitting txns to mempool- 24 hours",
      "path": "src/wallet/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 351434890,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "if the txn is already in your mempool, this function will be a no-op, which should be the majority of the time. this is only relevant if it has gotten dropped from your mempool (expired, evicted, etc.) the rebroadcast logic will look at the contents of the mempool to decide what to rebroadcast. so, the majority of the time, this function will not be relevant to determining if a wallet txn will be rebroadcast. does that make sense?\r\n\r\nalso, where are you getting the 10 min number from? rebroadcasts will occur ~1x / hour per peer. ",
      "created_at": "2019-12-02T20:48:29Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352820701",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352820701"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352835676",
      "pull_request_review_id": 325742927,
      "id": 352835676,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjgzNTY3Ng==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": 348840194,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I agree that its not an ideal separation of concerns, but I think it's reasonable. Essentially, when you submit a txn to the mempool/node, it guarantees that it will 1. validate the txn & accept into its mempool locally & 2. propagate it out to the network (assuming validity). \r\n\r\nThe normal way this is achieved is by bundling the actions together. However, if you have p2p disabled when you initially submit the txn, you no longer get # 2. \r\n\r\nPreviously, this wasn't an issue because the rebroadcast logic was so over-eager, that initial relay would automatically occur within a short amount of time after enabling p2p. With these changes, that is no longer a guarantee, so we need to explicitly keep track of the transactions that have passed step # 1, but not yet # 2. \r\n\r\nThe other option would be that the mempool returns indication when the txn was accepted locally & then when the txn was propagated to the network. Then the entity submitting the txn (wallet, third-party RPC, whatever) would have to keep track of txns in the in-between state. I think thats a much messier interaction between the layers. ",
      "created_at": "2019-12-02T21:06:27Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352835676",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352835676"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352889754",
      "pull_request_review_id": 325782295,
      "id": 352889754,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjg4OTc1NA==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        // add to rebroadcast set",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 351379073,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm that's true, but then I wouldn't be able to supplement with which peer. Leaving it for now. ",
      "created_at": "2019-12-02T22:20:27Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352889754",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352889754"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352914275",
      "pull_request_review_id": 325811654,
      "id": 352914275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkxNDI3NQ==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 31,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349414243,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated to vector. I started reading up on move, but don't fully understand it and it seems like there are some gotchas? going to resolve this convo for now, but we can re-open if you think move is better. ",
      "created_at": "2019-12-02T23:27:25Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352914275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352914275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352916240",
      "pull_request_review_id": 325813944,
      "id": 352916240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkxNjI0MA==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert (it != mempool.mapTx.end());\n+    if (it->GetTime() > m_max_tx_time) return true; // txn too recent",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 29,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349414959,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated name to `m_skip_inclusion_until` & added documentation to this function definition & in the header ",
      "created_at": "2019-12-02T23:34:05Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352916240",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352916240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919393",
      "pull_request_review_id": 325817751,
      "id": 352919393,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkxOTM5Mw==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);",
      "path": "src/net_processing.cpp",
      "position": 32,
      "original_position": 20,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349743181,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'd rather leave it in for legibility since the compiler should optimize it away regardless- (simple example reproduced [here](https://godbolt.org/z/ZcVdJK)). If invoked, the `fSkipRun` logic needs to overwrite the next rebroadcast time, so that logic would also need to be shuffled. Doable but makes the code more opaque. ",
      "created_at": "2019-12-02T23:44:55Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919393",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3804,
      "original_line": 3804,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919742",
      "pull_request_review_id": 325818179,
      "id": 352919742,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkxOTc0Mg==",
      "diff_hunk": "@@ -3808,6 +3810,30 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     }\n                 }\n \n+                // use mockable current_time rather than nNow to allow for testing\n+                const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+                // Check for rebroadcasts\n+                if (pto->m_next_rebroadcast < current_time) {\n+                    LogPrint(BCLog::NET, \"Rebroadcast timer triggered\\n\");\n+                    // schedule next rebroadcast\n+                    bool fFirst = (pto->m_next_rebroadcast.count() == 0);\n+                    pto->m_next_rebroadcast = PoissonNextSend(current_time, TX_REBROADCAST_INTERVAL);\n+\n+\n+                    if (!fFirst) {\n+                        std::set<uint256> setRebroadcastTxs;\n+                        mempool.GetRebroadcastTransactions(setRebroadcastTxs);\n+\n+                        for (const auto& hash : setRebroadcastTxs) {\n+                            LogPrint(BCLog::NET, \"Rebroadcast tx=%s peer=%d\\n\", hash.GetHex(), pto->GetId());\n+                        }\n+\n+                        // add rebroadcast txns\n+                        pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+                }",
      "path": "src/net_processing.cpp",
      "position": 59,
      "original_position": 34,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349743339,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "whitespace strugs 🙈",
      "created_at": "2019-12-02T23:46:14Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919742",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919742"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3831,
      "original_line": 3831,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919952",
      "pull_request_review_id": 325818438,
      "id": 352919952,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkxOTk1Mg==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 25,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349745040,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-12-02T23:47:02Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352919952",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352919952"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920115",
      "pull_request_review_id": 325818647,
      "id": 352920115,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyMDExNQ==",
      "diff_hunk": "@@ -135,6 +135,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    std::chrono::seconds m_max_tx_time;",
      "path": "src/miner.h",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 349748672,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-12-02T23:47:34Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 138,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920617",
      "pull_request_review_id": 325819251,
      "id": 352920617,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyMDYxNw==",
      "diff_hunk": "@@ -3831,8 +3831,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                         // add rebroadcast txns\n                         pto->m_tx_relay->setInventoryTxToSend.insert(setRebroadcastTxs.begin(), setRebroadcastTxs.end());\n+\n+                        // also include wallet txns that haven't been successfully broadcast yet\n+                        LogPrint(BCLog::NET, \"Force initial broadcast of %lu transactions \\n\", mempool.m_unbroadcast_txids.size());",
      "path": "src/net_processing.cpp",
      "position": 55,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 349752418,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "cleaned up my commits, they should be good now.\r\n\r\nas you've mentioned, its wallet & rpc-submitted txns, so I could rename to `m_unbroadcast_local_txids`, but I don't think that helps clarify so I left as is. lmk if you disagree. ",
      "created_at": "2019-12-02T23:49:34Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920617",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 3827,
      "original_line": 3827,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920830",
      "pull_request_review_id": 325819509,
      "id": 352920830,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyMDgzMA==",
      "diff_hunk": "@@ -78,6 +78,9 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n+        // the mempool explicitly keeps track of wallet txns to ensure successful initial broadcast",
      "path": "src/node/transaction.cpp",
      "position": null,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "ffd154d064f1055d2988b8cfa3b6bc695e58f226",
      "in_reply_to_id": 349754289,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2019-12-02T23:50:17Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352920830",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352920830"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352922793",
      "pull_request_review_id": 325821809,
      "id": 352922793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyMjc5Mw==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 24,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 351371480,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed. all commits should now build. ",
      "created_at": "2019-12-02T23:57:17Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352922793",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352922793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352922921",
      "pull_request_review_id": 325821935,
      "id": 352922921,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyMjkyMQ==",
      "diff_hunk": "@@ -0,0 +1,210 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        gen_return_txouts,\n+        create_confirmed_utxos,\n+        create_lots_of_big_transactions,\n+)\n+import time\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-acceptnonstdtxn=1\",\n+            \"-blockmaxweight=3000000\",\n+            \"-whitelist=127.0.0.1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_rebroadcast_top_txns()\n+        self.test_recency_filter()\n+\n+    # helper method that uses getblocktemplate with node arg\n+    # set to MAX_REBROADCAST_WEIGHT to find txns expected to\n+    # be rebroadcast\n+    def find_top_txns(self, node):\n+        tmpl = node.getblocktemplate({'rules': ['segwit']})\n+\n+        tx_hshs = []\n+        for tx in tmpl['transactions']:\n+            tx_hshs.append(tx['hash'])\n+\n+        return tx_hshs\n+\n+    def compare_txns_to_invs(self, txn_hshs, invs):\n+        tx_ids = [int(txhsh, 16) for txhsh in txn_hshs]\n+\n+        assert_equal(len(tx_ids), len(invs))\n+        assert_equal(tx_ids.sort(), invs.sort())\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+    def test_rebroadcast_top_txns(self):\n+        self.log.info(\"Testing that only txns with top fee rate get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node.setmocktime(0)\n+\n+        # mine a block to clear out the mempool\n+        node.generate(1)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        conn1 = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create txns\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        txouts = gen_return_txouts()\n+        utxo_count = 90\n+        utxos = create_confirmed_utxos(min_relay_fee, node, utxo_count)\n+        base_fee = min_relay_fee*100 # our transactions are smaller than 100kb\n+        txids = []\n+\n+        # Create 3 batches of transactions at 3 different fee rate levels\n+        range_size = utxo_count // 3\n+\n+        for i in range(3):\n+            start_range = i * range_size\n+            end_range = start_range + range_size\n+            txids.append(create_lots_of_big_transactions(node, txouts, utxos[start_range:end_range], end_range - start_range, (i+1)*base_fee))\n+\n+        # 90 transactions should be created\n+        # confirm the invs were sent (initial broadcast)\n+        assert_equal(len(node.getrawmempool()), 90)\n+        wait_until(lambda: len(conn1.tx_invs_received) == 90)\n+\n+        # confirm txns are more than max rebroadcast amount\n+        assert_greater_than(node.getmempoolinfo()['bytes'], MAX_REBROADCAST_WEIGHT)\n+\n+        self.sync_all()",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": null,
      "original_position": 139,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "cadd572afd8b1468aee8a0a3ba65b5e38fc021dd",
      "in_reply_to_id": 351412622,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "should be fixed",
      "created_at": "2019-12-02T23:57:40Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352922921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352922921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 139,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352924313",
      "pull_request_review_id": 325823616,
      "id": 352924313,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkyNDMxMw==",
      "diff_hunk": "@@ -269,6 +273,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)",
      "path": "src/miner.cpp",
      "position": 42,
      "original_position": 26,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "54e0e87e2151da6826788f6f9569fba8bd96532a",
      "in_reply_to_id": 351437537,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated",
      "created_at": "2019-12-03T00:02:42Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352924313",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352924313"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 280,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352934520",
      "pull_request_review_id": 325835681,
      "id": 352934520,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjkzNDUyMA==",
      "diff_hunk": "@@ -35,6 +35,10 @@ extern CCriticalSection cs_main;\n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+// we rebroadcast 3/4 of max block weight (defined in consensus.h)\n+// to reduce noise due to circumstances such as miners mining priority txns\n+static const unsigned int MAX_REBROADCAST_WEIGHT = 3000000;",
      "path": "src/txmempool.h",
      "position": null,
      "original_position": 6,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349414400,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "updated to be defined in terms of `consensus.h` param. \r\n\r\nRE justification for 3/4 & bandwidth implications -> agreed more data & justification is important. I'm working on running this patch live & observing bandwidth usage and will report back with that data. I'm going to resolve this comment & continue the conversation in the main thread at that time.  ",
      "created_at": "2019-12-03T00:42:38Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352934520",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352934520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352943478",
      "pull_request_review_id": 325846408,
      "id": 352943478,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Mjk0MzQ3OA==",
      "diff_hunk": "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351465381,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "is there a downside to leaving as is? I'd rather have this code mimic the normal mining path as closely as possible. ",
      "created_at": "2019-12-03T01:21:00Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r352943478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352943478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353300584",
      "pull_request_review_id": 326295661,
      "id": 353300584,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMwMDU4NA==",
      "diff_hunk": "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351465381,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The downside is more complex code to review in the future.\r\n\r\nGiven current value `STANDARD_LOCKTIME_VERIFY_FLAGS`, `nLockTimeCutoff` is always going to be `nMedianTimePast`. And this rule being not only a standard one but a consensus one it's not going to change. We may have future different rules to compute transaction timelock but I think linking to standardness is a confusion here. Normal mining code should also do that.",
      "created_at": "2019-12-03T16:54:07Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353300584",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353300584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353302031",
      "pull_request_review_id": 326297523,
      "id": 353302031,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMwMjAzMQ==",
      "diff_hunk": "@@ -98,6 +100,27 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n \n+void CTxMemPool::GetRebroadcastTransactions(std::set<uint256>& setRebroadcastTxs)\n+{\n+    // Don't rebroadcast txns during importing, reindex, or IBD to ensure we don't\n+    // accidentally spam our peers with old transactions.\n+    if (::ChainstateActive().IsInitialBlockDownload() || ::fImporting || ::fReindex) return;\n+\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = MAX_REBROADCAST_WEIGHT;\n+    options.m_max_tx_time = std::chrono::seconds(GetTime()) - REBROADCAST_MIN_TX_AGE;\n+    CScript scriptDummy = CScript() << OP_TRUE;\n+\n+    // use CreateNewBlock to get set of transaction candidates\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(Params(), options).CreateNewBlock(scriptDummy);\n+\n+    LOCK(cs);\n+    for (const auto& tx : pblocktemplate->block.vtx) {\n+        // add to rebroadcast set",
      "path": "src/txmempool.cpp",
      "position": null,
      "original_position": 32,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 351379073,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Or you can also add a printer just for the peer in the \"check for rebroadcasts\" SendMessages branch :) ?",
      "created_at": "2019-12-03T16:56:30Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353302031",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353302031"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 119,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353311671",
      "pull_request_review_id": 326310088,
      "id": 353311671,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMxMTY3MQ==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": 348840194,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> 1. validate the txn & accept into its mempool locally \r\n\r\nAssuming tx succeed fee checks.\r\n\r\n> The normal way this is achieved is by bundling the actions together. However, if you have > p2p disabled when you initially submit the txn, you no longer get # 2.\r\n\r\nAs a user if you deactivate p2p functionality at tx mempool-insertion broadcast should be then a best-effort on the timing side. I think this point is really linked with wallet timer rebroadcast, if you reduce it to be under the mempool one, won't you be sure than your txn is going to be initially broadcast at least within 1 hour ?\r\n\r\n> The other option would be that the mempool returns indication when the txn was accepted locally & then when the txn was propagated to the network. Then the entity submitting the txn (wallet, third-party RPC, whatever) would have to keep track of txns in the in-between state. I think thats a much messier interaction between the layers.\r\n\r\nIf a wallet gets notification of transaction mempool insertion it should rely on it for network propagation but mempool may fail for its own internal reasons (size, conflicts) so for reliability your wallet should ensure periodic resend/rebroadcast.\r\n  ",
      "created_at": "2019-12-03T17:13:59Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353311671",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353311671"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353313642",
      "pull_request_review_id": 326312591,
      "id": 353313642,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMxMzY0Mg==",
      "diff_hunk": "@@ -44,6 +44,8 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n };\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+// frequency of resubmitting txns to mempool- 24 hours",
      "path": "src/wallet/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 351434890,
      "user": {
        "login": "ariard",
        "id": 23310655,
        "node_id": "MDQ6VXNlcjIzMzEwNjU1",
        "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ariard",
        "html_url": "https://github.com/ariard",
        "followers_url": "https://api.github.com/users/ariard/followers",
        "following_url": "https://api.github.com/users/ariard/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ariard/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ariard/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
        "organizations_url": "https://api.github.com/users/ariard/orgs",
        "repos_url": "https://api.github.com/users/ariard/repos",
        "events_url": "https://api.github.com/users/ariard/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ariard/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ooops, yes 1 hour, dunno from where I drawn it, my question is you want wallet rebroadcast to have the highest change possible to be selected for mempool rebroadcast, to do so your wallet rebroadcast batch should be resubmitted in each mempool rebroadcast period, so wallet_timer < mempool_timer ?",
      "created_at": "2019-12-03T17:17:46Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353313642",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353313642"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353409565",
      "pull_request_review_id": 326433026,
      "id": 353409565,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzQwOTU2NQ==",
      "diff_hunk": "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351465381,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "ok you've convinced me :) I'll update.",
      "created_at": "2019-12-03T20:39:09Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r353409565",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353409565"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362910528",
      "pull_request_review_id": 338209975,
      "id": 362910528,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkxMDUyOA==",
      "diff_hunk": "@@ -1563,6 +1563,11 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n+                // Once the first peer requests GETDATA for a txn, we deem initial broadcast a success",
      "path": "src/net_processing.cpp",
      "position": 13,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "229f6b2cc6620a5d0e974df4d071f6d0108d17d8",
      "in_reply_to_id": 348840194,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@ariard do you still have an outstanding concern here?\r\n\r\n>I find the mechanism a bit weird as it leaks a wallet concern in the P2P stack.\r\nthe first comment talks about the layer separation\r\n>so for reliability your wallet should ensure periodic resend/rebroadcast.\r\nbut your second comment seems to talk more about the wallet & mempool rebroadcast timers. \r\n\r\nthe thread was started in regards to the *unbroadcast* logic. which is different than the *rebroadcast* logic. I explained the reason that it makes sense for the node to keep track of txns that are being initially relayed, let me know if you have further questions. I believe I have addressed your concerns around the timers elsewhere on this PR.\r\n\r\nI'm going to resolve this conversation. If there's further questions or concerns about the unbroadcast logic I can re-open. ",
      "created_at": "2020-01-03T18:23:04Z",
      "updated_at": "2020-01-03T22:58:48Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r362910528",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362910528"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1567,
      "original_line": 1567,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363055591",
      "pull_request_review_id": 338370448,
      "id": 363055591,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1NTU5MQ==",
      "diff_hunk": "@@ -288,6 +290,45 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+// This method is just a wrapper to addPackageTxs with all the setup required.\n+CFeeRate BlockAssembler::minTxFeeRate()\n+{\n+    int nPackagesSelected = 0;\n+    int nDescendantsUpdated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate.reset(new CBlockTemplate());\n+\n+    if(!pblocktemplate.get()){\n+        return min_fee_rate;\n+    }\n+    pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    // Add dummy coinbase tx as first transaction\n+    pblock->vtx.emplace_back();\n+    pblocktemplate->vTxFees.push_back(-1); // updated at end\n+    pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n+\n+    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(pindexPrev != nullptr);\n+\n+    pblock->nTime = GetAdjustedTime();\n+    const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n+\n+    nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)",
      "path": "src/miner.cpp",
      "position": null,
      "original_position": 41,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351465381,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed",
      "created_at": "2020-01-04T21:16:14Z",
      "updated_at": "2020-01-04T21:16:14Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363055591",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363055591"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 321,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363443166",
      "pull_request_review_id": 338842049,
      "id": 363443166,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ0MzE2Ng==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was able to reproduce this failure on an ubuntu machine. latest push fixed it for me & jonatack. going to resolve.",
      "created_at": "2020-01-06T19:22:55Z",
      "updated_at": "2020-01-06T19:22:56Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363443166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363443166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363456857",
      "pull_request_review_id": 338860435,
      "id": 363456857,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1Njg1Nw==",
      "diff_hunk": "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2009-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test mempool rebroadcast logic.\n+\n+\"\"\"\n+\n+from test_framework.mininode import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+        assert_approx,\n+        assert_equal,\n+        assert_greater_than,\n+        wait_until,\n+        disconnect_nodes,\n+        connect_nodes,\n+        create_confirmed_utxos,\n+)\n+import time\n+from decimal import Decimal\n+\n+# Constant from txmempool.h\n+MAX_REBROADCAST_WEIGHT = 3000000\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+global_mocktime = 0\n+\n+class MempoolRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=127.0.0.1\",\n+            \"-txindex=1\"\n+            ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self.test_simple_rebroadcast()\n+        self.test_recency_filter()\n+        self.test_fee_rate_cache()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.decoderawtransaction(node.getrawtransaction(input_tx_hsh))\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # vsize is in bytes, cache fee rate is BTC / kB. Thus divide by 1000\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # form txn & submit to mempool\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # retrieve mempool txn to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee']*1000/mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def test_simple_rebroadcast(self):\n+        self.log.info(\"Test simplest rebroadcast case\")\n+\n+        node0 = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        # generate mempool transactions that both nodes know about\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 4)\n+\n+        self.sync_all()\n+\n+        # generate mempool transactions that only node0 knows about\n+        disconnect_nodes(node0, 1)\n+\n+        for _ in range(3):\n+            node0.sendtoaddress(node1.getnewaddress(), 5)\n+\n+        # check that mempools are different\n+        assert_equal(len(node0.getrawmempool()), 6)\n+        assert_equal(len(node1.getrawmempool()), 3)\n+\n+        # reconnect the nodes\n+        connect_nodes(node0, 1)\n+\n+        # rebroadcast will only occur if there has been a block since the\n+        # last run of CacheMinRebroadcastFee. when we connect a new peer, rebroadcast\n+        # will be skipped on the first run, but caching will trigger.\n+        # have node1 generate so there are still mempool txns that need to be synched.\n+        node1.generate(1)\n+\n+        assert_equal(len(node1.getrawmempool()), 0)\n+        wait_until(lambda: len(node0.getrawmempool()) == 3)\n+\n+        # bump time to hit rebroadcast interval\n+        mocktime = int(time.time()) + 300 * 60\n+        node0.setmocktime(mocktime)\n+        node1.setmocktime(mocktime)\n+\n+        # check that node1 got txns bc rebroadcasting\n+        wait_until(lambda: len(node1.getrawmempool()) == 3, timeout=30)\n+\n+        global global_mocktime\n+        global_mocktime = mocktime\n+\n+    def test_recency_filter(self):\n+        self.log.info(\"Test recent txns don't get rebroadcast\")\n+\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        global global_mocktime\n+        mocktime = global_mocktime\n+\n+        node.setmocktime(global_mocktime)\n+        node1.setmocktime(global_mocktime)\n+\n+        # mine blocks to clear out the mempool\n+        node.generate(4)\n+        assert_equal(len(node.getrawmempool()), 0)\n+\n+        # add p2p connection\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        # create old txn\n+        node.sendtoaddress(node.getnewaddress(), 2)\n+        assert_equal(len(node.getrawmempool()), 1)\n+        wait_until(lambda: conn.get_invs(), timeout=30)\n+\n+        # bump mocktime to ensure the txn is old\n+        mocktime += 31 * 60 # seconds\n+        node.setmocktime(mocktime)\n+\n+        delta_time = 28 * 60 # seconds\n+        while True:\n+            # create a recent transaction\n+            new_tx = node1.sendtoaddress(node1.getnewaddress(), 2)\n+            new_tx_id = int(new_tx, 16)\n+\n+            # ensure node0 has the transaction\n+            wait_until(lambda: new_tx in node.getrawmempool())",
      "path": "test/functional/mempool_rebroadcast.py",
      "position": 171,
      "original_position": 171,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "42c460a24f6d9d9c2c65c30287965acbce096ecf",
      "in_reply_to_id": 351404225,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> I was able to reproduce this failure on an ubuntu machine. latest push fixed it for me & jonatack. going to resolve.\r\n\r\nSGTM",
      "created_at": "2020-01-06T19:56:28Z",
      "updated_at": "2020-01-06T19:56:28Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363456857",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363456857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 171,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363529533",
      "pull_request_review_id": 338954976,
      "id": 363529533,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUyOTUzMw==",
      "diff_hunk": "@@ -44,6 +44,8 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n };\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n+// frequency of resubmitting txns to mempool- 24 hours",
      "path": "src/wallet/wallet.cpp",
      "position": 4,
      "original_position": 4,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "38599640a1afae2bcf2aa46b0009bc0b94a46434",
      "in_reply_to_id": 351434890,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "the wallet resubmission timer is only incase the txn gets dropped (expired, evicted, etc.) from the local mempool before being confirmed. thus, its unnecessary for the wallet to attempt to resubmit to the mempool every hour.\r\n\r\n@ariard based on our conversation offline, I believe you have reached this understanding & are now comfortable with this timer. can you confirm? ",
      "created_at": "2020-01-06T23:22:45Z",
      "updated_at": "2020-01-06T23:22:45Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363529533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363529533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363552641",
      "pull_request_review_id": 338983032,
      "id": 363552641,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU1MjY0MQ==",
      "diff_hunk": "@@ -111,6 +111,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Average delay between rebroadcasts */\n+static const std::chrono::seconds TX_REBROADCAST_INTERVAL = std::chrono::seconds{60 * 60};",
      "path": "src/net_processing.cpp",
      "position": 5,
      "original_position": 5,
      "commit_id": "939e2206021fd00cfd56c4de090434e4152bae8a",
      "original_commit_id": "91eefef240145e819a477a72b49fc032746a2983",
      "in_reply_to_id": 349413481,
      "user": {
        "login": "amitiuttarwar",
        "id": 1500952,
        "node_id": "MDQ6VXNlcjE1MDA5NTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/amitiuttarwar",
        "html_url": "https://github.com/amitiuttarwar",
        "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
        "following_url": "https://api.github.com/users/amitiuttarwar/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/amitiuttarwar/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/amitiuttarwar/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
        "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
        "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
        "events_url": "https://api.github.com/users/amitiuttarwar/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Seems like the customizable rebroadcast interval is a proposed solution for concerns around bandwidth usage for low resourced nodes. \r\n\r\nI agree that we should ensure these rebroadcast changes don’t impose a significant bandwidth requirement.\r\n\r\nI believe the current changes require little additional bandwidth, which my initial monitoring from running this patch supports. More info posted in the main comment [thread](https://github.com/bitcoin/bitcoin/pull/16698#issuecomment-570838774). \r\n\r\nBut this is not conclusive for determining that bandwidth impact is low in all conditions. If further monitoring leads to deciding we need to restrict resource usage further, we have options. For the fingerprint reasons mentioned above I don't think a customizable rebroadcast interval makes the most sense. However, we could consider a kill switch to disable rebroadcast all together (along the lines of current implementation walletbroadcast=0). Also available (and probably the first line of experimentation) would be tinkering with the params to tighten the txns selected for rebroadcast.\r\n\r\nI’ve updated my [gist](https://gist.github.com/amitiuttarwar/b592ee410e1f02ac0d44fcbed4621dba#open-questions--solutions) with this open questions & possible solutions and moving forward will maintain it with the options & latest thinking. \r\n\r\nSince this comment thread is about customizable rebroadcast intervals, I'm going to resolve the conversation. But let's continue to discuss bandwidth impact in the main PR thread as I continue to monitor & share data. \r\n\r\n@JeremyRubin let me know what you think. esp if you disagree or have any questions. ",
      "created_at": "2020-01-07T01:04:42Z",
      "updated_at": "2020-01-07T01:04:42Z",
      "html_url": "https://github.com/bitcoin/bitcoin/pull/16698#discussion_r363552641",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363552641"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16698"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 116,
      "original_line": 116,
      "side": "RIGHT"
    }
  ]
}